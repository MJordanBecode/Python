jojo--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : writing.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSE

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TEST2

--- Contenu du fichier : final.txt ---
LICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtusage.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE-DOT.txtadvancedsnippet.txtsnippet.txtlicense.txtThirdPartyNoticeText.txtLICENSE.txtMIT-LICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtrobots.txtLICENSE-MIT.txtLICENSE-MIT.txtwriting.txtwrite.txtfinal.txttop_level.txtentry_points.txtvendor.txtAUTHORS.txttop_level.txtLICENSE.txtentry_points.txtLGPL.txtfilepaths.rst.txtc_api.rst.txtindex.rst.txtlogos.rst.txtkey.rst.txtpixelarray.rst.txtfreetype.rst.txtimage.rst.txtdraw.rst.txtrect.rst.txtsurface.rst.txtscrap.rst.txtdisplay.rst.txtevent.rst.txtmask.rst.txtcontext.rst.txtlocals.rst.txtcursors.rst.txttouch.rst.txtjoystick.rst.txtmath.rst.txtbufferproxy.rst.txtcolor_list.rst.txtpixelcopy.rst.txtmidi.rst.txtoverlay.rst.txtgfxdraw.rst.txtfastevent.rst.txtsdl2_controller.rst.txttests.rst.txtcdrom.rst.txtpygame.rst.txtcamera.rst.txtmouse.rst.txtmixer.rst.txtmusic.rst.txtsndarray.rst.txttime.rst.txtsurfarray.rst.txtsdl2_video.rst.txtfont.rst.txtsprite.rst.txtcolor.rst.txttransform.rst.txtexamples.rst.txttestmail.txtwrite.txtdata.txtfinal.txt--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : writing.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSE

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TEST2

--- Contenu du fichier : final.txt ---
LICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtusage.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE-DOT.txtadvancedsnippet.txtsnippet.txtlicense.txtThirdPartyNoticeText.txtLICENSE.txtMIT-LICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtrobots.txtLICENSE-MIT.txtLICENSE-MIT.txtwriting.txtwrite.txtfinal.txttop_level.txtentry_points.txtvendor.txtAUTHORS.txttop_level.txtLICENSE.txtentry_points.txtLGPL.txtfilepaths.rst.txtc_api.rst.txtindex.rst.txtlogos.rst.txtkey.rst.txtpixelarray.rst.txtfreetype.rst.txtimage.rst.txtdraw.rst.txtrect.rst.txtsurface.rst.txtscrap.rst.txtdisplay.rst.txtevent.rst.txtmask.rst.txtcontext.rst.txtlocals.rst.txtcursors.rst.txttouch.rst.txtjoystick.rst.txtmath.rst.txtbufferproxy.rst.txtcolor_list.rst.txtpixelcopy.rst.txtmidi.rst.txtoverlay.rst.txtgfxdraw.rst.txtfastevent.rst.txtsdl2_controller.rst.txttests.rst.txtcdrom.rst.txtpygame.rst.txtcamera.rst.txtmouse.rst.txtmixer.rst.txtmusic.rst.txtsndarray.rst.txttime.rst.txtsurfarray.rst.txtsdl2_video.rst.txtfont.rst.txtsprite.rst.txtcolor.rst.txttransform.rst.txtexamples.rst.txttestmail.txtwrite.txtdata.txtfinal.txt--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---


--- Contenu du fichier : top_level.txt ---
pygame


--- Contenu du fichier : entry_points.txt ---
[pyinstaller40]
hook-dirs = pygame.__pyinstaller:get_hook_dirs


--- Contenu du fichier : vendor.txt ---
CacheControl==0.14.0
distlib==0.3.8
distro==1.9.0
msgpack==1.0.8
packaging==24.1
platformdirs==4.2.2
pyproject-hooks==1.0.0
requests==2.32.3
    certifi==2024.7.4
    idna==3.7
    urllib3==1.26.18
rich==13.7.1
    pygments==2.18.0
    typing_extensions==4.12.2
resolvelib==1.0.1
setuptools==70.3.0
tomli==2.0.1
truststore==0.9.1


--- Contenu du fichier : AUTHORS.txt ---
@Switch01
A_Rog
Aakanksha Agrawal
Abhinav Sagar
ABHYUDAY PRATAP SINGH
abs51295
AceGentile
Adam Chainz
Adam Tse
Adam Wentz
admin
Adolfo Ochagavía
Adrien Morison
Agus
ahayrapetyan
Ahilya
AinsworthK
Akash Srivastava
Alan Yee
Albert Tugushev
Albert-Guan
albertg
Alberto Sottile
Aleks Bunin
Ales Erjavec
Alethea Flowers
Alex Gaynor
Alex Grönholm
Alex Hedges
Alex Loosley
Alex Morega
Alex Stachowiak
Alexander Shtyrov
Alexandre Conrad
Alexey Popravka
Aleš Erjavec
Alli
Ami Fischman
Ananya Maiti
Anatoly Techtonik
Anders Kaseorg
Andre Aguiar
Andreas Lutro
Andrei Geacar
Andrew Gaul
Andrew Shymanel
Andrey Bienkowski
Andrey Bulgakov
Andrés Delfino
Andy Freeland
Andy Kluger
Ani Hayrapetyan
Aniruddha Basak
Anish Tambe
Anrs Hu
Anthony Sottile
Antoine Musso
Anton Ovchinnikov
Anton Patrushev
Antonio Alvarado Hernandez
Antony Lee
Antti Kaihola
Anubhav Patel
Anudit Nagar
Anuj Godase
AQNOUCH Mohammed
AraHaan
arena
arenasys
Arindam Choudhury
Armin Ronacher
Arnon Yaari
Artem
Arun Babu Neelicattu
Ashley Manton
Ashwin Ramaswami
atse
Atsushi Odagiri
Avinash Karhana
Avner Cohen
Awit (Ah-Wit) Ghirmai
Baptiste Mispelon
Barney Gale
barneygale
Bartek Ogryczak
Bastian Venthur
Ben Bodenmiller
Ben Darnell
Ben Hoyt
Ben Mares
Ben Rosser
Bence Nagy
Benjamin Peterson
Benjamin VanEvery
Benoit Pierre
Berker Peksag
Bernard
Bernard Tyers
Bernardo B. Marques
Bernhard M. Wiedemann
Bertil Hatt
Bhavam Vidyarthi
Blazej Michalik
Bogdan Opanchuk
BorisZZZ
Brad Erickson
Bradley Ayers
Branch Vincent
Brandon L. Reiss
Brandt Bucher
Brannon Dorsey
Brett Randall
Brett Rosen
Brian Cristante
Brian Rosner
briantracy
BrownTruck
Bruno Oliveira
Bruno Renié
Bruno S
Bstrdsmkr
Buck Golemon
burrows
Bussonnier Matthias
bwoodsend
c22
Caleb Martinez
Calvin Smith
Carl Meyer
Carlos Liam
Carol Willing
Carter Thayer
Cass
Chandrasekhar Atina
Charlie Marsh
Chih-Hsuan Yen
Chris Brinker
Chris Hunt
Chris Jerdonek
Chris Kuehl
Chris Markiewicz
Chris McDonough
Chris Pawley
Chris Pryer
Chris Wolfe
Christian Clauss
Christian Heimes
Christian Oudard
Christoph Reiter
Christopher Hunt
Christopher Snyder
chrysle
cjc7373
Clark Boylan
Claudio Jolowicz
Clay McClure
Cody
Cody Soyland
Colin Watson
Collin Anderson
Connor Osborn
Cooper Lees
Cooper Ry Lees
Cory Benfield
Cory Wright
Craig Kerstiens
Cristian Sorinel
Cristina
Cristina Muñoz
ctg123
Curtis Doty
cytolentino
Daan De Meyer
Dale
Damian
Damian Quiroga
Damian Shaw
Dan Black
Dan Savilonis
Dan Sully
Dane Hillard
daniel
Daniel Collins
Daniel Hahler
Daniel Holth
Daniel Jost
Daniel Katz
Daniel Shaulov
Daniele Esposti
Daniele Nicolodi
Daniele Procida
Daniil Konovalenko
Danny Hermes
Danny McClanahan
Darren Kavanagh
Dav Clark
Dave Abrahams
Dave Jones
David Aguilar
David Black
David Bordeynik
David Caro
David D Lowe
David Evans
David Hewitt
David Linke
David Poggi
David Poznik
David Pursehouse
David Runge
David Tucker
David Wales
Davidovich
ddelange
Deepak Sharma
Deepyaman Datta
Denise Yu
dependabot[bot]
derwolfe
Desetude
Devesh Kumar Singh
devsagul
Diego Caraballo
Diego Ramirez
DiegoCaraballo
Dimitri Merejkowsky
Dimitri Papadopoulos
Dirk Stolle
Dmitry Gladkov
Dmitry Volodin
Domen Kožar
Dominic Davis-Foster
Donald Stufft
Dongweiming
doron zarhi
Dos Moonen
Douglas Thor
DrFeathers
Dustin Ingram
Dustin Rodrigues
Dwayne Bailey
Ed Morley
Edgar Ramírez
Edgar Ramírez Mondragón
Ee Durbin
Efflam Lemaillet
efflamlemaillet
Eitan Adler
ekristina
elainechan
Eli Schwartz
Elisha Hollander
Ellen Marie Dash
Emil Burzo
Emil Styrke
Emmanuel Arias
Endoh Takanao
enoch
Erdinc Mutlu
Eric Cousineau
Eric Gillingham
Eric Hanchrow
Eric Hopper
Erik M. Bray
Erik Rose
Erwin Janssen
Eugene Vereshchagin
everdimension
Federico
Felipe Peter
Felix Yan
fiber-space
Filip Kokosiński
Filipe Laíns
Finn Womack
finnagin
Flavio Amurrio
Florian Briand
Florian Rathgeber
Francesco
Francesco Montesano
Fredrik Orderud
Frost Ming
Gabriel Curio
Gabriel de Perthuis
Garry Polley
gavin
gdanielson
Geoffrey Sneddon
George Song
Georgi Valkov
Georgy Pchelkin
ghost
Giftlin Rajaiah
gizmoguy1
gkdoc
Godefroid Chapelle
Gopinath M
GOTO Hayato
gousaiyang
gpiks
Greg Roodt
Greg Ward
Guilherme Espada
Guillaume Seguin
gutsytechster
Guy Rozendorn
Guy Tuval
gzpan123
Hanjun Kim
Hari Charan
Harsh Vardhan
harupy
Harutaka Kawamura
hauntsaninja
Henrich Hartzer
Henry Schreiner
Herbert Pfennig
Holly Stotelmyer
Honnix
Hsiaoming Yang
Hugo Lopes Tavares
Hugo van Kemenade
Hugues Bruant
Hynek Schlawack
Ian Bicking
Ian Cordasco
Ian Lee
Ian Stapleton Cordasco
Ian Wienand
Igor Kuzmitshov
Igor Sobreira
Ikko Ashimine
Ilan Schnell
Illia Volochii
Ilya Baryshev
Inada Naoki
Ionel Cristian Mărieș
Ionel Maries Cristian
Itamar Turner-Trauring
Ivan Pozdeev
J. Nick Koston
Jacob Kim
Jacob Walls
Jaime Sanz
jakirkham
Jakub Kuczys
Jakub Stasiak
Jakub Vysoky
Jakub Wilk
James Cleveland
James Curtin
James Firth
James Gerity
James Polley
Jan Pokorný
Jannis Leidel
Jarek Potiuk
jarondl
Jason Curtis
Jason R. Coombs
JasonMo
JasonMo1
Jay Graves
Jean Abou Samra
Jean-Christophe Fillion-Robin
Jeff Barber
Jeff Dairiki
Jeff Widman
Jelmer Vernooĳ
jenix21
Jeremy Fleischman
Jeremy Stanley
Jeremy Zafran
Jesse Rittner
Jiashuo Li
Jim Fisher
Jim Garrison
Jinzhe Zeng
Jiun Bae
Jivan Amara
Joe Bylund
Joe Michelini
John Paton
John Sirois
John T. Wodder II
John-Scott Atlakson
johnthagen
Jon Banafato
Jon Dufresne
Jon Parise
Jonas Nockert
Jonathan Herbert
Joonatan Partanen
Joost Molenaar
Jorge Niedbalski
Joseph Bylund
Joseph Long
Josh Bronson
Josh Cannon
Josh Hansen
Josh Schneier
Joshua
Juan Luis Cano Rodríguez
Juanjo Bazán
Judah Rand
Julian Berman
Julian Gethmann
Julien Demoor
Jussi Kukkonen
jwg4
Jyrki Pulliainen
Kai Chen
Kai Mueller
Kamal Bin Mustafa
kasium
kaustav haldar
keanemind
Keith Maxwell
Kelsey Hightower
Kenneth Belitzky
Kenneth Reitz
Kevin Burke
Kevin Carter
Kevin Frommelt
Kevin R Patterson
Kexuan Sun
Kit Randel
Klaas van Schelven
KOLANICH
konstin
kpinc
Krishna Oza
Kumar McMillan
Kuntal Majumder
Kurt McKee
Kyle Persohn
lakshmanaram
Laszlo Kiss-Kollar
Laurent Bristiel
Laurent LAPORTE
Laurie O
Laurie Opperman
layday
Leon Sasson
Lev Givon
Lincoln de Sousa
Lipis
lorddavidiii
Loren Carvalho
Lucas Cimon
Ludovic Gasc
Luis Medel
Lukas Geiger
Lukas Juhrich
Luke Macken
Luo Jiebin
luojiebin
luz.paz
László Kiss Kollár
M00nL1ght
Marc Abramowitz
Marc Tamlyn
Marcus Smith
Mariatta
Mark Kohler
Mark McLoughlin
Mark Williams
Markus Hametner
Martey Dodoo
Martin Fischer
Martin Häcker
Martin Pavlasek
Masaki
Masklinn
Matej Stuchlik
Mathew Jennings
Mathieu Bridon
Mathieu Kniewallner
Matt Bacchi
Matt Good
Matt Maker
Matt Robenolt
Matt Wozniski
matthew
Matthew Einhorn
Matthew Feickert
Matthew Gilliard
Matthew Hughes
Matthew Iversen
Matthew Treinish
Matthew Trumbell
Matthew Willson
Matthias Bussonnier
mattip
Maurits van Rees
Max W Chase
Maxim Kurnikov
Maxime Rouyrre
mayeut
mbaluna
mdebi
memoselyk
meowmeowcat
Michael
Michael Aquilina
Michael E. Karpeles
Michael Klich
Michael Mintz
Michael Williamson
michaelpacer
Michał Górny
Mickaël Schoentgen
Miguel Araujo Perez
Mihir Singh
Mike
Mike Hendricks
Min RK
MinRK
Miro Hrončok
Monica Baluna
montefra
Monty Taylor
morotti
mrKazzila
Muha Ajjan
Nadav Wexler
Nahuel Ambrosini
Nate Coraor
Nate Prewitt
Nathan Houghton
Nathaniel J. Smith
Nehal J Wani
Neil Botelho
Nguyễn Gia Phong
Nicholas Serra
Nick Coghlan
Nick Stenning
Nick Timkovich
Nicolas Bock
Nicole Harris
Nikhil Benesch
Nikhil Ladha
Nikita Chepanov
Nikolay Korolev
Nipunn Koorapati
Nitesh Sharma
Niyas Sait
Noah
Noah Gorny
Nowell Strite
NtaleGrey
nvdv
OBITORASU
Ofek Lev
ofrinevo
Oliver Freund
Oliver Jeeves
Oliver Mannion
Oliver Tonnhofer
Olivier Girardot
Olivier Grisel
Ollie Rutherfurd
OMOTO Kenji
Omry Yadan
onlinejudge95
Oren Held
Oscar Benjamin
Oz N Tiram
Pachwenko
Patrick Dubroy
Patrick Jenkins
Patrick Lawson
patricktokeeffe
Patrik Kopkan
Paul Ganssle
Paul Kehrer
Paul Moore
Paul Nasrat
Paul Oswald
Paul van der Linden
Paulus Schoutsen
Pavel Safronov
Pavithra Eswaramoorthy
Pawel Jasinski
Paweł Szramowski
Pekka Klärck
Peter Gessler
Peter Lisák
Peter Shen
Peter Waller
Petr Viktorin
petr-tik
Phaneendra Chiruvella
Phil Elson
Phil Freo
Phil Pennock
Phil Whelan
Philip Jägenstedt
Philip Molloy
Philippe Ombredanne
Pi Delport
Pierre-Yves Rofes
Pieter Degroote
pip
Prabakaran Kumaresshan
Prabhjyotsing Surjit Singh Sodhi
Prabhu Marappan
Pradyun Gedam
Prashant Sharma
Pratik Mallya
pre-commit-ci[bot]
Preet Thakkar
Preston Holmes
Przemek Wrzos
Pulkit Goyal
q0w
Qiangning Hong
Qiming Xu
Quentin Lee
Quentin Pradet
R. David Murray
Rafael Caricio
Ralf Schmitt
Ran Benita
Razzi Abuissa
rdb
Reece Dunham
Remi Rampin
Rene Dudfield
Riccardo Magliocchetti
Riccardo Schirone
Richard Jones
Richard Si
Ricky Ng-Adam
Rishi
rmorotti
RobberPhex
Robert Collins
Robert McGibbon
Robert Pollak
Robert T. McGibbon
robin elisha robinson
Roey Berman
Rohan Jain
Roman Bogorodskiy
Roman Donchenko
Romuald Brunet
ronaudinho
Ronny Pfannschmidt
Rory McCann
Ross Brattain
Roy Wellington Ⅳ
Ruairidh MacLeod
Russell Keith-Magee
Ryan Shepherd
Ryan Wooden
ryneeverett
S. Guliaev
Sachi King
Salvatore Rinchiera
sandeepkiran-js
Sander Van Balen
Savio Jomton
schlamar
Scott Kitterman
Sean
seanj
Sebastian Jordan
Sebastian Schaetz
Segev Finer
SeongSoo Cho
Sergey Vasilyev
Seth Michael Larson
Seth Woodworth
Shahar Epstein
Shantanu
shenxianpeng
shireenrao
Shivansh-007
Shixian Sheng
Shlomi Fish
Shovan Maity
Simeon Visser
Simon Cross
Simon Pichugin
sinoroc
sinscary
snook92
socketubs
Sorin Sbarnea
Srinivas Nyayapati
Stavros Korokithakis
Stefan Scherfke
Stefano Rivera
Stephan Erb
Stephen Rosen
stepshal
Steve (Gadget) Barnes
Steve Barnes
Steve Dower
Steve Kowalik
Steven Myint
Steven Silvester
stonebig
studioj
Stéphane Bidoul
Stéphane Bidoul (ACSONE)
Stéphane Klein
Sumana Harihareswara
Surbhi Sharma
Sviatoslav Sydorenko
Sviatoslav Sydorenko (Святослав Сидоренко)
Swat009
Sylvain
Takayuki SHIMIZUKAWA
Taneli Hukkinen
tbeswick
Thiago
Thijs Triemstra
Thomas Fenzl
Thomas Grainger
Thomas Guettler
Thomas Johansson
Thomas Kluyver
Thomas Smith
Thomas VINCENT
Tim D. Smith
Tim Gates
Tim Harder
Tim Heap
tim smith
tinruufu
Tobias Hermann
Tom Forbes
Tom Freudenheim
Tom V
Tomas Hrnciar
Tomas Orsava
Tomer Chachamu
Tommi Enenkel | AnB
Tomáš Hrnčiar
Tony Beswick
Tony Narlock
Tony Zhaocheng Tan
TonyBeswick
toonarmycaptain
Toshio Kuratomi
toxinu
Travis Swicegood
Tushar Sadhwani
Tzu-ping Chung
Valentin Haenel
Victor Stinner
victorvpaulo
Vikram - Google
Viktor Szépe
Ville Skyttä
Vinay Sajip
Vincent Philippon
Vinicyus Macedo
Vipul Kumar
Vitaly Babiy
Vladimir Fokow
Vladimir Rutsky
W. Trevor King
Wil Tan
Wilfred Hughes
William Edwards
William ML Leslie
William T Olson
William Woodruff
Wilson Mo
wim glenn
Winson Luk
Wolfgang Maier
Wu Zhenyu
XAMES3
Xavier Fernandez
Xianpeng Shen
xoviat
xtreak
YAMAMOTO Takashi
Yen Chi Hsuan
Yeray Diaz Diaz
Yoval P
Yu Jian
Yuan Jing Vincent Yan
Yusuke Hayashi
Zearin
Zhiping Deng
ziebam
Zvezdan Petkovic
Łukasz Langa
Роман Донченко
Семён Марьясин


--- Contenu du fichier : top_level.txt ---
pip


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : entry_points.txt ---
[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main


--- Contenu du fichier : LGPL.txt ---
		  GNU LESSER GENERAL PUBLIC LICENSE
		       Version 2.1, February 1999

 Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
 as the successor of the GNU Library Public License, version 2, hence
 the version number 2.1.]

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software packages--typically libraries--of the
Free Software Foundation and other authors who decide to use it.  You
can use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of
it in new free programs; and that you are informed that you can do
these things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the "Lesser" General Public License because it
does Less to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

		  GNU LESSER GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms of
this Lesser General Public License (also called "this License").
Each licensee is addressed as "you".

  A "library" means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The "Library", below, refers to any such software library or work
which has been distributed under these terms.  A "work based on the
Library" means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term "modification".)

  "Source code" for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.
  
  1. You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

  2. You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) The modified work must itself be a software library.

    b) You must cause the files modified to carry prominent notices
    stating that you changed the files and the date of any change.

    c) You must cause the whole of the work to be licensed at no
    charge to all third parties under the terms of this License.

    d) If a facility in the modified Library refers to a function or a
    table of data to be supplied by an application program that uses
    the facility, other than as an argument passed when the facility
    is invoked, then you must make a good faith effort to ensure that,
    in the event an application does not supply such function or
    table, the facility still operates, and performs whatever part of
    its purpose remains meaningful.

    (For example, a function in a library to compute square roots has
    a purpose that is entirely well-defined independent of the
    application.  Therefore, Subsection 2d requires that any
    application-supplied function or table used by this function must
    be optional: if the application does not supply it, the square
    root function must still compute square roots.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a "work that uses the Library".  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a "work that uses the Library" with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a "work that uses the
library".  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a "work that uses the Library" uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
link a "work that uses the Library" with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

    a) Accompany the work with the complete corresponding
    machine-readable source code for the Library including whatever
    changes were used in the work (which must be distributed under
    Sections 1 and 2 above); and, if the work is an executable linked
    with the Library, with the complete machine-readable "work that
    uses the Library", as object code and/or source code, so that the
    user can modify the Library and then relink to produce a modified
    executable containing the modified Library.  (It is understood
    that the user who changes the contents of definitions files in the
    Library will not necessarily be able to recompile the application
    to use the modified definitions.)

    b) Use a suitable shared library mechanism for linking with the
    Library.  A suitable mechanism is one that (1) uses at run time a
    copy of the library already present on the user's computer system,
    rather than copying library functions into the executable, and (2)
    will operate properly with a modified version of the library, if
    the user installs one, as long as the modified version is
    interface-compatible with the version that the work was made with.

    c) Accompany the work with a written offer, valid for at
    least three years, to give the same user the materials
    specified in Subsection 6a, above, for a charge no more
    than the cost of performing this distribution.

    d) If distribution of the work is made by offering access to copy
    from a designated place, offer equivalent access to copy the above
    specified materials from the same place.

    e) Verify that the user has already received a copy of these
    materials or that you have already sent this user a copy.

  For an executable, the required form of the "work that uses the
Library" must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies
the executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

  7. You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

    a) Accompany the combined library with a copy of the same work
    based on the Library, uncombined with any other library
    facilities.  This must be distributed under the terms of the
    Sections above.

    b) Give prominent notice with the combined library of the fact
    that part of it is a work based on the Library, and explaining
    where to find the accompanying uncombined form of the same work.

  8. You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

  9. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

  11. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

  13. The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
"any later version", you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

			    NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

		     END OF TERMS AND CONDITIONS

           How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the library's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the library, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  library `Frob' (a library for tweaking knobs) written by James Random Hacker.

  <signature of Ty Coon>, 1 April 1990
  Ty Coon, President of Vice

That's all there is to it!




--- Contenu du fichier : filepaths.rst.txt ---
File Path Function Arguments
============================

A pygame function or method which takes a file path argument will accept
either a Unicode or a byte (8-bit or ASCII character) string.
Unicode strings are translated to Python's default filesystem encoding,
as returned by sys.getfilesystemencoding().  A Unicode code point
above U+FFFF (``\uFFFF``) can be coded directly with a 32-bit escape sequences
(``\Uxxxxxxxx``), even for Python interpreters built with an UCS-2
(16-bit character) Unicode type.  Byte strings are passed
to the operating system unchanged.

Null characters (``\x00``) are not permitted in the path, raising an exception.
An exception is also raised if an Unicode file path cannot be encoded.
How UTF-16 surrogate codes are handled is Python-interpreter-dependent.
Use UTF-32 code points and 32-bit escape sequences instead.
The exception types are function-dependent.


--- Contenu du fichier : c_api.rst.txt ---
pygame C API
============

.. toctree::
   :maxdepth: 1
   :glob:

   c_api/slots.rst
   c_api/base.rst
   c_api/bufferproxy.rst
   c_api/color.rst
   c_api/display.rst
   c_api/event.rst
   c_api/freetype.rst
   c_api/mixer.rst
   c_api/rect.rst
   c_api/rwobject.rst
   c_api/surface.rst
   c_api/surflock.rst
   c_api/version.rst


src_c/include/ contains header files for applications
that use the pygame C API, while src_c/ contains
headers used by pygame internally.


--- Contenu du fichier : index.rst.txt ---
Pygame Front Page
=================

.. toctree::
   :maxdepth: 2
   :glob:
   :hidden:

   ref/*
   tut/*
   tut/en/**/*
   tut/ko/**/*
   c_api
   filepaths
   logos

Quick start
-----------

Welcome to pygame! Once you've got pygame installed (:code:`pip install pygame` or
:code:`pip3 install pygame` for most people), the next question is how to get a game
loop running. Pygame, unlike some other libraries, gives you full control of program
execution. That freedom means it is easy to mess up in your initial steps.

Here is a good example of a basic setup (opens the window, updates the screen, and handles events)--

.. literalinclude:: ref/code_examples/base_script.py

Here is a slightly more fleshed out example, which shows you how to move something
(a circle in this case) around on screen--

.. literalinclude:: ref/code_examples/base_script_example.py

For more in depth reference, check out the :ref:`tutorials-reference-label`
section below, check out a video tutorial (`I'm a fan of this one
<https://www.youtube.com/watch?v=AY9MnQ4x3zk>`_), or reference the API
documentation by module.

Documents
---------

`Readme`_
  Basic information about pygame: what it is, who is involved, and where to find it.

`Install`_
  Steps needed to compile pygame on several platforms.
  Also help on finding and installing prebuilt binaries for your system.

:doc:`filepaths`
  How pygame handles file system paths.

:doc:`Pygame Logos <logos>`
   The logos of Pygame in different resolutions.


`LGPL License`_
  This is the license pygame is distributed under.
  It provides for pygame to be distributed with open source and commercial software.
  Generally, if pygame is not changed, it can be used with any type of program.

.. _tutorials-reference-label:

Tutorials
---------

:doc:`Introduction to Pygame <tut/PygameIntro>`
  An introduction to the basics of pygame.
  This is written for users of Python and appeared in volume two of the Py magazine.

:doc:`Import and Initialize <tut/ImportInit>`
  The beginning steps on importing and initializing pygame.
  The pygame package is made of several modules.
  Some modules are not included on all platforms.

:doc:`How do I move an Image? <tut/MoveIt>`
  A basic tutorial that covers the concepts behind 2D computer animation.
  Information about drawing and clearing objects to make them appear animated.

:doc:`Chimp Tutorial, Line by Line <tut/ChimpLineByLine>`
  The pygame examples include a simple program with an interactive fist and a chimpanzee.
  This was inspired by the annoying flash banner of the early 2000s.
  This tutorial examines every line of code used in the example.

:doc:`Sprite Module Introduction <tut/SpriteIntro>`
  Pygame includes a higher level sprite module to help organize games.
  The sprite module includes several classes that help manage details found in almost all games types.
  The Sprite classes are a bit more advanced than the regular pygame modules,
  and need more understanding to be properly used.

:doc:`Surfarray Introduction <tut/SurfarrayIntro>`
  Pygame used the NumPy python module to allow efficient per pixel effects on images.
  Using the surface arrays is an advanced feature that allows custom effects and filters.
  This also examines some of the simple effects from the pygame example, arraydemo.py.

:doc:`Camera Module Introduction <tut/CameraIntro>`
  Pygame, as of 1.9, has a camera module that allows you to capture images,
  watch live streams, and do some basic computer vision.
  This tutorial covers those use cases.

:doc:`Newbie Guide <tut/newbieguide>`
  A list of thirteen helpful tips for people to get comfortable using pygame.

:doc:`Making Games Tutorial <tut/MakeGames>`
  A large tutorial that covers the bigger topics needed to create an entire game.

:doc:`Display Modes <tut/DisplayModes>`
  Getting a display surface for the screen.

:doc:`한국어 튜토리얼 (Korean Tutorial) <tut/ko/빨간블록 검은블록/개요>`
  빨간블록 검은블록


Reference
---------

:ref:`genindex`
  A list of all functions, classes, and methods in the pygame package.

:doc:`ref/bufferproxy`
  An array protocol view of surface pixels

:doc:`ref/color`
  Color representation.

:doc:`ref/cursors`
  Loading and compiling cursor images.

:doc:`ref/display`
  Configure the display surface.

:doc:`ref/draw`
  Drawing simple shapes like lines and ellipses to surfaces.

:doc:`ref/event`
  Manage the incoming events from various input devices and the windowing platform.

:doc:`ref/examples`
  Various programs demonstrating the use of individual pygame modules.

:doc:`ref/font`
  Loading and rendering TrueType fonts.

:doc:`ref/freetype`
  Enhanced pygame module for loading and rendering font faces.

:doc:`ref/gfxdraw`
  Anti-aliasing draw functions.

:doc:`ref/image`
  Loading, saving, and transferring of surfaces.

:doc:`ref/joystick`
  Manage the joystick devices.

:doc:`ref/key`
  Manage the keyboard device.

:doc:`ref/locals`
  Pygame constants.

:doc:`ref/mixer`
  Load and play sounds

:doc:`ref/mouse`
  Manage the mouse device and display.

:doc:`ref/music`
  Play streaming music tracks.

:doc:`ref/pygame`
  Top level functions to manage pygame.

:doc:`ref/pixelarray`
  Manipulate image pixel data.

:doc:`ref/rect`
  Flexible container for a rectangle.

:doc:`ref/scrap`
  Native clipboard access.

:doc:`ref/sndarray`
  Manipulate sound sample data.

:doc:`ref/sprite`
  Higher level objects to represent game images.

:doc:`ref/surface`
  Objects for images and the screen.

:doc:`ref/surfarray`
  Manipulate image pixel data.

:doc:`ref/tests`
  Test pygame.

:doc:`ref/time`
  Manage timing and framerate.

:doc:`ref/transform`
  Resize and move images.

:doc:`pygame C API <c_api>`
  The C api shared amongst pygame extension modules.

:ref:`search`
  Search pygame documents by keyword.

.. _Readme: ../wiki/about

.. _Install: ../wiki/GettingStarted#Pygame%20Installation

.. _LGPL License: LGPL.txt


--- Contenu du fichier : logos.rst.txt ---
*************************************************
  Pygame Logos Page
*************************************************

Pygame Logos
============

These logos are available for use in your own game projects.
Please put them up wherever you see fit. The logo was created
by TheCorruptor on July 29, 2001 and upscaled by Mega_JC on
August 29, 2021.

.. container:: fullwidth

    .. image:: _static/pygame_logo.png

    | `pygame_logo.svg <_static/pygame_logo.svg>`_
    | `pygame_logo.png <_static/pygame_logo.png>`_ - 1561 x 438

    .. image:: _static/pygame_lofi.png

    | `pygame_lofi.svg <_static/pygame_lofi.svg>`_
    | `pygame_lofi.png <_static/pygame_lofi.png>`_ - 1561 x 438

    .. image:: _static/pygame_powered.png

    | `pygame_powered.svg <_static/pygame_powered.svg>`_
    | `pygame_powered.png <_static/pygame_powered.png>`_ - 1617 x 640

    .. image:: _static/pygame_tiny.png

    | `pygame_tiny.png <_static/pygame_tiny.png>`_ - 214 x 60

    .. image:: _static/pygame_powered_lowres.png

    | `pygame_powered_lowres.png <_static/pygame_powered_lowres.png>`_ - 101 x 40


There is a higher resolution layered photoshop image
available `here <https://www.pygame.org/ftp/pygame_logo.psd>`_. *(1.3 MB)*

Legacy logos
------------

.. container:: fullwidth

    `legacy_logos.zip <_static/legacy_logos.zip>`_ - 50.1 KB

--- Contenu du fichier : key.rst.txt ---
.. include:: common.txt

:mod:`pygame.key`
=================

.. module:: pygame.key
   :synopsis: pygame module to work with the keyboard

| :sl:`pygame module to work with the keyboard`

This module contains functions for dealing with the keyboard.

The :mod:`pygame.event` queue gets ``pygame.KEYDOWN`` and ``pygame.KEYUP``
events when the keyboard buttons are pressed and released. Both events have
``key`` and ``mod`` attributes.

   * ``key``: an :ref:`integer ID <key-constants-label>` representing every key
     on the keyboard
   * ``mod``: a bitmask of all the :ref:`modifier keys <key-modifiers-label>`
     that were in a pressed state when the event occurred

The ``pygame.KEYDOWN`` event has the additional attributes ``unicode`` and
``scancode``.

   * ``unicode``: a single character string that is the fully translated
     character entered, this takes into account the shift and composition keys
   * ``scancode``: the platform-specific key code, which could be different from
     keyboard to keyboard, but is useful for key selection of weird keys like
     the multimedia keys

.. versionadded:: 2.0.0
    The ``pygame.TEXTINPUT`` event is preferred to the ``unicode`` attribute
    of ``pygame.KEYDOWN``. The attribute ``text`` contains the input.


.. _key-constants-label:

The following is a list of all the constants (from :mod:`pygame.locals`) used to
represent keyboard keys.

Portability note: The integers for key constants differ between pygame 1 and 2.
Always use key constants (``K_a``) rather than integers directly (``97``) so
that your key handling code works well on both pygame 1 and pygame 2.


::

      pygame
      Constant      ASCII   Description
      ---------------------------------
      K_BACKSPACE   \b      backspace
      K_TAB         \t      tab
      K_CLEAR               clear
      K_RETURN      \r      return
      K_PAUSE               pause
      K_ESCAPE      ^[      escape
      K_SPACE               space
      K_EXCLAIM     !       exclaim
      K_QUOTEDBL    "       quotedbl
      K_HASH        #       hash
      K_DOLLAR      $       dollar
      K_AMPERSAND   &       ampersand
      K_QUOTE               quote
      K_LEFTPAREN   (       left parenthesis
      K_RIGHTPAREN  )       right parenthesis
      K_ASTERISK    *       asterisk
      K_PLUS        +       plus sign
      K_COMMA       ,       comma
      K_MINUS       -       minus sign
      K_PERIOD      .       period
      K_SLASH       /       forward slash
      K_0           0       0
      K_1           1       1
      K_2           2       2
      K_3           3       3
      K_4           4       4
      K_5           5       5
      K_6           6       6
      K_7           7       7
      K_8           8       8
      K_9           9       9
      K_COLON       :       colon
      K_SEMICOLON   ;       semicolon
      K_LESS        <       less-than sign
      K_EQUALS      =       equals sign
      K_GREATER     >       greater-than sign
      K_QUESTION    ?       question mark
      K_AT          @       at
      K_LEFTBRACKET [       left bracket
      K_BACKSLASH   \       backslash
      K_RIGHTBRACKET ]      right bracket
      K_CARET       ^       caret
      K_UNDERSCORE  _       underscore
      K_BACKQUOTE   `       grave
      K_a           a       a
      K_b           b       b
      K_c           c       c
      K_d           d       d
      K_e           e       e
      K_f           f       f
      K_g           g       g
      K_h           h       h
      K_i           i       i
      K_j           j       j
      K_k           k       k
      K_l           l       l
      K_m           m       m
      K_n           n       n
      K_o           o       o
      K_p           p       p
      K_q           q       q
      K_r           r       r
      K_s           s       s
      K_t           t       t
      K_u           u       u
      K_v           v       v
      K_w           w       w
      K_x           x       x
      K_y           y       y
      K_z           z       z
      K_DELETE              delete
      K_KP0                 keypad 0
      K_KP1                 keypad 1
      K_KP2                 keypad 2
      K_KP3                 keypad 3
      K_KP4                 keypad 4
      K_KP5                 keypad 5
      K_KP6                 keypad 6
      K_KP7                 keypad 7
      K_KP8                 keypad 8
      K_KP9                 keypad 9
      K_KP_PERIOD   .       keypad period
      K_KP_DIVIDE   /       keypad divide
      K_KP_MULTIPLY *       keypad multiply
      K_KP_MINUS    -       keypad minus
      K_KP_PLUS     +       keypad plus
      K_KP_ENTER    \r      keypad enter
      K_KP_EQUALS   =       keypad equals
      K_UP                  up arrow
      K_DOWN                down arrow
      K_RIGHT               right arrow
      K_LEFT                left arrow
      K_INSERT              insert
      K_HOME                home
      K_END                 end
      K_PAGEUP              page up
      K_PAGEDOWN            page down
      K_F1                  F1
      K_F2                  F2
      K_F3                  F3
      K_F4                  F4
      K_F5                  F5
      K_F6                  F6
      K_F7                  F7
      K_F8                  F8
      K_F9                  F9
      K_F10                 F10
      K_F11                 F11
      K_F12                 F12
      K_F13                 F13
      K_F14                 F14
      K_F15                 F15
      K_NUMLOCK             numlock
      K_CAPSLOCK            capslock
      K_SCROLLOCK           scrollock
      K_RSHIFT              right shift
      K_LSHIFT              left shift
      K_RCTRL               right control
      K_LCTRL               left control
      K_RALT                right alt
      K_LALT                left alt
      K_RMETA               right meta
      K_LMETA               left meta
      K_LSUPER              left Windows key
      K_RSUPER              right Windows key
      K_MODE                mode shift
      K_HELP                help
      K_PRINT               print screen
      K_SYSREQ              sysrq
      K_BREAK               break
      K_MENU                menu
      K_POWER               power
      K_EURO                Euro
      K_AC_BACK             Android back button


.. _key-modifiers-label:

The keyboard also has a list of modifier states (from :mod:`pygame.locals`) that
can be assembled by bitwise-ORing them together.

::

      pygame
      Constant      Description
      -------------------------
      KMOD_NONE     no modifier keys pressed
      KMOD_LSHIFT   left shift
      KMOD_RSHIFT   right shift
      KMOD_SHIFT    left shift or right shift or both
      KMOD_LCTRL    left control
      KMOD_RCTRL    right control
      KMOD_CTRL     left control or right control or both
      KMOD_LALT     left alt
      KMOD_RALT     right alt
      KMOD_ALT      left alt or right alt or both
      KMOD_LMETA    left meta
      KMOD_RMETA    right meta
      KMOD_META     left meta or right meta or both
      KMOD_CAPS     caps lock
      KMOD_NUM      num lock
      KMOD_MODE     AltGr


The modifier information is contained in the ``mod`` attribute of the
``pygame.KEYDOWN`` and ``pygame.KEYUP`` events. The ``mod`` attribute is a
bitmask of all the modifier keys that were in a pressed state when the event
occurred. The modifier information can be decoded using a bitwise AND (except
for ``KMOD_NONE``, which should be compared using equals ``==``). For example:

::

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:
            if event.mod == pygame.KMOD_NONE:
                print('No modifier keys were in a pressed state when this '
                      'event occurred.')
            else:
                if event.mod & pygame.KMOD_LSHIFT:
                    print('Left shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_RSHIFT:
                    print('Right shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_SHIFT:
                    print('Left shift or right shift or both were in a '
                          'pressed state when this event occurred.')



.. function:: get_focused

   | :sl:`true if the display is receiving keyboard input from the system`
   | :sg:`get_focused() -> bool`

   Returns ``True`` when the display window has keyboard focus from the
   system. If the display needs to ensure it does not lose keyboard focus, it
   can use :func:`pygame.event.set_grab()` to grab all input.

   .. ## pygame.key.get_focused ##

.. function:: get_pressed

   | :sl:`get the state of all keyboard buttons`
   | :sg:`get_pressed() -> bools`

   Returns a sequence of boolean values representing the state of every key on
   the keyboard. Use the key constant values to index the array. A ``True``
   value means that the button is pressed.

   .. note::
      Getting the list of pushed buttons with this function is not the proper
      way to handle text entry from the user. There is no way to know the order
      of keys pressed, and rapidly pushed keys can be completely unnoticed
      between two calls to ``pygame.key.get_pressed()``. There is also no way to
      translate these pushed keys into a fully translated character value. See
      the ``pygame.KEYDOWN`` events on the :mod:`pygame.event` queue for this
      functionality.
   
   .. versionadded:: 2.2.0
      The collection of bools returned by ``get_pressed`` can not be iterated
      over because the indexes of the internal tuple does not correspond to the 
      keycodes.

   .. versionadded:: 2.5.0
      Iteration over the collection of bools returned by ``get_pressed`` is now
      restored. However it still does not make sense to iterate over it. Currently.

   .. ## pygame.key.get_pressed ##

.. function:: get_mods

   | :sl:`determine which modifier keys are being held`
   | :sg:`get_mods() -> int`

   Returns a single integer representing a bitmask of all the modifier keys
   being held. Using bitwise operators you can test if specific
   :ref:`modifier keys <key-modifiers-label>` are pressed.

   .. ## pygame.key.get_mods ##

.. function:: set_mods

   | :sl:`temporarily set which modifier keys are pressed`
   | :sg:`set_mods(int) -> None`

   Create a bitmask of the :ref:`modifier key constants <key-modifiers-label>`
   you want to impose on your program.

   .. ## pygame.key.set_mods ##

.. function:: set_repeat

   | :sl:`control how held keys are repeated`
   | :sg:`set_repeat() -> None`
   | :sg:`set_repeat(delay) -> None`
   | :sg:`set_repeat(delay, interval) -> None`

   When the keyboard repeat is enabled, keys that are held down will generate
   multiple ``pygame.KEYDOWN`` events. The ``delay`` parameter is the number of
   milliseconds before the first repeated ``pygame.KEYDOWN`` event will be sent.
   After that, another ``pygame.KEYDOWN`` event will be sent every ``interval``
   milliseconds. If a ``delay`` value is provided and an ``interval`` value is
   not provided or is 0, then the ``interval`` will be set to the same value as
   ``delay``.

   To disable key repeat call this function with no arguments or with ``delay``
   set to 0.

   When pygame is initialized the key repeat is disabled.

   :raises ValueError: if ``delay`` or ``interval`` is < 0

   .. versionchanged:: 2.0.0 A ``ValueError`` is now raised (instead of a
      ``pygame.error``) if ``delay`` or ``interval`` is < 0.

   .. ## pygame.key.set_repeat ##

.. function:: get_repeat

   | :sl:`see how held keys are repeated`
   | :sg:`get_repeat() -> (delay, interval)`

   Get the ``delay`` and ``interval`` keyboard repeat values. Refer to
   :func:`pygame.key.set_repeat()` for a description of these values.

   .. versionadded:: 1.8

   .. ## pygame.key.get_repeat ##

.. function:: name

   | :sl:`get the name of a key identifier`
   | :sg:`name(key, use_compat=True) -> str`

   Get the descriptive name of the button from a keyboard button id constant.
   Returns an empty string (``""``) if the key is not found.

   If ``use_compat`` argument is ``True`` (which is the default), this function
   returns the legacy name of a key where applicable. The return value is
   expected to be the same across different pygame versions (provided the
   corresponding key constant exists and is unique). If the return value is
   passed to the ``key_code`` function, the original constant will be returned.

   **Experimental:** ``use_compat`` parameter still in development for testing and feedback. It may change.
   `Please leave use_compat feedback with authors <https://github.com/pygame/pygame/pull/3312>`_

   If this argument is ``False``, the returned name may be prettier to display
   and may cover a wider range of keys than with ``use_compat``, but there are
   no guarantees that this name will be the same across different pygame
   versions. If the name returned is passed to the ``key_code`` function, the
   original constant is returned back (this is an implementation detail which
   may change later, do not rely on this)

   .. versionchanged:: 2.1.3 Added ``use_compat`` argument and guaranteed API stability for it

   .. ## pygame.key.name ##

.. function:: key_code

   | :sl:`get the key identifier from a key name`
   | :sg:`key_code(name=string) -> int`

   Get the key identifier code from the descriptive name of the key. This
   returns an integer matching one of the K_* keycodes. For example:

   ::

        >>> pygame.key.key_code("return") == pygame.K_RETURN
        True
        >>> pygame.key.key_code("0") == pygame.K_0
        True
        >>> pygame.key.key_code("space") == pygame.K_SPACE
        True

   :raises ValueError: if the key name is not known.

   .. versionadded:: 2.0.0

   .. ## pygame.key.key_code ##

.. function:: start_text_input

   | :sl:`start handling Unicode text input events`
   | :sg:`start_text_input() -> None`

   Start receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If applicable, show the on-screen keyboard or IME editor.

   For many languages, key presses will automatically generate a
   corresponding ``pygame.TEXTINPUT`` event. Special keys like
   escape or function keys, and certain key combinations will not
   generate ``pygame.TEXTINPUT`` events.

   In other languages, entering a single symbol may require multiple
   key presses, or a language-specific user interface. In this case,
   ``pygame.TEXTINPUT`` events are preferable to ``pygame.KEYDOWN``
   events for text input.

   A ``pygame.TEXTEDITING`` event is received when an IME composition
   is started or changed. It contains the composition ``text``, ``length``,
   and editing ``start`` position within the composition (attributes
   ``text``, ``length``, and ``start``, respectively).
   When the composition is committed (or non-IME input is received),
   a ``pygame.TEXTINPUT`` event is generated.

   Text input events handling is on by default.

   .. versionadded:: 2.0.0

   .. ## pygame.key.start_text_input ##

.. function:: stop_text_input

   | :sl:`stop handling Unicode text input events`
   | :sg:`stop_text_input() -> None`

   Stop receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If an on-screen keyboard or IME editor was shown with
   ``pygame.key.start_text_input()``, hide it again.

   Text input events handling is on by default.

   To avoid triggering the IME editor or the on-screen keyboard
   when the user is holding down a key during gameplay, text input
   should be disabled once text entry is finished, or when the user
   clicks outside of a text box.

   .. versionadded:: 2.0.0

   .. ## pygame.key.stop_text_input ##

.. function:: set_text_input_rect

   | :sl:`controls the position of the candidate list`
   | :sg:`set_text_input_rect(Rect) -> None`

   This sets the rectangle used for typing with an IME.
   It controls where the candidate list will open, if supported.

   .. versionadded:: 2.0.0

   .. ## pygame.key.set_text_input_rect ##

.. ## pygame.key ##


--- Contenu du fichier : pixelarray.rst.txt ---
.. include:: common.txt

:class:`pygame.PixelArray`
==========================

.. currentmodule:: pygame

.. class:: PixelArray

   | :sl:`pygame object for direct pixel access of surfaces`
   | :sg:`PixelArray(Surface) -> PixelArray`

   The PixelArray wraps a Surface and provides direct access to the
   surface's pixels. A pixel array can be one or two dimensional.
   A two dimensional array, like its surface, is indexed [column, row].
   Pixel arrays support slicing, both for returning a subarray or
   for assignment. A pixel array sliced on a single column or row
   returns a one dimensional pixel array. Arithmetic and other operations
   are not supported. A pixel array can be safely assigned to itself.
   Finally, pixel arrays export an array struct interface, allowing
   them to interact with :mod:`pygame.pixelcopy` methods and NumPy
   arrays.

   A PixelArray pixel item can be assigned a raw integer values, a
   :class:`pygame.Color` instance, or a (r, g, b[, a]) tuple.

   ::

     pxarray[x, y] = 0xFF00FF
     pxarray[x, y] = pygame.Color(255, 0, 255)
     pxarray[x, y] = (255, 0, 255)

   However, only a pixel's integer value is returned. So, to compare a pixel
   to a particular color the color needs to be first mapped using
   the :meth:`Surface.map_rgb()` method of the Surface object for which the
   PixelArray was created.

   ::

     pxarray = pygame.PixelArray(surface)
     # Check, if the first pixel at the topleft corner is blue
     if pxarray[0, 0] == surface.map_rgb((0, 0, 255)):
         ...

   When assigning to a range of of pixels, a non tuple sequence of colors or
   a PixelArray can be used as the value. For a sequence, the length must
   match the PixelArray width.

   ::

     pxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF
     pxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,
                                               # second pixel  = 0xAACCEE, ...
     pxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above
     pxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above
     pxarray[a:b] = otherarray[x:y]            # slice sizes must match

   For PixelArray assignment, if the right hand side array has a row length
   of 1, then the column is broadcast over the target array's rows. An
   array of height 1 is broadcast over the target's columns, and is equivalent
   to assigning a 1D PixelArray.

   Subscript slices can also be used to assign to a rectangular subview of
   the target PixelArray.

   ::

     # Create some new PixelArray objects providing a different view
     # of the original array/surface.
     newarray = pxarray[2:4, 3:5]
     otherarray = pxarray[::2, ::2]

   Subscript slices can also be used to do fast rectangular pixel manipulations
   instead of iterating over the x or y axis. The

   ::

     pxarray[::2, :] = (0, 0, 0)               # Make even columns black.
     pxarray[::2] = (0, 0, 0)                  # Same as [::2, :]

   During its lifetime, the PixelArray locks the surface, thus you explicitly
   have to close() it once its not used any more and the surface should perform
   operations in the same scope. It is best to use it as a context manager
   using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.

   A simple ``:`` slice index for the column can be omitted.

   ::

     pxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]
     pxarray[...] = (255, 0, 0)                # Same as pxarray[:]

   A note about PixelArray to PixelArray assignment, for arrays with an
   item size of 3 (created from 24 bit surfaces) pixel values are translated
   from the source to the destinations format. The red, green, and blue
   color elements of each pixel are shifted to match the format of the
   target surface. For all other pixel sizes no such remapping occurs.
   This should change in later pygame releases, where format conversions
   are performed for all pixel sizes. To avoid code breakage when full mapped
   copying is implemented it is suggested PixelArray to PixelArray copies be
   only between surfaces of identical format.

   .. versionadded:: 1.9.4

    - close() method was added. For explicitly cleaning up.
    - being able to use PixelArray as a context manager for cleanup.
    - both of these are useful for when working without reference counting (pypy).

   .. versionadded:: 1.9.2

    - array struct interface
    - transpose method
    - broadcasting for a length 1 dimension

   .. versionchanged:: 1.9.2

    - A 2D PixelArray can have a length 1 dimension.
      Only an integer index on a 2D PixelArray returns a 1D array.
    - For assignment, a tuple can only be a color. Any other sequence type
      is a sequence of colors.


   .. versionadded: 1.8.0
      Subscript support

   .. versionadded: 1.8.1
      Methods :meth:`make_surface`, :meth:`replace`, :meth:`extract`, and
      :meth:`compare`

   .. versionadded: 1.9.2
      Properties :attr:`itemsize`, :attr:`ndim`, :attr:`shape`,
      and :attr:`strides`

   .. versionadded: 1.9.2
      Array struct interface

   .. versionadded: 1.9.4
      Methods :meth:`close`

   .. attribute:: surface

      | :sl:`Gets the Surface the PixelArray uses.`
      | :sg:`surface -> Surface`

      The Surface the PixelArray was created for.

      .. ## PixelArray.surface ##

   .. attribute:: itemsize

      | :sl:`Returns the byte size of a pixel array item`
      | :sg:`itemsize -> int`

      This is the same as :meth:`Surface.get_bytesize` for the
      pixel array's surface.

      .. versionadded:: 1.9.2

   .. attribute:: ndim

      | :sl:`Returns the number of dimensions.`
      | :sg:`ndim -> int`

      A pixel array can be 1 or 2 dimensional.

      .. versionadded:: 1.9.2

   .. attribute:: shape

      | :sl:`Returns the array size.`
      | :sg:`shape -> tuple of int's`

      A tuple or length :attr:`ndim` giving the length of each
      dimension. Analogous to :meth:`Surface.get_size`.

      .. versionadded:: 1.9.2

   .. attribute:: strides

      | :sl:`Returns byte offsets for each array dimension.`
      | :sg:`strides -> tuple of int's`

      A tuple or length :attr:`ndim` byte counts. When a stride is
      multiplied by the corresponding index it gives the offset
      of that index from the start of the array. A stride is negative
      for an array that has is inverted (has a negative step).

      .. versionadded:: 1.9.2

   .. method:: make_surface

      | :sl:`Creates a new Surface from the current PixelArray.`
      | :sg:`make_surface() -> Surface`

      Creates a new Surface from the current PixelArray. Depending on the
      current PixelArray the size, pixel order etc. will be different from the
      original Surface.

      ::

        # Create a new surface flipped around the vertical axis.
        sf = pxarray[:,::-1].make_surface ()

      .. versionadded:: 1.8.1

      .. ## PixelArray.make_surface ##

   .. method:: replace

      | :sl:`Replaces the passed color in the PixelArray with another one.`
      | :sg:`replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -> None`

      Replaces the pixels with the passed color in the PixelArray by changing
      them them to the passed replacement color.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      replacement to take pixels with a similar, but not exactly identical
      color, into account as well.

      This is an in place operation that directly affects the pixels of the
      PixelArray.

      .. versionadded:: 1.8.1

      .. ## PixelArray.replace ##

   .. method:: extract

      | :sl:`Extracts the passed color from the PixelArray.`
      | :sg:`extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Extracts the passed color by changing all matching pixels to white, while
      non-matching pixels are changed to black. This returns a new PixelArray
      with the black/white color mask.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      extraction to take pixels with a similar, but not exactly identical
      color, into account as well.

      .. versionadded:: 1.8.1

      .. ## PixelArray.extract ##

   .. method:: compare

      | :sl:`Compares the PixelArray with another one.`
      | :sg:`compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Compares the contents of the PixelArray with those from the passed in
      PixelArray. It returns a new PixelArray with a black/white color mask
      that indicates the differences (black) of both arrays. Both PixelArray
      objects must have identical bit depths and dimensions.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as a threshold for the color detection. This causes the
      comparison to mark pixels with a similar, but not exactly identical
      color, as white.

      .. versionadded:: 1.8.1

      .. ## PixelArray.compare ##

   .. method:: transpose

      | :sl:`Exchanges the x and y axis.`
      | :sg:`transpose() -> PixelArray`

      This method returns a new view of the pixel array with the rows and
      columns swapped. So for a (w, h) sized array a (h, w) slice is returned.
      If an array is one dimensional, then a length 1 x dimension is added,
      resulting in a 2D pixel array.

      .. versionadded:: 1.9.2

      .. ## PixelArray.transpose ##

   .. method:: close

      | :sl:`Closes the PixelArray, and releases Surface lock.`
      | :sg:`close() -> PixelArray`

      This method is for explicitly closing the PixelArray, and releasing
      a lock on the Surface.

      .. versionadded:: 1.9.4

      .. ## PixelArray.close ##


   .. ## pygame.PixelArray ##


--- Contenu du fichier : freetype.rst.txt ---
.. include:: common.txt

:mod:`pygame.freetype`
======================

.. module:: pygame.freetype
   :synopsis: Enhanced pygame module for loading and rendering computer fonts

| :sl:`Enhanced pygame module for loading and rendering computer fonts`

The ``pygame.freetype`` module is a replacement for :mod:`pygame.font`.
It has all of the functionality of the original, plus many new features.
Yet is has absolutely no dependencies on the SDL_ttf library.
It is implemented directly on the FreeType 2 library.
The ``pygame.freetype`` module is not itself backward compatible with
:mod:`pygame.font`.
Instead, use the ``pygame.ftfont`` module as a drop-in replacement
for :mod:`pygame.font`.

All font file formats supported by FreeType can be rendered by
``pygame.freetype``, namely ``TTF``, Type1, ``CFF``, OpenType,
``SFNT``, ``PCF``, ``FNT``, ``BDF``, ``PFR`` and Type42 fonts.
All glyphs having UTF-32 code points are accessible
(see :attr:`Font.ucs4`).

Most work on fonts is done using :class:`Font` instances.
The module itself only has routines for initialization and creation
of :class:`Font` objects.
You can load fonts from the system using the :func:`SysFont` function.

Extra support of bitmap fonts is available. Available bitmap sizes can
be listed (see :meth:`Font.get_sizes`). For bitmap only fonts :class:`Font`
can set the size for you (see the :attr:`Font.size` property).

For now undefined character codes are replaced with the ``.notdef``
(not defined) character.
How undefined codes are handled may become configurable in a future release.

Pygame comes with a built-in default font. This can always be accessed by
passing None as the font name to the :class:`Font` constructor.

Extra rendering features available to :class:`pygame.freetype.Font`
are direct to surface rendering (see :meth:`Font.render_to`), character kerning
(see :attr:`Font.kerning`), vertical layout (see :attr:`Font.vertical`),
rotation of rendered text (see :attr:`Font.rotation`),
and the strong style (see :attr:`Font.strong`).
Some properties are configurable, such as
strong style strength (see :attr:`Font.strength`) and underline positioning
(see :attr:`Font.underline_adjustment`). Text can be positioned by the upper
right corner of the text box or by the text baseline (see :attr:`Font.origin`).
Finally, a font's vertical and horizontal size can be adjusted separately
(see :attr:`Font.size`).
The :any:`pygame.examples.freetype_misc <pygame.examples.freetype_misc.main>`
example shows these features in use.

The pygame package does not import ``freetype`` automatically when
loaded. This module must be imported explicitly to be used. ::

   import pygame
   import pygame.freetype

.. versionadded:: 1.9.2 :mod:`freetype`


.. function:: get_error

   | :sl:`Return the latest FreeType error`
   | :sg:`get_error() -> str`
   | :sg:`get_error() -> None`

   Return a description of the last error which occurred in the FreeType2
   library, or ``None`` if no errors have occurred.

.. function:: get_version

   | :sl:`Return the FreeType version`
   | :sg:`get_version(linked=True) -> (int, int, int)`

   Returns the version of the FreeType library in use by this module. ``linked=True``
   is the default behavior and returns the linked version of FreeType and ``linked=False``
   returns the compiled version of FreeType.

   Note that the ``freetype`` module depends on the FreeType 2 library.
   It will not compile with the original FreeType 1.0. Hence, the first element
   of the tuple will always be "2".

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

.. function:: init

   | :sl:`Initialize the underlying FreeType library.`
   | :sg:`init(cache_size=64, resolution=72) -> None`

   This function initializes the underlying FreeType library and must be
   called before trying to use any of the functionality of the ``freetype``
   module.

   However, :func:`pygame.init()` will automatically call this function
   if the ``freetype`` module is already imported. It is safe to call this
   function more than once.

   Optionally, you may specify a default *cache_size* for the Glyph cache: the
   maximum number of glyphs that will be cached at any given time by the
   module. Exceedingly small values will be automatically tuned for
   performance. Also a default pixel *resolution*, in dots per inch, can
   be given to adjust font scaling.

.. function:: quit

   | :sl:`Shut down the underlying FreeType library.`
   | :sg:`quit() -> None`

   This function closes the ``freetype`` module. After calling this
   function, you should not invoke any class, method or function related to the
   ``freetype`` module as they are likely to fail or might give unpredictable
   results. It is safe to call this function even if the module hasn't been
   initialized yet.

.. function:: get_init

   | :sl:`Returns True if the FreeType module is currently initialized.`
   | :sg:`get_init() -> bool`

   Returns ``True`` if the ``pygame.freetype`` module is currently initialized.

   .. versionadded:: 1.9.5

.. function:: was_init

   | :sl:`DEPRECATED: Use get_init() instead.`
   | :sg:`was_init() -> bool`

   DEPRECATED: Returns ``True`` if the ``pygame.freetype`` module is currently
   initialized. Use ``get_init()`` instead.

.. function:: get_cache_size

   | :sl:`Return the glyph case size`
   | :sg:`get_cache_size() -> long`

   See :func:`pygame.freetype.init()`.

.. function:: get_default_resolution

   | :sl:`Return the default pixel size in dots per inch`
   | :sg:`get_default_resolution() -> long`

   Returns the default pixel size, in dots per inch, for the module.
   The default is 72 DPI.

.. function:: set_default_resolution

   | :sl:`Set the default pixel size in dots per inch for the module`
   | :sg:`set_default_resolution([resolution])`

   Set the default pixel size, in dots per inch, for the module. If the
   optional argument is omitted or zero the resolution is reset to 72 DPI.

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested *bold* and *italic* flags. Pygame uses a small set of
   common font aliases. If the specific font you ask for is not available, a
   reasonable alternative may be used. If a suitable system font is not found
   this will fall back on loading the default pygame font.

   The font *name* can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

.. function:: get_default_font

   | :sl:`Get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the default pygame font. This is not the full path
   to the file. The file is usually in the same directory as the font module,
   but can also be bundled in a separate archive.

.. class:: Font

   | :sl:`Create a new Font instance from a supported font file.`
   | :sg:`Font(file, size=0, font_index=0, resolution=0, ucs4=False) -> Font`
   | :sg:`Font(pathlib.Path) -> Font`

   Argument *file* can be either a string representing the font's filename, a
   file-like object containing the font, or None; if None, a default,
   Pygame, font is used.

   .. _freetype-font-size-argument:

   Optionally, a *size* argument may be specified to set the default size in
   points, which determines the size of the rendered characters.
   The size can also be passed explicitly to each method call.
   Because of the way the caching   system works, specifying a default size on
   the constructor doesn't imply a performance gain over manually passing
   the size on each function call. If the font is bitmap and no *size*
   is given, the default size is set to the first available size for the font.

   If the font file has more than one font, the font to load can be chosen with
   the *index* argument. An exception is raised for an out-of-range font index
   value.

   The optional *resolution* argument sets the pixel size, in dots per inch,
   for use in scaling glyphs for this Font instance. If 0 then the default
   module value, set by :func:`init`, is used. The Font object's
   resolution can only be changed by re-initializing the Font instance.

   The optional *ucs4* argument, an integer, sets the default text translation
   mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True),
   to treat Unicode text as UCS-4, with no surrogate pairs. See
   :attr:`Font.ucs4`.

   .. attribute:: name

      | :sl:`Proper font name.`
      | :sg:`name -> string`

      Read only. Returns the real (long) name of the font, as
      recorded in the font file.

   .. attribute:: path

      | :sl:`Font file path`
      | :sg:`path -> unicode`

      Read only. Returns the path of the loaded font file

   .. attribute:: size

      | :sl:`The default point size used in rendering`
      | :sg:`size -> float`
      | :sg:`size -> (float, float)`

      Get or set the default size for text metrics and rendering. It can be
      a single point size, given as a Python ``int`` or ``float``, or a
      font ppem (width, height) ``tuple``. Size values are non-negative.
      A zero size or width represents an undefined size. In this case
      the size must be given as a method argument, or an exception is
      raised. A zero width but non-zero height is a ValueError.

      For a scalable font, a single number value is equivalent to a tuple
      with width equal height. A font can be stretched vertically with
      height set greater than width, or horizontally with width set
      greater than height. For embedded bitmaps, as listed by :meth:`get_sizes`,
      use the nominal width and height to select an available size.

      Font size differs for a non-scalable, bitmap, font. During a
      method call it must match one of the available sizes returned by
      method :meth:`get_sizes`. If not, an exception is raised.
      If the size is a single number, the size is first matched against the
      point size value. If no match, then the available size with the
      same nominal width and height is chosen.

   .. method:: get_rect

      | :sl:`Return the size and offset of rendered text`
      | :sg:`get_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -> rect`

      Gets the final dimensions and origin, in pixels, of *text* using the
      optional *size* in points, *style*, and *rotation*. For other
      relevant render properties, and for any optional argument not given,
      the default values set for the :class:`Font` instance are used.

      Returns a :class:`Rect <pygame.Rect>` instance containing the
      width and height of the text's bounding box and the position of the
      text's origin.
      The origin is useful in aligning separately rendered pieces of text.
      It gives the baseline position and bearing at the start of the text.
      See the :meth:`render_to` method for an example.

      If *text* is a char (byte) string, its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will return the bounding
      rectangle for the text passed to a previous :meth:`get_rect`,
      :meth:`render`, :meth:`render_to`, :meth:`render_raw`, or
      :meth:`render_raw_to` call. See :meth:`render_to` for more
      details.

   .. method:: get_metrics

      | :sl:`Return the glyph metrics for the given text`
      | :sg:`get_metrics(text, size=0) -> [(...), ...]`

      Returns the glyph metrics for each character in *text*.

      The glyph metrics are returned as a list of tuples. Each tuple gives
      metrics of a single character glyph. The glyph metrics are:

      ::

          (min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)

      The bounding box min_x, max_x, min_y, and max_y values are returned as
      grid-fitted pixel coordinates of type int. The advance values are
      float values.

      The calculations are done using the font's default size in points.
      Optionally you may specify another point size with the *size* argument.

      The metrics are adjusted for the current rotation, strong, and oblique
      settings.

      If text is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. attribute:: height

      | :sl:`The unscaled height of the font in font units`
      | :sg:`height -> int`

      Read only. Gets the height of the font. This is the average value of all
      glyphs in the font.

   .. attribute:: ascender

      | :sl:`The unscaled ascent of the font in font units`
      | :sg:`ascender -> int`

      Read only. Return the number of units from the font's baseline to
      the top of the bounding box.

   .. attribute:: descender

      | :sl:`The unscaled descent of the font in font units`
      | :sg:`descender -> int`

      Read only. Return the height in font units for the font descent.
      The descent is the number of units from the font's baseline to the
      bottom of the bounding box.

   .. method:: get_sized_ascender

      | :sl:`The scaled ascent of the font in pixels`
      | :sg:`get_sized_ascender(<size>=0) -> int`

      Return the number of units from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_descender

      | :sl:`The scaled descent of the font in pixels`
      | :sg:`get_sized_descender(<size>=0) -> int`

      Return the number of pixels from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_height

      | :sl:`The scaled height of the font in pixels`
      | :sg:`get_sized_height(<size>=0) -> int`

      Returns the height of the font. This is the average value of all
      glyphs in the font. It is not adjusted for strong or rotation.

   .. method:: get_sized_glyph_height

      | :sl:`The scaled bounding box height of the font in pixels`
      | :sg:`get_sized_glyph_height(<size>=0) -> int`

      Return the glyph bounding box height of the font in pixels.
      This is the average value of all glyphs in the font.
      It is not adjusted for strong or rotation.

   .. method:: get_sizes

      | :sl:`return the available sizes of embedded bitmaps`
      | :sg:`get_sizes() -> [(int, int, int, float, float), ...]`
      | :sg:`get_sizes() -> []`

      Returns a list of tuple records, one for each point size
      supported. Each tuple containing the point size, the height in pixels,
      width in pixels, horizontal ppem (nominal width) in fractional pixels,
      and vertical ppem (nominal height) in fractional pixels.

   .. method:: render

      | :sl:`Return rendered text as a surface`
      | :sg:`render(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> (Surface, Rect)`

      Returns a new :class:`Surface <pygame.Surface>`,
      with the text rendered to it
      in the color given by 'fgcolor'. If no foreground color is given,
      the default foreground color, :attr:`fgcolor <Font.fgcolor>` is used.
      If ``bgcolor`` is given, the surface
      will be filled with this color. When no background color is given,
      the surface background is transparent, zero alpha. Normally the returned
      surface has a 32 bit pixel size. However, if ``bgcolor`` is ``None``
      and anti-aliasing is disabled a monochrome 8 bit colorkey surface,
      with colorkey set for the background color, is returned.

      The return value is a tuple: the new surface and the bounding
      rectangle giving the size and origin of the rendered text.

      If an empty string is passed for text then the returned Rect is zero
      width and the height of the font.

      Optional *fgcolor*, *style*, *rotation*, and *size* arguments override
      the default values set for the :class:`Font` instance.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will render the text
      passed to a previous :meth:`get_rect`, :meth:`render`, :meth:`render_to`,
      :meth:`render_raw`, or :meth:`render_raw_to` call.
      See :meth:`render_to` for details.

   .. method:: render_to

      | :sl:`Render text onto an existing surface`
      | :sg:`render_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> Rect`

      Renders the string *text* to the :mod:`pygame.Surface` *surf*,
      at position *dest*, a (x, y) surface coordinate pair.
      If either x or y is not an integer it is converted to one if possible.
      Any sequence where the first two items are x and y positional elements
      is accepted, including a :class:`Rect <pygame.Rect>` instance.
      As with :meth:`render`,
      optional *fgcolor*, *style*, *rotation*, and *size* argument are
      available.

      If a background color *bgcolor* is given, the text bounding box is
      first filled with that color. The text is blitted next.
      Both the background fill and text rendering involve full alpha blits.
      That is, the alpha values of the foreground, background, and destination
      target surface all affect the blit.

      The return value is a rectangle giving the size and position of the
      rendered text within the surface.

      If an empty string is passed for text then the returned
      :class:`Rect <pygame.Rect>` is zero width and the height of the font.
      The rect will test False.

      Optionally, *text* can be set ``None``, which will re-render text
      passed to a previous :meth:`render_to`, :meth:`get_rect`, :meth:`render`,
      :meth:`render_raw`, or :meth:`render_raw_to` call. Primarily, this
      feature is an aid to using :meth:`render_to` in combination with
      :meth:`get_rect`. An example: ::

          def word_wrap(surf, text, font, color=(0, 0, 0)):
              font.origin = True
              words = text.split(' ')
              width, height = surf.get_size()
              line_spacing = font.get_sized_height() + 2
              x, y = 0, line_spacing
              space = font.get_rect(' ')
              for word in words:
                  bounds = font.get_rect(word)
                  if x + bounds.width + bounds.x >= width:
                      x, y = 0, y + line_spacing
                  if x + bounds.width + bounds.x >= width:
                      raise ValueError("word too wide for the surface")
                  if y + bounds.height - bounds.y >= height:
                      raise ValueError("text to long for the surface")
                  font.render_to(surf, (x, y), None, color)
                  x += bounds.width + space.width
              return x, y

      When :meth:`render_to` is called with the same
      font properties ― :attr:`size`, :attr:`style`, :attr:`strength`,
      :attr:`wide`, :attr:`antialiased`, :attr:`vertical`, :attr:`rotation`,
      :attr:`kerning`, and :attr:`use_bitmap_strikes` ― as :meth:`get_rect`,
      :meth:`render_to` will use the layout calculated by :meth:`get_rect`.
      Otherwise, :meth:`render_to` will recalculate the layout if called
      with a text string or one of the above properties has changed
      after the :meth:`get_rect` call.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. method:: render_raw

      | :sl:`Return rendered text as a string of bytes`
      | :sg:`render_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> (bytes, (int, int))`

      Like :meth:`render` but with the pixels returned as a byte string
      of 8-bit gray-scale values. The foreground color is 255, the
      background 0, useful as an alpha mask for a foreground pattern.

   .. method:: render_raw_to

      | :sl:`Render text into an array of ints`
      | :sg:`render_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> Rect`

      Render to an array object exposing an array struct interface. The array
      must be two dimensional with integer items. The default *dest* value,
      ``None``, is equivalent to position (0, 0). See :meth:`render_to`.
      As with the other render methods, *text* can be ``None`` to
      render a text string passed previously to another method.

      The return value is a :func:`pygame.Rect` giving the size and position of
      the rendered text.

   .. attribute:: style

      | :sl:`The font's style flags`
      | :sg:`style -> int`

      Gets or sets the default style of the Font. This default style will be
      used for all text rendering and size calculations unless overridden
      specifically a render or :meth:`get_rect` call.
      The style value may be a bit-wise OR of one or more of the following
      constants:

      ::

          STYLE_NORMAL
          STYLE_UNDERLINE
          STYLE_OBLIQUE
          STYLE_STRONG
          STYLE_WIDE
          STYLE_DEFAULT

      These constants may be found on the FreeType constants module.
      Optionally, the default style can be modified or obtained accessing the
      individual style attributes (underline, oblique, strong).

      The ``STYLE_OBLIQUE`` and ``STYLE_STRONG`` styles are for
      scalable fonts only. An attempt to set either for a bitmap font raises
      an AttributeError. An attempt to set either for an inactive font,
      as returned by ``Font.__new__()``, raises a RuntimeError.

      Assigning ``STYLE_DEFAULT`` to the :attr:`style` property leaves
      the property unchanged, as this property defines the default.
      The :attr:`style` property will never return ``STYLE_DEFAULT``.

   .. attribute:: underline

      | :sl:`The state of the font's underline style flag`
      | :sg:`underline -> bool`

      Gets or sets whether the font will be underlined when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: strong

      | :sl:`The state of the font's strong style flag`
      | :sg:`strong -> bool`

      Gets or sets whether the font will be bold when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: oblique

      | :sl:`The state of the font's oblique style flag`
      | :sg:`oblique -> bool`

      Gets or sets whether the font will be rendered as oblique. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the *style* parameter.

      The oblique style is only supported for scalable (outline) fonts.
      An attempt to set this style on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, setting this property raises a RuntimeError.

   .. attribute:: wide

      | :sl:`The state of the font's wide style flag`
      | :sg:`wide -> bool`

      Gets or sets whether the font will be stretched horizontally
      when drawing text. It produces a result similar to
      :class:`pygame.font.Font`'s bold. This style not available for
      rotated text.

   .. attribute:: strength

      | :sl:`The strength associated with the strong or wide font styles`
      | :sg:`strength -> float`

      The amount by which a font glyph's size is enlarged for the
      strong or wide transformations, as a fraction of the untransformed
      size. For the wide style only the horizontal dimension is
      increased. For strong text both the horizontal and vertical
      dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is
      equivalent to the :class:`pygame.font.Font` bold style.
      The default is 0.02778 ( 1/36 ).

      The strength style is only supported for scalable (outline) fonts.
      An attempt to set this property on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, assignment to this property raises a RuntimeError.

   .. attribute:: underline_adjustment

      | :sl:`Adjustment factor for the underline position`
      | :sg:`underline_adjustment -> float`

      Gets or sets a factor which, when positive, is multiplied with the
      font's underline offset to adjust the underline position. A negative
      value turns an underline into a strike-through or overline. It is
      multiplied with the ascender. Accepted values range between -2.0 and 2.0
      inclusive. A value of 0.5 closely matches Tango underlining. A value of
      1.0 mimics :class:`pygame.font.Font` underlining.

   .. attribute:: fixed_width

      | :sl:`Gets whether the font is fixed-width`
      | :sg:`fixed_width -> bool`

      Read only. Returns ``True`` if the font contains fixed-width
      characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).

   .. attribute:: fixed_sizes

      | :sl:`the number of available bitmap sizes for the font`
      | :sg:`fixed_sizes -> int`

      Read only. Returns the number of point sizes for which the font contains
      bitmap character images. If zero then the font is not a bitmap font.
      A scalable font may contain pre-rendered point sizes as strikes.

   .. attribute:: scalable

      | :sl:`Gets whether the font is scalable`
      | :sg:`scalable -> bool`

      Read only. Returns ``True`` if the font contains outline glyphs.
      If so, the point size is not limited to available bitmap sizes.

   .. attribute:: use_bitmap_strikes

      | :sl:`allow the use of embedded bitmaps in an outline font file`
      | :sg:`use_bitmap_strikes -> bool`

      Some scalable fonts include embedded bitmaps for particular point
      sizes. This property controls whether or not those bitmap strikes
      are used. Set it ``False`` to disable the loading of any bitmap
      strike. Set it ``True``, the default, to permit bitmap strikes
      for a non-rotated render with no style other than :attr:`wide` or
      :attr:`underline`. This property is ignored for bitmap fonts.

      See also :attr:`fixed_sizes` and :meth:`get_sizes`.

   .. attribute:: antialiased

      | :sl:`Font anti-aliasing mode`
      | :sg:`antialiased -> bool`

      Gets or sets the font's anti-aliasing mode. This defaults to
      ``True`` on all fonts, which are rendered with full 8 bit blending.

      Set to ``False`` to do monochrome rendering. This should
      provide a small speed gain and reduce cache memory size.

   .. attribute:: kerning

      | :sl:`Character kerning mode`
      | :sg:`kerning -> bool`

      Gets or sets the font's kerning mode. This defaults to ``False``
      on all fonts, which will be rendered without kerning.

      Set to ``True`` to add kerning between character pairs, if supported
      by the font, when positioning glyphs.

   .. attribute:: vertical

      | :sl:`Font vertical mode`
      | :sg:`vertical -> bool`

      Gets or sets whether the characters are laid out vertically rather
      than horizontally. May be useful when rendering Kanji or some other
      vertical script.

      Set to ``True`` to switch to a vertical text layout. The default
      is ``False``, place horizontally.

      Note that the :class:`Font` class does not automatically determine
      script orientation. Vertical layout must be selected explicitly.

      Also note that several font formats (especially bitmap based ones) don't
      contain the necessary metrics to draw glyphs vertically, so drawing in
      those cases will give unspecified results.

   .. attribute:: rotation

      | :sl:`text rotation in degrees counterclockwise`
      | :sg:`rotation -> int`

      Gets or sets the baseline angle of the rendered text. The angle is
      represented as integer degrees. The default angle is 0, with horizontal
      text rendered along the X-axis, and vertical text along the Y-axis.
      A positive value rotates these axes counterclockwise that many degrees.
      A negative angle corresponds to a clockwise rotation. The rotation
      value is normalized to a value within the range 0 to 359 inclusive
      (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,
      720 -> 720 - (2 * 360) -> 0).

      Only scalable (outline) fonts can be rotated. An attempt to change
      the rotation of a bitmap font raises an AttributeError.
      An attempt to change the rotation of an inactive font instance, as
      returned by ``Font.__new__()``, raises a RuntimeError.

   .. attribute:: fgcolor

      | :sl:`default foreground color`
      | :sg:`fgcolor -> Color`

      Gets or sets the default glyph rendering color. It is initially opaque
      black ― (0, 0, 0, 255). Applies to :meth:`render` and :meth:`render_to`.

   .. attribute:: bgcolor

      | :sl:`default background color`
      | :sg:`bgcolor -> Color`

      Gets or sets the default background rendering color. Initially it is
      unset and text will render with a transparent background by default.
      Applies to :meth:`render` and :meth:`render_to`.

   .. versionadded:: 2.0.0

   .. attribute:: origin

      | :sl:`Font render to text origin mode`
      | :sg:`origin -> bool`

      If set ``True``, :meth:`render_to` and :meth:`render_raw_to` will
      take the *dest* position to be that of the text origin, as opposed to
      the top-left corner of the bounding box. See :meth:`get_rect` for
      details.

   .. attribute:: pad

      | :sl:`padded boundary mode`
      | :sg:`pad -> bool`

      If set ``True``, then the text boundary rectangle will be inflated
      to match that of :class:`font.Font <pygame.font.Font>`.
      Otherwise, the boundary rectangle is just large enough for the text.

   .. attribute:: ucs4

      | :sl:`Enable UCS-4 mode`
      | :sg:`ucs4 -> bool`

      Gets or sets the decoding of Unicode text. By default, the
      freetype module performs UTF-16 surrogate pair decoding on Unicode text.
      This allows 32-bit escape sequences ('\Uxxxxxxxx') between 0x10000 and
      0x10FFFF to represent their corresponding UTF-32 code points on Python
      interpreters built with a UCS-2 Unicode type (on Windows, for instance).
      It also means character values within the UTF-16 surrogate area (0xD800
      to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate
      pair will raise a UnicodeEncodeError. Setting ucs4 ``True`` turns
      surrogate pair decoding off, allowing access the full UCS-4 character
      range to a Python interpreter built with four-byte Unicode character
      support.

   .. attribute:: resolution

      | :sl:`Pixel resolution in dots per inch`
      | :sg:`resolution -> int`

      Read only. Gets pixel size used in scaling font glyphs for this
      :class:`Font` instance.


--- Contenu du fichier : image.rst.txt ---
.. include:: common.txt

:mod:`pygame.image`
===================

.. module:: pygame.image
   :synopsis: pygame module for loading and saving images

| :sl:`pygame module for image transfer`

The image module contains functions for loading and saving pictures, as well as
transferring Surfaces to formats usable by other packages.

Note that there is no Image class; an image is loaded as a Surface object. The
Surface class allows manipulation (drawing lines, setting pixels, capturing
regions, etc.).

In the vast majority of installations, pygame is built to support extended
formats, using the SDL_Image library behind the scenes. However, some
installations may only support uncompressed ``BMP`` images. With full image
support, the :func:`pygame.image.load()` function can load the following
formats.

   * ``BMP``

   * ``GIF`` (non-animated)

   * ``JPEG``

   * ``LBM`` (and ``PBM``, ``PGM``, ``PPM``)

   * ``PCX``

   * ``PNG``
   
   * ``PNM``

   * ``SVG`` (limited support, using Nano SVG)

   * ``TGA`` (uncompressed)

   * ``TIFF``

   * ``WEBP``

   * ``XPM``
   
   
.. versionadded:: 2.0 Loading SVG, WebP, PNM

Saving images only supports a limited set of formats. You can save to the
following formats.

   * ``BMP``

   * ``JPEG``

   * ``PNG``

   * ``TGA``
   

``JPEG`` and ``JPG``, as well as ``TIF`` and ``TIFF`` refer to the same file format

.. versionadded:: 1.8 Saving PNG and JPEG files.


.. function:: load

   | :sl:`load new image from a file (or file-like object)`
   | :sg:`load(filename) -> Surface`
   | :sg:`load(fileobj, namehint="") -> Surface`

   Load an image from a file source. You can pass either a filename, a Python
   file-like object, or a pathlib.Path.

   Pygame will automatically determine the image type (e.g., ``GIF`` or bitmap)
   and create a new Surface object from the data. In some cases it will need to
   know the file extension (e.g., ``GIF`` images should end in ".gif"). If you
   pass a raw file-like object, you may also want to pass the original filename
   as the namehint argument.

   The returned Surface will contain the same color format, colorkey and alpha
   transparency as the file it came from. You will often want to call
   :func:`pygame.Surface.convert()` with no arguments, to create a copy that
   will draw more quickly on the screen.

   For alpha transparency, like in .png images, use the
   :func:`pygame.Surface.convert_alpha()` method after loading so that the
   image has per pixel transparency.

   Pygame may not always be built to support all image formats. At minimum it
   will support uncompressed ``BMP``. If :func:`pygame.image.get_extended()`
   returns ``True``, you should be able to load most images (including PNG, JPG
   and GIF).

   You should use :func:`os.path.join()` for compatibility.

   ::

     eg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))

   .. ## pygame.image.load ##

.. function:: save

   | :sl:`save an image to file (or file-like object)`
   | :sg:`save(Surface, filename) -> None`
   | :sg:`save(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``BMP``, ``TGA``, ``PNG``, or
   ``JPEG`` image. If the filename extension is unrecognized it will default to
   ``TGA``. Both ``TGA``, and ``BMP`` file formats create uncompressed files.
   You can pass a filename, a pathlib.Path or a Python file-like object.
   For file-like object, the image is saved to ``TGA`` format unless
   a namehint with a recognizable extension is passed in.

   .. note:: When saving to a file-like object, it seems that for most formats,
             the object needs to be flushed after saving to it to make loading
             from it possible.

   .. versionchanged:: 1.8 Saving PNG and JPEG files.
   .. versionchanged:: 2.0.0
                       The ``namehint`` parameter was added to make it possible
                       to save other formats than ``TGA`` to a file-like object.
                       Saving to a file-like object with JPEG is possible.

   .. ## pygame.image.save ##

.. function:: get_sdl_image_version

   | :sl:`get version number of the SDL_Image library being used`
   | :sg:`get_sdl_image_version(linked=True) -> None`
   | :sg:`get_sdl_image_version(linked=True) -> (major, minor, patch)`

   If pygame is built with extended image formats, then this function will
   return the SDL_Image library's version number as a tuple of 3 integers
   ``(major, minor, patch)``. If not, then it will return ``None``.

   ``linked=True`` is the default behavior and the function will return the
   version of the library that Pygame is linked against, while ``linked=False``
   will return the version of the library that Pygame is compiled against.

   .. versionadded:: 2.0.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

   .. ## pygame.image.get_sdl_image_version ##

.. function:: get_extended

   | :sl:`test if extended image formats can be loaded`
   | :sg:`get_extended() -> bool`

   If pygame is built with extended image formats this function will return
   True. It is still not possible to determine which formats will be available,
   but generally you will be able to load them all.

   .. ## pygame.image.get_extended ##

.. function:: tostring

   | :sl:`transfer image to byte buffer`
   | :sg:`tostring(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first

   .. note:: it is preferred to use :func:`tobytes` as of pygame 2.1.3

   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.tostring ##

.. function:: tobytes

   | :sl:`transfer image to byte buffer`
   | :sg:`tobytes(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped      

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first
   
   .. note:: this function is an alias for :func:`tostring`. The use of this
             function is recommended over :func:`tostring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.tobytes ##


.. function:: fromstring

   | :sl:`create new Surface from a byte buffer`
   | :sg:`fromstring(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tostring()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: it is preferred to use :func:`frombytes` as of pygame 2.1.3

   .. ## pygame.image.fromstring ##

.. function:: frombytes

   | :sl:`create new Surface from a byte buffer`
   | :sg:`frombytes(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tobytes()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: this function is an alias for :func:`fromstring`. The use of this
             function is recommended over :func:`fromstring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.frombytes ##

.. function:: frombuffer

   | :sl:`create a new Surface that shares data inside a bytes buffer`
   | :sg:`frombuffer(buffer, size, format) -> Surface`

   Create a new Surface that shares pixel data directly from a buffer. This
   buffer can be bytes, a bytearray, a memoryview, a
   :class:`pygame.BufferProxy`, or any object that supports the buffer protocol.
   This method takes similar arguments to :func:`pygame.image.fromstring()`, but
   is unable to vertically flip the source data.

   This will run much faster than :func:`pygame.image.fromstring`, since no
   pixel data must be allocated and copied.

   It accepts the following 'format' arguments:

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``BGR``, 24-bit image, red and blue channels swapped.

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first

      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped
  
   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.frombuffer ##

.. function:: load_basic

   | :sl:`load new BMP image from a file (or file-like object)`
   | :sg:`load_basic(file) -> Surface`

   Load an image from a file source. You can pass either a filename or a Python
   file-like object, or a pathlib.Path.

   This function only supports loading "basic" image format, ie ``BMP``
   format.
   This function is always available, no matter how pygame was built.

   .. ## pygame.image.load_basic ##

.. function:: load_extended

   | :sl:`load an image from a file (or file-like object)`
   | :sg:`load_extended(filename) -> Surface`
   | :sg:`load_extended(fileobj, namehint="") -> Surface`

   This function is similar to :func:`pygame.image.load()`, except that this
   function can only be used if pygame was built with extended image format
   support.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.load_extended ##

.. function:: save_extended

   | :sl:`save a png/jpg image to file (or file-like object)`
   | :sg:`save_extended(Surface, filename) -> None`
   | :sg:`save_extended(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``PNG`` or ``JPEG`` image.

   In case the image is being saved to a file-like object, this function
   uses the namehint argument to determine the format of the file being
   saved. Saves to ``JPEG`` in case the namehint was not specified while
   saving to a file-like object.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.save_extended ##

.. ## pygame.image ##


--- Contenu du fichier : draw.rst.txt ---
.. include:: common.txt

:mod:`pygame.draw`
==================

.. module:: pygame.draw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

Draw several simple shapes to a surface. These functions will work for
rendering to any format of surface.

Most of the functions take a width argument to represent the size of stroke
(thickness) around the edge of the shape. If a width of 0 is passed the shape
will be filled (solid).

All the drawing functions respect the clip area for the surface and will be
constrained to that area. The functions return a rectangle representing the
bounding area of changed pixels. This bounding rectangle is the 'minimum'
bounding box that encloses the affected area.

All the drawing functions accept a color argument that can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)
   - an integer value that has been mapped to the surface's pixel format
     (see :func:`pygame.Surface.map_rgb` and :func:`pygame.Surface.unmap_rgb`)

A color's alpha value will be written directly into the surface (if the
surface contains pixel alphas), but the draw function will not draw
transparently.

These functions temporarily lock the surface they are operating on. Many
sequential drawing calls can be sped up by locking and unlocking the surface
object around the draw calls (see :func:`pygame.Surface.lock` and
:func:`pygame.Surface.unlock`).

.. note ::
   See the :mod:`pygame.gfxdraw` module for alternative draw methods.


.. function:: rect

   | :sl:`draw a rectangle`
   | :sg:`rect(surface, color, rect) -> Rect`
   | :sg:`rect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect`

   Draws a rectangle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to draw, position and dimensions
   :param int width: (optional) used for line thickness or to indicate that
      the rectangle is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the rectangle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |
      
      .. versionchanged:: 2.1.1 
          Drawing rects with width now draws the width correctly inside the 
          rect's area, rather than using an internal call to draw.lines(), 
          which had half the width spill outside the rect area.

   :param int border_radius: (optional) used for drawing rectangle with rounded corners.
      The supported range is [0, min(height, width) / 2], with 0 representing a rectangle
      without rounded corners.
   :param int border_top_left_radius: (optional) used for setting the value of top left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_top_right_radius: (optional) used for setting the value of top right
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_left_radius: (optional) used for setting the value of bottom left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_right_radius: (optional) used for setting the value of bottom right
      border. If you don't set this value, it will use the border_radius value.

         | if ``border_radius < 1`` it will draw rectangle without rounded corners
         | if any of border radii has the value ``< 0`` it will use value of the border_radius
         | If sum of radii on the same side of the rectangle is greater than the rect size the radii
         | will get scaled

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. note::
      The :func:`pygame.Surface.fill()` method works just as well for drawing
      filled rectangles and can be hardware accelerated on some platforms.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
   .. versionchanged:: 2.0.0.dev8 Added support for border radius.

   .. ## pygame.draw.rect ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, color, points) -> Rect`
   | :sg:`polygon(surface, color, points, width=0) -> Rect`

   Draws a polygon on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param points: a sequence of 3 or more (x, y) coordinates that make up the
      vertices of the polygon, each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats,
      e.g. ``[(x1, y1), (x2, y2), (x3, y3)]``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness or to indicate that
      the polygon is to be filled

         | if width == 0, (default) fill the polygon
         | if width > 0, used for line thickness
         | if width < 0, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will grow
            outside the original boundary of the polygon. For more details on
            how the thickness for edge lines grow, refer to the ``width`` notes
            of the :func:`pygame.draw.line` function.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. note::
       For an aapolygon, use :func:`aalines()` with ``closed=True``.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.polygon ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, color, center, radius) -> Rect`
   | :sg:`circle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect`

   Draws a circle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param center: center point of the circle as a sequence of 2 ints/floats,
      e.g. ``(x, y)``
   :type center: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param radius: radius of the circle, measured from the ``center`` parameter,
      nothing will be drawn if the ``radius`` is less than 1
   :type radius: int or float
   :param int width: (optional) used for line thickness or to indicate that
      the circle is to be filled

         | if ``width == 0``, (default) fill the circle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward.
   :param bool draw_top_right: (optional) if this is set to True then the top right corner
      of the circle will be drawn
   :param bool draw_top_left: (optional) if this is set to True then the top left corner
      of the circle will be drawn
   :param bool draw_bottom_left: (optional) if this is set to True then the bottom left corner
      of the circle will be drawn
   :param bool draw_bottom_right: (optional) if this is set to True then the bottom right corner
      of the circle will be drawn

         | if any of the draw_circle_part is True then it will draw all circle parts that have the True
         | value, otherwise it will draw the entire circle.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``center`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``center`` is not a sequence of two numbers
   :raises TypeError: if ``radius`` is not a number

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
      Nothing is drawn when the radius is 0 (a pixel at the ``center`` coordinates
      used to be drawn when the radius equaled 0).
      Floats, and Vector2 are accepted for the ``center`` param.
      The drawing algorithm was improved to look more like a circle.
   .. versionchanged:: 2.0.0.dev8 Added support for drawing circle quadrants.

   .. ## pygame.draw.circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, color, rect) -> Rect`
   | :sg:`ellipse(surface, color, rect, width=0) -> Rect`

   Draws an ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse, the ellipse will be centered inside the rectangle and bounded
      by it
   :param int width: (optional) used for line thickness or to indicate that
      the ellipse is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the ellipse
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.ellipse ##

.. function:: arc

   | :sl:`draw an elliptical arc`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle) -> Rect`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect`

   Draws an elliptical arc on the given surface.

   The two angle arguments are given in radians and indicate the start and stop
   positions of the arc. The arc is drawn in a counterclockwise direction from
   the ``start_angle`` to the ``stop_angle``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse which the arc will be based on, the ellipse will be centered
      inside the rectangle
   :param float start_angle: start angle of the arc in radians
   :param float stop_angle: stop angle of the arc in
      radians

         | if ``start_angle < stop_angle``, the arc is drawn in a
            counterclockwise direction from the ``start_angle`` to the
            ``stop_angle``
         | if ``start_angle > stop_angle``, tau (tau == 2 * pi) will be added
            to the ``stop_angle``, if the resulting stop angle value is greater
            than the ``start_angle`` the above ``start_angle < stop_angle`` case
            applies, otherwise nothing will be drawn
         | if ``start_angle == stop_angle``, nothing will be drawn
         |

   :param int width: (optional) used for line thickness (not to be confused
      with the width value of the ``rect`` parameter)

         | if ``width == 0``, nothing will be drawn
         | if ``width > 0``, (default is 1) used for line thickness
         | if ``width < 0``, same as ``width == 0``

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.arc ##

.. function:: line

   | :sl:`draw a straight line`
   | :sg:`line(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`line(surface, color, start_pos, end_pos, width=1) -> Rect`

   Draws a straight line on the given surface. There are no endcaps. For thick
   lines the ends are squared off.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, lines will grow as follows.

            For odd ``width`` values, the thickness of each line grows with the
            original line being in the center.

            For even ``width`` values, the thickness of each line grows with the
            original line being offset from the center (as there is no exact
            center line drawn). As a result, lines with a slope < 1
            (horizontal-ish) will have 1 more pixel of thickness below the
            original line (in the y direction). Lines with a slope >= 1
            (vertical-ish) will have 1 more pixel of thickness to the right of
            the original line (in the x direction).

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.line ##

.. function:: lines

   | :sl:`draw multiple contiguous straight line segments`
   | :sg:`lines(surface, color, closed, points) -> Rect`
   | :sg:`lines(surface, color, closed, points, width=1) -> Rect`

   Draws a sequence of contiguous straight lines on the given surface. There are
   no endcaps or miter joints. For thick lines the ends are squared off.
   Drawing thick lines with sharp corners can have undesired looking results.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1`` refer to the ``width`` notes
            of :func:`line` for details on how thick lines grow.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.lines ##

.. function:: aaline

   | :sl:`draw a straight antialiased line`
   | :sg:`aaline(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`aaline(surface, color, start_pos, end_pos, blend=1) -> Rect`

   Draws a straight antialiased line on the given surface.

   The line has a thickness of one pixel and the endpoints have a height and
   width of one pixel each.

   The way a line and its endpoints are drawn:
      If both endpoints are equal, only a single pixel is drawn (after
      rounding floats to nearest integer).

      Otherwise if the line is not steep (i.e. if the length along the x-axis
      is greater than the height along the y-axis):

         For each endpoint:

            If ``x``, the endpoint's x-coordinate, is a whole number find
            which pixels would be covered by it and draw them.

            Otherwise:

               Calculate the position of the nearest point with a whole number
               for its x-coordinate, when extending the line past the
               endpoint.

               Find which pixels would be covered and how much by that point.

               If the endpoint is the left one, multiply the coverage by (1 -
               the decimal part of ``x``).

               Otherwise multiply the coverage by the decimal part of ``x``.

               Then draw those pixels.

               *e.g.:*
                  | The left endpoint of the line ``((1, 1.3), (5, 3))`` would
                    cover 70% of the pixel ``(1, 1)`` and 30% of the pixel
                    ``(1, 2)`` while the right one would cover 100% of the
                    pixel ``(5, 3)``.
                  | The left endpoint of the line ``((1.2, 1.4), (4.6, 3.1))``
                    would cover 56% *(i.e. 0.8 * 70%)* of the pixel ``(1, 1)``
                    and 24% *(i.e. 0.8 * 30%)* of the pixel ``(1, 2)`` while
                    the right one would cover 42% *(i.e. 0.6 * 70%)* of the
                    pixel ``(5, 3)`` and 18% *(i.e. 0.6 * 30%)* of the pixel
                    ``(5, 4)`` while the right

         Then for each point between the endpoints, along the line, whose
         x-coordinate is a whole number:

            Find which pixels would be covered and how much by that point and
            draw them.

            *e.g.:*
               | The points along the line ``((1, 1), (4, 2.5))`` would be
                 ``(2, 1.5)`` and ``(3, 2)`` and would cover 50% of the pixel
                 ``(2, 1)``, 50% of the pixel ``(2, 2)`` and 100% of the pixel
                 ``(3, 2)``.
               | The points along the line ``((1.2, 1.4), (4.6, 3.1))`` would
                 be ``(2, 1.8)`` (covering 20% of the pixel ``(2, 1)`` and 80%
                 of the pixel ``(2, 2)``), ``(3, 2.3)`` (covering 70% of the
                 pixel ``(3, 2)`` and 30% of the pixel ``(3, 3)``) and ``(4,
                 2.8)`` (covering 20% of the pixel ``(2, 1)`` and 80% of the
                 pixel ``(2, 2)``)

      Otherwise do the same for steep lines as for non-steep lines except
      along the y-axis instead of the x-axis (using ``y`` instead of ``x``,
      top instead of left and bottom instead of right).

   .. note::
      Regarding float values for coordinates, a point with coordinate
      consisting of two whole numbers is considered being right in the center
      of said pixel (and having a height and width of 1 pixel would therefore
      completely cover it), while a point with coordinate where one (or both)
      of the numbers have non-zero decimal parts would be partially covering
      two (or four if both numbers have decimal parts) adjacent pixels, *e.g.*
      the point ``(1.4, 2)`` covers 60% of the pixel ``(1, 2)`` and 40% of the
      pixel ``(2,2)``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int blend: (optional) (deprecated) if non-zero (default) the line will be blended
      with the surface's existing pixel shades, otherwise it will overwrite them

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aaline ##

.. function:: aalines

   | :sl:`draw multiple contiguous straight antialiased line segments`
   | :sg:`aalines(surface, color, closed, points) -> Rect`
   | :sg:`aalines(surface, color, closed, points, blend=1) -> Rect`

   Draws a sequence of contiguous straight antialiased lines on the given
   surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int blend: (optional) (deprecated) if non-zero (default) each line will be blended
      with the surface's existing pixel shades, otherwise the pixels will be
      overwritten

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aalines ##

.. ## pygame.draw ##

.. figure:: code_examples/draw_module_example.png
   :alt: draw module example

   Example code for draw module.

.. literalinclude:: code_examples/draw_module_example.py



--- Contenu du fichier : rect.rst.txt ---
.. include:: common.txt

:mod:`pygame.Rect`
==================

.. currentmodule:: pygame

.. class:: Rect

   | :sl:`pygame object for storing rectangular coordinates`
   | :sg:`Rect(left, top, width, height) -> Rect`
   | :sg:`Rect((left, top), (width, height)) -> Rect`
   | :sg:`Rect(object) -> Rect`

   Pygame uses Rect objects to store and manipulate rectangular areas. A Rect
   can be created from a combination of left, top, width, and height values.
   Rects can also be created from Python objects that are already a Rect or
   have an attribute named "rect".

   Any Pygame function that requires a Rect argument also accepts any of these
   values to construct a Rect. This makes it easier to create Rects on the fly
   as arguments for functions.

   The Rect functions that change the position or size of a Rect return a new
   copy of the Rect with the affected changes. The original Rect is not
   modified. Some methods have an alternate "in-place" version that returns
   None but affects the original Rect. These "in-place" methods are denoted
   with the "ip" suffix.

   The Rect object has several virtual attributes which can be used to move and
   align the Rect:

   ::

       x,y
       top, left, bottom, right
       topleft, bottomleft, topright, bottomright
       midtop, midleft, midbottom, midright
       center, centerx, centery
       size, width, height
       w,h

   All of these attributes can be assigned to:

   ::

       rect1.right = 10
       rect2.center = (20,30)

   Assigning to size, width or height changes the dimensions of the rectangle;
   all other assignments move the rectangle without resizing it. Notice that
   some attributes are integers and others are pairs of integers.

   If a Rect has a nonzero width or height, it will return ``True`` for a
   nonzero test. Some methods return a Rect with 0 size to represent an invalid
   rectangle. A Rect with a 0 size will not collide when using collision
   detection methods (e.g. :meth:`collidepoint`, :meth:`colliderect`, etc.).

   The coordinates for Rect objects are all integers. The size values can be
   programmed to have negative values, but these are considered illegal Rects
   for most operations.

   There are several collision tests between other rectangles. Most python
   containers can be searched for collisions against a single Rect.

   The area covered by a Rect does not include the right- and bottom-most edge
   of pixels. If one Rect's bottom border is another Rect's top border (i.e.,
   rect1.bottom=rect2.top), the two meet exactly on the screen but do not
   overlap, and ``rect1.colliderect(rect2)`` returns false.

   The Rect object is also iterable:

   ::

      r = Rect(0, 1, 2, 3)
      x, y, w, h = r

   .. versionadded:: 1.9.2
      The Rect class can be subclassed. Methods such as ``copy()`` and ``move()``
      will recognize this and return instances of the subclass.
      However, the subclass's ``__init__()`` method is not called,
      and ``__new__()`` is assumed to take no arguments. So these methods should be
      overridden if any extra attributes need to be copied.

   .. method:: copy

      | :sl:`copy the rectangle`
      | :sg:`copy() -> Rect`

      Returns a new rectangle having the same position and size as the original.

      New in pygame 1.9

      .. ## Rect.copy ##

   .. method:: move

      | :sl:`moves the rectangle`
      | :sg:`move(x, y) -> Rect`

      Returns a new rectangle that is moved by the given offset. The x and y
      arguments can be any integer value, positive or negative.

      .. ## Rect.move ##

   .. method:: move_ip

      | :sl:`moves the rectangle, in place`
      | :sg:`move_ip(x, y) -> None`

      Same as the ``Rect.move()`` method, but operates in place.

      .. ## Rect.move_ip ##

   .. method:: inflate

      | :sl:`grow or shrink the rectangle size`
      | :sg:`inflate(x, y) -> Rect`

      Returns a new rectangle with the size changed by the given offset. The
      rectangle remains centered around its current center. Negative values
      will shrink the rectangle. Note, uses integers, if the offset given is
      too small(< 2 > -2), center will be off.

      .. ## Rect.inflate ##

   .. method:: inflate_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`inflate_ip(x, y) -> None`

      Same as the ``Rect.inflate()`` method, but operates in place.

      .. ## Rect.inflate_ip ##

   .. method:: scale_by

      | :sl:`scale the rectangle by given a multiplier`
      | :sg:`scale_by(scalar) -> Rect`
      | :sg:`scale_by(scalex, scaley) -> Rect`

      Returns a new rectangle with the size scaled by the given multipliers.
      The rectangle remains centered around its current center. A single 
      scalar or separate width and height scalars are allowed. Values above
      one will increase the size of the rectangle, whereas values between
      zero and one will decrease the size of the rectangle.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by ##

   .. method:: scale_by_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`scale_by_ip(scalar) -> None`
      | :sg:`scale_by_ip(scalex, scaley) -> None`

      Same as the ``Rect.scale_by()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by_ip ##

   .. method:: update

      | :sl:`sets the position and size of the rectangle`
      | :sg:`update(left, top, width, height) -> None`
      | :sg:`update((left, top), (width, height)) -> None`
      | :sg:`update(object) -> None`

      Sets the position and size of the rectangle, in place. See
      parameters for :meth:`pygame.Rect` for the parameters of this function.

      .. versionadded:: 2.0.1

      .. ## Rect.update ##

   .. method:: clamp

      | :sl:`moves the rectangle inside another`
      | :sg:`clamp(Rect) -> Rect`

      Returns a new rectangle that is moved to be completely inside the
      argument Rect. If the rectangle is too large to fit inside, it is
      centered inside the argument Rect, but its size is not changed.

      .. ## Rect.clamp ##

   .. method:: clamp_ip

      | :sl:`moves the rectangle inside another, in place`
      | :sg:`clamp_ip(Rect) -> None`

      Same as the ``Rect.clamp()`` method, but operates in place.

      .. ## Rect.clamp_ip ##

   .. method:: clip

      | :sl:`crops a rectangle inside another`
      | :sg:`clip(Rect) -> Rect`

      Returns a new rectangle that is cropped to be completely inside the
      argument Rect. If the two rectangles do not overlap to begin with, a Rect
      with 0 size is returned.

      .. ## Rect.clip ##

   .. method:: clipline

      | :sl:`crops a line inside a rectangle`
      | :sg:`clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(x1, y1, x2, y2) -> ()`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ()`
      | :sg:`clipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1, x2, y2)) -> ()`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ()`

      Returns the coordinates of a line that is cropped to be completely inside
      the rectangle. If the line does not overlap the rectangle, then an empty
      tuple is returned.

      The line to crop can be any of the following formats (floats can be used
      in place of ints, but they will be truncated):

         - four ints
         - 2 lists/tuples/Vector2s of 2 ints
         - a list/tuple of four ints
         - a list/tuple of 2 lists/tuples/Vector2s of 2 ints

      :returns: a tuple with the coordinates of the given line cropped to be
         completely inside the rectangle is returned, if the given line does
         not overlap the rectangle, an empty tuple is returned
      :rtype: tuple(tuple(int, int), tuple(int, int)) or ()

      :raises TypeError: if the line coordinates are not given as one of the
         above described line formats

      .. note ::
         This method can be used for collision detection between a rect and a
         line. See example code below.

      .. note ::
         The ``rect.bottom`` and ``rect.right`` attributes of a
         :mod:`pygame.Rect` always lie one pixel outside of its actual border.

      ::

         # Example using clipline().
         clipped_line = rect.clipline(line)

         if clipped_line:
             # If clipped_line is not an empty tuple then the line
             # collides/overlaps with the rect. The returned value contains
             # the endpoints of the clipped line.
             start, end = clipped_line
             x1, y1 = start
             x2, y2 = end
         else:
             print("No clipping. The line is fully outside the rect.")

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. versionadded:: 2.0.0

      .. ## Rect.clipline ##

   .. method:: union

      | :sl:`joins two rectangles into one`
      | :sg:`union(Rect) -> Rect`

      Returns a new rectangle that completely covers the area of the two
      provided rectangles. There may be area inside the new Rect that is not
      covered by the originals.

      .. ## Rect.union ##

   .. method:: union_ip

      | :sl:`joins two rectangles into one, in place`
      | :sg:`union_ip(Rect) -> None`

      Same as the ``Rect.union()`` method, but operates in place.

      .. ## Rect.union_ip ##

   .. method:: unionall

      | :sl:`the union of many rectangles`
      | :sg:`unionall(Rect_sequence) -> Rect`

      Returns the union of one rectangle with a sequence of many rectangles.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall ##

   .. method:: unionall_ip

      | :sl:`the union of many rectangles, in place`
      | :sg:`unionall_ip(Rect_sequence) -> None`

      The same as the ``Rect.unionall()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall_ip ##

   .. method:: fit

      | :sl:`resize and move a rectangle with aspect ratio`
      | :sg:`fit(Rect) -> Rect`

      Returns a new rectangle that is moved and resized to fit another. The
      aspect ratio of the original Rect is preserved, so the new rectangle may
      be smaller than the target in either width or height.

      .. ## Rect.fit ##

   .. method:: normalize

      | :sl:`correct negative sizes`
      | :sg:`normalize() -> None`

      This will flip the width or height of a rectangle if it has a negative
      size. The rectangle will remain in the same place, with only the sides
      swapped.

      .. ## Rect.normalize ##

   .. method:: contains

      | :sl:`test if one rectangle is inside another`
      | :sg:`contains(Rect) -> bool`

      Returns true when the argument is completely inside the Rect.

      .. ## Rect.contains ##

   .. method:: collidepoint

      | :sl:`test if a point is inside a rectangle`
      | :sg:`collidepoint(x, y) -> bool`
      | :sg:`collidepoint((x,y)) -> bool`

      Returns true if the given point is inside the rectangle. A point along
      the right or bottom edge is not considered to be inside the rectangle.

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.collidepoint ##

   .. method:: colliderect

      | :sl:`test if two rectangles overlap`
      | :sg:`colliderect(Rect) -> bool`

      Returns true if any portion of either rectangle overlap (except the
      top+bottom or left+right edges).

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.colliderect ##

   .. method:: collidelist

      | :sl:`test if one rectangle in a list intersects`
      | :sg:`collidelist(list) -> index`

      Test whether the rectangle collides with any in a sequence of rectangles.
      The index of the first collision found is returned. If no collisions are
      found an index of -1 is returned.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelist ##

   .. method:: collidelistall

      | :sl:`test if all rectangles in a list intersect`
      | :sg:`collidelistall(list) -> indices`

      Returns a list of all the indices that contain rectangles that collide
      with the Rect. If no intersecting rectangles are found, an empty list is
      returned.

      Not only Rects are valid arguments, but these are all valid calls:

      .. code-block:: python
    
          Rect = pygame.Rect
          r = Rect(0, 0, 10, 10)
          
          list_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]
          indices0 = r.collidelistall(list_of_rects)
          
          list_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]
          indices1 = r.collidelistall(list_of_lists)
          
          list_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]
          indices2 = r.collidelistall(list_of_tuples)
          
          list_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]
          indices3 = r.collidelistall(list_of_double_tuples)
          
          class ObjectWithRectAttribute(object):
              def __init__(self, r):
                  self.rect = r
          
          list_of_object_with_rect_attribute = [
              ObjectWithRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices4 = r.collidelistall(list_of_object_with_rect_attribute)
          
          class ObjectWithCallableRectAttribute(object):
              def __init__(self, r):
                  self._rect = r
          
              def rect(self):
                  return self._rect
          
          list_of_object_with_callable_rect = [
              ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices5 = r.collidelistall(list_of_object_with_callable_rect)

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelistall ##

   .. method:: collideobjects

      | :sl:`test if any object in a list intersects`
      | :sg:`collideobjects(rect_list) -> object`
      | :sg:`collideobjects(obj_list, key=func) -> object`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjects feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Test whether the rectangle collides with any object in the sequence.
      The object of the first collision found is returned. If no collisions are
      found then ``None`` is returned

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
          ]

          # collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object
          collision = r.collideobjects(
              objects, key=lambda o: o.collision_box
          )  # -> <ObjectWithSomRectAttribute("B", [1, 1, 10, 10], [300, 300, 50, 50])>
          print(collision)

          screen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None
          print(screen_rect)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjects ##

   .. method:: collideobjectsall

      | :sl:`test if all objects in a list intersect`
      | :sg:`collideobjectsall(rect_list) -> objects`
      | :sg:`collideobjectsall(obj_list, key=func) -> objects`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjectsall feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Returns a list of all the objects that contain rectangles that collide
      with the Rect. If no intersecting objects are found, an empty list is
      returned.

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjectsall(
              rects
          )  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
          ]

          # collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object
          collisions = r.collideobjectsall(
              objects, key=lambda o: o.collision_box
          )  # -> [<ObjectWithSomRectAttribute("A", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute("B", [5, 5, 10, 10], [200, 500, 50, 50])>]
          print(collisions)

          screen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []
          print(screen_rects)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjectsall ##

   .. method:: collidedict

      | :sl:`test if one rectangle in a dictionary intersects`
      | :sg:`collidedict(dict) -> (key, value)`
      | :sg:`collidedict(dict) -> None`
      | :sg:`collidedict(dict, use_values=0) -> (key, value)`
      | :sg:`collidedict(dict, use_values=0) -> None`

      Returns the first key and value pair that intersects with the calling
      Rect object. If no collisions are found, ``None`` is returned. If
      ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedict({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedict ##

   .. method:: collidedictall

      | :sl:`test if all rectangles in a dictionary intersect`
      | :sg:`collidedictall(dict) -> [(key, value), ...]`
      | :sg:`collidedictall(dict, use_values=0) -> [(key, value), ...]`

      Returns a list of all the key and value pairs that intersect with the
      calling Rect object. If no collisions are found an empty list is returned.
      If ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedictall({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedictall ##

   .. ## pygame.Rect ##


--- Contenu du fichier : surface.rst.txt ---
.. include:: common.txt

:mod:`pygame.Surface`
=====================

.. currentmodule:: pygame

.. class:: Surface

   | :sl:`pygame object for representing images`
   | :sg:`Surface((width, height), flags=0, depth=0, masks=None) -> Surface`
   | :sg:`Surface((width, height), flags=0, Surface) -> Surface`

   A pygame Surface is used to represent any image. The Surface has a fixed
   resolution and pixel format. Surfaces with 8-bit pixels use a color palette
   to map to 24-bit color.

   Call :meth:`pygame.Surface()` to create a new image object. The Surface will
   be cleared to all black. The only required arguments are the sizes. With no
   additional arguments, the Surface will be created in a format that best
   matches the display Surface.

   The pixel format can be controlled by passing the bit depth or an existing
   Surface. The flags argument is a bitmask of additional features for the
   surface. You can pass any combination of these flags:

   ::

     HWSURFACE    (obsolete in pygame 2) creates the image in video memory
     SRCALPHA     the pixel format will include a per-pixel alpha

   Both flags are only a request, and may not be possible for all displays and
   formats.

   Advance users can combine a set of bitmasks with a depth value. The masks
   are a set of 4 integers representing which bits in a pixel will represent
   each color. Normal Surfaces should not require the masks argument.

   Surfaces can have many extra attributes like alpha planes, colorkeys, source
   rectangle clipping. These functions mainly effect how the Surface is blitted
   to other Surfaces. The blit routines will attempt to use hardware
   acceleration when possible, otherwise they will use highly optimized
   software blitting methods.

   There are three types of transparency supported in pygame: colorkeys,
   surface alphas, and pixel alphas. Surface alphas can be mixed with
   colorkeys, but an image with per pixel alphas cannot use the other modes.
   Colorkey transparency makes a single color value transparent. Any pixels
   matching the colorkey will not be drawn. The surface alpha value is a single
   value that changes the transparency for the entire image. A surface alpha of
   255 is opaque, and a value of 0 is completely transparent.

   Per pixel alphas are different because they store a transparency value for
   every pixel. This allows for the most precise transparency effects, but it
   also the slowest. Per pixel alphas cannot be mixed with surface alpha and
   colorkeys.

   There is support for pixel access for the Surfaces. Pixel access on hardware
   surfaces is slow and not recommended. Pixels can be accessed using the
   :meth:`get_at()` and :meth:`set_at()` functions. These methods are fine for
   simple access, but will be considerably slow when doing of pixel work with
   them. If you plan on doing a lot of pixel level work, it is recommended to
   use a :class:`pygame.PixelArray`, which gives an array like view of the
   surface. For involved mathematical manipulations try the
   :mod:`pygame.surfarray` module (It's quite quick, but requires NumPy.)

   Any functions that directly access a surface's pixel data will need that
   surface to be lock()'ed. These functions can :meth:`lock()` and
   :meth:`unlock()` the surfaces themselves without assistance. But, if a
   function will be called many times, there will be a lot of overhead for
   multiple locking and unlocking of the surface. It is best to lock the
   surface manually before making the function call many times, and then
   unlocking when you are finished. All functions that need a locked surface
   will say so in their docs. Remember to leave the Surface locked only while
   necessary.

   Surface pixels are stored internally as a single number that has all the
   colors encoded into it. Use the :meth:`map_rgb()` and
   :meth:`unmap_rgb()` to convert between individual red, green, and blue
   values into a packed integer for that Surface.

   Surfaces can also reference sections of other Surfaces. These are created
   with the :meth:`subsurface()` method. Any change to either Surface will
   effect the other.

   Each Surface contains a clipping area. By default the clip area covers the
   entire Surface. If it is changed, all drawing operations will only effect
   the smaller area.

   .. method:: blit

      | :sl:`draw one image onto another`
      | :sg:`blit(source, dest, area=None, special_flags=0) -> Rect`

      Draws a source Surface onto this Surface. The draw can be positioned with
      the dest argument. The dest argument can either be a pair of coordinates representing the position of
      the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the
      position for the blit. The size of the destination rectangle does not
      effect the blit.

      An optional area rectangle can be passed as well. This represents a
      smaller portion of the source Surface to draw.

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      .. versionadded:: 1.9.2
         Optional ``special_flags``: ``BLEND_PREMULTIPLIED``

      .. versionadded:: 2.0.0
         Optional ``special_flags``:  ``BLEND_ALPHA_SDL2`` - Uses the SDL2 blitter for alpha blending,
         this gives different results than the default blitter, which is modelled after SDL1, due to
         different approximations used for the alpha blending formula. The SDL2 blitter also supports
         RLE on alpha blended surfaces which the pygame one does not.

      The return rectangle is the area of the affected pixels, excluding any
      pixels outside the destination Surface, or outside the clipping area.

      Pixel alphas will be ignored when blitting to an 8 bit Surface.

      For a surface with colorkey or blanket alpha, a blit to self may give
      slightly different colors than a non self-blit.

      .. ## Surface.blit ##

   .. method:: blits

      | :sl:`draw many images onto another`
      | :sg:`blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None`
      | :sg:`blits(((source, dest, area), ...)) -> [Rect, ...]`
      | :sg:`blits(((source, dest, area, special_flags), ...)) -> [Rect, ...]`

      Draws many surfaces onto this Surface. It takes a sequence as input,
      with each of the elements corresponding to the ones of :meth:`blit()`.
      It needs at minimum a sequence of (source, dest).

      :param blit_sequence: a sequence of surfaces and arguments to blit them,
         they correspond to the :meth:`blit()` arguments
      :param doreturn: if ``True``, return a list of rects of the areas changed,
         otherwise return ``None``

      :returns: a list of rects of the areas changed if ``doreturn`` is
         ``True``, otherwise ``None``
      :rtype: list or None

      New in pygame 1.9.4.

      .. ## Surface.blits ##


   .. method:: convert

      | :sl:`change the pixel format of an image`
      | :sg:`convert(Surface=None) -> Surface`
      | :sg:`convert(depth, flags=0) -> Surface`
      | :sg:`convert(masks, flags=0) -> Surface`

      Creates a new copy of the Surface with the pixel format changed. The new
      pixel format can be determined from another existing Surface. Otherwise
      depth, flags, and masks arguments can be used, similar to the
      :meth:`pygame.Surface()` call.

      If no arguments are passed the new Surface will have the same pixel
      format as the display Surface. This is always the fastest format for
      blitting. It is a good idea to convert all Surfaces before they are
      blitted many times.

      The converted Surface will have no pixel alphas. They will be stripped if
      the original had them. See :meth:`convert_alpha()` for preserving or
      creating per-pixel alphas.

      The new copy will have the same class as the copied surface. This lets
      as Surface subclass inherit this method without the need to override,
      unless subclass specific instance attributes also need copying.

      .. ## Surface.convert ##

   .. method:: convert_alpha

      | :sl:`change the pixel format of an image including per pixel alphas`
      | :sg:`convert_alpha(Surface) -> Surface`
      | :sg:`convert_alpha() -> Surface`

      Creates a new copy of the surface with the desired pixel format. The new
      surface will be in a format suited for quick blitting to the given format
      with per pixel alpha. If no surface is given, the new surface will be
      optimized for blitting to the current display.

      Unlike the :meth:`convert()` method, the pixel format for the new
      image will not be exactly the same as the requested source, but it will
      be optimized for fast alpha blitting to the destination.

      As with :meth:`convert()` the returned surface has the same class as
      the converted surface.

      .. ## Surface.convert_alpha ##

   .. method:: copy

      | :sl:`create a new copy of a Surface`
      | :sg:`copy() -> Surface`

      Makes a duplicate copy of a Surface. The new surface will have the same
      pixel formats, color palettes, transparency settings, and class as the
      original. If a Surface subclass also needs to copy any instance specific
      attributes then it should override ``copy()``.

      .. ## Surface.copy ##

   .. method:: fill

      | :sl:`fill Surface with a solid color`
      | :sg:`fill(color, rect=None, special_flags=0) -> Rect`

      Fill the Surface with a solid color. If no rect argument is given the
      entire Surface will be filled. The rect argument will limit the fill to a
      specific area. The fill will also be contained by the Surface clip area.

      The color argument can be either a ``RGB`` sequence, a ``RGBA`` sequence
      or a mapped color index. If using ``RGBA``, the Alpha (A part of
      ``RGBA``) is ignored unless the surface uses per pixel alpha (Surface has
      the ``SRCALPHA`` flag).

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      This will return the affected Surface area.

      .. ## Surface.fill ##

   .. method:: scroll

      | :sl:`Shift the surface image in place`
      | :sg:`scroll(dx=0, dy=0) -> None`

      Move the image by dx pixels right and dy pixels down. dx and dy may be
      negative for left and up scrolls respectively. Areas of the surface that
      are not overwritten retain their original pixel values. Scrolling is
      contained by the Surface clip area. It is safe to have dx and dy values
      that exceed the surface size.

      .. versionadded:: 1.9

      .. ## Surface.scroll ##

   .. method:: set_colorkey

      | :sl:`Set the transparent colorkey`
      | :sg:`set_colorkey(Color, flags=0) -> None`
      | :sg:`set_colorkey(None) -> None`

      Set the current color key for the Surface. When blitting this Surface
      onto a destination, any pixels that have the same color as the colorkey
      will be transparent. The color can be an ``RGB`` color or a mapped color
      integer. If ``None`` is passed, the colorkey will be unset.

      The colorkey will be ignored if the Surface is formatted to use per pixel
      alpha values. The colorkey can be mixed with the full Surface alpha
      value.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_colorkey ##

   .. method:: get_colorkey

      | :sl:`Get the current transparent colorkey`
      | :sg:`get_colorkey() -> RGB or None`

      Return the current colorkey value for the Surface. If the colorkey is not
      set then ``None`` is returned.

      .. ## Surface.get_colorkey ##

   .. method:: set_alpha

      | :sl:`set the alpha value for the full Surface image`
      | :sg:`set_alpha(value, flags=0) -> None`
      | :sg:`set_alpha(None) -> None`

      Set the current alpha value for the Surface. When blitting this Surface
      onto a destination, the pixels will be drawn slightly transparent. The
      alpha value is an integer from 0 to 255, 0 is fully transparent and 255
      is fully opaque. If ``None`` is passed for the alpha value, then alpha
      blending will be disabled, including per-pixel alpha.

      This value is different than the per pixel Surface alpha. For a surface
      with per pixel alpha, blanket alpha is ignored and ``None`` is returned.

      .. versionchanged:: 2.0 per-surface alpha can be combined with per-pixel
                          alpha.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_alpha ##

   .. method:: get_alpha

      | :sl:`get the current Surface transparency value`
      | :sg:`get_alpha() -> int_value`

      Return the current alpha value for the Surface.

      .. ## Surface.get_alpha ##

   .. method:: lock

      | :sl:`lock the Surface memory for pixel access`
      | :sg:`lock() -> None`

      Lock the pixel data of a Surface for access. On accelerated Surfaces, the
      pixel data may be stored in volatile video memory or nonlinear compressed
      forms. When a Surface is locked the pixel memory becomes available to
      access by regular software. Code that reads or writes pixel values will
      need the Surface to be locked.

      Surfaces should not remain locked for more than necessary. A locked
      Surface can often not be displayed or managed by pygame.

      Not all Surfaces require locking. The :meth:`mustlock()` method can
      determine if it is actually required. There is no performance penalty for
      locking and unlocking a Surface that does not need it.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.lock ##

   .. method:: unlock

      | :sl:`unlock the Surface memory from pixel access`
      | :sg:`unlock() -> None`

      Unlock the Surface pixel data after it has been locked. The unlocked
      Surface can once again be drawn and managed by pygame. See the
      :meth:`lock()` documentation for more details.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.unlock ##

   .. method:: mustlock

      | :sl:`test if the Surface requires locking`
      | :sg:`mustlock() -> bool`

      Returns ``True`` if the Surface is required to be locked to access pixel
      data. Usually pure software Surfaces do not require locking. This method
      is rarely needed, since it is safe and quickest to just lock all Surfaces
      as needed.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      .. ## Surface.mustlock ##

   .. method:: get_locked

      | :sl:`test if the Surface is current locked`
      | :sg:`get_locked() -> bool`

      Returns ``True`` when the Surface is locked. It doesn't matter how many
      times the Surface is locked.

      .. ## Surface.get_locked ##

   .. method:: get_locks

      | :sl:`Gets the locks for the Surface`
      | :sg:`get_locks() -> tuple`

      Returns the currently existing locks for the Surface.

      .. ## Surface.get_locks ##

   .. method:: get_at

      | :sl:`get the color value at a single pixel`
      | :sg:`get_at((x, y)) -> Color`

      Return a copy of the ``RGBA`` Color value at the given pixel. If the
      Surface has no per pixel alpha, then the alpha value will always be 255
      (opaque). If the pixel position is outside the area of the Surface an
      ``IndexError`` exception will be raised.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation. It is better to use methods which
      operate on many pixels at a time like with the blit, fill and draw
      methods - or by using :mod:`pygame.surfarray`/:mod:`pygame.PixelArray`.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9
         Returning a Color instead of tuple. Use ``tuple(surf.get_at((x,y)))``
         if you want a tuple, and not a Color. This should only matter if
         you want to use the color as a key in a dict.

      .. ## Surface.get_at ##

   .. method:: set_at

      | :sl:`set the color value for a single pixel`
      | :sg:`set_at((x, y), Color) -> None`

      Set the ``RGBA`` or mapped integer color value for a single pixel. If the
      Surface does not have per pixel alphas, the alpha value is ignored.
      Setting pixels outside the Surface area or outside the Surface clipping
      will have no effect.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation.

      This function will temporarily lock and unlock the Surface as needed.

      .. note:: If the surface is palettized, the pixel color will be set to the
                most similar color in the palette.

      .. ## Surface.set_at ##

   .. method:: get_at_mapped

      | :sl:`get the mapped color value at a single pixel`
      | :sg:`get_at_mapped((x, y)) -> Color`

      Return the integer value of the given pixel. If the pixel position is
      outside the area of the Surface an ``IndexError`` exception will be
      raised.

      This method is intended for pygame unit testing. It unlikely has any use
      in an application.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9.2

      .. ## Surface.get_at_mapped ##

   .. method:: get_palette

      | :sl:`get the color index palette for an 8-bit Surface`
      | :sg:`get_palette() -> [RGB, RGB, RGB, ...]`

      Return a list of up to 256 color elements that represent the indexed
      colors used in an 8-bit Surface. The returned list is a copy of the
      palette, and changes will have no effect on the Surface.

      Returning a list of ``Color(with length 3)`` instances instead of tuples.

      .. versionadded:: 1.9

      .. ## Surface.get_palette ##

   .. method:: get_palette_at

      | :sl:`get the color for a single entry in a palette`
      | :sg:`get_palette_at(index) -> RGB`

      Returns the red, green, and blue color values for a single index in a
      Surface palette. The index should be a value from 0 to 255.

      .. versionadded:: 1.9
         Returning ``Color(with length 3)`` instance instead of a tuple.

      .. ## Surface.get_palette_at ##

   .. method:: set_palette

      | :sl:`set the color palette for an 8-bit Surface`
      | :sg:`set_palette([RGB, RGB, RGB, ...]) -> None`

      Set the full palette for an 8-bit Surface. This will replace the colors in
      the existing palette. A partial palette can be passed and only the first
      colors in the original palette will be changed.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette ##

   .. method:: set_palette_at

      | :sl:`set the color for a single index in an 8-bit Surface palette`
      | :sg:`set_palette_at(index, RGB) -> None`

      Set the palette value for a single entry in a Surface palette. The index
      should be a value from 0 to 255.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette_at ##

   .. method:: map_rgb

      | :sl:`convert a color into a mapped color value`
      | :sg:`map_rgb(Color) -> mapped_int`

      Convert an ``RGBA`` color into the mapped integer value for this Surface.
      The returned integer will contain no more bits than the bit depth of the
      Surface. Mapped color values are not often used inside pygame, but can be
      passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.map_rgb ##

   .. method:: unmap_rgb

      | :sl:`convert a mapped integer color value into a Color`
      | :sg:`unmap_rgb(mapped_int) -> Color`

      Convert an mapped integer color into the ``RGB`` color components for
      this Surface. Mapped color values are not often used inside pygame, but
      can be passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.unmap_rgb ##

   .. method:: set_clip

      | :sl:`set the current clipping area of the Surface`
      | :sg:`set_clip(rect) -> None`
      | :sg:`set_clip(None) -> None`

      Each Surface has an active clipping area. This is a rectangle that
      represents the only pixels on the Surface that can be modified. If
      ``None`` is passed for the rectangle the full Surface will be available
      for changes.

      The clipping area is always restricted to the area of the Surface itself.
      If the clip rectangle is too large it will be shrunk to fit inside the
      Surface.

      .. ## Surface.set_clip ##

   .. method:: get_clip

      | :sl:`get the current clipping area of the Surface`
      | :sg:`get_clip() -> Rect`

      Return a rectangle of the current clipping area. The Surface will always
      return a valid rectangle that will never be outside the bounds of the
      image. If the Surface has had ``None`` set for the clipping area, the
      Surface will return a rectangle with the full area of the Surface.

      .. ## Surface.get_clip ##

   .. method:: subsurface

      | :sl:`create a new surface that references its parent`
      | :sg:`subsurface(Rect) -> Surface`

      Returns a new Surface that shares its pixels with its new parent. The new
      Surface is considered a child of the original. Modifications to either
      Surface pixels will effect each other. Surface information like clipping
      area and color keys are unique to each Surface.

      The new Surface will inherit the palette, color key, and alpha settings
      from its parent.

      It is possible to have any number of subsurfaces and subsubsurfaces on
      the parent. It is also possible to subsurface the display Surface if the
      display mode is not hardware accelerated.

      See :meth:`get_offset()` and :meth:`get_parent()` to learn more
      about the state of a subsurface.

      A subsurface will have the same class as the parent surface.

      .. ## Surface.subsurface ##

   .. method:: get_parent

      | :sl:`find the parent of a subsurface`
      | :sg:`get_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then ``None`` will be returned.

      .. ## Surface.get_parent ##

   .. method:: get_abs_parent

      | :sl:`find the top level parent of a subsurface`
      | :sg:`get_abs_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then this surface will be returned.

      .. ## Surface.get_abs_parent ##

   .. method:: get_offset

      | :sl:`find the position of a child subsurface inside a parent`
      | :sg:`get_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of a parent. If the
      Surface is not a subsurface this will return (0, 0).

      .. ## Surface.get_offset ##

   .. method:: get_abs_offset

      | :sl:`find the absolute position of a child subsurface inside its top level parent`
      | :sg:`get_abs_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of its top level
      parent Surface. If the Surface is not a subsurface this will return (0,
      0).

      .. ## Surface.get_abs_offset ##

   .. method:: get_size

      | :sl:`get the dimensions of the Surface`
      | :sg:`get_size() -> (width, height)`

      Return the width and height of the Surface in pixels.

      .. ## Surface.get_size ##

   .. method:: get_width

      | :sl:`get the width of the Surface`
      | :sg:`get_width() -> width`

      Return the width of the Surface in pixels.

      .. ## Surface.get_width ##

   .. method:: get_height

      | :sl:`get the height of the Surface`
      | :sg:`get_height() -> height`

      Return the height of the Surface in pixels.

      .. ## Surface.get_height ##

   .. method:: get_rect

      | :sl:`get the rectangular area of the Surface`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new rectangle covering the entire surface. This rectangle will
      always start at (0, 0) with a width and height the same size as the image.

      You can pass keyword argument values to this function. These named values
      will be applied to the attributes of the Rect before it is returned. An
      example would be ``mysurf.get_rect(center=(100, 100))`` to create a
      rectangle for the Surface centered at a given position.

      .. ## Surface.get_rect ##

   .. method:: get_bitsize

      | :sl:`get the bit depth of the Surface pixel format`
      | :sg:`get_bitsize() -> int`

      Returns the number of bits used to represent each pixel. This value may
      not exactly fill the number of bytes used per pixel. For example a 15 bit
      Surface still requires a full 2 bytes.

      .. ## Surface.get_bitsize ##

   .. method:: get_bytesize

      | :sl:`get the bytes used per Surface pixel`
      | :sg:`get_bytesize() -> int`

      Return the number of bytes used per pixel.

      .. ## Surface.get_bytesize ##

   .. method:: get_flags

      | :sl:`get the additional flags used for the Surface`
      | :sg:`get_flags() -> int`

      Returns a set of current Surface features. Each feature is a bit in the
      flags bitmask. Typical flags are ``RLEACCEL``, ``SRCALPHA``, and
      ``SRCCOLORKEY``.

      Here is a more complete list of flags. A full list can be found in
      ``SDL_video.h``

      ::

        SWSURFACE      0x00000000    # Surface is in system memory
        HWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory
        ASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible

      See :func:`pygame.display.set_mode()` for flags exclusive to the
      display surface.

      Used internally (read-only)

      ::

        HWACCEL        0x00000100    # Blit uses hardware acceleration
        SRCCOLORKEY    0x00001000    # Blit uses a source color key
        RLEACCELOK     0x00002000    # Private flag
        RLEACCEL       0x00004000    # Surface is RLE encoded
        SRCALPHA       0x00010000    # Blit uses source alpha blending
        PREALLOC       0x01000000    # Surface uses preallocated memory

      .. ## Surface.get_flags ##

   .. method:: get_pitch

      | :sl:`get the number of bytes used per Surface row`
      | :sg:`get_pitch() -> int`

      Return the number of bytes separating each row in the Surface. Surfaces
      in video memory are not always linearly packed. Subsurfaces will also
      have a larger pitch than their real width.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_pitch ##

   .. method:: get_masks

      | :sl:`the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`get_masks() -> (R, G, B, A)`

      Returns the bitmasks used to isolate each color in a mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_masks ##

   .. method:: set_masks

      | :sl:`set the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`set_masks((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the masks are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_masks ##

   .. method:: get_shifts

      | :sl:`the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`get_shifts() -> (R, G, B, A)`

      Returns the pixel shifts need to convert between each color and a mapped
      integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_shifts ##

   .. method:: set_shifts

      | :sl:`sets the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`set_shifts((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the shifts are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_shifts ##

   .. method:: get_losses

      | :sl:`the significant bits used to convert between a color and a mapped integer`
      | :sg:`get_losses() -> (R, G, B, A)`

      Return the least significant number of bits stripped from each color in a
      mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_losses ##

   .. method:: get_bounding_rect

      | :sl:`find the smallest rect containing data`
      | :sg:`get_bounding_rect(min_alpha = 1) -> Rect`

      Returns the smallest rectangular region that contains all the pixels in
      the surface that have an alpha value greater than or equal to the minimum
      alpha value.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.8

      .. ## Surface.get_bounding_rect ##

   .. method:: get_view

      | :sl:`return a buffer view of the Surface's pixels.`
      | :sg:`get_view(<kind>='2') -> BufferProxy`

      Return an object which exports a surface's internal pixel buffer as
      a C level array struct, Python level array interface or a C level
      buffer interface. The new buffer protocol is supported.

      The kind argument is the length 1 string '0', '1', '2', '3',
      'r', 'g', 'b', or 'a'. The letters are case insensitive;
      'A' will work as well. The argument can be either a Unicode or byte (char)
      string. The default is '2'.

      '0' returns a contiguous unstructured bytes view. No surface shape
      information is given. A ``ValueError`` is raised if the surface's pixels
      are discontinuous.

      '1' returns a (surface-width * surface-height) array of continuous
      pixels. A ``ValueError`` is raised if the surface pixels are
      discontinuous.

      '2' returns a (surface-width, surface-height) array of raw pixels.
      The pixels are surface-bytesize-d unsigned integers. The pixel format is
      surface specific. The 3 byte unsigned integers of 24 bit surfaces are
      unlikely accepted by anything other than other pygame functions.

      '3' returns a (surface-width, surface-height, 3) array of ``RGB`` color
      components. Each of the red, green, and blue components are unsigned
      bytes. Only 24-bit and 32-bit surfaces are supported. The color
      components must be in either ``RGB`` or ``BGR`` order within the pixel.

      'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a
      (surface-width, surface-height) view of a single color component within a
      surface: a color plane. Color components are unsigned bytes. Both 24-bit
      and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with
      ``SRCALPHA`` support 'a'.

      The surface is locked only when an exposed interface is accessed.
      For new buffer interface accesses, the surface is unlocked once the
      last buffer view is released. For array interface and old buffer
      interface accesses, the surface remains locked until the BufferProxy
      object is released.

      .. versionadded:: 1.9.2

   .. method:: get_buffer

      | :sl:`acquires a buffer object for the pixels of the Surface.`
      | :sg:`get_buffer() -> BufferProxy`

      Return a buffer object for the pixels of the Surface. The buffer can be
      used for direct pixel access and manipulation. Surface pixel data is
      represented as an unstructured block of memory, with a start address
      and length in bytes. The data need not be contiguous. Any gaps are
      included in the length, but otherwise ignored.

      This method implicitly locks the Surface. The lock will be released when
      the returned :mod:`pygame.BufferProxy` object is garbage collected.

      .. versionadded:: 1.8

      .. ## Surface.get_buffer ##

   .. attribute:: _pixels_address

      | :sl:`pixel buffer address`
      | :sg:`_pixels_address -> int`

      The starting address of the surface's raw pixel bytes.

      .. versionadded:: 1.9.2

   .. method:: premul_alpha

      | :sl:`returns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.`
      | :sg:`premul_alpha() -> Surface`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave premul_alpha feedback with authors <https://github.com/pygame/pygame/pull/3276>`_

      Returns a copy of the initial surface with the red, green and blue color channels multiplied
      by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED
      blend mode flag of the blit() method. Surfaces which have called this method will only look
      correct after blitting if the BLEND_PREMULTIPLED special flag is used.

      It is worth noting that after calling this method, methods that return the colour of a pixel
      such as get_at() will return the alpha multiplied colour values. It is not possible to fully
      reverse an alpha multiplication of the colours in a surface as integer colour channel data
      is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct
      the original 255 from just the two remaining zeros in the colour and alpha channels).

      If you call this method, and then call it again, it will multiply the colour channels by the alpha channel
      twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the
      alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels.
      It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and
      one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied
      alpha blending.

      Surfaces without an alpha channel cannot use this method and will return an error if you use
      it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting
      on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.

      In general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces
      superior results when blitting an alpha surface onto another surface with alpha - assuming both
      surfaces contain pre-multiplied alpha colours.

      .. versionadded:: 2.2.0

      .. ## Surface.premul_alpha ##

   .. ## pygame.Surface ##




--- Contenu du fichier : scrap.rst.txt ---
.. include:: common.txt

:mod:`pygame.scrap`
===================

.. module:: pygame.scrap
   :synopsis: pygame module for clipboard support.

| :sl:`pygame module for clipboard support.`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The scrap module is for transferring data to/from the clipboard. This allows
for cutting and pasting data between pygame and other applications. Some basic
data (MIME) types are defined and registered:

::

   pygame         string
  constant        value        description
  --------------------------------------------------
  SCRAP_TEXT   "text/plain"    plain text
  SCRAP_BMP    "image/bmp"     BMP encoded image data
  SCRAP_PBM    "image/pbm"     PBM encoded image data
  SCRAP_PPM    "image/ppm"     PPM encoded image data

``pygame.SCRAP_PPM``, ``pygame.SCRAP_PBM`` and ``pygame.SCRAP_BMP`` are
suitable for surface buffers to be shared with other applications.
``pygame.SCRAP_TEXT`` is an alias for the plain text clipboard type.

Depending on the platform, additional types are automatically registered when
data is placed into the clipboard to guarantee a consistent sharing behaviour
with other applications. The following listed types can be used as strings to
be passed to the respective :mod:`pygame.scrap` module functions.

For **Windows** platforms, these additional types are supported automatically
and resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "audio/wav"                  WAV encoded audio
  "image/tiff"                 TIFF encoded image data

For **X11** platforms, these additional types are supported automatically and
resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "UTF8_STRING"                UTF-8 encoded text
  "COMPOUND_TEXT"              COMPOUND text

User defined types can be used, but the data might not be accessible by other
applications unless they know what data type to look for.
Example: Data placed into the clipboard by
``pygame.scrap.put("my_data_type", byte_data)`` can only be accessed by
applications which query the clipboard for the ``"my_data_type"`` data type.

For an example of how the scrap module works refer to the examples page
(:func:`pygame.examples.scrap_clipboard.main`) or the code directly in GitHub
(`pygame/examples/scrap_clipboard.py <https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py>`_).

.. versionadded:: 1.8

.. note::
   The scrap module is currently only supported for Windows, X11 and Mac OS X.
   On Mac OS X only text works at the moment - other types may be supported in
   future releases.

.. function:: init

   | :sl:`Initializes the scrap module.`
   | :sg:`init() -> None`

   Initialize the scrap module.

   :raises pygame.error: if unable to initialize scrap module

   .. note:: The scrap module requires :func:`pygame.display.set_mode()` be
      called before being initialized.

   .. ## pygame.scrap.init ##

.. function:: get_init

   | :sl:`Returns True if the scrap module is currently initialized.`
   | :sg:`get_init() -> bool`

   Gets the scrap module's initialization state.

   :returns: ``True`` if the :mod:`pygame.scrap` module is currently
      initialized, ``False`` otherwise
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.scrap.get_init ##

.. function:: get

   | :sl:`Gets the data for the specified type from the clipboard.`
   | :sg:`get(type) -> bytes | None`

   Retrieves the data for the specified type from the clipboard. The data is
   returned as a byte string and might need further processing (such as
   decoding to Unicode).

   :param string type: data type to retrieve from the clipboard

   :returns: data (bytes object) for the given type identifier or ``None`` if
      no data for the given type is available
   :rtype: bytes | None

   ::

     text = pygame.scrap.get(pygame.SCRAP_TEXT)
     if text:
         print("There is text in the clipboard.")
     else:
         print("There does not seem to be text in the clipboard.")

   .. ## pygame.scrap.get ##

.. function:: get_types

   | :sl:`Gets a list of the available clipboard types.`
   | :sg:`get_types() -> list`

   Gets a list of data type string identifiers for the data currently
   available on the clipboard. Each identifier can be used in the
   :func:`pygame.scrap.get()` method to get the clipboard content of the
   specific type.

   :returns: list of strings of the available clipboard data types, if there
      is no data in the clipboard an empty list is returned
   :rtype: list

   ::

     for t in pygame.scrap.get_types():
         if "text" in t:
             # There is some content with the word "text" in its type string.
             print(pygame.scrap.get(t))

   .. ## pygame.scrap.get_types ##

.. function:: put

   | :sl:`Places data into the clipboard.`
   | :sg:`put(type, data) -> None`

   Places data for a given clipboard type into the clipboard. The data must
   be a string buffer. The type is a string identifying the type of data to be
   placed into the clipboard. This can be one of the predefined
   ``pygame.SCRAP_PBM``, ``pygame.SCRAP_PPM``, ``pygame.SCRAP_BMP`` or
   ``pygame.SCRAP_TEXT`` values or a user defined string identifier.

   :param string type: type identifier of the data to be placed into the
      clipboard
   :param data: data to be place into the clipboard, a bytes object
   :type data: bytes

   :raises pygame.error: if unable to put the data into the clipboard

   ::

     with open("example.bmp", "rb") as fp:
         pygame.scrap.put(pygame.SCRAP_BMP, fp.read())
     # The image data is now on the clipboard for other applications to access
     # it.
     pygame.scrap.put(pygame.SCRAP_TEXT, b"A text to copy")
     pygame.scrap.put("Plain text", b"Data for user defined type 'Plain text'")

   .. ## pygame.scrap.put ##

.. function:: contains

   | :sl:`Checks whether data for a given type is available in the clipboard.`
   | :sg:`contains(type) -> bool`

   Checks whether data for the given type is currently available in the
   clipboard.

   :param string type: data type to check availability of

   :returns: ``True`` if data for the passed type is available in the
      clipboard, ``False`` otherwise
   :rtype: bool

   ::

     if pygame.scrap.contains(pygame.SCRAP_TEXT):
         print("There is text in the clipboard.")
     if pygame.scrap.contains("own_data_type"):
         print("There is stuff in the clipboard.")

   .. ## pygame.scrap.contains ##

.. function:: lost

   | :sl:`Indicates if the clipboard ownership has been lost by the pygame application.`
   | :sg:`lost() -> bool`

   Indicates if the clipboard ownership has been lost by the pygame
   application.

   :returns: ``True``, if the clipboard ownership has been lost by the pygame
      application, ``False`` if the pygame application still owns the clipboard
   :rtype: bool

   ::

     if pygame.scrap.lost():
         print("The clipboard is in use by another application.")

   .. ## pygame.scrap.lost ##

.. function:: set_mode

   | :sl:`Sets the clipboard access mode.`
   | :sg:`set_mode(mode) -> None`

   Sets the access mode for the clipboard. This is only of interest for X11
   environments where clipboard modes ``pygame.SCRAP_SELECTION`` (for mouse
   selections) and ``pygame.SCRAP_CLIPBOARD`` (for the clipboard) are
   available. Setting the mode to ``pygame.SCRAP_SELECTION`` in other
   environments will not change the mode from ``pygame.SCRAP_CLIPBOARD``.

   :param mode: access mode, supported values are ``pygame.SCRAP_CLIPBOARD``
      and ``pygame.SCRAP_SELECTION`` (``pygame.SCRAP_SELECTION`` only has an
      effect when used on X11 platforms)

   :raises ValueError: if the ``mode`` parameter is not
      ``pygame.SCRAP_CLIPBOARD`` or ``pygame.SCRAP_SELECTION``

   .. ## pygame.scrap.set_mode ##

.. ## pygame.scrap ##


--- Contenu du fichier : display.rst.txt ---
.. include:: common.txt

:mod:`pygame.display`
=====================

.. module:: pygame.display
   :synopsis: pygame module to control the display window and screen

| :sl:`pygame module to control the display window and screen`

This module offers control over the pygame display. Pygame has a single display
Surface that is either contained in a window or runs full screen. Once you
create the display you treat it as a regular Surface. Changes are not
immediately visible onscreen; you must choose one of the two flipping functions
to update the actual display.

The origin of the display, where x = 0 and y = 0, is the top left of the
screen. Both axes increase positively towards the bottom right of the screen.

The pygame display can actually be initialized in one of several modes. By
default, the display is a basic software driven framebuffer. You can request
special modules like automatic scaling or OpenGL support. These are
controlled by flags passed to ``pygame.display.set_mode()``.

Pygame can only have a single display active at any time. Creating a new one
with ``pygame.display.set_mode()`` will close the previous display. To detect
the number and size of attached screens, you can use
``pygame.display.get_desktop_sizes`` and then select appropriate window size
and display index to pass to ``pygame.display.set_mode()``.

For backward compatibility ``pygame.display`` allows precise control over
the pixel format or display resolutions. This used to be necessary with old
graphics cards and CRT screens, but is usually not needed any more. Use the
functions ``pygame.display.mode_ok()``, ``pygame.display.list_modes()``, and
``pygame.display.Info()`` to query detailed information about the display.

Once the display Surface is created, the functions from this module affect the
single existing display. The Surface becomes invalid if the module is
uninitialized. If a new display mode is set, the existing Surface will
automatically switch to operate on the new display.

When the display mode is set, several events are placed on the pygame event
queue. ``pygame.QUIT`` is sent when the user has requested the program to
shut down. The window will receive ``pygame.ACTIVEEVENT`` events as the display
gains and loses input focus. If the display is set with the
``pygame.RESIZABLE`` flag, ``pygame.VIDEORESIZE`` events will be sent when the
user adjusts the window dimensions. Hardware displays that draw direct to the
screen will get ``pygame.VIDEOEXPOSE`` events when portions of the window must
be redrawn.

A new windowevent API was introduced in pygame 2.0.1. Check event module docs
for more information on that

Some display environments have an option for automatically stretching all
windows. When this option is enabled, this automatic stretching distorts the
appearance of the pygame window. In the pygame examples directory, there is
example code (prevent_display_stretching.py) which shows how to disable this
automatic stretching of the pygame display on Microsoft Windows (Vista or newer
required).

.. function:: init

   | :sl:`Initialize the display module`
   | :sg:`init() -> None`

   Initializes the pygame display module. The display module cannot do anything
   until it is initialized. This is usually handled for you automatically when
   you call the higher level ``pygame.init()``.

   Pygame will select from one of several internal display backends when it is
   initialized. The display mode will be chosen depending on the platform and
   permissions of current user. Before the display module is initialized the
   environment variable ``SDL_VIDEODRIVER`` can be set to control which backend
   is used. The systems with multiple choices are listed here.

   ::

      Windows : windib, directx
      Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib

   On some platforms it is possible to embed the pygame display into an already
   existing window. To do this, the environment variable ``SDL_WINDOWID`` must
   be set to a string containing the window id or handle. The environment
   variable is checked when the pygame display is initialized. Be aware that
   there can be many strange side effects when running in an embedded display.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.init ##

.. function:: quit

   | :sl:`Uninitialize the display module`
   | :sg:`quit() -> None`

   This will shut down the entire display module. This means any active
   displays will be closed. This will also be handled automatically when the
   program exits.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.quit ##

.. function:: get_init

   | :sl:`Returns True if the display module has been initialized`
   | :sg:`get_init() -> bool`

   Returns True if the :mod:`pygame.display` module is currently initialized.

   .. ## pygame.display.get_init ##

.. function:: set_mode

   | :sl:`Initialize a window or screen for display`
   | :sg:`set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface`

   This function will create a display Surface. The arguments passed in are
   requests for a display type. The actual created display will be the best
   possible match supported by the system.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   The size argument is a pair of numbers representing the width and
   height. The flags argument is a collection of additional options. The depth
   argument represents the number of bits to use for color.

   The Surface that gets returned can be drawn to like a regular Surface but
   changes will eventually be seen on the monitor.

   If no size is passed or is set to ``(0, 0)`` and pygame uses ``SDL``
   version 1.2.10 or above, the created Surface will have the same size as the
   current screen resolution. If only the width or height are set to ``0``, the
   Surface will have the same width or height as the screen resolution. Using a
   ``SDL`` version prior to 1.2.10 will raise an exception.

   It is usually best to not pass the depth argument. It will default to the
   best and fastest color depth for the system. If your game requires a
   specific color format you can control the depth with this argument. Pygame
   will emulate an unavailable color depth which can be slow.

   When requesting fullscreen display modes, sometimes an exact match for the
   requested size cannot be made. In these situations pygame will select
   the closest compatible match. The returned surface will still always match
   the requested size.

   On high resolution displays(4k, 1080p) and tiny graphics games (640x480)
   show up very small so that they are unplayable. SCALED scales up the window
   for you. The game thinks it's a 640x480 window, but really it can be bigger.
   Mouse events are scaled for you, so your game doesn't need to do it. Note
   that SCALED is considered an experimental API and may change in future
   releases.

   The flags argument controls which type of display you want. There are
   several to choose from, and you can even combine multiple types using the
   bitwise or operator, (the pipe "|" character). Here are the display
   flags you will want to choose from:

   ::

      pygame.FULLSCREEN    create a fullscreen display
      pygame.DOUBLEBUF     only applicable with OPENGL
      pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
      pygame.OPENGL        create an OpenGL-renderable display
      pygame.RESIZABLE     display window should be resizeable
      pygame.NOFRAME       display window will have no border or controls
      pygame.SCALED        resolution depends on desktop size and scale graphics
      pygame.SHOWN         window is opened in visible mode (default)
      pygame.HIDDEN        window is opened in hidden mode


   .. versionadded:: 2.0.0 ``SCALED``, ``SHOWN`` and ``HIDDEN``

   By setting the ``vsync`` parameter to ``1``, it is possible to get a display
   with vertical sync, but you are not guaranteed to get one. The request only
   works at all for calls to ``set_mode()`` with the ``pygame.OPENGL`` or
   ``pygame.SCALED`` flags set, and is still not guaranteed even with one of
   those set. What you get depends on the hardware and driver configuration
   of the system pygame is running on. Here is an example usage of a call
   to ``set_mode()`` that may give you a display with vsync:

   ::

     flags = pygame.OPENGL | pygame.FULLSCREEN
     window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)

   Vsync behaviour is considered experimental, and may change in future releases.

   .. versionadded:: 2.0.0 ``vsync``

   Basic example:

   ::

        # Open a window on the screen
        screen_width=700
        screen_height=400
        screen=pygame.display.set_mode([screen_width, screen_height])

   The display index ``0`` means the default display is used. If no display
   index argument is provided, the default display can be overridden with an
   environment variable.


   .. versionchanged:: 1.9.5 ``display`` argument added

   .. versionchanged:: 2.1.3
      pygame now ensures that subsequent calls to this function clears the
      window to black. On older versions, this was an implementation detail
      on the major platforms this function was tested with.

   .. ## pygame.display.set_mode ##

.. function:: get_surface

   | :sl:`Get a reference to the currently set display surface`
   | :sg:`get_surface() -> Surface`

   Return a reference to the currently set display Surface. If no display mode
   has been set this will return None.

   .. ## pygame.display.get_surface ##

.. function:: flip

   | :sl:`Update the full display Surface to the screen`
   | :sg:`flip() -> None`

   This will update the contents of the entire display. If your display mode is
   using the flags ``pygame.HWSURFACE`` and ``pygame.DOUBLEBUF`` on pygame 1,
   this will wait for a vertical retrace and swap the surfaces.

   When using an ``pygame.OPENGL`` display mode this will perform a gl buffer
   swap.

   .. ## pygame.display.flip ##

.. function:: update

   | :sl:`Update portions of the screen for software displays`
   | :sg:`update(rectangle=None) -> None`
   | :sg:`update(rectangle_list) -> None`

   This function is like an optimized version of ``pygame.display.flip()`` for
   software displays. It allows only a portion of the screen to be updated,
   instead of the entire area. If no argument is passed it updates the entire
   Surface area like ``pygame.display.flip()``.

   Note that calling ``display.update(None)`` means no part of the window is
   updated. Whereas ``display.update()`` means the whole window is updated.

   You can pass the function a single rectangle, or a sequence of rectangles.
   It is more efficient to pass many rectangles at once than to call update
   multiple times with single or a partial list of rectangles. If passing a
   sequence of rectangles it is safe to include None values in the list, which
   will be skipped.

   This call cannot be used on ``pygame.OPENGL`` displays and will generate an
   exception.

   .. ## pygame.display.update ##

.. function:: get_driver

   | :sl:`Get the name of the pygame display backend`
   | :sg:`get_driver() -> name`

   Pygame chooses one of many available display backends when it is
   initialized. This returns the internal name used for the display backend.
   This can be used to provide limited information about what display
   capabilities might be accelerated. See the ``SDL_VIDEODRIVER`` flags in
   ``pygame.display.set_mode()`` to see some of the common options.

   .. ## pygame.display.get_driver ##

.. function:: Info

   | :sl:`Create a video display information object`
   | :sg:`Info() -> VideoInfo`

   Creates a simple object containing several attributes to describe the
   current graphics environment. If this is called before
   ``pygame.display.set_mode()`` some platforms can provide information about
   the default display mode. This can also be called after setting the display
   mode to verify specific display options were satisfied. The VidInfo object
   has several attributes:

   ::

     hw:         1 if the display is hardware accelerated
     wm:         1 if windowed display modes can be used
     video_mem:  The megabytes of video memory on the display. This is 0 if
                 unknown
     bitsize:    Number of bits used to store each pixel
     bytesize:   Number of bytes used to store each pixel
     masks:      Four values used to pack RGBA values into pixels
     shifts:     Four values used to pack RGBA values into pixels
     losses:     Four values used to pack RGBA values into pixels
     blit_hw:    1 if hardware Surface blitting is accelerated
     blit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated
     blit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated
     blit_sw:    1 if software Surface blitting is accelerated
     blit_sw_CC: 1 if software Surface colorkey blitting is accelerated
     blit_sw_A:  1 if software Surface pixel alpha blitting is accelerated
     current_h, current_w:  Height and width of the current video mode, or
                 of the desktop mode if called before the display.set_mode
                 is called. (current_h, current_w are available since
                 SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if
                 an old SDL is being used.

   .. ## pygame.display.Info ##

.. function:: get_wm_info

   | :sl:`Get information about the current windowing system`
   | :sg:`get_wm_info() -> dict`

   Creates a dictionary filled with string keys. The strings and values are
   arbitrarily created by the system. Some systems may have no information and
   an empty dictionary will be returned. Most platforms will return a "window"
   key with the value set to the system id for the current display.

   .. versionadded:: 1.7.1

   .. ## pygame.display.get_wm_info ##

.. function:: get_desktop_sizes

   | :sl:`Get sizes of active desktops`
   | :sg:`get_desktop_sizes() -> list`

   This function returns the sizes of the currently configured
   virtual desktops as a list of (x, y) tuples of integers.

   The length of the list is not the same as the number of attached monitors,
   as a desktop can be mirrored across multiple monitors. The desktop sizes
   do not indicate the maximum monitor resolutions supported by the hardware,
   but the desktop size configured in the operating system.

   In order to fit windows into the desktop as it is currently configured, and
   to respect the resolution configured by the operating system in fullscreen
   mode, this function *should* be used to replace many use cases of
   ``pygame.display.list_modes()`` whenever applicable.

   .. versionadded:: 2.0.0

.. function:: list_modes

   | :sl:`Get list of available fullscreen modes`
   | :sg:`list_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -> list`

   This function returns a list of possible sizes for a specified color
   depth. The return value will be an empty list if no display modes are
   available with the given arguments. A return value of ``-1`` means that
   any requested size should work (this is likely the case for windowed
   modes). Mode sizes are sorted from biggest to smallest.

   If depth is ``0``, the current/best color depth for the display is used.
   The flags defaults to ``pygame.FULLSCREEN``, but you may need to add
   additional flags for specific fullscreen modes.

   The display index ``0`` means the default display is used.

   Since pygame 2.0, ``pygame.display.get_desktop_sizes()`` has taken over
   some use cases from ``pygame.display.list_modes()``:

   To find a suitable size for non-fullscreen windows, it is preferable to
   use ``pygame.display.get_desktop_sizes()`` to get the size of the *current*
   desktop, and to then choose a smaller window size. This way, the window is
   guaranteed to fit, even when the monitor is configured to a lower resolution
   than the maximum supported by the hardware.

   To avoid changing the physical monitor resolution, it is also preferable to
   use ``pygame.display.get_desktop_sizes()`` to determine the fullscreen
   resolution. Developers are strongly advised to default to the current
   physical monitor resolution unless the user explicitly requests a different
   one (e.g. in an options menu or configuration file).

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.list_modes ##

.. function:: mode_ok

   | :sl:`Pick the best color depth for a display mode`
   | :sg:`mode_ok(size, flags=0, depth=0, display=0) -> depth`

   This function uses the same arguments as ``pygame.display.set_mode()``. It
   is used to determine if a requested display mode is available. It will
   return ``0`` if the display mode cannot be set. Otherwise it will return a
   pixel depth that best matches the display asked for.

   Usually the depth argument is not passed, but some platforms can support
   multiple display depths. If passed it will hint to which depth is a better
   match.

   The function will return ``0`` if the passed display flags cannot be set.

   The display index ``0`` means the default display is used.

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.mode_ok ##

.. function:: gl_get_attribute

   | :sl:`Get the value for an OpenGL flag for the current display`
   | :sg:`gl_get_attribute(flag) -> value`

   After calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   it is a good idea to check the value of any requested OpenGL attributes. See
   ``pygame.display.gl_set_attribute()`` for a list of valid flags.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.gl_get_attribute ##

.. function:: gl_set_attribute

   | :sl:`Request an OpenGL display attribute for the display mode`
   | :sg:`gl_set_attribute(flag, value) -> None`

   When calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   Pygame automatically handles setting the OpenGL attributes like color and
   double-buffering. OpenGL offers several other attributes you may want control
   over. Pass one of these attributes as the flag, and its appropriate value.
   This must be called before ``pygame.display.set_mode()``.

   Many settings are the requested minimum. Creating a window with an OpenGL context
   will fail if OpenGL cannot provide the requested attribute, but it may for example
   give you a stencil buffer even if you request none, or it may give you a larger
   one than requested.

   The ``OPENGL`` flags are:

   ::

     GL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,
     GL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,
     GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO

   :const:`GL_MULTISAMPLEBUFFERS`

     Whether to enable multisampling anti-aliasing.
     Defaults to 0 (disabled).

     Set ``GL_MULTISAMPLESAMPLES`` to a value
     above 0 to control the amount of anti-aliasing.
     A typical value is 2 or 3.

   :const:`GL_STENCIL_SIZE`

     Minimum bit size of the stencil buffer. Defaults to 0.

   :const:`GL_DEPTH_SIZE`

     Minimum bit size of the depth buffer. Defaults to 16.

   :const:`GL_STEREO`

     1 enables stereo 3D. Defaults to 0.

   :const:`GL_BUFFER_SIZE`

     Minimum bit size of the frame buffer. Defaults to 0.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. versionadded:: 2.0.0 Additional attributes:

   ::

     GL_ACCELERATED_VISUAL,
     GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,
     GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,
     GL_SHARE_WITH_CURRENT_CONTEXT,
     GL_CONTEXT_RELEASE_BEHAVIOR,
     GL_FRAMEBUFFER_SRGB_CAPABLE

   :const:`GL_CONTEXT_PROFILE_MASK`

     Sets the OpenGL profile to one of these values:

     ::

       GL_CONTEXT_PROFILE_CORE             disable deprecated features
       GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features
       GL_CONTEXT_PROFILE_ES               allow only the ES feature
                                           subset of OpenGL

   :const:`GL_ACCELERATED_VISUAL`

     Set to 1 to require hardware acceleration, or 0 to force software render.
     By default, both are allowed.

   .. ## pygame.display.gl_set_attribute ##

.. function:: get_active

   | :sl:`Returns True when the display is active on the screen`
   | :sg:`get_active() -> bool`

   Returns True when the display Surface is considered actively
   renderable on the screen and may be visible to the user.  This is
   the default state immediately after ``pygame.display.set_mode()``.
   This method may return True even if the application is fully hidden
   behind another application window.

   This will return False if the display Surface has been iconified or
   minimized (either via ``pygame.display.iconify()`` or via an OS
   specific method such as the minimize-icon available on most
   desktops).

   The method can also return False for other reasons without the
   application being explicitly iconified or minimized by the user.  A
   notable example being if the user has multiple virtual desktops and
   the display Surface is not on the active virtual desktop.

   .. note:: This function returning True is unrelated to whether the
       application has input focus.  Please see
       ``pygame.key.get_focused()`` and ``pygame.mouse.get_focused()``
       for APIs related to input focus.

   .. ## pygame.display.get_active ##

.. function:: iconify

   | :sl:`Iconify the display surface`
   | :sg:`iconify() -> bool`

   Request the window for the display surface be iconified or hidden. Not all
   systems and displays support an iconified display. The function will return
   True if successful.

   When the display is iconified ``pygame.display.get_active()`` will return
   ``False``. The event queue should receive an ``ACTIVEEVENT`` event when the
   window has been iconified. Additionally, the event queue also receives a
   ``WINDOWEVENT_MINIMIZED`` event when the window has been iconified on pygame 2.

   .. ## pygame.display.iconify ##

.. function:: toggle_fullscreen

   | :sl:`Switch between fullscreen and windowed displays`
   | :sg:`toggle_fullscreen() -> int`

   Switches the display window between windowed and fullscreen modes.
   Display driver support is not great when using pygame 1, but with
   pygame 2 it is the most reliable method to switch to and from fullscreen.

   Supported display drivers in pygame 1:

    * x11 (Linux/Unix)
    * wayland (Linux/Unix)

   Supported display drivers in pygame 2:

    * windows (Windows)
    * x11 (Linux/Unix)
    * wayland (Linux/Unix)
    * cocoa (OSX/Mac)

   .. Note:: :func:`toggle_fullscreen` doesn't work on Windows
             unless the window size is in :func:`pygame.display.list_modes()` or
             the window is created with the flag ``pygame.SCALED``.
             See `issue #2380 <https://github.com/pygame/pygame/issues/2380>`_.

   .. ## pygame.display.toggle_fullscreen ##

.. function:: set_gamma

   | :sl:`Change the hardware gamma ramps`
   | :sg:`set_gamma(red, green=None, blue=None) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma values on the display hardware. If the
   green and blue arguments are not passed, they will both be the same as red.
   Not all systems and hardware support gamma ramps, if the function succeeds
   it will return ``True``.

   A gamma value of ``1.0`` creates a linear color table. Lower values will
   darken the display and higher values will brighten.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma ##

.. function:: set_gamma_ramp

   | :sl:`Change the hardware gamma ramps with a custom lookup`
   | :sg:`set_gamma_ramp(red, green, blue) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma ramps with an explicit lookup table. Each
   argument should be sequence of 256 integers. The integers should range
   between ``0`` and ``0xffff``. Not all systems and hardware support gamma
   ramps, if the function succeeds it will return ``True``.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma_ramp ##

.. function:: set_icon

   | :sl:`Change the system image for the display window`
   | :sg:`set_icon(Surface) -> None`

   Sets the runtime icon the system will use to represent the display window.
   All windows default to a simple pygame logo for the window icon.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   You can pass any surface, but most systems want a smaller image around
   32x32. The image can have colorkey transparency which will be passed to the
   system.

   Some systems do not allow the window icon to change after it has been shown.
   This function can be called before ``pygame.display.set_mode()`` to create
   the icon before the display mode is set.

   .. ## pygame.display.set_icon ##

.. function:: set_caption

   | :sl:`Set the current window caption`
   | :sg:`set_caption(title, icontitle=None) -> None`

   If the display has a window title, this function will change the name on the
   window. In pygame 1.x, some systems supported an alternate shorter title to
   be used for minimized displays, but in pygame 2 ``icontitle`` does nothing.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   
   .. ## pygame.display.set_caption ##

.. function:: get_caption

   | :sl:`Get the current window caption`
   | :sg:`get_caption() -> (title, icontitle)`

   Returns the title and icontitle for the display window. In pygame 2.x
   these will always be the same value.

   .. ## pygame.display.get_caption ##

.. function:: set_palette

   | :sl:`Set the display color palette for indexed displays`
   | :sg:`set_palette(palette=None) -> None`

   This will change the video display color palette for 8-bit displays. This
   does not change the palette for the actual display Surface, only the palette
   that is used to display the Surface. If no palette argument is passed, the
   system default palette will be restored. The palette is a sequence of
   ``RGB`` triplets.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.set_palette ##

.. function:: get_num_displays

   | :sl:`Return the number of displays`
   | :sg:`get_num_displays() -> int`

   Returns the number of available displays. This is always 1 if
   :func:`pygame.get_sdl_version()` returns a major version number below 2.

   .. versionadded:: 1.9.5

   .. ## pygame.display.get_num_displays ##

.. function:: get_window_size

   | :sl:`Return the size of the window or screen`
   | :sg:`get_window_size() -> tuple`

   Returns the size of the window initialized with :func:`pygame.display.set_mode()`.
   This may differ from the size of the display surface if ``SCALED`` is used.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_window_size ##

.. function:: get_allow_screensaver

   | :sl:`Return whether the screensaver is allowed to run.`
   | :sg:`get_allow_screensaver() -> bool`

   Return whether screensaver is allowed to run whilst the app is running.
   Default is ``False``.
   By default pygame does not allow the screensaver during game play.

   .. note:: Some platforms do not have a screensaver or support
             disabling the screensaver.  Please see
             :func:`pygame.display.set_allow_screensaver()` for
             caveats with screensaver support.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_allow_screensaver ##

.. function:: set_allow_screensaver

   | :sl:`Set whether the screensaver may run`
   | :sg:`set_allow_screensaver(bool) -> None`

   Change whether screensavers should be allowed whilst the app is running.
   The default value of the argument to the function is True.
   By default pygame does not allow the screensaver during game play.

   If the screensaver has been disallowed due to this function, it will automatically
   be allowed to run when :func:`pygame.quit()` is called.

   It is possible to influence the default value via the environment variable
   ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER``, which can be set to either ``0`` (disable)
   or ``1`` (enable).

   .. note:: Disabling screensaver is subject to platform support.
             When platform support is absent, this function will
             silently appear to work even though the screensaver state
             is unchanged.  The lack of feedback is due to SDL not
             providing any supported method for determining whether
             it supports changing the screensaver state.
             ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER`` is available in SDL 2.0.2 or later.
             SDL1.2 does not implement this.

   .. versionadded:: 2.0.0


   .. ## pygame.display.set_allow_screensaver ##

.. ## pygame.display ##


--- Contenu du fichier : event.rst.txt ---
.. include:: common.txt

:mod:`pygame.event`
===================

.. module:: pygame.event
   :synopsis: pygame module for interacting with events and queues

| :sl:`pygame module for interacting with events and queues`

Pygame handles all its event messaging through an event queue. The routines in
this module help you manage that event queue. The input queue is heavily
dependent on the :mod:`pygame.display` module. If the display has not been
initialized and a video mode not set, the event queue may not work properly.

The event queue has an upper limit on the number of events it can hold. When
the queue becomes full new events are quietly dropped. To prevent lost events,
especially input events which signal a quit command, your program must handle
events every frame (with ``pygame.event.get()``, ``pygame.event.pump()``,
``pygame.event.wait()``, ``pygame.event.peek()`` or ``pygame.event.clear()``)
and process them. Not handling events may cause your system to decide your
program has locked up. To speed up queue processing use
:func:`pygame.event.set_blocked()` to limit which events get queued.

To get the state of various input devices, you can forego the event queue and
access the input devices directly with their appropriate modules:
:mod:`pygame.mouse`, :mod:`pygame.key`, and :mod:`pygame.joystick`. If you use
this method, remember that pygame requires some form of communication with the
system window manager and other parts of the platform. To keep pygame in sync
with the system, you will need to call :func:`pygame.event.pump()` to keep
everything current. Usually, this should be called once per game loop.
Note: Joysticks will not send any events until the device has been initialized.

The event queue contains :class:`pygame.event.Event` event objects.
There are a variety of ways to access the queued events, from simply
checking for the existence of events, to grabbing them directly off the stack.
The event queue also offers some simple filtering which can slightly help
performance by blocking certain event types from the queue. Use
:func:`pygame.event.set_allowed()` and :func:`pygame.event.set_blocked()` to
change this filtering. By default, all event types can be placed on the queue.

All :class:`pygame.event.Event` instances contain an event type identifier
and attributes specific to that event type. The event type identifier is
accessible as the :attr:`pygame.event.Event.type` property. Any of the
event specific attributes can be accessed through the
:attr:`pygame.event.Event.__dict__` attribute or directly as an attribute
of the event object (as member lookups are passed through to the object's
dictionary values). The event object has no method functions. Users can create
their own new events with the :func:`pygame.event.Event()` function.

The event type identifier is in between the values of ``NOEVENT`` and
``NUMEVENTS``. User defined events should have a value in the inclusive range
of ``USEREVENT`` to ``NUMEVENTS - 1``. User defined events can get a custom
event number with :func:`pygame.event.custom_type()`. 
It is recommended all user events follow this system.

Events support equality and inequality comparisons. Two events are equal if
they are the same type and have identical attribute values.

While debugging and experimenting, you can print an event object for a quick
display of its type and members. The function :func:`pygame.event.event_name()`
can be used to get a string representing the name of the event type.

Events that come from the system will have a guaranteed set of member
attributes based on the type. The following is a list of event types with their
specific attributes.

::

    QUIT              none
    ACTIVEEVENT       gain, state
    KEYDOWN           key, mod, unicode, scancode
    KEYUP             key, mod, unicode, scancode
    MOUSEMOTION       pos, rel, buttons, touch
    MOUSEBUTTONUP     pos, button, touch
    MOUSEBUTTONDOWN   pos, button, touch
    JOYAXISMOTION     joy (deprecated), instance_id, axis, value
    JOYBALLMOTION     joy (deprecated), instance_id, ball, rel
    JOYHATMOTION      joy (deprecated), instance_id, hat, value
    JOYBUTTONUP       joy (deprecated), instance_id, button
    JOYBUTTONDOWN     joy (deprecated), instance_id, button
    VIDEORESIZE       size, w, h
    VIDEOEXPOSE       none
    USEREVENT         code

.. versionchanged:: 2.0.0 The ``joy`` attribute was deprecated, ``instance_id`` was added.

.. versionchanged:: 2.0.1 The ``unicode`` attribute was added to ``KEYUP`` event.

Note that ``ACTIVEEVENT``, ``VIDEORESIZE`` and ``VIDEOEXPOSE`` are considered
as "legacy" events, the use of pygame2 ``WINDOWEVENT`` API is recommended over
the use of this older API.

You can also find a list of constants for keyboard keys
:ref:`here <key-constants-label>`.

A keyboard event occurs when a key is pressed (``KEYDOWN``) and when a key is released (``KEYUP``) 
The ``key`` attribute of keyboard events contains the value of what key was pressed or released.
The ``mod`` attribute contains information about the state of keyboard modifiers (SHIFT, CTRL, ALT, etc.).
The ``unicode`` attribute stores the 16-bit unicode value of the key that was pressed or released.
The ``scancode`` attribute represents the physical location of a key on the keyboard.

The ``ACTIVEEVENT`` contains information about the application gaining or losing focus. The ``gain`` attribute
will be 1 if the mouse enters the window, otherwise ``gain`` will be 0.  The ``state`` attribute will have a 
value of ``SDL_APPMOUSEFOCUS`` if mouse focus was gained/lost, ``SDL_APPINPUTFOCUS`` if the application loses
or gains keyboard focus, or ``SDL_APPACTIVE`` if the application is minimized (``gain`` will be 0) or restored.

|

When compiled with SDL2, pygame has these additional events and their
attributes.

::

    AUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)
    AUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)
    FINGERMOTION       touch_id, finger_id, x, y, dx, dy
    FINGERDOWN         touch_id, finger_id, x, y, dx, dy
    FINGERUP           touch_id, finger_id, x, y, dx, dy
    MOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y
    MULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers
    TEXTEDITING        text, start, length
    TEXTINPUT          text

.. versionadded:: 1.9.5

.. versionchanged:: 2.0.2 Fixed amount horizontal scroll (x, positive to the right and negative to the left).

.. versionchanged:: 2.0.2 The ``touch`` attribute was added to all the ``MOUSE`` events.

The ``touch`` attribute of ``MOUSE`` events indicates whether or not the events were generated
by a touch input device, and not a real mouse. You might want to ignore such events, if your application
already handles ``FINGERMOTION``, ``FINGERDOWN`` and ``FINGERUP`` events.

.. versionadded:: 2.1.3 Added ``precise_x`` and ``precise_y`` to ``MOUSEWHEEL`` events

``MOUSEWHEEL`` event occurs whenever the mouse wheel is moved. 
The ``which`` attribute determines if the event was generated from a touch input device vs an actual 
mousewheel. 
The ``preciseX`` attribute contains a float with the amount scrolled horizontally (positive to the right,
negative to the left).
The ``preciseY`` attribute contains a float with the amount scrolled vertically (positive away from user,
negative towards user).
The ``flipped`` attribute determines if the values in x and y will be opposite or not. If ``SDL_MOUSEWHEEL_FLIPPED``
is defined, the direction of x and y will be opposite.

``TEXTEDITING`` event is triggered when a user activates an input method via hotkey or selecting an 
input method in a GUI and starts typing

The ``which`` attribute for ``AUDIODEVICE*`` events is an integer representing the index for new audio 
devices that are added. ``AUDIODEVICE*`` events are used to update audio settings or device list. 

|

Many new events were introduced in pygame 2.

pygame can recognize text or files dropped in its window. If a file
is dropped, ``DROPFILE`` event will be sent, ``file`` will be its path.
The ``DROPTEXT`` event is only supported on X11.

``MIDIIN`` and ``MIDIOUT`` are events reserved for :mod:`pygame.midi` use.
``MIDI*`` events differ from ``AUDIODEVICE*`` events in that AUDIODEVICE 
events are triggered when there is a state change related to an audio 
input/output device. 

pygame 2 also supports controller hot-plugging

::

   Event name               Attributes and notes

   DROPFILE                 file
   DROPBEGIN                (SDL backend >= 2.0.5)
   DROPCOMPLETE             (SDL backend >= 2.0.5)
   DROPTEXT                 text (SDL backend >= 2.0.5)
   MIDIIN
   MIDIOUT
   CONTROLLERDEVICEADDED    device_index
   JOYDEVICEADDED           device_index
   CONTROLLERDEVICEREMOVED  instance_id
   JOYDEVICEREMOVED         instance_id
   CONTROLLERDEVICEREMAPPED instance_id
   KEYMAPCHANGED            (SDL backend >= 2.0.4)
   CLIPBOARDUPDATE
   RENDER_TARGETS_RESET     (SDL backend >= 2.0.2)
   RENDER_DEVICE_RESET      (SDL backend >= 2.0.4)
   LOCALECHANGED            (SDL backend >= 2.0.14)

Also in this version, ``instance_id`` attributes were added to joystick events,
and the ``joy`` attribute was deprecated.

``KEYMAPCHANGED`` is a type of an event sent when keymap changes due to a 
system event such as an input language or keyboard layout change.

``CLIPBOARDUPDATE`` is an event sent when clipboard changes. This can still
be considered as an experimental feature, some kinds of clipboard changes might
not trigger this event.

``LOCALECHANGED`` is an event sent when user locale changes

.. versionadded:: 2.0.0

.. versionadded:: 2.1.3 ``KEYMAPCHANGED``, ``CLIPBOARDUPDATE``, 
   ``RENDER_TARGETS_RESET``, ``RENDER_DEVICE_RESET`` and ``LOCALECHANGED``

|

Since pygame 2.0.1, there are a new set of events, called window events.
Here is a list of all window events, along with a short description

::

   Event type                Short description

   WINDOWSHOWN            Window became shown
   WINDOWHIDDEN           Window became hidden
   WINDOWEXPOSED          Window got updated by some external event
   WINDOWMOVED            Window got moved
   WINDOWRESIZED          Window got resized
   WINDOWSIZECHANGED      Window changed its size
   WINDOWMINIMIZED        Window was minimized
   WINDOWMAXIMIZED        Window was maximized
   WINDOWRESTORED         Window was restored
   WINDOWENTER            Mouse entered the window
   WINDOWLEAVE            Mouse left the window
   WINDOWFOCUSGAINED      Window gained focus
   WINDOWFOCUSLOST        Window lost focus
   WINDOWCLOSE            Window was closed
   WINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)
   WINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)
   WINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)
   WINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)


``WINDOWMOVED``, ``WINDOWRESIZED`` and ``WINDOWSIZECHANGED`` have ``x`` and
``y`` attributes, ``WINDOWDISPLAYCHANGED`` has a ``display_index`` attribute.
All windowevents have a ``window`` attribute.

.. versionadded:: 2.0.1

.. versionadded:: 2.1.3 ``WINDOWICCPROFCHANGED`` and ``WINDOWDISPLAYCHANGED``

|

On Android, the following events can be generated

::

   Event type                 Short description

   APP_TERMINATING           OS is terminating the application
   APP_LOWMEMORY             OS is low on memory, try to free memory if possible
   APP_WILLENTERBACKGROUND   Application is entering background
   APP_DIDENTERBACKGROUND    Application entered background
   APP_WILLENTERFOREGROUND   Application is entering foreground
   APP_DIDENTERFOREGROUND    Application entered foreground

.. versionadded:: 2.1.3

|

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system. If you are not using other event functions in your
   game, you should call ``pygame.event.pump()`` to allow pygame to handle
   internal actions.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.event` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.pump ##

.. function:: get

   | :sl:`get events from the queue`
   | :sg:`get(eventtype=None) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True, exclude=None) -> Eventlist`

   This will get all the messages and remove them from the queue. If a type or
   sequence of types is given only those messages will be removed from the
   queue and returned.

   If a type or sequence of types is passed in the ``exclude`` argument
   instead, then all only *other* messages will be removed from the queue. If
   an ``exclude`` parameter is passed, the ``eventtype`` parameter *must* be
   None.

   If you are only taking specific events from the queue, be aware that the
   queue could eventually fill up with the events you are not interested.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument
   .. versionchanged:: 2.0.2 Added ``exclude`` argument

   .. ## pygame.event.get ##

.. function:: poll

   | :sl:`get a single event from the queue`
   | :sg:`poll() -> Event instance`

   Returns a single event from the queue. If the event queue is empty an event
   of type ``pygame.NOEVENT`` will be returned immediately. The returned event
   is removed from the queue.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.poll ##

.. function:: wait

   | :sl:`wait for a single event from the queue`
   | :sg:`wait() -> Event instance`
   | :sg:`wait(timeout) -> Event instance`

   Returns a single event from the queue. If the queue is empty this function
   will wait until one is created. From pygame 2.0.0, if a ``timeout`` argument
   is given, the function will return an event of type ``pygame.NOEVENT`` 
   if no events enter the queue in ``timeout`` milliseconds. The event is removed
   from the queue once it has been returned. While the program is waiting it will
   sleep in an idle state. This is important for programs that want to share the
   system with other applications.

   .. versionchanged:: 2.0.0.dev13 Added ``timeout`` argument

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.wait ##

.. function:: peek

   | :sl:`test if event types are waiting on the queue`
   | :sg:`peek(eventtype=None) -> bool`
   | :sg:`peek(eventtype=None, pump=True) -> bool`

   Returns ``True`` if there are any events of the given type waiting on the
   queue. If a sequence of event types is passed, this will return ``True`` if
   any of those events are on the queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.peek ##

.. function:: clear

   | :sl:`remove all events from the queue`
   | :sg:`clear(eventtype=None) -> None`
   | :sg:`clear(eventtype=None, pump=True) -> None`

   Removes all events from the queue. If ``eventtype`` is given, removes the given event
   or sequence of events. This has the same effect as :func:`pygame.event.get()` except ``None``
   is returned. It can be slightly more efficient when clearing a full event queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.clear ##

.. function:: event_name

   | :sl:`get the string name from an event id`
   | :sg:`event_name(type) -> string`

   Returns a string representing the name (in CapWords style) of the given
   event type.

   "UserEvent" is returned for all values in the user event id range.
   "Unknown" is returned when the event type does not exist.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   .. ## pygame.event.event_name ##


.. function:: set_blocked

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_blocked(type) -> None`
   | :sg:`set_blocked(typelist) -> None`
   | :sg:`set_blocked(None) -> None`

   The given event types are not allowed to appear on the event queue. By
   default all events can be placed on the queue. It is safe to disable an
   event type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are blocked
   from being placed on the queue.

   .. ## pygame.event.set_blocked ##

.. function:: set_allowed

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_allowed(type) -> None`
   | :sg:`set_allowed(typelist) -> None`
   | :sg:`set_allowed(None) -> None`

   The given event types are allowed to appear on the event queue. By default,
   all event types can be placed on the queue. It is safe to enable an event
   type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are allowed
   to be placed on the queue.

   .. ## pygame.event.set_allowed ##

.. function:: get_blocked

   | :sl:`test if a type of event is blocked from the queue`
   | :sg:`get_blocked(type) -> bool`
   | :sg:`get_blocked(typelist) -> bool`

   Returns ``True`` if the given event type is blocked from the queue. If a
   sequence of event types is passed, this will return ``True`` if any of those
   event types are blocked.

   .. ## pygame.event.get_blocked ##

.. function:: set_grab

   | :sl:`control the sharing of input devices with other applications`
   | :sg:`set_grab(bool) -> None`

   When your program runs in a windowed environment, it will share the mouse
   and keyboard devices with other applications that have focus. If your
   program sets the event grab to ``True``, it will lock all input into your
   program.

   It is best to not always grab the input, since it prevents the user from
   doing other things on their system.

   .. ## pygame.event.set_grab ##

.. function:: get_grab

   | :sl:`test if the program is sharing input devices`
   | :sg:`get_grab() -> bool`

   Returns ``True`` when the input events are grabbed for this application.

   .. ## pygame.event.get_grab ##

.. function:: set_keyboard_grab

   | :sl:`grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.`
   | :sg:`set_keyboard_grab(bool) -> None`

   Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.
   Note that not all system keyboard shortcuts can be captured by applications (one example is Ctrl+Alt+Del on Windows).
   This is primarily intended for specialized applications such as VNC clients or VM frontends. Normal games should not use keyboard grab.

   .. versionadded:: 2.5.0

   .. ## pygame.event.set_keyboard_grab ##

.. function:: get_keyboard_grab

   | :sl:`get the current keyboard grab state`
   | :sg:`get_keyboard_grab() -> bool`

   Returns ``True`` when keyboard grab is enabled.

   .. versionadded:: 2.5.0

   .. ## pygame.event.get_keyboard_grab ##

.. function:: post

   | :sl:`place a new event on the queue`
   | :sg:`post(Event) -> bool`

   Places the given event at the end of the event queue.

   This is usually used for placing custom events on the event queue.
   Any type of event can be posted, and the events posted can have any attributes.

   This returns a boolean on whether the event was posted or not. Blocked events
   cannot be posted, and this function returns ``False`` if you try to post them.

   .. versionchanged:: 2.0.1 returns a boolean, previously returned ``None``

   .. ## pygame.event.post ##

.. function:: custom_type

   | :sl:`make custom user event type`
   | :sg:`custom_type() -> int`

   Reserves a ``pygame.USEREVENT`` for a custom use.

   If too many events are made a :exc:`pygame.error` is raised.

   .. versionadded:: 2.0.0.dev3

   .. ## pygame.event.custom_type ##

.. class:: Event

   | :sl:`pygame object for representing events`
   | :sg:`Event(type, dict) -> Event`
   | :sg:`Event(type, \**attributes) -> Event`

   A pygame object used for representing an event. ``Event`` instances
   support attribute assignment and deletion.

   When creating the object, the attributes may come from a dictionary
   argument with string keys or from keyword arguments.

   .. note::
      From version 2.1.3 ``EventType`` is an alias for ``Event``. Beforehand,
      ``Event`` was a function that returned ``EventType`` instances. Use of
      ``Event`` is preferred over ``EventType`` wherever it is possible, as
      the latter could be deprecated in a future version.

   .. attribute:: type

      | :sl:`event type identifier.`
      | :sg:`type -> int`

      Read-only. The event type identifier. For user created event
      objects, this is the ``type`` argument passed to
      :func:`pygame.event.Event()`.

      For example, some predefined event identifiers are ``QUIT`` and
      ``MOUSEMOTION``.

      .. ## pygame.event.Event.type ##

   .. attribute:: __dict__

      | :sl:`event attribute dictionary`
      | :sg:`__dict__ -> dict`

      Read-only. The event type specific attributes of an event. The
      ``dict`` attribute is a synonym for backward compatibility.

      For example, the attributes of a ``KEYDOWN`` event would be ``unicode``,
      ``key``, and ``mod``

      .. ## pygame.event.Event.__dict__ ##

   .. versionadded:: 1.9.2 Mutable attributes.

   .. ## pygame.event.Event ##

.. ## pygame.event ##


--- Contenu du fichier : mask.rst.txt ---
.. include:: common.txt

:mod:`pygame.mask`
==================

.. module:: pygame.mask
   :synopsis: pygame module for image masks.

| :sl:`pygame module for image masks.`

Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
to store which parts collide.

.. versionadded:: 1.8

.. versionchanged:: 2.0.2 Mask functions now support keyword arguments.

.. versionchanged:: 2.0.2 Mask functions that take positions or offsets now
                    support :class:`pygame.math.Vector2` arguments.


.. function:: from_surface

   | :sl:`Creates a Mask from the given surface`
   | :sg:`from_surface(surface) -> Mask`
   | :sg:`from_surface(surface, threshold=127) -> Mask`

   Creates a :class:`Mask` object from the given surface by setting all the
   opaque pixels and not setting the transparent pixels.

   If the surface uses a color-key, then it is used to decide which bits in
   the resulting mask are set. All the pixels that are **not** equal to the
   color-key are **set** and the pixels equal to the color-key are not set.

   If a color-key is not used, then the alpha value of each pixel is used to
   decide which bits in the resulting mask are set. All the pixels that have an
   alpha value **greater than** the ``threshold`` parameter are **set** and the
   pixels with an alpha value less than or equal to the ``threshold`` are
   not set.

   :param Surface surface: the surface to create the mask from
   :param int threshold: (optional) the alpha threshold (default is 127) to
      compare with each surface pixel's alpha value, if the ``surface`` is
      color-keyed this parameter is ignored

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. note::
      This function is used to create the masks for
      :func:`pygame.sprite.collide_mask`.

   .. ## pygame.mask.from_surface ##

.. function:: from_threshold

   | :sl:`Creates a mask by thresholding Surfaces`
   | :sg:`from_threshold(surface, color) -> Mask`
   | :sg:`from_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -> Mask`

   This is a more featureful method of getting a :class:`Mask` from a surface.

   If the optional ``othersurface`` is not used, all the pixels **within** the
   ``threshold`` of the ``color`` parameter are **set** in the resulting mask.

   If the optional ``othersurface`` is used, every pixel in the first surface
   that is **within** the ``threshold`` of the corresponding pixel in
   ``othersurface`` is **set** in the resulting mask.

   :param Surface surface: the surface to create the mask from
   :param color: color used to check if the surface's pixels are within the
      given ``threshold`` range, this parameter is ignored if the optional
      ``othersurface`` parameter is supplied
   :type color: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param threshold: (optional) the threshold range used to check the difference
      between two colors (default is ``(0, 0, 0, 255)``)
   :type threshold: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param Surface othersurface: (optional) used to check whether the pixels of
      the first surface are within the given ``threshold`` range of the pixels
      from this surface (default is ``None``)
   :param int palette_colors: (optional) indicates whether to use the palette
      colors or not, a nonzero value causes the palette colors to be used and a
      0 causes them not to be used (default is 1)

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. ## pygame.mask.from_threshold ##

.. class:: Mask

   | :sl:`pygame object for representing 2D bitmasks`
   | :sg:`Mask(size=(width, height)) -> Mask`
   | :sg:`Mask(size=(width, height), fill=False) -> Mask`

   A ``Mask`` object is used to represent a 2D bitmask. Each bit in
   the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
   to indicate an unset bit. Set bits in a mask can be used to detect collisions
   with other masks and their set bits.

   A filled mask has all of its bits set to 1, conversely an
   unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
   created unfilled (default) or filled by using the ``fill`` parameter. Masks
   can also be cleared or filled using the :func:`pygame.mask.Mask.clear()` and
   :func:`pygame.mask.Mask.fill()` methods respectively.

   A mask's coordinates start in the top left corner at ``(0, 0)`` just like
   :mod:`pygame.Surface`. Individual bits can be accessed using the
   :func:`pygame.mask.Mask.get_at()` and :func:`pygame.mask.Mask.set_at()`
   methods.

   .. _mask-offset-label:

   The methods :meth:`overlap`, :meth:`overlap_area`, :meth:`overlap_mask`,
   :meth:`draw`, :meth:`erase`, and :meth:`convolve` use an offset parameter
   to indicate the offset of another mask's top left corner from the calling
   mask's top left corner. The calling mask's top left corner is considered to
   be the origin ``(0, 0)``. Offsets are a sequence of two values
   ``(x_offset, y_offset)``. Positive and negative offset values are supported.

   ::

                 0 to x (x_offset)
                 :    :
         0 ..... +----:---------+
         to      |    :         |
         y .......... +-----------+
      (y_offset) |    | othermask |
                 |    +-----------+
                 | calling_mask |
                 +--------------+

   :param size: the dimensions of the mask (width and height)
   :param bool fill: (optional) create an unfilled mask (default: ``False``) or
      filled mask (``True``)

   :returns: a newly created :class:`Mask` object
   :rtype: Mask

   .. versionchanged:: 2.0.0
      Shallow copy support added. The :class:`Mask` class supports the special
      method ``__copy__()`` and shallow copying via ``copy.copy(mask)``.
   .. versionchanged:: 2.0.0 Subclassing support added. The :class:`Mask` class
      can be used as a base class.
   .. versionchanged:: 1.9.5 Added support for keyword arguments.
   .. versionchanged:: 1.9.5 Added the optional keyword parameter ``fill``.
   .. versionchanged:: 1.9.5 Added support for masks with a width and/or a
      height of 0.

   .. method:: copy

      | :sl:`Returns a new copy of the mask`
      | :sg:`copy() -> Mask`

      :returns: a new copy of this mask, the new mask will have the same width,
         height, and set/unset bits as the original
      :rtype: Mask

      .. note::
         If a mask subclass needs to copy any instance specific attributes
         then it should override the ``__copy__()`` method. The overridden
         ``__copy__()`` method needs to call ``super().__copy__()`` and then
         copy the required data as in the following example code.

         ::

            class SubMask(pygame.mask.Mask):
                def __copy__(self):
                    new_mask = super().__copy__()
                    # Do any SubMask attribute copying here.
                    return new_mask

      .. versionadded:: 2.0.0

      .. ## Mask.copy ##

   .. method:: get_size

      | :sl:`Returns the size of the mask`
      | :sg:`get_size() -> (width, height)`

      :returns: the size of the mask, (width, height)
      :rtype: tuple(int, int)

      .. ## Mask.get_size ##

   .. method:: get_rect

      | :sl:`Returns a Rect based on the size of the mask`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new :func:`pygame.Rect` object based on the size of this mask.
      The rect's default position will be ``(0, 0)`` and its default width and
      height will be the same as this mask's. The rect's attributes can be
      altered via :func:`pygame.Rect` attribute keyword arguments/values passed
      into this method. As an example, ``a_mask.get_rect(center=(10, 5))`` would
      create a :func:`pygame.Rect` based on the mask's size centered at the
      given position.

      :param dict kwargs: :func:`pygame.Rect` attribute keyword arguments/values
         that will be applied to the rect

      :returns: a new :func:`pygame.Rect` object based on the size of this mask
         with any :func:`pygame.Rect` attribute keyword arguments/values applied
         to it
      :rtype: Rect

      .. versionadded:: 2.0.0

      .. ## Mask.get_rect ##

   .. method:: get_at

      | :sl:`Gets the bit at the given position`
      | :sg:`get_at(pos) -> int`

      :param pos: the position of the bit to get (x, y)

      :returns: 1 if the bit is set, 0 if the bit is not set
      :rtype: int

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.get_at ##

   .. method:: set_at

      | :sl:`Sets the bit at the given position`
      | :sg:`set_at(pos) -> None`
      | :sg:`set_at(pos, value=1) -> None`

      :param pos: the position of the bit to set (x, y)
      :param int value: any nonzero int will set the bit to 1, 0 will set the
         bit to 0 (default is 1)

      :returns: ``None``
      :rtype: NoneType

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.set_at ##

   .. method:: overlap

      | :sl:`Returns the point of intersection`
      | :sg:`overlap(other, offset) -> (x, y)`
      | :sg:`overlap(other, offset) -> None`

      Returns the first point of intersection encountered between this mask and
      ``other``. A point of intersection is 2 overlapping set bits.

      The current algorithm searches the overlapping area in
      ``sizeof(unsigned long int) * CHAR_BIT`` bit wide column blocks (the value
      of ``sizeof(unsigned long int) * CHAR_BIT`` is platform dependent, for
      clarity it will be referred to as ``W``). Starting at the top left corner
      it checks bits 0 to ``W - 1`` of the first row (``(0, 0)`` to
      ``(W - 1, 0)``) then continues to the next row (``(0, 1)`` to
      ``(W - 1, 1)``). Once this entire column block is checked, it continues to
      the next one (``W`` to ``2 * W - 1``). This is repeated until it finds a
      point of intersection or the entire overlapping area is checked.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: point of intersection or ``None`` if no intersection
      :rtype: tuple(int, int) or NoneType

      .. ## Mask.overlap ##

   .. method:: overlap_area

      | :sl:`Returns the number of overlapping set bits`
      | :sg:`overlap_area(other, offset) -> numbits`

      Returns the number of overlapping set bits between between this mask and
      ``other``.

      This can be useful for collision detection. An approximate collision
      normal can be found by calculating the gradient of the overlapping area
      through the finite difference.

      ::

         dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
         dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: the number of overlapping set bits
      :rtype: int

      .. ## Mask.overlap_area ##

   .. method:: overlap_mask

      | :sl:`Returns a mask of the overlapping set bits`
      | :sg:`overlap_mask(other, offset) -> Mask`

      Returns a :class:`Mask`, the same size as this mask, containing the
      overlapping set bits between this mask and ``other``.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: a newly created :class:`Mask` with the overlapping bits set
      :rtype: Mask

      .. ## Mask.overlap_mask ##

   .. method:: fill

      | :sl:`Sets all bits to 1`
      | :sg:`fill() -> None`

      Sets all bits in the mask to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.fill ##

   .. method:: clear

      | :sl:`Sets all bits to 0`
      | :sg:`clear() -> None`

      Sets all bits in the mask to 0.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.clear ##

   .. method:: invert

      | :sl:`Flips all the bits`
      | :sg:`invert() -> None`

      Flips all of the bits in the mask. All the set bits are cleared to 0 and
      all the unset bits are set to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.invert ##

   .. method:: scale

      | :sl:`Resizes a mask`
      | :sg:`scale((width, height)) -> Mask`

      Creates a new :class:`Mask` of the requested size with its bits scaled
      from this mask.

      :param size: the width and height (size) of the mask to create

      :returns: a new :class:`Mask` object with its bits scaled from this mask
      :rtype: Mask

      :raises ValueError: if ``width < 0`` or ``height < 0``

      .. ## Mask.scale ##

   .. method:: draw

      | :sl:`Draws a mask onto another`
      | :sg:`draw(other, offset) -> None`

      Performs a bitwise OR, drawing ``othermask`` onto this mask.

      :param Mask other: the mask to draw onto this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.draw ##

   .. method:: erase

      | :sl:`Erases a mask from another`
      | :sg:`erase(other, offset) -> None`

      Erases (clears) all bits set in ``other`` from this mask.

      :param Mask other: the mask to erase from this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.erase ##

   .. method:: count

      | :sl:`Returns the number of set bits`
      | :sg:`count() -> bits`

      :returns: the number of set bits in the mask
      :rtype: int

      .. ## Mask.count ##

   .. method:: centroid

      | :sl:`Returns the centroid of the set bits`
      | :sg:`centroid() -> (x, y)`

      Finds the centroid (the center mass of the set bits) for this mask.

      :returns: a coordinate tuple indicating the centroid of the mask, it will
         return ``(0, 0)`` if the mask has no bits set
      :rtype: tuple(int, int)

      .. ## Mask.centroid ##

   .. method:: angle

      | :sl:`Returns the orientation of the set bits`
      | :sg:`angle() -> theta`

      Finds the approximate orientation (from -90 to 90 degrees) of the set bits
      in the mask. This works best if performed on a mask with only one
      connected component.

      :returns: the orientation of the set bits in the mask, it will return
         ``0.0`` if the mask has no bits set
      :rtype: float

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.angle ##

   .. method:: outline

      | :sl:`Returns a list of points outlining an object`
      | :sg:`outline() -> [(x, y), ...]`
      | :sg:`outline(every=1) -> [(x, y), ...]`

      Returns a list of points of the outline of the first connected component
      encountered in the mask. To find a connected component, the mask is
      searched per row (left to right) starting in the top left corner.

      The ``every`` optional parameter skips set bits in the outline. For
      example, setting it to 10 would return a list of every 10th set bit in the
      outline.

      :param int every: (optional) indicates the number of bits to skip over in
         the outline (default is 1)

      :returns: a list of points outlining the first connected component
         encountered, an empty list is returned if the mask has no bits set
      :rtype: list[tuple(int, int)]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.outline ##

   .. method:: convolve

      | :sl:`Returns the convolution of this mask with another mask`
      | :sg:`convolve(other) -> Mask`
      | :sg:`convolve(other, output=None, offset=(0, 0)) -> Mask`

      Convolve this mask with the given ``other`` Mask.

      :param Mask other: mask to convolve this mask with
      :param output: (optional) mask for output (default is ``None``)
      :type output: Mask or NoneType
      :param offset: the offset of ``other`` from this mask, (default is
         ``(0, 0)``)

      :returns: a :class:`Mask` with the ``(i - offset[0], j - offset[1])`` bit
         set, if shifting ``other`` (such that its bottom right corner is at
         ``(i, j)``) causes it to overlap with this mask

         If an ``output`` Mask is specified, the output is drawn onto it and
         it is returned. Otherwise a mask of size ``(MAX(0, width + other mask's
         width - 1), MAX(0, height + other mask's height - 1))`` is created and
         returned.
      :rtype: Mask

      .. ## Mask.convolve ##

   .. method:: connected_component

      | :sl:`Returns a mask containing a connected component`
      | :sg:`connected_component() -> Mask`
      | :sg:`connected_component(pos) -> Mask`

      A connected component is a group (1 or more) of connected set bits
      (orthogonally and diagonally). The SAUF algorithm, which checks 8 point
      connectivity, is used to find a connected component in the mask.

      By default this method will return a :class:`Mask` containing the largest
      connected component in the mask. Optionally, a bit coordinate can be
      specified and the connected component containing it will be returned. If
      the bit at the given location is not set, the returned :class:`Mask` will
      be empty (no bits set).

      :param pos: (optional) selects the connected component that contains the
         bit at this position

      :returns: a :class:`Mask` object (same size as this mask) with the largest
         connected component from this mask, if this mask has no bits set then
         an empty mask will be returned

         If the ``pos`` parameter is provided then the mask returned will have
         the connected component that contains this position. An empty mask will
         be returned if the ``pos`` parameter selects an unset bit.
      :rtype: Mask

      :raises IndexError: if the optional ``pos`` parameter is outside of the
         mask's bounds

      .. ## Mask.connected_component ##

   .. method:: connected_components

      | :sl:`Returns a list of masks of connected components`
      | :sg:`connected_components() -> [Mask, ...]`
      | :sg:`connected_components(minimum=0) -> [Mask, ...]`

      Provides a list containing a :class:`Mask` object for each connected
      component.

      :param int minimum: (optional) indicates the minimum number of bits (to
	 filter out noise) per connected component (default is 0, which equates
 	 to no minimum and is equivalent to setting it to 1, as a connected
         component must have at least 1 bit set)

      :returns: a list containing a :class:`Mask` object for each connected
         component, an empty list is returned if the mask has no bits set
      :rtype: list[Mask]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.connected_components ##

   .. method:: get_bounding_rects

      | :sl:`Returns a list of bounding rects of connected components`
      | :sg:`get_bounding_rects() -> [Rect, ...]`

      Provides a list containing a bounding rect for each connected component.

      :returns: a list containing a bounding rect for each connected component,
         an empty list is returned if the mask has no bits set
      :rtype: list[Rect]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.get_bounding_rects ##

   .. method:: to_surface

      | :sl:`Returns a surface with the mask drawn on it`
      | :sg:`to_surface() -> Surface`
      | :sg:`to_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface`

      Draws this mask on the given surface. Set bits (bits set to 1) and unset
      bits (bits set to 0) can be drawn onto a surface.

      :param surface: (optional) Surface to draw mask onto, if no surface is
         provided one will be created (default is ``None``, which will cause a
         surface with the parameters
         ``Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)`` to be
         created, drawn on, and returned)
      :type surface: Surface or None
      :param setsurface: (optional) use this surface's color values to draw
         set bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``setcolor`` value
      :type setsurface: Surface or None
      :param unsetsurface: (optional) use this surface's color values to draw
         unset bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``unsetcolor`` value
      :type unsetsurface: Surface or None
      :param setcolor: (optional) color to draw set bits (default is
         ``(255, 255, 255, 255)``, white), use ``None`` to skip drawing the set
         bits, the ``setsurface`` parameter (if set) will takes precedence over
         this parameter
      :type setcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param unsetcolor: (optional) color to draw unset bits (default is
         ``(0, 0, 0, 255)``, black), use ``None`` to skip drawing the unset
         bits, the ``unsetsurface`` parameter (if set) will takes precedence
         over this parameter
      :type unsetcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param dest: (optional) surface destination of where to position the
         topleft corner of the mask being drawn (default is ``(0, 0)``), if a
         Rect is used as the ``dest`` parameter, its ``x`` and ``y`` attributes
         will be used as the destination, **NOTE1:** rects with a negative width
         or height value will not be normalized before using their ``x`` and
         ``y`` values, **NOTE2:** this destination value is only used to
         position the mask on the surface, it does not offset the ``setsurface``
         and ``unsetsurface`` from the mask, they are always aligned with the
         mask (i.e. position ``(0, 0)`` on the mask always corresponds to
         position ``(0, 0)`` on the ``setsurface`` and ``unsetsurface``)
      :type dest: Rect or tuple(int, int) or list(int, int) or Vector2(int, int)

      :returns: the ``surface`` parameter (or a newly created surface if no
         ``surface`` parameter was provided) with this mask drawn on it
      :rtype: Surface

      :raises ValueError: if the ``setsurface`` parameter or ``unsetsurface``
         parameter does not have the same format (bytesize/bitsize/alpha) as
         the ``surface`` parameter

      .. note ::
         To skip drawing the set bits, both ``setsurface`` and ``setcolor`` must
         be ``None``. The ``setsurface`` parameter defaults to ``None``, but
         ``setcolor`` defaults to a color value and therefore must be set to
         ``None``.

      .. note ::
         To skip drawing the unset bits, both ``unsetsurface`` and
         ``unsetcolor`` must be ``None``. The ``unsetsurface`` parameter
         defaults to ``None``, but ``unsetcolor`` defaults to a color value and
         therefore must be set to ``None``.

      .. versionadded:: 2.0.0

      .. ## Mask.to_surface ##

   .. ## pygame.mask.Mask ##

.. ## pygame.mask ##


--- Contenu du fichier : context.rst.txt ---
.. include:: common.txt

:mod:`pygame.context`
======================

.. module:: pygame.context
    :synopsis: pygame module to provide additional context about the system

| :sl:`pygame module to provide additional context about the system`

**EXPERIMENTAL!** This API may change or disappear in later pygame releases. 
If you use this, your code may break with the next pygame release.
This is a new module, so we are marking it experimental for now.
We probably won't have to change API, but we're keeping the possibility
open just in case something obvious comes up.

.. versionadded:: 2.1.3

.. function:: get_pref_path

   | :sl:`get a writeable folder for your app`
   | :sg:`get_pref_path(org, app) -> path`

   When distributing apps, it's helpful to have a way to get a writeable path,
   because it's what apps are expected to do, and because sometimes the local
   space around the app isn't writeable to the app.

   This function returns a platform specific path for your app to store
   savegames, settings, and the like. This path is unique per user and
   per app name.

   It takes two strings, ``org`` and ``app``, referring to the "organization"
   and "application name." For example, the organization could be "Valve," 
   and the application name could be "Half Life 2." It then will figure out the
   preferred path, **creating the folders referenced by the path if necessary**,
   and return a string containing the absolute path.

   For example::

        On Windows, it would resemble
        C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\

        On macOS, it would resemble
        /Users/bob/Library/Application Support/My Program Name/

        And on Linux it would resemble
        /home/bob/.local/share/My Program Name/
    
   .. versionadded:: 2.1.3

.. function:: get_pref_locales

   | :sl:`get preferred locales set on the system`
   | :sg:`get_pref_locales() -> list[locale]`

   Returns a list of "locale" dicts, sorted in descending order of preference
   set on the host OS (the most preferred locale is the first element). May
   also be an empty list if pygame could not find this information.

   Each "locale" dict contains the language code which can be accessed by the
   key ``"language"``. This language code is an ISO-639 language specifier 
   (such as "en" for English, "de" for German, etc).
   A "locale" dict may also optionally contain a ``"country"`` field, whose
   value is an ISO-3166 country code (such as "US" for the United States, 
   "CA" for Canada, etc). If this field is not set or undetermined, it is 
   ``None``.
   A "locale" dict which looks like ``{'language': 'en', 'country': 'US'}``
   indicates the user prefers American English, while
   ``{'language': 'en', 'country': None}`` indicates that the user prefers
   English, generically.

   This might be a bit of an expensive call because it has to query the OS. So
   this function must not be called in a game loop, instead it's best to ask 
   for this once and save the results. However, this list can change when the
   user changes a system preference outside of your program. pygame will send
   a ``LOCALECHANGED`` event in this case, if possible, and you can call this
   function again to get an updated copy of preferred locales.

   .. note::
        Since the organization and app names can potentially be used as
        a folder name, it is highly encouraged to avoid punctuation.
        Instead stick to letters, numbers, and spaces.

   .. note::
        The ``appdirs`` library has similar functionality for this use case,
        but has more "folder types" to choose from.

   .. versionadded:: 2.1.3


--- Contenu du fichier : locals.rst.txt ---
.. include:: common.txt

:mod:`pygame.locals`
====================

.. module:: pygame.locals
   :synopsis: pygame constants

| :sl:`pygame constants`

This module contains various constants used by pygame. Its contents are
automatically placed in the pygame module namespace. However, an application
can use ``pygame.locals`` to include only the pygame constants with a ``from
pygame.locals import *``.

Detailed descriptions of the various constants can be found throughout the
pygame documentation. Here are the locations of some of them.

   - The :mod:`pygame.display` module contains flags like ``FULLSCREEN`` used
     by :func:`pygame.display.set_mode`.
   - The :mod:`pygame.event` module contains the various event types.
   - The :mod:`pygame.key` module lists the keyboard constants and modifiers
     (``K_``\* and ``MOD_``\*) relating to the ``key`` and ``mod`` attributes of
     the ``KEYDOWN`` and ``KEYUP`` events.
   - The :mod:`pygame.time` module defines ``TIMER_RESOLUTION``.

.. ## pygame.locals ##


--- Contenu du fichier : cursors.rst.txt ---
.. include:: common.txt

:mod:`pygame.cursors`
=====================

.. module:: pygame.cursors
   :synopsis: pygame module for cursor resources

| :sl:`pygame module for cursor resources`

Pygame offers control over the system hardware cursor. Pygame supports
black and white cursors (bitmap cursors), as well as system variant cursors and color cursors.
You control the cursor with functions inside :mod:`pygame.mouse`.

This cursors module contains functions for loading and decoding various
cursor formats. These allow you to easily store your cursors in external files
or directly as encoded python strings.

The module includes several standard cursors. The :func:`pygame.mouse.set_cursor()`
function takes several arguments. All those arguments have been stored in a
single tuple you can call like this:

::

   >>> pygame.mouse.set_cursor(*pygame.cursors.arrow)
   
The following variables can be passed to ``pygame.mouse.set_cursor`` function:

   * ``pygame.cursors.arrow``

   * ``pygame.cursors.diamond``

   * ``pygame.cursors.broken_x``

   * ``pygame.cursors.tri_left``

   * ``pygame.cursors.tri_right``

This module also contains a few cursors as formatted strings. You'll need to
pass these to ``pygame.cursors.compile()`` function before you can use them.
The example call would look like this:

::

   >>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)
   >>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)

The following strings can be converted into cursor bitmaps with
``pygame.cursors.compile()`` :

   * ``pygame.cursors.thickarrow_strings``

   * ``pygame.cursors.sizer_x_strings``

   * ``pygame.cursors.sizer_y_strings``

   * ``pygame.cursors.sizer_xy_strings``
   
   * ``pygame.cursor.textmarker_strings``

.. function:: compile

   | :sl:`create binary cursor data from simple strings`
   | :sg:`compile(strings, black='X', white='.', xor='o') -> data, mask`

   A sequence of strings can be used to create binary cursor data for the
   system cursor. This returns the binary data in the form of two tuples.
   Those can be passed as the third and fourth arguments respectively of the 
   :func:`pygame.mouse.set_cursor()` function.

   If you are creating your own cursor strings, you can use any value represent
   the black and white pixels. Some system allow you to set a special toggle
   color for the system color, this is also called the xor color. If the system
   does not support xor cursors, that color will simply be black.
   
   The height must be divisible by 8. The width of the strings must all be equal 
   and be divisible by 8. If these two conditions are not met, ``ValueError`` is
   raised.
   An example set of cursor strings looks like this

   ::

       thickarrow_strings = (               #sized 24x24
         "XX                      ",
         "XXX                     ",
         "XXXX                    ",
         "XX.XX                   ",
         "XX..XX                  ",
         "XX...XX                 ",
         "XX....XX                ",
         "XX.....XX               ",
         "XX......XX              ",
         "XX.......XX             ",
         "XX........XX            ",
         "XX........XXX           ",
         "XX......XXXXX           ",
         "XX.XXX..XX              ",
         "XXXX XX..XX             ",
         "XX   XX..XX             ",
         "     XX..XX             ",
         "      XX..XX            ",
         "      XX..XX            ",
         "       XXXX             ",
         "       XX               ",
         "                        ",
         "                        ",
         "                        ")

   .. ## pygame.cursors.compile ##

.. function:: load_xbm

   | :sl:`load cursor data from an XBM file`
   | :sg:`load_xbm(cursorfile) -> cursor_args`
   | :sg:`load_xbm(cursorfile, maskfile) -> cursor_args`

   This loads cursors for a simple subset of ``XBM`` files. ``XBM`` files are
   traditionally used to store cursors on UNIX systems, they are an ASCII
   format used to represent simple images.

   Sometimes the black and white color values will be split into two separate
   ``XBM`` files. You can pass a second maskfile argument to load the two
   images into a single cursor.

   The cursorfile and maskfile arguments can either be filenames or file-like
   object with the readlines method.

   The return value cursor_args can be passed directly to the
   ``pygame.mouse.set_cursor()`` function.

   .. ## pygame.cursors.load_xbm ##



.. class:: Cursor

   | :sl:`pygame object representing a cursor`
   | :sg:`Cursor(size, hotspot, xormasks, andmasks) -> Cursor`
   | :sg:`Cursor(hotspot, surface) -> Cursor`
   | :sg:`Cursor(constant) -> Cursor`
   | :sg:`Cursor(Cursor) -> Cursor`
   | :sg:`Cursor() -> Cursor`

   In pygame 2, there are 3 types of cursors you can create to give your
   game that little bit of extra polish. There's **bitmap** type cursors,
   which existed in pygame 1.x, and are compiled from a string or load from an xbm file.
   Then there are **system** type cursors, where you choose a preset that will 
   convey the same meaning but look native across different operating systems. 
   Finally you can create a **color** cursor, which displays a pygame surface as the cursor.

   **Creating a system cursor**

   Choose a constant from this list, pass it into ``pygame.cursors.Cursor(constant)``, 
   and you're good to go. Be advised that not all systems support every system
   cursor, and you may get a substitution instead. For example, on MacOS,
   WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL
   should show up as a closed hand. And on Wayland, every SIZE cursor should 
   show up as a hand.

   ::

      Pygame Cursor Constant           Description
      --------------------------------------------
      pygame.SYSTEM_CURSOR_ARROW       arrow
      pygame.SYSTEM_CURSOR_IBEAM       i-beam
      pygame.SYSTEM_CURSOR_WAIT        wait
      pygame.SYSTEM_CURSOR_CROSSHAIR   crosshair
      pygame.SYSTEM_CURSOR_WAITARROW   small wait cursor 
                                       (or wait if not available)
      pygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing 
                                       northwest and southeast
      pygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing
                                       northeast and southwest
      pygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing
                                       west and east
      pygame.SYSTEM_CURSOR_SIZENS      double arrow pointing 
                                       north and south
      pygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing
                                       north, south, east, and west
      pygame.SYSTEM_CURSOR_NO          slashed circle or crossbones
      pygame.SYSTEM_CURSOR_HAND        hand

   **Creating a cursor without passing arguments**
   
   In addition to the cursor constants available and described above,
   you can also call ``pygame.cursors.Cursor()``, and your cursor is ready (doing that is the same as
   calling ``pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)``.
   Doing one of those calls actually creates a system cursor using the default native image.

   **Creating a color cursor**

   To create a color cursor, create a ``Cursor`` from a ``hotspot`` and a ``surface``.
   ``hotspot`` is an (x,y) coordinate that determines where in the cursor the exact point is.
   The hotspot position must be within the bounds of the ``surface``.

   **Creating a bitmap cursor**

   When the mouse cursor is visible, it will be displayed as a black and white
   bitmap using the given bitmask arrays. The ``size`` is a sequence containing 
   the cursor width and height. ``hotspot`` is a sequence containing the cursor 
   hotspot position. 
   
   A cursor has a width and height, but a mouse position is represented by a 
   set of point coordinates. So the value passed into the cursor ``hotspot`` 
   variable helps pygame to actually determine at what exact point the cursor 
   is at.
   
   ``xormasks`` is a sequence of bytes containing the cursor xor data masks. 
   Lastly ``andmasks``, a sequence of bytes containing the cursor bitmask data.
   To create these variables, we can make use of the 
   :func:`pygame.cursors.compile()` function.

   Width and height must be a multiple of 8, and the mask arrays must be the 
   correct size for the given width and height. Otherwise an exception is raised.
   
   .. method:: copy

      | :sl:`copy the current cursor`
      | :sg:`copy() -> Cursor`
      
      Returns a new Cursor object with the same data and hotspot as the original.
   .. ## pygame.cursors.Cursor.copy ##
   

   .. attribute:: type
   
      | :sl:`Gets the cursor type`
      | :sg:`type -> string`

      The type will be ``"system"``, ``"bitmap"``, or ``"color"``.

   .. ## pygame.cursors.Cursor.type ##

   .. attribute:: data

      | :sl:`Gets the cursor data`
      | :sg:`data -> tuple`

      Returns the data that was used to create this cursor object, wrapped up in a tuple.

   .. ## pygame.cursors.Cursor.data ##

   .. versionadded:: 2.0.1

   .. ## pygame.cursors.Cursor ##
   
.. ## pygame.cursors ##

Example code for creating and settings cursors. (Click the mouse to switch cursor)

.. literalinclude:: code_examples/cursors_module_example.py


--- Contenu du fichier : touch.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.touch`
=========================

.. module:: pygame._sdl2.touch
   :synopsis: pygame module to work with touch input

| :sl:`pygame module to work with touch input`

.. versionadded:: 2 This module requires SDL2.

.. function:: get_num_devices

   | :sl:`get the number of touch devices`
   | :sg:`get_num_devices() -> int`

   Return the number of available touch devices.

   .. ## pygame._sdl2.touch.get_num_devices ##

.. function:: get_device

   | :sl:`get the a touch device id for a given index`
   | :sg:`get_device(index) -> touchid`

   :param int index: This number is at least 0 and less than the
                     :func:`number of devices <pygame._sdl2.touch.get_num_devices()>`.

   Return an integer id associated with the given ``index``.

   .. ## pygame._sdl2.touch.get_device ##

.. function:: get_num_fingers

   | :sl:`the number of active fingers for a given touch device`
   | :sg:`get_num_fingers(touchid) -> int`

   Return the number of fingers active for the touch device
   whose id is `touchid`.

   .. ## pygame._sdl2.touch.get_num_fingers ##

.. function:: get_finger

   | :sl:`get information about an active finger`
   | :sg:`get_finger(touchid, index) -> int`

   :param int touchid: The touch device id.
   :param int index: The index of the finger to return
                     information about, between 0 and the
                     :func:`number of active fingers <pygame._sdl2.touch.get_num_fingers()>`.

   Return a dict for the finger ``index`` active on ``touchid``.
   The dict contains these keys:

   ::

      id         the id of the finger (an integer).
      x          the normalized x position of the finger, between 0 and 1.
      y          the normalized y position of the finger, between 0 and 1.
      pressure   the amount of pressure applied by the finger, between 0 and 1.

   .. ## pygame._sdl2.touch.get_finger ##

.. ## pygame._sdl2.touch ##


--- Contenu du fichier : joystick.rst.txt ---
.. include:: common.txt

:mod:`pygame.joystick`
======================

.. module:: pygame.joystick
   :synopsis: Pygame module for interacting with joysticks, gamepads, and trackballs.

| :sl:`Pygame module for interacting with joysticks, gamepads, and trackballs.`

The joystick module manages the joystick devices on a computer.
Joystick devices include trackballs and video-game-style
gamepads, and the module allows the use of multiple buttons and "hats".
Computers may manage multiple joysticks at a time.

Each instance of the Joystick class represents one gaming device plugged
into the computer. If a gaming pad has multiple joysticks on it, then the
joystick object can actually represent multiple joysticks on that single
game device.

For a quick way to initialise the joystick module and get a list of Joystick instances
use the following code::

    pygame.joystick.init()
    joysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]

The following event types will be generated by the joysticks ::

    JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION

And in pygame 2, which supports hotplugging::

   JOYDEVICEADDED JOYDEVICEREMOVED

Note that in pygame 2, joysticks events use a unique "instance ID". The device index
passed in the constructor to a Joystick object is not unique after devices have
been added and removed. You must call :meth:`Joystick.get_instance_id()` to find
the instance ID that was assigned to a Joystick on opening.

The event queue needs to be pumped frequently for some of the methods to work.
So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.

To be able to get joystick events and update the joystick objects while the window
is not in focus, you may set the ``SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS`` environment
variable. See :ref:`environment variables <environment-variables>` for more details.


.. function:: init

   | :sl:`Initialize the joystick module.`
   | :sg:`init() -> None`

   This function is called automatically by ``pygame.init()``.

   It initializes the joystick module. The module must be initialized before any
   other functions will work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.init ##

.. function:: quit

   | :sl:`Uninitialize the joystick module.`
   | :sg:`quit() -> None`

   Uninitialize the joystick module. After you call this any existing joystick
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.quit ##

.. function:: get_init

   | :sl:`Returns True if the joystick module is initialized.`
   | :sg:`get_init() -> bool`

   Test if the ``pygame.joystick.init()`` function has been called.

   .. ## pygame.joystick.get_init ##

.. function:: get_count

   | :sl:`Returns the number of joysticks.`
   | :sg:`get_count() -> count`

   Return the number of joystick devices on the system. The count will be ``0`` 
   if there are no joysticks on the system.

   When you create Joystick objects using ``Joystick(id)``, you pass an integer
   that must be lower than this count.

   .. ## pygame.joystick.get_count ##

.. class:: Joystick

   | :sl:`Create a new Joystick object.`
   | :sg:`Joystick(id) -> Joystick`

   Create a new joystick to access a physical device. The id argument must be a
   value from ``0`` to ``pygame.joystick.get_count() - 1``.

   Joysticks are initialised on creation and are shut down when deallocated.
   Once the device is initialized the pygame event queue will start receiving
   events about its input.

   .. versionchanged:: 2.0.0 Joystick objects are now opened immediately on creation.

   .. method:: init

      | :sl:`initialize the Joystick`
      | :sg:`init() -> None`

      Initialize the joystick, if it has been closed. It is safe to call this
      even if the joystick is already initialized.

      .. deprecated:: 2.0.0

         In future it will not be possible to reinitialise a closed Joystick
         object. Will be removed in Pygame 2.1.

      .. ## Joystick.init ##

   .. method:: quit

      | :sl:`uninitialize the Joystick`
      | :sg:`quit() -> None`

      Close a Joystick object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Joystick.quit ##

   .. method:: get_init

      | :sl:`check if the Joystick is initialized`
      | :sg:`get_init() -> bool`

      Return True if the Joystick object is currently initialised.

      .. ## Joystick.get_init ##

   .. method:: get_id

      | :sl:`get the device index (deprecated)`
      | :sg:`get_id() -> int`

      Returns the original device index for this device. This is the same
      value that was passed to the ``Joystick()`` constructor. This method can
      safely be called while the Joystick is not initialized.

      .. deprecated:: 2.0.0

         The original device index is not useful in pygame 2. Use
         :meth:`.get_instance_id` instead. Will be removed in Pygame 2.1.

   .. method:: get_instance_id() -> int

      | :sl:`get the joystick instance id`
      | :sg:`get_instance_id() -> int`

      Get the joystick instance ID. This matches the ``instance_id`` field
      that is given in joystick events.

      .. versionadded:: 2.0.0dev11

   .. method:: get_guid() -> str

      | :sl:`get the joystick GUID`
      | :sg:`get_guid() -> str`

      Get the GUID string. This identifies the exact hardware of the joystick
      device.

      .. versionadded:: 2.0.0dev11

   .. method:: get_power_level() -> str

      | :sl:`get the approximate power status of the device`
      | :sg:`get_power_level() -> str`

      Get a string giving the power status of the device.

      One of: ``empty``, ``low``, ``medium``, ``full``, ``wired``, ``max``, or
      ``unknown``.

      .. versionadded:: 2.0.0dev11

      .. ## Joystick.get_id ##

   .. method:: get_name

      | :sl:`get the Joystick system name`
      | :sg:`get_name() -> string`

      Returns the system name for this joystick device. It is unknown what name
      the system will give to the Joystick, but it should be a unique name that
      identifies the device. This method can safely be called while the
      Joystick is not initialized.

      .. ## Joystick.get_name ##

   .. method:: get_numaxes

      | :sl:`get the number of axes on a Joystick`
      | :sg:`get_numaxes() -> int`

      Returns the number of input axes are on a Joystick. There will usually be
      two for the position. Controls like rudders and throttles are treated as
      additional axes.

      The ``pygame.JOYAXISMOTION`` events will be in the range from ``-1.0`` 
      to ``1.0``. A value of ``0.0`` means the axis is centered. Gamepad devices 
      will usually be ``-1``, ``0``, or ``1`` with no values in between. Older 
      analog joystick axes will not always use the full ``-1`` to ``1`` range, 
      and the centered value will be some area around ``0``. 
      
      Analog joysticks usually have a bit of noise in their axis, which will 
      generate a lot of rapid small motion events.

      .. ## Joystick.get_numaxes ##

   .. method:: get_axis

      | :sl:`get the current position of an axis`
      | :sg:`get_axis(axis_number) -> float`

      Returns the current position of a joystick axis. The value will range
      from ``-1`` to ``1`` with a value of ``0`` being centered. You may want 
      to take into account some tolerance to handle jitter, and joystick drift 
      may keep the joystick from centering at ``0`` or using the full range of 
      position values.

      The axis number must be an integer from ``0`` to ``get_numaxes() - 1``.

      When using gamepads both the control sticks and the analog triggers are
      usually reported as axes.

      .. ## Joystick.get_axis ##

   .. method:: get_numballs

      | :sl:`get the number of trackballs on a Joystick`
      | :sg:`get_numballs() -> int`

      Returns the number of trackball devices on a Joystick. These devices work
      similar to a mouse but they have no absolute position; they only have
      relative amounts of movement.

      The ``pygame.JOYBALLMOTION`` event will be sent when the trackball is
      rolled. It will report the amount of movement on the trackball.

      .. ## Joystick.get_numballs ##

   .. method:: get_ball

      | :sl:`get the relative position of a trackball`
      | :sg:`get_ball(ball_number) -> x, y`

      Returns the relative movement of a joystick button. The value is a ``x, y``
      pair holding the relative movement since the last call to get_ball.

      The ball number must be an integer from ``0`` to ``get_numballs() - 1``.

      .. ## Joystick.get_ball ##

   .. method:: get_numbuttons

      | :sl:`get the number of buttons on a Joystick`
      | :sg:`get_numbuttons() -> int`

      Returns the number of pushable buttons on the joystick. These buttons
      have a boolean (on or off) state.

      Buttons generate a ``pygame.JOYBUTTONDOWN`` and ``pygame.JOYBUTTONUP``
      event when they are pressed and released.

      .. ## Joystick.get_numbuttons ##

   .. method:: get_button

      | :sl:`get the current button state`
      | :sg:`get_button(button) -> bool`

      Returns the current state of a joystick button.

      .. ## Joystick.get_button ##

   .. method:: get_numhats

      | :sl:`get the number of hat controls on a Joystick`
      | :sg:`get_numhats() -> int`

      Returns the number of joystick hats on a Joystick. Hat devices are like
      miniature digital joysticks on a joystick. Each hat has two axes of
      input.

      The ``pygame.JOYHATMOTION`` event is generated when the hat changes
      position. The ``position`` attribute for the event contains a pair of 
      values that are either ``-1``, ``0``, or ``1``. A position of ``(0, 0)`` 
      means the hat is centered.

      .. ## Joystick.get_numhats ##

   .. method:: get_hat

      | :sl:`get the position of a joystick hat`
      | :sg:`get_hat(hat_number) -> x, y`

      Returns the current position of a position hat. The position is given as
      two values representing the ``x`` and ``y`` position for the hat. ``(0, 0)``
      means centered. A value of ``-1`` means left/down and a value of ``1`` means
      right/up: so ``(-1, 0)`` means left; ``(1, 0)`` means right; ``(0, 1)`` means 
      up; ``(1, 1)`` means upper-right; etc.

      This value is digital, ``i.e.``, each coordinate can be ``-1``, ``0`` or ``1`` 
      but never in-between.

      The hat number must be between ``0`` and ``get_numhats() - 1``.

      .. ## Joystick.get_hat ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the joystick, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Joystick.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      joystick does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Joystick.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the joystick. See
      :meth:`Joystick.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Joystick.stop_rumble ##

   .. ## pygame.joystick.Joystick ##

.. ## pygame.joystick ##

.. figure:: code_examples/joystick_calls.png
   :scale: 100 %
   :alt: joystick module example

   Example code for joystick module.

.. literalinclude:: ../../../examples/joystick.py

.. _controller-mappings:


Common Controller Axis Mappings
===============================

Controller mappings are drawn from the underlying SDL library which pygame uses and they differ
between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.

Axis and hat mappings are listed from -1 to +1.


Nintendo Switch Left Joy-Con (pygame 2.x)
*****************************************

The Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    D-pad Up        - Button 0
    D-pad Down      - Button 1
    D-pad Left      - Button 2
    D-pad Right     - Button 3
    SL              - Button 4
    SR              - Button 5
    -               - Button 8
    Stick In        - Button 10
    Capture         - Button 13
    L               - Button 14
    ZL              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Right Joy-Con (pygame 2.x)
******************************************

The Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    SL              - Button 4
    SR              - Button 5
    +               - Button 9
    Stick In        - Button 11
    Home            - Button 12
    R               - Button 14
    ZR              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Pro Controller (pygame 2.x)
*******************************************

The Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats.
The controller is recognized as "Nintendo Switch Pro Controller".


* **Left Stick**::

    Left -> Right   - Axis 0
    Up -> Down      - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up -> Down      - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    - Button        - Button 4
    Home Button     - Button 5
    + Button        - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Capture Button  - Button 15


XBox 360 Controller (pygame 2.x)
********************************

The Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat.
The controller is recognized as "Xbox 360 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9
    Guide Button    - Button 10

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 2.x)
*************************************

The PlayStation 4 controller mapping has 6 axes and 16 buttons.
The controller is recognized as "PS4 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Share Button    - Button 4
    PS Button       - Button 5
    Options Button  - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Touch Pad Click - Button 15

Playstation 5 Controller (pygame 2.x)
*************************************

The PlayStation 5 controller mapping has 6 axes, 13 buttons, and 1 hat.
The controller is recognized as "Sony Interactive Entertainment Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Left Trigger    - Button 6
    Right Trigger   - Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    PS Button       - Button 10
    Left Stick in   - Button 11
    Right Stick in  - Button 12

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



XBox 360 Controller (pygame 1.x)
********************************

The Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat.
The controller is recognized as "Controller (XBOX 360 For Windows)".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 4
    Up   -> Down    - Axis 3

* **Left Trigger & Right Trigger**::

    RT -> LT        - Axis 2

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 1.x)
*************************************

The PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat.
The controller is recognized as "Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 5

* **Right Trigger**::

    Out -> In       - Axis 4

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    L. Trigger(Full)- Button 6
    R. Trigger(Full)- Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    L. Stick In     - Button 10
    R. Stick In     - Button 11
    PS Button       - Button 12
    Touch Pad Click - Button 13

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



--- Contenu du fichier : math.rst.txt ---
.. include:: common.txt

:mod:`pygame.math`
==================

.. module:: pygame.math
   :synopsis: pygame module for vector classes

| :sl:`pygame module for vector classes`

The pygame math module currently provides Vector classes in two and three
dimensions, ``Vector2`` and ``Vector3`` respectively.

They support the following numerical operations: ``vec + vec``, ``vec - vec``, 
``vec * number``, ``number * vec``, ``vec / number``, ``vec // number``, ``vec += vec``, 
``vec -= vec``, ``vec *= number``, ``vec /= number``, ``vec //= number``, ``round(vec, ndigits=0)``. 

All these operations will be performed elementwise.
In addition ``vec * vec`` will perform a scalar-product (a.k.a. dot-product). 
If you want to multiply every element from vector v with every element from 
vector w you can use the elementwise method: ``v.elementwise() * w``

The coordinates of a vector can be retrieved or set using attributes or
subscripts

::

   v = pygame.Vector3()

   v.x = 5
   v[1] = 2 * v.x
   print(v[1]) # 10

   v.x == v[0]
   v.y == v[1]
   v.z == v[2]

Multiple coordinates can be set using slices or swizzling

::

   v = pygame.Vector2()
   v.xy = 1, 2
   v[:] = 1, 2

.. versionadded:: 1.9.2pre
.. versionchanged:: 1.9.4 Removed experimental notice.
.. versionchanged:: 1.9.4 Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)
.. versionchanged:: 1.9.4 :mod:`pygame.math` import not required. More convenient ``pygame.Vector2`` and ``pygame.Vector3``.
.. versionchanged:: 2.2.0 `round` returns a new vector with components rounded to the specified digits.

.. function:: clamp

   | :sl:`returns value clamped to min and max.`
   | :sg:`clamp(value, min, max) -> float`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave clamp feedback with authors <https://github.com/pygame/pygame/pull/3326>`_

   Clamps a numeric ``value`` so that it's no lower than ``min``, and no higher
   than ``max``.

   .. versionadded:: 2.1.3

   .. ## math.clamp ##

.. function:: lerp

   | :sl:`interpolates between two values by a weight.`
   | :sg:`lerp(a, b, weight) -> float`

   Linearly interpolates between ``a`` and ``b`` by ``weight`` using the formula ``a + (b-a) * weight``.
   
   If ``weight`` is ``0.5``, ``lerp`` will return the value half-way between ``a``
   and ``b``. When ``a = 10`` and ``b = 20``, ``lerp(a, b, 0.5)`` will return ``15``. You
   can think of weight as the percentage of interpolation from ``a`` to ``b``, ``0.0``
   being 0% and ``1.0`` being 100%.

   ``lerp`` can be used for many things. You could rotate a sprite by a weight with
   ``angle = lerp(0, 360, weight)``. You could even scale an enemy's attack value
   based on the level you're playing:

   ::

      FINAL_LEVEL = 10
      current_level = 2

      attack = lerp(10, 50, current_level/MAX_LEVEL) # 18

   If you're on level 0, ``attack`` will be ``10``, if you're on level 10,
   ``attack`` will be ``50``. If you're on level 5, the
   result of ``current_level/MAX_LEVEL`` will be ``0.5``
   which represents 50%, therefore ``attack`` will be ``30``, which is the midpoint of ``10`` and ``50``.

   Raises a ValueError if ``weight`` is outside the range of ``[0, 1]``.

   .. versionadded:: 2.1.3

   .. ## math.lerp ##

.. class:: Vector2

   | :sl:`a 2-Dimensional Vector`
   | :sg:`Vector2() -> Vector2(0, 0)`
   | :sg:`Vector2(int) -> Vector2`
   | :sg:`Vector2(float) -> Vector2`
   | :sg:`Vector2(Vector2) -> Vector2`
   | :sg:`Vector2(x, y) -> Vector2`
   | :sg:`Vector2((x, y)) -> Vector2`

   Some general information about the ``Vector2`` class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector2) -> float`

      .. ## Vector2.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector2) -> float`

      calculates the third component of the cross-product.

      .. ## Vector2.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude_squared() == vec.x**2 + vec.y**2``. This
      is faster than ``vec.magnitude()`` because it avoids the square root.

      .. ## Vector2.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length_squared() == vec.x**2 + vec.y**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector2.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector2`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector2.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. 
      The direction of the vector is not changed.

      .. ## Vector2.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise 
      it returns ``False``.

      .. ## Vector2.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector2.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector2) -> Vector2`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector2.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector2) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector2.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector2) -> float`

      .. ## Vector2.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector2) -> float`

      .. ## Vector2.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector2, float) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector2, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector2, float) -> Vector2`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self and
      other the result is going to be. It must be a value between ``0`` and ``1`` 
      where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector2.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector2, float) -> Vector2`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector2.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector2.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector2.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in degrees. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in radians. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector2) -> float`

      Returns the angle from self to the passed ``Vector2`` that would rotate self
      to be aligned with the passed ``Vector2`` without crossing over the negative 
      x-axis.

      .. figure:: code_examples/angle_to.png
         :alt: angle_to image

         Example demonstrating the angle returned

      .. ## Vector2.angle_to ##

   .. method:: as_polar

      | :sl:`returns a tuple with radial distance and azimuthal angle.`
      | :sg:`as_polar() -> (r, phi)`

      Returns a tuple ``(r, phi)`` where r is the radial distance, and phi 
      is the azimuthal angle.

      .. ## Vector2.as_polar ##

   .. method:: from_polar

      | :sl:`Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple.`
      | :sg:`Vector2.from_polar((r, phi)) -> Vector2`
      | :sg:`Vector2().from_polar((r, phi)) -> None`

      If used from the class creates a Vector2(x,y), else sets x and y.
      The values of x and y are defined from a tuple ``(r, phi)`` where r
      is the radial distance, and phi is the azimuthal angle.

      .. ## Vector2.from_polar ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector2) -> Vector2`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector2.project ##

   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector2`

      Returns a new Vector2 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector2.copy ##
   

   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector2`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude_ip ##


   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector2) -> None`
      | :sg:`update(x, y) -> None`
      | :sg:`update((x, y)) -> None`

      Sets coordinates x and y in place.

      .. versionadded:: 1.9.5

      .. ## Vector2.update ##

   
   .. attribute:: epsilon
      
      | :sl:`Determines the tolerance of vector calculations.`
      
      Both Vector classes have a value named ``epsilon`` that defaults to ``1e-6``.
      This value acts as a numerical margin in various methods to account for floating point
      arithmetic errors. Specifically, ``epsilon`` is used in the following places:

         * comparing Vectors (``==`` and ``!=``)
         * the ``is_normalized`` method (if the square of the length is within ``epsilon`` of 1, it's normalized)
         * slerping (a Vector with a length of ``<epsilon`` is considered a zero vector, and can't slerp with that)
         * reflection (can't reflect over the zero vector)
         * projection (can't project onto the zero vector)
         * rotation (only used when rotating by a multiple of 90 degrees)

      While it's possible to change ``epsilon`` for a specific instance of a Vector, all the other Vectors
      will retain the default value. Changing ``epsilon`` on a specific instance however could lead to some
      asymmetric behavior where symmetry would be expected, such as

      ::

         u = pygame.Vector2(0, 1)
         v = pygame.Vector2(0, 1.2)
         u.epsilon = 0.5 # don't set it nearly this large

         print(u == v) # >> True
         print(v == u) # >> False

      You'll probably never have to change ``epsilon`` from the default value, but in rare situations you might
      find that either the margin is too large or too small, in which case changing ``epsilon`` slightly 
      might help you out.


   .. ## pygame.math.Vector2 ##

.. class:: Vector3

   | :sl:`a 3-Dimensional Vector`
   | :sg:`Vector3() -> Vector3(0, 0, 0)`
   | :sg:`Vector3(int) -> Vector3`
   | :sg:`Vector3(float) -> Vector3`
   | :sg:`Vector3(Vector3) -> Vector3`
   | :sg:`Vector3(x, y, z) -> Vector3`
   | :sg:`Vector3((x, y, z)) -> Vector3`

   Some general information about the Vector3 class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector3) -> float`

      .. ## Vector3.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector3) -> Vector3`

      calculates the cross-product.

      .. ## Vector3.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared Euclidean magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: 
      ``vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2``.
      This is faster than ``vec.magnitude()`` because it avoids the
      square root.

      .. ## Vector3.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector3.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector3`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector3.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. The 
      direction of the vector is not changed.

      .. ## Vector3.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise it 
      returns ``False``.

      .. ## Vector3.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector3.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector3) -> Vector3`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector3.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector3) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector3.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector3) -> float`

      .. ## Vector3.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector3) -> float`

      .. ## Vector3.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector3, float) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector3, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector3, float) -> Vector3`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self an
      other the result is going to be. It must be a value between ``0`` and 
      ``1``, where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector3.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector3, float) -> Vector3`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector3.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector3.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle, Vector3) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_ip_rad ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_rad_ip ##

   .. method:: rotate_x

      | :sl:`rotates a vector around the x-axis by the angle in degrees.`
      | :sg:`rotate_x(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x ##

   .. method:: rotate_x_rad

      | :sl:`rotates a vector around the x-axis by the angle in radians.`
      | :sg:`rotate_x_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_x_rad ##

   .. method:: rotate_x_ip

      | :sl:`rotates the vector around the x-axis by the angle in degrees in place.`
      | :sg:`rotate_x_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x_ip ##

   .. method:: rotate_x_ip_rad

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_x_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_x_ip_rad ##

   .. method:: rotate_x_rad_ip

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_x_rad_ip ##

   .. method:: rotate_y

      | :sl:`rotates a vector around the y-axis by the angle in degrees.`
      | :sg:`rotate_y(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y ##

   .. method:: rotate_y_rad

      | :sl:`rotates a vector around the y-axis by the angle in radians.`
      | :sg:`rotate_y_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_y_rad ##

   .. method:: rotate_y_ip

      | :sl:`rotates the vector around the y-axis by the angle in degrees in place.`
      | :sg:`rotate_y_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y_ip ##

   .. method:: rotate_y_ip_rad

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_y_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_y_ip_rad ##

   .. method:: rotate_y_rad_ip

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_y_rad_ip ##

   .. method:: rotate_z

      | :sl:`rotates a vector around the z-axis by the angle in degrees.`
      | :sg:`rotate_z(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z ##

   .. method:: rotate_z_rad

      | :sl:`rotates a vector around the z-axis by the angle in radians.`
      | :sg:`rotate_z_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_z_rad ##

   .. method:: rotate_z_ip

      | :sl:`rotates the vector around the z-axis by the angle in degrees in place.`
      | :sg:`rotate_z_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z_ip ##

   .. method:: rotate_z_ip_rad

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_z_rad_ip() instead.
      
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_z_ip_rad ##

   .. method:: rotate_z_rad_ip

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_z_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector3) -> float`

      Returns the angle between self and the given vector.

      .. ## Vector3.angle_to ##

   .. method:: as_spherical

      | :sl:`returns a tuple with radial distance, inclination and azimuthal angle.`
      | :sg:`as_spherical() -> (r, theta, phi)`

      Returns a tuple ``(r, theta, phi)`` where r is the radial distance, theta is
      the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.as_spherical ##

   .. method:: from_spherical

      | :sl:`Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.`
      | :sg:`Vector3.from_spherical((r, theta, phi)) -> Vector3`
      | :sg:`Vector3().from_spherical((r, theta, phi)) -> None`

      If used from the class creates a Vector3(x, y, z), else sets x, y, and z.
      The values of x, y, and z are from a tuple ``(r, theta, phi)`` where r is the radial
      distance, theta is the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.from_spherical ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector3) -> Vector3`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector3.project ##
   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector3`

      Returns a new Vector3 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector3.copy ##


   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector3`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude_ip ##

   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector3) -> None`
      | :sg:`update(x, y, z) -> None`
      | :sg:`update((x, y, z)) -> None`

      Sets coordinates x, y, and z in place.

      .. versionadded:: 1.9.5

      .. ## Vector3.update ##

   .. attribute:: epsilon

      | :sl:`Determines the tolerance of vector calculations.`
      
      With lengths within this number, vectors are considered equal. For more information see :attr:`pygame.math.Vector2.epsilon`
            
   .. ##  ##

   .. ## pygame.math.Vector3 ##

.. ## pygame.math ##


--- Contenu du fichier : bufferproxy.rst.txt ---
.. include:: common.txt

.. default-domain:: py

:class:`pygame.BufferProxy`
===========================

.. currentmodule:: pygame

.. class:: BufferProxy

   | :sl:`pygame object to export a surface buffer through an array protocol`
   | :sg:`BufferProxy(<parent>) -> BufferProxy`

   :class:`BufferProxy` is a pygame support type, designed as the return value
   of the :meth:`Surface.get_buffer` and :meth:`Surface.get_view` methods.
   For all Python versions a :class:`BufferProxy` object exports a C struct
   and Python level array interface on behalf of its parent object's buffer.
   A new buffer interface is also exported.
   In pygame, :class:`BufferProxy` is key to implementing the
   :mod:`pygame.surfarray` module.

   :class:`BufferProxy` instances can be created directly from Python code,
   either for a parent that exports an interface, or from a Python ``dict``
   describing an object's buffer layout. The dict entries are based on the
   Python level array interface mapping. The following keys are recognized:

      ``"shape"`` : tuple
         The length of each array dimension as a tuple of integers. The
         length of the tuple is the number of dimensions in the array.

      ``"typestr"`` : string
         The array element type as a length 3 string. The first character
         gives byteorder, '<' for little-endian, '>' for big-endian, and
         '\|' for not applicable. The second character is the element type,
         'i' for signed integer, 'u' for unsigned integer, 'f' for floating
         point, and 'V' for an chunk of bytes. The third character gives the
         bytesize of the element, from '1' to '9' bytes. So, for example,
         "<u4" is an unsigned 4 byte little-endian integer, such as a
         32 bit pixel on a PC, while "\|V3" would represent a 24 bit pixel,
         which has no integer equivalent.

      ``"data"`` : tuple
         The physical buffer start address and a read-only flag as a length
         2 tuple. The address is an integer value, while the read-only flag
         is a bool—``False`` for writable, ``True`` for read-only.

      ``"strides"`` : tuple : (optional)
         Array stride information as a tuple of integers. It is required
	 only of non C-contiguous arrays. The tuple length must match
	 that of ``"shape"``.

      ``"parent"`` : object : (optional)
         The exporting object. It can be used to keep the parent object
         alive while its buffer is visible.

      ``"before"`` : callable : (optional)
         Callback invoked when the :class:`BufferProxy` instance
         exports the buffer. The callback is given one argument, the
	 ``"parent"`` object if given, otherwise ``None``.
         The callback is useful for setting a lock on the parent.

      ``"after"`` : callable : (optional)
         Callback invoked when an exported buffer is released.
         The callback is passed on argument, the ``"parent"`` object if given,
         otherwise None. The callback is useful for releasing a lock on the
         parent.
      
   The BufferProxy class supports subclassing, instance variables, and weak
   references.

   .. versionadded:: 1.8.0
   .. versionextended:: 1.9.2

   .. attribute:: parent

      | :sl:`Return wrapped exporting object.`
      | :sg:`parent -> Surface`
      | :sg:`parent -> <parent>`

      The :class:`Surface` which returned the :class:`BufferProxy` object or
      the object passed to a :class:`BufferProxy` call.

   .. attribute:: length

      | :sl:`The size, in bytes, of the exported buffer.`
      | :sg:`length -> int`

      The number of valid bytes of data exported. For discontinuous data,
      that is data which is not a single block of memory, the bytes within
      the gaps are excluded from the count. This property is equivalent to
      the ``Py_buffer`` C struct ``len`` field.

   .. attribute:: raw

      | :sl:`A copy of the exported buffer as a single block of bytes.`
      | :sg:`raw -> bytes`

      The buffer data as a ``str``/``bytes`` object.
      Any gaps in the exported data are removed.

   .. method:: write

      | :sl:`Write raw bytes to object buffer.`
      | :sg:`write(buffer, offset=0)`

      Overwrite bytes in the parent object's data. The data must be C or F
      contiguous, otherwise a ValueError is raised. Argument `buffer` is a
      ``str``/``bytes`` object. An optional offset gives a
      start position, in bytes, within the buffer where overwriting begins.
      If the offset is negative or greater that or equal to the buffer proxy's
      :attr:`length` value, an ``IndexException`` is raised.
      If ``len(buffer) > proxy.length + offset``, a ``ValueError`` is raised.


--- Contenu du fichier : color_list.rst.txt ---
.. include:: common.txt

Named Colors
============

.. raw:: html

    <style>
    .aliceblue {background-color: #f0f8ff; color: #f0f8ff;}
    .antiquewhite {background-color: #faebd7; color: #faebd7;}
    .antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}
    .antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}
    .antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}
    .antiquewhite4 {background-color: #8b8378; color: #8b8378;}
    .aqua {background-color: #00ffff; color: #00ffff;}
    .aquamarine {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine1 {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine2 {background-color: #76eec6; color: #76eec6;}
    .aquamarine3 {background-color: #66cdaa; color: #66cdaa;}
    .aquamarine4 {background-color: #458b74; color: #458b74;}
    .azure {background-color: #f0ffff; color: #f0ffff;}
    .azure1 {background-color: #f0ffff; color: #f0ffff;}
    .azure3 {background-color: #c1cdcd; color: #c1cdcd;}
    .azure2 {background-color: #e0eeee; color: #e0eeee;}
    .azure4 {background-color: #838b8b; color: #838b8b;}
    .beige {background-color: #f5f5dc; color: #f5f5dc;}
    .bisque {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque1 {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque2 {background-color: #eed5b7; color: #eed5b7;}
    .bisque3 {background-color: #cdb79e; color: #cdb79e;}
    .bisque4 {background-color: #8b7d6b; color: #8b7d6b;}
    .black {background-color: #000000; color: #000000;}
    .blanchedalmond {background-color: #ffebcd; color: #ffebcd;}
    .blue {background-color: #0000ff; color: #0000ff;}
    .blue1 {background-color: #0000ff; color: #0000ff;}
    .blue2 {background-color: #0000ee; color: #0000ee;}
    .blue3 {background-color: #0000cd; color: #0000cd;}
    .blue4 {background-color: #00008b; color: #00008b;}
    .blueviolet {background-color: #8a2be2; color: #8a2be2;}
    .brown {background-color: #a52a2a; color: #a52a2a;}
    .brown1 {background-color: #ff4040; color: #ff4040;}
    .brown2 {background-color: #ee3b3b; color: #ee3b3b;}
    .brown3 {background-color: #cd3333; color: #cd3333;}
    .brown4 {background-color: #8b2323; color: #8b2323;}
    .burlywood {background-color: #deb887; color: #deb887;}
    .burlywood1 {background-color: #ffd39b; color: #ffd39b;}
    .burlywood2 {background-color: #eec591; color: #eec591;}
    .burlywood3 {background-color: #cdaa7d; color: #cdaa7d;}
    .burlywood4 {background-color: #8b7355; color: #8b7355;}
    .cadetblue {background-color: #5f9ea0; color: #5f9ea0;}
    .cadetblue1 {background-color: #98f5ff; color: #98f5ff;}
    .cadetblue2 {background-color: #8ee5ee; color: #8ee5ee;}
    .cadetblue3 {background-color: #7ac5cd; color: #7ac5cd;}
    .cadetblue4 {background-color: #53868b; color: #53868b;}
    .chartreuse {background-color: #7fff00; color: #7fff00;}
    .chartreuse1 {background-color: #7fff00; color: #7fff00;}
    .chartreuse2 {background-color: #76ee00; color: #76ee00;}
    .chartreuse3 {background-color: #66cd00; color: #66cd00;}
    .chartreuse4 {background-color: #458b00; color: #458b00;}
    .chocolate {background-color: #d2691e; color: #d2691e;}
    .chocolate1 {background-color: #ff7f24; color: #ff7f24;}
    .chocolate2 {background-color: #ee7621; color: #ee7621;}
    .chocolate3 {background-color: #cd661d; color: #cd661d;}
    .chocolate4 {background-color: #8b4513; color: #8b4513;}
    .coral {background-color: #ff7f50; color: #ff7f50;}
    .coral1 {background-color: #ff7256; color: #ff7256;}
    .coral2 {background-color: #ee6a50; color: #ee6a50;}
    .coral3 {background-color: #cd5b45; color: #cd5b45;}
    .coral4 {background-color: #8b3e2f; color: #8b3e2f;}
    .cornflowerblue {background-color: #6495ed; color: #6495ed;}
    .cornsilk {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk1 {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk2 {background-color: #eee8cd; color: #eee8cd;}
    .cornsilk3 {background-color: #cdc8b1; color: #cdc8b1;}
    .cornsilk4 {background-color: #8b8878; color: #8b8878;}
    .crimson {background-color: #dc143c; color: #dc143c;}
    .cyan {background-color: #00ffff; color: #00ffff;}
    .cyan1 {background-color: #00ffff; color: #00ffff;}
    .cyan2 {background-color: #00eeee; color: #00eeee;}
    .cyan3 {background-color: #00cdcd; color: #00cdcd;}
    .cyan4 {background-color: #008b8b; color: #008b8b;}
    .darkblue {background-color: #00008b; color: #00008b;}
    .darkcyan {background-color: #008b8b; color: #008b8b;}
    .darkgoldenrod {background-color: #b8860b; color: #b8860b;}
    .darkgoldenrod1 {background-color: #ffb90f; color: #ffb90f;}
    .darkgoldenrod2 {background-color: #eead0e; color: #eead0e;}
    .darkgoldenrod3 {background-color: #cd950c; color: #cd950c;}
    .darkgoldenrod4 {background-color: #8b6508; color: #8b6508;}
    .darkgray {background-color: #a9a9a9; color: #a9a9a9;}
    .darkgreen {background-color: #006400; color: #006400;}
    .darkgrey {background-color: #a9a9a9; color: #a9a9a9;}
    .darkkhaki {background-color: #bdb76b; color: #bdb76b;}
    .darkmagenta {background-color: #8b008b; color: #8b008b;}
    .darkolivegreen {background-color: #556b2f; color: #556b2f;}
    .darkolivegreen1 {background-color: #caff70; color: #caff70;}
    .darkolivegreen2 {background-color: #bcee68; color: #bcee68;}
    .darkolivegreen3 {background-color: #a2cd5a; color: #a2cd5a;}
    .darkolivegreen4 {background-color: #6e8b3d; color: #6e8b3d;}
    .darkorange {background-color: #ff8c00; color: #ff8c00;}
    .darkorange1 {background-color: #ff7f00; color: #ff7f00;}
    .darkorange2 {background-color: #ee7600; color: #ee7600;}
    .darkorange3 {background-color: #cd6600; color: #cd6600;}
    .darkorange4 {background-color: #8b4500; color: #8b4500;}
    .darkorchid {background-color: #9932cc; color: #9932cc;}
    .darkorchid1 {background-color: #bf3eff; color: #bf3eff;}
    .darkorchid2 {background-color: #b23aee; color: #b23aee;}
    .darkorchid3 {background-color: #9a32cd; color: #9a32cd;}
    .darkorchid4 {background-color: #68228b; color: #68228b;}
    .darkred {background-color: #8b0000; color: #8b0000;}
    .darksalmon {background-color: #e9967a; color: #e9967a;}
    .darkseagreen {background-color: #8fbc8f; color: #8fbc8f;}
    .darkseagreen1 {background-color: #c1ffc1; color: #c1ffc1;}
    .darkseagreen2 {background-color: #b4eeb4; color: #b4eeb4;}
    .darkseagreen3 {background-color: #9bcd9b; color: #9bcd9b;}
    .darkseagreen4 {background-color: #698b69; color: #698b69;}
    .darkslateblue {background-color: #483d8b; color: #483d8b;}
    .darkslategray {background-color: #2f4f4f; color: #2f4f4f;}
    .darkslategray1 {background-color: #97ffff; color: #97ffff;}
    .darkslategray2 {background-color: #8deeee; color: #8deeee;}
    .darkslategray3 {background-color: #79cdcd; color: #79cdcd;}
    .darkslategray4 {background-color: #528b8b; color: #528b8b;}
    .darkslategrey {background-color: #2f4f4f; color: #2f4f4f;}
    .darkturquoise {background-color: #00ced1; color: #00ced1;}
    .darkviolet {background-color: #9400d3; color: #9400d3;}
    .deeppink {background-color: #ff1493; color: #ff1493;}
    .deeppink1 {background-color: #ff1493; color: #ff1493;}
    .deeppink2 {background-color: #ee1289; color: #ee1289;}
    .deeppink3 {background-color: #cd1076; color: #cd1076;}
    .deeppink4 {background-color: #8b0a50; color: #8b0a50;}
    .deepskyblue {background-color: #00bfff; color: #00bfff;}
    .deepskyblue1 {background-color: #00bfff; color: #00bfff;}
    .deepskyblue2 {background-color: #00b2ee; color: #00b2ee;}
    .deepskyblue3 {background-color: #009acd; color: #009acd;}
    .deepskyblue4 {background-color: #00688b; color: #00688b;}
    .dimgray {background-color: #696969; color: #696969;}
    .dimgrey {background-color: #696969; color: #696969;}
    .dodgerblue {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue1 {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue2 {background-color: #1c86ee; color: #1c86ee;}
    .dodgerblue3 {background-color: #1874cd; color: #1874cd;}
    .dodgerblue4 {background-color: #104e8b; color: #104e8b;}
    .firebrick {background-color: #b22222; color: #b22222;}
    .firebrick1 {background-color: #ff3030; color: #ff3030;}
    .firebrick2 {background-color: #ee2c2c; color: #ee2c2c;}
    .firebrick3 {background-color: #cd2626; color: #cd2626;}
    .firebrick4 {background-color: #8b1a1a; color: #8b1a1a;}
    .floralwhite {background-color: #fffaf0; color: #fffaf0;}
    .forestgreen {background-color: #228b22; color: #228b22;}
    .fuchsia {background-color: #ff00ff; color: #ff00ff;}
    .gainsboro {background-color: #dcdcdc; color: #dcdcdc;}
    .ghostwhite {background-color: #f8f8ff; color: #f8f8ff;}
    .gold {background-color: #ffd700; color: #ffd700;}
    .gold1 {background-color: #ffd700; color: #ffd700;}
    .gold2 {background-color: #eec900; color: #eec900;}
    .gold3 {background-color: #cdad00; color: #cdad00;}
    .gold4 {background-color: #8b7500; color: #8b7500;}
    .goldenrod {background-color: #daa520; color: #daa520;}
    .goldenrod1 {background-color: #ffc125; color: #ffc125;}
    .goldenrod2 {background-color: #eeb422; color: #eeb422;}
    .goldenrod3 {background-color: #cd9b1d; color: #cd9b1d;}
    .goldenrod4 {background-color: #8b6914; color: #8b6914;}
    .gray {background-color: #bebebe; color: #bebebe;}
    .gray0 {background-color: #000000; color: #000000;}
    .gray1 {background-color: #030303; color: #030303;}
    .gray2 {background-color: #050505; color: #050505;}
    .gray3 {background-color: #080808; color: #080808;}
    .gray4 {background-color: #0a0a0a; color: #0a0a0a;}
    .gray5 {background-color: #0d0d0d; color: #0d0d0d;}
    .gray6 {background-color: #0f0f0f; color: #0f0f0f;}
    .gray7 {background-color: #121212; color: #121212;}
    .gray8 {background-color: #141414; color: #141414;}
    .gray9 {background-color: #171717; color: #171717;}
    .gray10 {background-color: #1a1a1a; color: #1a1a1a;}
    .gray11 {background-color: #1c1c1c; color: #1c1c1c;}
    .gray12 {background-color: #1f1f1f; color: #1f1f1f;}
    .gray13 {background-color: #212121; color: #212121;}
    .gray14 {background-color: #242424; color: #242424;}
    .gray15 {background-color: #262626; color: #262626;}
    .gray16 {background-color: #292929; color: #292929;}
    .gray17 {background-color: #2b2b2b; color: #2b2b2b;}
    .gray18 {background-color: #2e2e2e; color: #2e2e2e;}
    .gray19 {background-color: #303030; color: #303030;}
    .gray20 {background-color: #333333; color: #333333;}
    .gray21 {background-color: #363636; color: #363636;}
    .gray22 {background-color: #383838; color: #383838;}
    .gray23 {background-color: #3b3b3b; color: #3b3b3b;}
    .gray24 {background-color: #3d3d3d; color: #3d3d3d;}
    .gray25 {background-color: #404040; color: #404040;}
    .gray26 {background-color: #424242; color: #424242;}
    .gray27 {background-color: #454545; color: #454545;}
    .gray28 {background-color: #474747; color: #474747;}
    .gray29 {background-color: #4a4a4a; color: #4a4a4a;}
    .gray30 {background-color: #4d4d4d; color: #4d4d4d;}
    .gray31 {background-color: #4f4f4f; color: #4f4f4f;}
    .gray32 {background-color: #525252; color: #525252;}
    .gray33 {background-color: #545454; color: #545454;}
    .gray34 {background-color: #575757; color: #575757;}
    .gray35 {background-color: #595959; color: #595959;}
    .gray36 {background-color: #5c5c5c; color: #5c5c5c;}
    .gray37 {background-color: #5e5e5e; color: #5e5e5e;}
    .gray38 {background-color: #616161; color: #616161;}
    .gray39 {background-color: #636363; color: #636363;}
    .gray40 {background-color: #666666; color: #666666;}
    .gray41 {background-color: #696969; color: #696969;}
    .gray42 {background-color: #6b6b6b; color: #6b6b6b;}
    .gray43 {background-color: #6e6e6e; color: #6e6e6e;}
    .gray44 {background-color: #707070; color: #707070;}
    .gray45 {background-color: #737373; color: #737373;}
    .gray46 {background-color: #757575; color: #757575;}
    .gray47 {background-color: #787878; color: #787878;}
    .gray48 {background-color: #7a7a7a; color: #7a7a7a;}
    .gray49 {background-color: #7d7d7d; color: #7d7d7d;}
    .gray50 {background-color: #7f7f7f; color: #7f7f7f;}
    .gray51 {background-color: #828282; color: #828282;}
    .gray52 {background-color: #858585; color: #858585;}
    .gray53 {background-color: #878787; color: #878787;}
    .gray54 {background-color: #8a8a8a; color: #8a8a8a;}
    .gray55 {background-color: #8c8c8c; color: #8c8c8c;}
    .gray56 {background-color: #8f8f8f; color: #8f8f8f;}
    .gray57 {background-color: #919191; color: #919191;}
    .gray58 {background-color: #949494; color: #949494;}
    .gray59 {background-color: #969696; color: #969696;}
    .gray60 {background-color: #999999; color: #999999;}
    .gray61 {background-color: #9c9c9c; color: #9c9c9c;}
    .gray62 {background-color: #9e9e9e; color: #9e9e9e;}
    .gray63 {background-color: #a1a1a1; color: #a1a1a1;}
    .gray64 {background-color: #a3a3a3; color: #a3a3a3;}
    .gray65 {background-color: #a6a6a6; color: #a6a6a6;}
    .gray66 {background-color: #a8a8a8; color: #a8a8a8;}
    .gray67 {background-color: #ababab; color: #ababab;}
    .gray68 {background-color: #adadad; color: #adadad;}
    .gray69 {background-color: #b0b0b0; color: #b0b0b0;}
    .gray70 {background-color: #b3b3b3; color: #b3b3b3;}
    .gray71 {background-color: #b5b5b5; color: #b5b5b5;}
    .gray72 {background-color: #b8b8b8; color: #b8b8b8;}
    .gray73 {background-color: #bababa; color: #bababa;}
    .gray74 {background-color: #bdbdbd; color: #bdbdbd;}
    .gray75 {background-color: #bfbfbf; color: #bfbfbf;}
    .gray76 {background-color: #c2c2c2; color: #c2c2c2;}
    .gray77 {background-color: #c4c4c4; color: #c4c4c4;}
    .gray78 {background-color: #c7c7c7; color: #c7c7c7;}
    .gray79 {background-color: #c9c9c9; color: #c9c9c9;}
    .gray80 {background-color: #cccccc; color: #cccccc;}
    .gray81 {background-color: #cfcfcf; color: #cfcfcf;}
    .gray82 {background-color: #d1d1d1; color: #d1d1d1;}
    .gray83 {background-color: #d4d4d4; color: #d4d4d4;}
    .gray84 {background-color: #d6d6d6; color: #d6d6d6;}
    .gray85 {background-color: #d9d9d9; color: #d9d9d9;}
    .gray86 {background-color: #dbdbdb; color: #dbdbdb;}
    .gray87 {background-color: #dedede; color: #dedede;}
    .gray88 {background-color: #e0e0e0; color: #e0e0e0;}
    .gray89 {background-color: #e3e3e3; color: #e3e3e3;}
    .gray90 {background-color: #e5e5e5; color: #e5e5e5;}
    .gray91 {background-color: #e8e8e8; color: #e8e8e8;}
    .gray92 {background-color: #ebebeb; color: #ebebeb;}
    .gray93 {background-color: #ededed; color: #ededed;}
    .gray94 {background-color: #f0f0f0; color: #f0f0f0;}
    .gray95 {background-color: #f2f2f2; color: #f2f2f2;}
    .gray96 {background-color: #f5f5f5; color: #f5f5f5;}
    .gray97 {background-color: #f7f7f7; color: #f7f7f7;}
    .gray98 {background-color: #fafafa; color: #fafafa;}
    .gray99 {background-color: #fcfcfc; color: #fcfcfc;}
    .gray100 {background-color: #ffffff; color: #ffffff;}
    .green {background-color: #00ff00; color: #00ff00;}
    .green1 {background-color: #00ff00; color: #00ff00;}
    .green2 {background-color: #00ee00; color: #00ee00;}
    .green3 {background-color: #00cd00; color: #00cd00;}
    .green4 {background-color: #008b00; color: #008b00;}
    .greenyellow {background-color: #adff2f; color: #adff2f;}
    .grey {background-color: #bebebe; color: #bebebe;}
    .grey0 {background-color: #000000; color: #000000;}
    .grey1 {background-color: #030303; color: #030303;}
    .grey2 {background-color: #050505; color: #050505;}
    .grey3 {background-color: #080808; color: #080808;}
    .grey4 {background-color: #0a0a0a; color: #0a0a0a;}
    .grey5 {background-color: #0d0d0d; color: #0d0d0d;}
    .grey6 {background-color: #0f0f0f; color: #0f0f0f;}
    .grey7 {background-color: #121212; color: #121212;}
    .grey8 {background-color: #141414; color: #141414;}
    .grey9 {background-color: #171717; color: #171717;}
    .grey10 {background-color: #1a1a1a; color: #1a1a1a;}
    .grey11 {background-color: #1c1c1c; color: #1c1c1c;}
    .grey12 {background-color: #1f1f1f; color: #1f1f1f;}
    .grey13 {background-color: #212121; color: #212121;}
    .grey14 {background-color: #242424; color: #242424;}
    .grey15 {background-color: #262626; color: #262626;}
    .grey16 {background-color: #292929; color: #292929;}
    .grey17 {background-color: #2b2b2b; color: #2b2b2b;}
    .grey18 {background-color: #2e2e2e; color: #2e2e2e;}
    .grey19 {background-color: #303030; color: #303030;}
    .grey20 {background-color: #333333; color: #333333;}
    .grey21 {background-color: #363636; color: #363636;}
    .grey22 {background-color: #383838; color: #383838;}
    .grey23 {background-color: #3b3b3b; color: #3b3b3b;}
    .grey24 {background-color: #3d3d3d; color: #3d3d3d;}
    .grey25 {background-color: #404040; color: #404040;}
    .grey26 {background-color: #424242; color: #424242;}
    .grey27 {background-color: #454545; color: #454545;}
    .grey28 {background-color: #474747; color: #474747;}
    .grey29 {background-color: #4a4a4a; color: #4a4a4a;}
    .grey30 {background-color: #4d4d4d; color: #4d4d4d;}
    .grey31 {background-color: #4f4f4f; color: #4f4f4f;}
    .grey32 {background-color: #525252; color: #525252;}
    .grey33 {background-color: #545454; color: #545454;}
    .grey34 {background-color: #575757; color: #575757;}
    .grey35 {background-color: #595959; color: #595959;}
    .grey36 {background-color: #5c5c5c; color: #5c5c5c;}
    .grey37 {background-color: #5e5e5e; color: #5e5e5e;}
    .grey38 {background-color: #616161; color: #616161;}
    .grey39 {background-color: #636363; color: #636363;}
    .grey40 {background-color: #666666; color: #666666;}
    .grey41 {background-color: #696969; color: #696969;}
    .grey42 {background-color: #6b6b6b; color: #6b6b6b;}
    .grey43 {background-color: #6e6e6e; color: #6e6e6e;}
    .grey44 {background-color: #707070; color: #707070;}
    .grey45 {background-color: #737373; color: #737373;}
    .grey46 {background-color: #757575; color: #757575;}
    .grey47 {background-color: #787878; color: #787878;}
    .grey48 {background-color: #7a7a7a; color: #7a7a7a;}
    .grey49 {background-color: #7d7d7d; color: #7d7d7d;}
    .grey50 {background-color: #7f7f7f; color: #7f7f7f;}
    .grey51 {background-color: #828282; color: #828282;}
    .grey52 {background-color: #858585; color: #858585;}
    .grey53 {background-color: #878787; color: #878787;}
    .grey54 {background-color: #8a8a8a; color: #8a8a8a;}
    .grey55 {background-color: #8c8c8c; color: #8c8c8c;}
    .grey56 {background-color: #8f8f8f; color: #8f8f8f;}
    .grey57 {background-color: #919191; color: #919191;}
    .grey58 {background-color: #949494; color: #949494;}
    .grey59 {background-color: #969696; color: #969696;}
    .grey60 {background-color: #999999; color: #999999;}
    .grey61 {background-color: #9c9c9c; color: #9c9c9c;}
    .grey62 {background-color: #9e9e9e; color: #9e9e9e;}
    .grey63 {background-color: #a1a1a1; color: #a1a1a1;}
    .grey64 {background-color: #a3a3a3; color: #a3a3a3;}
    .grey65 {background-color: #a6a6a6; color: #a6a6a6;}
    .grey66 {background-color: #a8a8a8; color: #a8a8a8;}
    .grey67 {background-color: #ababab; color: #ababab;}
    .grey68 {background-color: #adadad; color: #adadad;}
    .grey69 {background-color: #b0b0b0; color: #b0b0b0;}
    .grey70 {background-color: #b3b3b3; color: #b3b3b3;}
    .grey71 {background-color: #b5b5b5; color: #b5b5b5;}
    .grey72 {background-color: #b8b8b8; color: #b8b8b8;}
    .grey73 {background-color: #bababa; color: #bababa;}
    .grey74 {background-color: #bdbdbd; color: #bdbdbd;}
    .grey75 {background-color: #bfbfbf; color: #bfbfbf;}
    .grey76 {background-color: #c2c2c2; color: #c2c2c2;}
    .grey77 {background-color: #c4c4c4; color: #c4c4c4;}
    .grey78 {background-color: #c7c7c7; color: #c7c7c7;}
    .grey79 {background-color: #c9c9c9; color: #c9c9c9;}
    .grey80 {background-color: #cccccc; color: #cccccc;}
    .grey81 {background-color: #cfcfcf; color: #cfcfcf;}
    .grey82 {background-color: #d1d1d1; color: #d1d1d1;}
    .grey83 {background-color: #d4d4d4; color: #d4d4d4;}
    .grey84 {background-color: #d6d6d6; color: #d6d6d6;}
    .grey85 {background-color: #d9d9d9; color: #d9d9d9;}
    .grey86 {background-color: #dbdbdb; color: #dbdbdb;}
    .grey87 {background-color: #dedede; color: #dedede;}
    .grey88 {background-color: #e0e0e0; color: #e0e0e0;}
    .grey89 {background-color: #e3e3e3; color: #e3e3e3;}
    .grey90 {background-color: #e5e5e5; color: #e5e5e5;}
    .grey91 {background-color: #e8e8e8; color: #e8e8e8;}
    .grey92 {background-color: #ebebeb; color: #ebebeb;}
    .grey93 {background-color: #ededed; color: #ededed;}
    .grey94 {background-color: #f0f0f0; color: #f0f0f0;}
    .grey95 {background-color: #f2f2f2; color: #f2f2f2;}
    .grey96 {background-color: #f5f5f5; color: #f5f5f5;}
    .grey97 {background-color: #f7f7f7; color: #f7f7f7;}
    .grey98 {background-color: #fafafa; color: #fafafa;}
    .grey99 {background-color: #fcfcfc; color: #fcfcfc;}
    .grey100 {background-color: #ffffff; color: #ffffff;}
    .honeydew {background-color: #f0fff0; color: #f0fff0;}
    .honeydew1 {background-color: #f0fff0; color: #f0fff0;}
    .honeydew2 {background-color: #e0eee0; color: #e0eee0;}
    .honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}
    .honeydew4 {background-color: #838b83; color: #838b83;}
    .hotpink {background-color: #ff69b4; color: #ff69b4;}
    .hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}
    .hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}
    .hotpink3 {background-color: #cd6090; color: #cd6090;}
    .hotpink4 {background-color: #8b3a62; color: #8b3a62;}
    .indianred {background-color: #cd5c5c; color: #cd5c5c;}
    .indianred1 {background-color: #ff6a6a; color: #ff6a6a;}
    .indianred2 {background-color: #ee6363; color: #ee6363;}
    .indianred3 {background-color: #cd5555; color: #cd5555;}
    .indianred4 {background-color: #8b3a3a; color: #8b3a3a;}
    .indigo {background-color: #4b0082; color: #4b0082;}
    .ivory {background-color: #fffff0; color: #fffff0;}
    .ivory1 {background-color: #fffff0; color: #fffff0;}
    .ivory2 {background-color: #eeeee0; color: #eeeee0;}
    .ivory3 {background-color: #cdcdc1; color: #cdcdc1;}
    .ivory4 {background-color: #8b8b83; color: #8b8b83;}
    .khaki {background-color: #f0e68c; color: #f0e68c;}
    .khaki1 {background-color: #fff68f; color: #fff68f;}
    .khaki2 {background-color: #eee685; color: #eee685;}
    .khaki3 {background-color: #cdc673; color: #cdc673;}
    .khaki4 {background-color: #8b864e; color: #8b864e;}
    .lavender {background-color: #e6e6fa; color: #e6e6fa;}
    .lavenderblush {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}
    .lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}
    .lavenderblush4 {background-color: #8b8386; color: #8b8386;}
    .lawngreen {background-color: #7cfc00; color: #7cfc00;}
    .lemonchiffon {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon1 {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}
    .lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}
    .lemonchiffon4 {background-color: #8b8970; color: #8b8970;}
    .lightblue {background-color: #add8e6; color: #add8e6;}
    .lightblue1 {background-color: #bfefff; color: #bfefff;}
    .lightblue2 {background-color: #b2dfee; color: #b2dfee;}
    .lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}
    .lightblue4 {background-color: #68838b; color: #68838b;}
    .lightcoral {background-color: #f08080; color: #f08080;}
    .lightcyan {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan1 {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan2 {background-color: #d1eeee; color: #d1eeee;}
    .lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}
    .lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}
    .lightgoldenrod {background-color: #eedd82; color: #eedd82;}
    .lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}
    .lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}
    .lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}
    .lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}
    .lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}
    .lightgray {background-color: #d3d3d3; color: #d3d3d3;}
    .lightgreen {background-color: #90ee90; color: #90ee90;}
    .lightgrey {background-color: #d3d3d3; color: #d3d3d3;}
    .lightpink {background-color: #ffb6c1; color: #ffb6c1;}
    .lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}
    .lightpink2 {background-color: #eea2ad; color: #eea2ad;}
    .lightpink3 {background-color: #cd8c95; color: #cd8c95;}
    .lightpink4 {background-color: #8b5f65; color: #8b5f65;}
    .lightsalmon {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon2 {background-color: #ee9572; color: #ee9572;}
    .lightsalmon3 {background-color: #cd8162; color: #cd8162;}
    .lightsalmon4 {background-color: #8b5742; color: #8b5742;}
    .lightseagreen {background-color: #20b2aa; color: #20b2aa;}
    .lightskyblue {background-color: #87cefa; color: #87cefa;}
    .lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}
    .lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}
    .lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}
    .lightskyblue4 {background-color: #607b8b; color: #607b8b;}
    .lightslateblue {background-color: #8470ff; color: #8470ff;}
    .lightslategray {background-color: #778899; color: #778899;}
    .lightslategrey {background-color: #778899; color: #778899;}
    .lightsteelblue {background-color: #b0c4de; color: #b0c4de;}
    .lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}
    .lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}
    .lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}
    .lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}
    .lightyellow {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow1 {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow2 {background-color: #eeeed1; color: #eeeed1;}
    .lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}
    .lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}
    .linen {background-color: #faf0e6; color: #faf0e6;}
    .limegreen {background-color: #32cd32; color: #32cd32;}
    .lime {background-color: #00ff00; color: #00ff00;}
    .magenta {background-color: #ff00ff; color: #ff00ff;}
    .magenta1 {background-color: #ff00ff; color: #ff00ff;}
    .magenta2 {background-color: #ee00ee; color: #ee00ee;}
    .magenta3 {background-color: #cd00cd; color: #cd00cd;}
    .magenta4 {background-color: #8b008b; color: #8b008b;}
    .maroon {background-color: #b03060; color: #b03060;}
    .maroon1 {background-color: #ff34b3; color: #ff34b3;}
    .maroon2 {background-color: #ee30a7; color: #ee30a7;}
    .maroon3 {background-color: #cd2990; color: #cd2990;}
    .maroon4 {background-color: #8b1c62; color: #8b1c62;}
    .mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}
    .mediumblue {background-color: #0000cd; color: #0000cd;}
    .mediumorchid {background-color: #ba55d3; color: #ba55d3;}
    .mediumorchid1 {background-color: #e066ff; color: #e066ff;}
    .mediumorchid2 {background-color: #d15fee; color: #d15fee;}
    .mediumorchid3 {background-color: #b452cd; color: #b452cd;}
    .mediumorchid4 {background-color: #7a378b; color: #7a378b;}
    .mediumpurple {background-color: #9370db; color: #9370db;}
    .mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}
    .mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}
    .mediumpurple3 {background-color: #8968cd; color: #8968cd;}
    .mediumpurple4 {background-color: #5d478b; color: #5d478b;}
    .mediumseagreen {background-color: #3cb371; color: #3cb371;}
    .mediumslateblue {background-color: #7b68ee; color: #7b68ee;}
    .mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}
    .mediumturquoise {background-color: #48d1cc; color: #48d1cc;}
    .mediumvioletred {background-color: #c71585; color: #c71585;}
    .midnightblue {background-color: #191970; color: #191970;}
    .mintcream {background-color: #f5fffa; color: #f5fffa;}
    .mistyrose {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose2 {background-color: #eed5d2; color: #eed5d2;}
    .mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}
    .mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}
    .moccasin {background-color: #ffe4b5; color: #ffe4b5;}
    .navajowhite {background-color: #ffdead; color: #ffdead;}
    .navajowhite1 {background-color: #ffdead; color: #ffdead;}
    .navajowhite2 {background-color: #eecfa1; color: #eecfa1;}
    .navajowhite3 {background-color: #cdb38b; color: #cdb38b;}
    .navajowhite4 {background-color: #8b795e; color: #8b795e;}
    .navy {background-color: #000080; color: #000080;}
    .navyblue {background-color: #000080; color: #000080;}
    .oldlace {background-color: #fdf5e6; color: #fdf5e6;}
    .olive {background-color: #808000; color: #808000;}
    .olivedrab {background-color: #6b8e23; color: #6b8e23;}
    .olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}
    .olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}
    .olivedrab3 {background-color: #9acd32; color: #9acd32;}
    .olivedrab4 {background-color: #698b22; color: #698b22;}
    .orange {background-color: #ffa500; color: #ffa500;}
    .orange1 {background-color: #ffa500; color: #ffa500;}
    .orange2 {background-color: #ee9a00; color: #ee9a00;}
    .orange3 {background-color: #cd8500; color: #cd8500;}
    .orange4 {background-color: #8b5a00; color: #8b5a00;}
    .orangered {background-color: #ff4500; color: #ff4500;}
    .orangered1 {background-color: #ff4500; color: #ff4500;}
    .orangered2 {background-color: #ee4000; color: #ee4000;}
    .orangered3 {background-color: #cd3700; color: #cd3700;}
    .orangered4 {background-color: #8b2500; color: #8b2500;}
    .orchid {background-color: #da70d6; color: #da70d6;}
    .orchid1 {background-color: #ff83fa; color: #ff83fa;}
    .orchid2 {background-color: #ee7ae9; color: #ee7ae9;}
    .orchid3 {background-color: #cd69c9; color: #cd69c9;}
    .orchid4 {background-color: #8b4789; color: #8b4789;}
    .palegreen {background-color: #98fb98; color: #98fb98;}
    .palegreen1 {background-color: #9aff9a; color: #9aff9a;}
    .palegreen2 {background-color: #90ee90; color: #90ee90;}
    .palegreen3 {background-color: #7ccd7c; color: #7ccd7c;}
    .palegreen4 {background-color: #548b54; color: #548b54;}
    .palegoldenrod {background-color: #eee8aa; color: #eee8aa;}
    .paleturquoise {background-color: #afeeee; color: #afeeee;}
    .paleturquoise1 {background-color: #bbffff; color: #bbffff;}
    .paleturquoise2 {background-color: #aeeeee; color: #aeeeee;}
    .paleturquoise3 {background-color: #96cdcd; color: #96cdcd;}
    .paleturquoise4 {background-color: #668b8b; color: #668b8b;}
    .palevioletred {background-color: #db7093; color: #db7093;}
    .palevioletred1 {background-color: #ff82ab; color: #ff82ab;}
    .palevioletred2 {background-color: #ee799f; color: #ee799f;}
    .palevioletred3 {background-color: #cd6889; color: #cd6889;}
    .palevioletred4 {background-color: #8b475d; color: #8b475d;}
    .papayawhip {background-color: #ffefd5; color: #ffefd5;}
    .peachpuff {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff1 {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff2 {background-color: #eecbad; color: #eecbad;}
    .peachpuff3 {background-color: #cdaf95; color: #cdaf95;}
    .peachpuff4 {background-color: #8b7765; color: #8b7765;}
    .peru {background-color: #cd853f; color: #cd853f;}
    .pink {background-color: #ffc0cb; color: #ffc0cb;}
    .pink1 {background-color: #ffb5c5; color: #ffb5c5;}
    .pink2 {background-color: #eea9b8; color: #eea9b8;}
    .pink3 {background-color: #cd919e; color: #cd919e;}
    .pink4 {background-color: #8b636c; color: #8b636c;}
    .plum {background-color: #dda0dd; color: #dda0dd;}
    .plum1 {background-color: #ffbbff; color: #ffbbff;}
    .plum2 {background-color: #eeaeee; color: #eeaeee;}
    .plum3 {background-color: #cd96cd; color: #cd96cd;}
    .plum4 {background-color: #8b668b; color: #8b668b;}
    .powderblue {background-color: #b0e0e6; color: #b0e0e6;}
    .purple {background-color: #a020f0; color: #a020f0;}
    .purple1 {background-color: #9b30ff; color: #9b30ff;}
    .purple2 {background-color: #912cee; color: #912cee;}
    .purple3 {background-color: #7d26cd; color: #7d26cd;}
    .purple4 {background-color: #551a8b; color: #551a8b;}
    .red {background-color: #ff0000; color: #ff0000;}
    .red1 {background-color: #ff0000; color: #ff0000;}
    .red2 {background-color: #ee0000; color: #ee0000;}
    .red3 {background-color: #cd0000; color: #cd0000;}
    .red4 {background-color: #8b0000; color: #8b0000;}
    .rosybrown {background-color: #bc8f8f; color: #bc8f8f;}
    .rosybrown1 {background-color: #ffc1c1; color: #ffc1c1;}
    .rosybrown2 {background-color: #eeb4b4; color: #eeb4b4;}
    .rosybrown3 {background-color: #cd9b9b; color: #cd9b9b;}
    .rosybrown4 {background-color: #8b6969; color: #8b6969;}
    .royalblue {background-color: #4169e1; color: #4169e1;}
    .royalblue1 {background-color: #4876ff; color: #4876ff;}
    .royalblue2 {background-color: #436eee; color: #436eee;}
    .royalblue3 {background-color: #3a5fcd; color: #3a5fcd;}
    .royalblue4 {background-color: #27408b; color: #27408b;}
    .salmon {background-color: #fa8072; color: #fa8072;}
    .salmon1 {background-color: #ff8c69; color: #ff8c69;}
    .salmon2 {background-color: #ee8262; color: #ee8262;}
    .salmon3 {background-color: #cd7054; color: #cd7054;}
    .salmon4 {background-color: #8b4c39; color: #8b4c39;}
    .saddlebrown {background-color: #8b4513; color: #8b4513;}
    .sandybrown {background-color: #f4a460; color: #f4a460;}
    .seagreen {background-color: #2e8b57; color: #2e8b57;}
    .seagreen1 {background-color: #54ff9f; color: #54ff9f;}
    .seagreen2 {background-color: #4eee94; color: #4eee94;}
    .seagreen3 {background-color: #43cd80; color: #43cd80;}
    .seagreen4 {background-color: #2e8b57; color: #2e8b57;}
    .seashell {background-color: #fff5ee; color: #fff5ee;}
    .seashell1 {background-color: #fff5ee; color: #fff5ee;}
    .seashell2 {background-color: #eee5de; color: #eee5de;}
    .seashell3 {background-color: #cdc5bf; color: #cdc5bf;}
    .seashell4 {background-color: #8b8682; color: #8b8682;}
    .sienna {background-color: #a0522d; color: #a0522d;}
    .sienna1 {background-color: #ff8247; color: #ff8247;}
    .sienna2 {background-color: #ee7942; color: #ee7942;}
    .sienna3 {background-color: #cd6839; color: #cd6839;}
    .sienna4 {background-color: #8b4726; color: #8b4726;}
    .silver {background-color: #c0c0c0; color: #c0c0c0;}
    .skyblue {background-color: #87ceeb; color: #87ceeb;}
    .skyblue1 {background-color: #87ceff; color: #87ceff;}
    .skyblue2 {background-color: #7ec0ee; color: #7ec0ee;}
    .skyblue3 {background-color: #6ca6cd; color: #6ca6cd;}
    .skyblue4 {background-color: #4a708b; color: #4a708b;}
    .slateblue {background-color: #6a5acd; color: #6a5acd;}
    .slateblue1 {background-color: #836fff; color: #836fff;}
    .slateblue2 {background-color: #7a67ee; color: #7a67ee;}
    .slateblue3 {background-color: #6959cd; color: #6959cd;}
    .slateblue4 {background-color: #473c8b; color: #473c8b;}
    .slategray {background-color: #708090; color: #708090;}
    .slategray1 {background-color: #c6e2ff; color: #c6e2ff;}
    .slategray2 {background-color: #b9d3ee; color: #b9d3ee;}
    .slategray3 {background-color: #9fb6cd; color: #9fb6cd;}
    .slategray4 {background-color: #6c7b8b; color: #6c7b8b;}
    .slategrey {background-color: #708090; color: #708090;}
    .snow {background-color: #fffafa; color: #fffafa;}
    .snow1 {background-color: #fffafa; color: #fffafa;}
    .snow2 {background-color: #eee9e9; color: #eee9e9;}
    .snow3 {background-color: #cdc9c9; color: #cdc9c9;}
    .snow4 {background-color: #8b8989; color: #8b8989;}
    .springgreen {background-color: #00ff7f; color: #00ff7f;}
    .springgreen1 {background-color: #00ff7f; color: #00ff7f;}
    .springgreen2 {background-color: #00ee76; color: #00ee76;}
    .springgreen3 {background-color: #00cd66; color: #00cd66;}
    .springgreen4 {background-color: #008b45; color: #008b45;}
    .steelblue {background-color: #4682b4; color: #4682b4;}
    .steelblue1 {background-color: #63b8ff; color: #63b8ff;}
    .steelblue2 {background-color: #5cacee; color: #5cacee;}
    .steelblue3 {background-color: #4f94cd; color: #4f94cd;}
    .steelblue4 {background-color: #36648b; color: #36648b;}
    .tan {background-color: #d2b48c; color: #d2b48c;}
    .tan1 {background-color: #ffa54f; color: #ffa54f;}
    .tan2 {background-color: #ee9a49; color: #ee9a49;}
    .tan3 {background-color: #cd853f; color: #cd853f;}
    .tan4 {background-color: #8b5a2b; color: #8b5a2b;}
    .teal {background-color: #008080; color: #008080;}
    .thistle {background-color: #d8bfd8; color: #d8bfd8;}
    .thistle1 {background-color: #ffe1ff; color: #ffe1ff;}
    .thistle2 {background-color: #eed2ee; color: #eed2ee;}
    .thistle3 {background-color: #cdb5cd; color: #cdb5cd;}
    .thistle4 {background-color: #8b7b8b; color: #8b7b8b;}
    .tomato {background-color: #ff6347; color: #ff6347;}
    .tomato1 {background-color: #ff6347; color: #ff6347;}
    .tomato2 {background-color: #ee5c42; color: #ee5c42;}
    .tomato3 {background-color: #cd4f39; color: #cd4f39;}
    .tomato4 {background-color: #8b3626; color: #8b3626;}
    .turquoise {background-color: #40e0d0; color: #40e0d0;}
    .turquoise1 {background-color: #00f5ff; color: #00f5ff;}
    .turquoise2 {background-color: #00e5ee; color: #00e5ee;}
    .turquoise3 {background-color: #00c5cd; color: #00c5cd;}
    .turquoise4 {background-color: #00868b; color: #00868b;}
    .violet {background-color: #ee82ee; color: #ee82ee;}
    .violetred {background-color: #d02090; color: #d02090;}
    .violetred1 {background-color: #ff3e96; color: #ff3e96;}
    .violetred2 {background-color: #ee3a8c; color: #ee3a8c;}
    .violetred3 {background-color: #cd3278; color: #cd3278;}
    .violetred4 {background-color: #8b2252; color: #8b2252;}
    .wheat {background-color: #f5deb3; color: #f5deb3;}
    .wheat1 {background-color: #ffe7ba; color: #ffe7ba;}
    .wheat2 {background-color: #eed8ae; color: #eed8ae;}
    .wheat3 {background-color: #cdba96; color: #cdba96;}
    .wheat4 {background-color: #8b7e66; color: #8b7e66;}
    .white {background-color: #ffffff; color: #ffffff;}
    .whitesmoke {background-color: #f5f5f5; color: #f5f5f5;}
    .yellow {background-color: #ffff00; color: #ffff00;}
    .yellow1 {background-color: #ffff00; color: #ffff00;}
    .yellow2 {background-color: #eeee00; color: #eeee00;}
    .yellow3 {background-color: #cdcd00; color: #cdcd00;}
    .yellow4 {background-color: #8b8b00; color: #8b8b00;}
    .yellowgreen {background-color: #9acd32; color: #9acd32;}
    </style>

:doc:`color` lets you specify any of these named colors when creating a new
``pygame.Color`` (taken from the
`colordict module <https://github.com/pygame/pygame/blob/main/src_py/colordict.py>`_).

.. role:: aliceblue
.. role:: antiquewhite
.. role:: antiquewhite1
.. role:: antiquewhite2
.. role:: antiquewhite3
.. role:: antiquewhite4
.. role:: aqua
.. role:: aquamarine
.. role:: aquamarine1
.. role:: aquamarine2
.. role:: aquamarine3
.. role:: aquamarine4
.. role:: azure
.. role:: azure1
.. role:: azure2
.. role:: azure3
.. role:: azure4
.. role:: beige
.. role:: bisque
.. role:: bisque1
.. role:: bisque2
.. role:: bisque3
.. role:: bisque4
.. role:: black
.. role:: blanchedalmond
.. role:: blue
.. role:: blue1
.. role:: blue2
.. role:: blue3
.. role:: blue4
.. role:: blueviolet
.. role:: brown
.. role:: brown1
.. role:: brown2
.. role:: brown3
.. role:: brown4
.. role:: burlywood
.. role:: burlywood1
.. role:: burlywood2
.. role:: burlywood3
.. role:: burlywood4
.. role:: cadetblue
.. role:: cadetblue1
.. role:: cadetblue2
.. role:: cadetblue3
.. role:: cadetblue4
.. role:: chartreuse
.. role:: chartreuse1
.. role:: chartreuse2
.. role:: chartreuse3
.. role:: chartreuse4
.. role:: chocolate
.. role:: chocolate1
.. role:: chocolate2
.. role:: chocolate3
.. role:: chocolate4
.. role:: coral
.. role:: coral1
.. role:: coral2
.. role:: coral3
.. role:: coral4
.. role:: cornflowerblue
.. role:: cornsilk
.. role:: cornsilk1
.. role:: cornsilk2
.. role:: cornsilk3
.. role:: cornsilk4
.. role:: crimson
.. role:: cyan
.. role:: cyan1
.. role:: cyan2
.. role:: cyan3
.. role:: cyan4
.. role:: darkblue
.. role:: darkcyan
.. role:: darkgoldenrod
.. role:: darkgoldenrod1
.. role:: darkgoldenrod2
.. role:: darkgoldenrod3
.. role:: darkgoldenrod4
.. role:: darkgray
.. role:: darkgreen
.. role:: darkgrey
.. role:: darkkhaki
.. role:: darkmagenta
.. role:: darkolivegreen
.. role:: darkolivegreen1
.. role:: darkolivegreen2
.. role:: darkolivegreen3
.. role:: darkolivegreen4
.. role:: darkorange
.. role:: darkorange1
.. role:: darkorange2
.. role:: darkorange3
.. role:: darkorange4
.. role:: darkorchid
.. role:: darkorchid1
.. role:: darkorchid2
.. role:: darkorchid3
.. role:: darkorchid4
.. role:: darkred
.. role:: darksalmon
.. role:: darkseagreen
.. role:: darkseagreen1
.. role:: darkseagreen2
.. role:: darkseagreen3
.. role:: darkseagreen4
.. role:: darkslateblue
.. role:: darkslategray
.. role:: darkslategray1
.. role:: darkslategray2
.. role:: darkslategray3
.. role:: darkslategray4
.. role:: darkslategrey
.. role:: darkturquoise
.. role:: darkviolet
.. role:: deeppink
.. role:: deeppink1
.. role:: deeppink2
.. role:: deeppink3
.. role:: deeppink4
.. role:: deepskyblue
.. role:: deepskyblue1
.. role:: deepskyblue2
.. role:: deepskyblue3
.. role:: deepskyblue4
.. role:: dimgray
.. role:: dimgrey
.. role:: dodgerblue
.. role:: dodgerblue1
.. role:: dodgerblue2
.. role:: dodgerblue3
.. role:: dodgerblue4
.. role:: firebrick
.. role:: firebrick1
.. role:: firebrick2
.. role:: firebrick3
.. role:: firebrick4
.. role:: floralwhite
.. role:: forestgreen
.. role:: fuchsia
.. role:: gainsboro
.. role:: ghostwhite
.. role:: gold
.. role:: gold1
.. role:: gold2
.. role:: gold3
.. role:: gold4
.. role:: goldenrod
.. role:: goldenrod1
.. role:: goldenrod2
.. role:: goldenrod3
.. role:: goldenrod4
.. role:: gray
.. role:: gray0
.. role:: gray1
.. role:: gray2
.. role:: gray3
.. role:: gray4
.. role:: gray5
.. role:: gray6
.. role:: gray7
.. role:: gray8
.. role:: gray9
.. role:: gray10
.. role:: gray11
.. role:: gray12
.. role:: gray13
.. role:: gray14
.. role:: gray15
.. role:: gray16
.. role:: gray17
.. role:: gray18
.. role:: gray19
.. role:: gray20
.. role:: gray21
.. role:: gray22
.. role:: gray23
.. role:: gray24
.. role:: gray25
.. role:: gray26
.. role:: gray27
.. role:: gray28
.. role:: gray29
.. role:: gray30
.. role:: gray31
.. role:: gray32
.. role:: gray33
.. role:: gray34
.. role:: gray35
.. role:: gray36
.. role:: gray37
.. role:: gray38
.. role:: gray39
.. role:: gray40
.. role:: gray41
.. role:: gray42
.. role:: gray43
.. role:: gray44
.. role:: gray45
.. role:: gray46
.. role:: gray47
.. role:: gray48
.. role:: gray49
.. role:: gray50
.. role:: gray51
.. role:: gray52
.. role:: gray53
.. role:: gray54
.. role:: gray55
.. role:: gray56
.. role:: gray57
.. role:: gray58
.. role:: gray59
.. role:: gray60
.. role:: gray61
.. role:: gray62
.. role:: gray63
.. role:: gray64
.. role:: gray65
.. role:: gray66
.. role:: gray67
.. role:: gray68
.. role:: gray69
.. role:: gray70
.. role:: gray71
.. role:: gray72
.. role:: gray73
.. role:: gray74
.. role:: gray75
.. role:: gray76
.. role:: gray77
.. role:: gray78
.. role:: gray79
.. role:: gray80
.. role:: gray81
.. role:: gray82
.. role:: gray83
.. role:: gray84
.. role:: gray85
.. role:: gray86
.. role:: gray87
.. role:: gray88
.. role:: gray89
.. role:: gray90
.. role:: gray91
.. role:: gray92
.. role:: gray93
.. role:: gray94
.. role:: gray95
.. role:: gray96
.. role:: gray97
.. role:: gray98
.. role:: gray99
.. role:: gray100
.. role:: green
.. role:: green1
.. role:: green2
.. role:: green3
.. role:: green4
.. role:: greenyellow
.. role:: grey
.. role:: grey0
.. role:: grey1
.. role:: grey2
.. role:: grey3
.. role:: grey4
.. role:: grey5
.. role:: grey6
.. role:: grey7
.. role:: grey8
.. role:: grey9
.. role:: grey10
.. role:: grey11
.. role:: grey12
.. role:: grey13
.. role:: grey14
.. role:: grey15
.. role:: grey16
.. role:: grey17
.. role:: grey18
.. role:: grey19
.. role:: grey20
.. role:: grey21
.. role:: grey22
.. role:: grey23
.. role:: grey24
.. role:: grey25
.. role:: grey26
.. role:: grey27
.. role:: grey28
.. role:: grey29
.. role:: grey30
.. role:: grey31
.. role:: grey32
.. role:: grey33
.. role:: grey34
.. role:: grey35
.. role:: grey36
.. role:: grey37
.. role:: grey38
.. role:: grey39
.. role:: grey40
.. role:: grey41
.. role:: grey42
.. role:: grey43
.. role:: grey44
.. role:: grey45
.. role:: grey46
.. role:: grey47
.. role:: grey48
.. role:: grey49
.. role:: grey50
.. role:: grey51
.. role:: grey52
.. role:: grey53
.. role:: grey54
.. role:: grey55
.. role:: grey56
.. role:: grey57
.. role:: grey58
.. role:: grey59
.. role:: grey60
.. role:: grey61
.. role:: grey62
.. role:: grey63
.. role:: grey64
.. role:: grey65
.. role:: grey66
.. role:: grey67
.. role:: grey68
.. role:: grey69
.. role:: grey70
.. role:: grey71
.. role:: grey72
.. role:: grey73
.. role:: grey74
.. role:: grey75
.. role:: grey76
.. role:: grey77
.. role:: grey78
.. role:: grey79
.. role:: grey80
.. role:: grey81
.. role:: grey82
.. role:: grey83
.. role:: grey84
.. role:: grey85
.. role:: grey86
.. role:: grey87
.. role:: grey88
.. role:: grey89
.. role:: grey90
.. role:: grey91
.. role:: grey92
.. role:: grey93
.. role:: grey94
.. role:: grey95
.. role:: grey96
.. role:: grey97
.. role:: grey98
.. role:: grey99
.. role:: grey100
.. role:: honeydew
.. role:: honeydew1
.. role:: honeydew2
.. role:: honeydew3
.. role:: honeydew4
.. role:: hotpink
.. role:: hotpink1
.. role:: hotpink2
.. role:: hotpink3
.. role:: hotpink4
.. role:: indianred
.. role:: indianred1
.. role:: indianred2
.. role:: indianred3
.. role:: indianred4
.. role:: indigo
.. role:: ivory
.. role:: ivory1
.. role:: ivory2
.. role:: ivory3
.. role:: ivory4
.. role:: khaki
.. role:: khaki1
.. role:: khaki2
.. role:: khaki3
.. role:: khaki4
.. role:: lavender
.. role:: lavenderblush
.. role:: lavenderblush1
.. role:: lavenderblush2
.. role:: lavenderblush3
.. role:: lavenderblush4
.. role:: lawngreen
.. role:: lemonchiffon
.. role:: lemonchiffon1
.. role:: lemonchiffon2
.. role:: lemonchiffon3
.. role:: lemonchiffon4
.. role:: lightblue
.. role:: lightblue1
.. role:: lightblue2
.. role:: lightblue3
.. role:: lightblue4
.. role:: lightcoral
.. role:: lightcyan
.. role:: lightcyan1
.. role:: lightcyan2
.. role:: lightcyan3
.. role:: lightcyan4
.. role:: lightgoldenrod
.. role:: lightgoldenrod1
.. role:: lightgoldenrod2
.. role:: lightgoldenrod3
.. role:: lightgoldenrod4
.. role:: lightgoldenrodyellow
.. role:: lightgray
.. role:: lightgreen
.. role:: lightgrey
.. role:: lightpink
.. role:: lightpink1
.. role:: lightpink2
.. role:: lightpink3
.. role:: lightpink4
.. role:: lightsalmon
.. role:: lightsalmon1
.. role:: lightsalmon2
.. role:: lightsalmon3
.. role:: lightsalmon4
.. role:: lightseagreen
.. role:: lightskyblue
.. role:: lightskyblue1
.. role:: lightskyblue2
.. role:: lightskyblue3
.. role:: lightskyblue4
.. role:: lightslateblue
.. role:: lightslategray
.. role:: lightslategrey
.. role:: lightsteelblue
.. role:: lightsteelblue1
.. role:: lightsteelblue2
.. role:: lightsteelblue3
.. role:: lightsteelblue4
.. role:: lightyellow
.. role:: lightyellow1
.. role:: lightyellow2
.. role:: lightyellow3
.. role:: lightyellow4
.. role:: limegreen
.. role:: lime
.. role:: linen
.. role:: magenta
.. role:: magenta1
.. role:: magenta2
.. role:: magenta3
.. role:: magenta4
.. role:: maroon
.. role:: maroon1
.. role:: maroon2
.. role:: maroon3
.. role:: maroon4
.. role:: mediumaquamarine
.. role:: mediumblue
.. role:: mediumorchid
.. role:: mediumorchid1
.. role:: mediumorchid2
.. role:: mediumorchid3
.. role:: mediumorchid4
.. role:: mediumpurple
.. role:: mediumpurple1
.. role:: mediumpurple2
.. role:: mediumpurple3
.. role:: mediumpurple4
.. role:: mediumseagreen
.. role:: mediumslateblue
.. role:: mediumspringgreen
.. role:: mediumturquoise
.. role:: mediumvioletred
.. role:: midnightblue
.. role:: mintcream
.. role:: mistyrose
.. role:: mistyrose1
.. role:: mistyrose2
.. role:: mistyrose3
.. role:: mistyrose4
.. role:: moccasin
.. role:: navajowhite
.. role:: navajowhite1
.. role:: navajowhite2
.. role:: navajowhite3
.. role:: navajowhite4
.. role:: navy
.. role:: navyblue
.. role:: oldlace
.. role:: olive
.. role:: olivedrab
.. role:: olivedrab1
.. role:: olivedrab2
.. role:: olivedrab3
.. role:: olivedrab4
.. role:: orange
.. role:: orange1
.. role:: orange2
.. role:: orange3
.. role:: orange4
.. role:: orangered
.. role:: orangered1
.. role:: orangered2
.. role:: orangered3
.. role:: orangered4
.. role:: orchid
.. role:: orchid1
.. role:: orchid2
.. role:: orchid3
.. role:: orchid4
.. role:: palegoldenrod
.. role:: palegreen
.. role:: palegreen1
.. role:: palegreen2
.. role:: palegreen3
.. role:: palegreen4
.. role:: paleturquoise
.. role:: paleturquoise1
.. role:: paleturquoise2
.. role:: paleturquoise3
.. role:: paleturquoise4
.. role:: palevioletred
.. role:: palevioletred1
.. role:: palevioletred2
.. role:: palevioletred3
.. role:: palevioletred4
.. role:: papayawhip
.. role:: peachpuff
.. role:: peachpuff1
.. role:: peachpuff2
.. role:: peachpuff3
.. role:: peachpuff4
.. role:: peru
.. role:: pink
.. role:: pink1
.. role:: pink2
.. role:: pink3
.. role:: pink4
.. role:: plum
.. role:: plum1
.. role:: plum2
.. role:: plum3
.. role:: plum4
.. role:: powderblue
.. role:: purple
.. role:: purple1
.. role:: purple2
.. role:: purple3
.. role:: purple4
.. role:: red
.. role:: red1
.. role:: red2
.. role:: red3
.. role:: red4
.. role:: rosybrown
.. role:: rosybrown1
.. role:: rosybrown2
.. role:: rosybrown3
.. role:: rosybrown4
.. role:: royalblue
.. role:: royalblue1
.. role:: royalblue2
.. role:: royalblue3
.. role:: royalblue4
.. role:: saddlebrown
.. role:: salmon
.. role:: salmon1
.. role:: salmon2
.. role:: salmon3
.. role:: salmon4
.. role:: sandybrown
.. role:: seagreen
.. role:: seagreen1
.. role:: seagreen2
.. role:: seagreen3
.. role:: seagreen4
.. role:: seashell
.. role:: seashell1
.. role:: seashell2
.. role:: seashell3
.. role:: seashell4
.. role:: sienna
.. role:: sienna1
.. role:: sienna2
.. role:: sienna3
.. role:: sienna4
.. role:: silver
.. role:: skyblue
.. role:: skyblue1
.. role:: skyblue2
.. role:: skyblue3
.. role:: skyblue4
.. role:: slateblue
.. role:: slateblue1
.. role:: slateblue2
.. role:: slateblue3
.. role:: slateblue4
.. role:: slategray
.. role:: slategray1
.. role:: slategray2
.. role:: slategray3
.. role:: slategray4
.. role:: slategrey
.. role:: snow
.. role:: snow1
.. role:: snow2
.. role:: snow3
.. role:: snow4
.. role:: springgreen
.. role:: springgreen1
.. role:: springgreen2
.. role:: springgreen3
.. role:: springgreen4
.. role:: steelblue
.. role:: steelblue1
.. role:: steelblue2
.. role:: steelblue3
.. role:: steelblue4
.. role:: tan
.. role:: tan1
.. role:: tan2
.. role:: tan3
.. role:: tan4
.. role:: teal
.. role:: thistle
.. role:: thistle1
.. role:: thistle2
.. role:: thistle3
.. role:: thistle4
.. role:: tomato
.. role:: tomato1
.. role:: tomato2
.. role:: tomato3
.. role:: tomato4
.. role:: turquoise
.. role:: turquoise1
.. role:: turquoise2
.. role:: turquoise3
.. role:: turquoise4
.. role:: violet
.. role:: violetred
.. role:: violetred1
.. role:: violetred2
.. role:: violetred3
.. role:: violetred4
.. role:: wheat
.. role:: wheat1
.. role:: wheat2
.. role:: wheat3
.. role:: wheat4
.. role:: white
.. role:: whitesmoke
.. role:: yellow
.. role:: yellow1
.. role:: yellow2
.. role:: yellow3
.. role:: yellow4
.. role:: yellowgreen

==========================  ======================================================================================================
Name                        Color
==========================  ======================================================================================================
``aliceblue``               :aliceblue:`████████`
``antiquewhite``            :antiquewhite:`████████`
``antiquewhite1``           :antiquewhite1:`████████`
``antiquewhite2``           :antiquewhite2:`████████`
``antiquewhite3``           :antiquewhite3:`████████`
``antiquewhite4``           :antiquewhite4:`████████`
``aqua``                    :aqua:`████████`
``aquamarine``              :aquamarine:`████████`
``aquamarine1``             :aquamarine1:`████████`
``aquamarine2``             :aquamarine2:`████████`
``aquamarine3``             :aquamarine3:`████████`
``aquamarine4``             :aquamarine4:`████████`
``azure``                   :azure:`████████`
``azure1``                  :azure1:`████████`
``azure2``                  :azure2:`████████`
``azure3``                  :azure3:`████████`
``azure4``                  :azure4:`████████`
``beige``                   :beige:`████████`
``bisque``                  :bisque:`████████`
``bisque1``                 :bisque1:`████████`
``bisque2``                 :bisque2:`████████`
``bisque3``                 :bisque3:`████████`
``bisque4``                 :bisque4:`████████`
``black``                   :black:`████████`
``blanchedalmond``          :blanchedalmond:`████████`
``blue``                    :blue:`████████`
``blue1``                   :blue1:`████████`
``blue2``                   :blue2:`████████`
``blue3``                   :blue3:`████████`
``blue4``                   :blue4:`████████`
``blueviolet``              :blueviolet:`████████`
``brown``                   :brown:`████████`
``brown1``                  :brown1:`████████`
``brown2``                  :brown2:`████████`
``brown3``                  :brown3:`████████`
``brown4``                  :brown4:`████████`
``burlywood``               :burlywood:`████████`
``burlywood1``              :burlywood1:`████████`
``burlywood2``              :burlywood2:`████████`
``burlywood3``              :burlywood3:`████████`
``burlywood4``              :burlywood4:`████████`
``cadetblue``               :cadetblue:`████████`
``cadetblue1``              :cadetblue1:`████████`
``cadetblue2``              :cadetblue2:`████████`
``cadetblue3``              :cadetblue3:`████████`
``cadetblue4``              :cadetblue4:`████████`
``chartreuse``              :chartreuse:`████████`
``chartreuse1``             :chartreuse1:`████████`
``chartreuse2``             :chartreuse2:`████████`
``chartreuse3``             :chartreuse3:`████████`
``chartreuse4``             :chartreuse4:`████████`
``chocolate``               :chocolate:`████████`
``chocolate1``              :chocolate1:`████████`
``chocolate2``              :chocolate2:`████████`
``chocolate3``              :chocolate3:`████████`
``chocolate4``              :chocolate4:`████████`
``coral``                   :coral:`████████`
``coral1``                  :coral1:`████████`
``coral2``                  :coral2:`████████`
``coral3``                  :coral3:`████████`
``coral4``                  :coral4:`████████`
``cornflowerblue``          :cornflowerblue:`████████`
``cornsilk``                :cornsilk:`████████`
``cornsilk1``               :cornsilk1:`████████`
``cornsilk2``               :cornsilk2:`████████`
``cornsilk3``               :cornsilk3:`████████`
``cornsilk4``               :cornsilk4:`████████`
``crimson``                 :crimson:`████████`
``cyan``                    :cyan:`████████`
``cyan1``                   :cyan1:`████████`
``cyan2``                   :cyan2:`████████`
``cyan3``                   :cyan3:`████████`
``cyan4``                   :cyan4:`████████`
``darkblue``                :darkblue:`████████`
``darkcyan``                :darkcyan:`████████`
``darkgoldenrod``           :darkgoldenrod:`████████`
``darkgoldenrod1``          :darkgoldenrod1:`████████`
``darkgoldenrod2``          :darkgoldenrod2:`████████`
``darkgoldenrod3``          :darkgoldenrod3:`████████`
``darkgoldenrod4``          :darkgoldenrod4:`████████`
``darkgray``                :darkgray:`████████`
``darkgreen``               :darkgreen:`████████`
``darkgrey``                :darkgrey:`████████`
``darkkhaki``               :darkkhaki:`████████`
``darkmagenta``             :darkmagenta:`████████`
``darkolivegreen``          :darkolivegreen:`████████`
``darkolivegreen1``         :darkolivegreen1:`████████`
``darkolivegreen2``         :darkolivegreen2:`████████`
``darkolivegreen3``         :darkolivegreen3:`████████`
``darkolivegreen4``         :darkolivegreen4:`████████`
``darkorange``              :darkorange:`████████`
``darkorange1``             :darkorange1:`████████`
``darkorange2``             :darkorange2:`████████`
``darkorange3``             :darkorange3:`████████`
``darkorange4``             :darkorange4:`████████`
``darkorchid``              :darkorchid:`████████`
``darkorchid1``             :darkorchid1:`████████`
``darkorchid2``             :darkorchid2:`████████`
``darkorchid3``             :darkorchid3:`████████`
``darkorchid4``             :darkorchid4:`████████`
``darkred``                 :darkred:`████████`
``darksalmon``              :darksalmon:`████████`
``darkseagreen``            :darkseagreen:`████████`
``darkseagreen1``           :darkseagreen1:`████████`
``darkseagreen2``           :darkseagreen2:`████████`
``darkseagreen3``           :darkseagreen3:`████████`
``darkseagreen4``           :darkseagreen4:`████████`
``darkslateblue``           :darkslateblue:`████████`
``darkslategray``           :darkslategray:`████████`
``darkslategray1``          :darkslategray1:`████████`
``darkslategray2``          :darkslategray2:`████████`
``darkslategray3``          :darkslategray3:`████████`
``darkslategray4``          :darkslategray4:`████████`
``darkslategrey``           :darkslategrey:`████████`
``darkturquoise``           :darkturquoise:`████████`
``darkviolet``              :darkviolet:`████████`
``deeppink``                :deeppink:`████████`
``deeppink1``               :deeppink1:`████████`
``deeppink2``               :deeppink2:`████████`
``deeppink3``               :deeppink3:`████████`
``deeppink4``               :deeppink4:`████████`
``deepskyblue``             :deepskyblue:`████████`
``deepskyblue1``            :deepskyblue1:`████████`
``deepskyblue2``            :deepskyblue2:`████████`
``deepskyblue3``            :deepskyblue3:`████████`
``deepskyblue4``            :deepskyblue4:`████████`
``dimgray``                 :dimgray:`████████`
``dimgrey``                 :dimgrey:`████████`
``dodgerblue``              :dodgerblue:`████████`
``dodgerblue1``             :dodgerblue1:`████████`
``dodgerblue2``             :dodgerblue2:`████████`
``dodgerblue3``             :dodgerblue3:`████████`
``dodgerblue4``             :dodgerblue4:`████████`
``firebrick``               :firebrick:`████████`
``firebrick1``              :firebrick1:`████████`
``firebrick2``              :firebrick2:`████████`
``firebrick3``              :firebrick3:`████████`
``firebrick4``              :firebrick4:`████████`
``floralwhite``             :floralwhite:`████████`
``forestgreen``             :forestgreen:`████████`
``fuchsia``                 :fuchsia:`████████`
``gainsboro``               :gainsboro:`████████`
``ghostwhite``              :ghostwhite:`████████`
``gold``                    :gold:`████████`
``gold1``                   :gold1:`████████`
``gold2``                   :gold2:`████████`
``gold3``                   :gold3:`████████`
``gold4``                   :gold4:`████████`
``goldenrod``               :goldenrod:`████████`
``goldenrod1``              :goldenrod1:`████████`
``goldenrod2``              :goldenrod2:`████████`
``goldenrod3``              :goldenrod3:`████████`
``goldenrod4``              :goldenrod4:`████████`
``gray``                    :gray:`████████`
``gray0``                   :gray0:`████████`
``gray1``                   :gray1:`████████`
``gray2``                   :gray2:`████████`
``gray3``                   :gray3:`████████`
``gray4``                   :gray4:`████████`
``gray5``                   :gray5:`████████`
``gray6``                   :gray6:`████████`
``gray7``                   :gray7:`████████`
``gray8``                   :gray8:`████████`
``gray9``                   :gray9:`████████`
``gray10``                  :gray10:`████████`
``gray11``                  :gray11:`████████`
``gray12``                  :gray12:`████████`
``gray13``                  :gray13:`████████`
``gray14``                  :gray14:`████████`
``gray15``                  :gray15:`████████`
``gray16``                  :gray16:`████████`
``gray17``                  :gray17:`████████`
``gray18``                  :gray18:`████████`
``gray19``                  :gray19:`████████`
``gray20``                  :gray20:`████████`
``gray21``                  :gray21:`████████`
``gray22``                  :gray22:`████████`
``gray23``                  :gray23:`████████`
``gray24``                  :gray24:`████████`
``gray25``                  :gray25:`████████`
``gray26``                  :gray26:`████████`
``gray27``                  :gray27:`████████`
``gray28``                  :gray28:`████████`
``gray29``                  :gray29:`████████`
``gray30``                  :gray30:`████████`
``gray31``                  :gray31:`████████`
``gray32``                  :gray32:`████████`
``gray33``                  :gray33:`████████`
``gray34``                  :gray34:`████████`
``gray35``                  :gray35:`████████`
``gray36``                  :gray36:`████████`
``gray37``                  :gray37:`████████`
``gray38``                  :gray38:`████████`
``gray39``                  :gray39:`████████`
``gray40``                  :gray40:`████████`
``gray41``                  :gray41:`████████`
``gray42``                  :gray42:`████████`
``gray43``                  :gray43:`████████`
``gray44``                  :gray44:`████████`
``gray45``                  :gray45:`████████`
``gray46``                  :gray46:`████████`
``gray47``                  :gray47:`████████`
``gray48``                  :gray48:`████████`
``gray49``                  :gray49:`████████`
``gray50``                  :gray50:`████████`
``gray51``                  :gray51:`████████`
``gray52``                  :gray52:`████████`
``gray53``                  :gray53:`████████`
``gray54``                  :gray54:`████████`
``gray55``                  :gray55:`████████`
``gray56``                  :gray56:`████████`
``gray57``                  :gray57:`████████`
``gray58``                  :gray58:`████████`
``gray59``                  :gray59:`████████`
``gray60``                  :gray60:`████████`
``gray61``                  :gray61:`████████`
``gray62``                  :gray62:`████████`
``gray63``                  :gray63:`████████`
``gray64``                  :gray64:`████████`
``gray65``                  :gray65:`████████`
``gray66``                  :gray66:`████████`
``gray67``                  :gray67:`████████`
``gray68``                  :gray68:`████████`
``gray69``                  :gray69:`████████`
``gray70``                  :gray70:`████████`
``gray71``                  :gray71:`████████`
``gray72``                  :gray72:`████████`
``gray73``                  :gray73:`████████`
``gray74``                  :gray74:`████████`
``gray75``                  :gray75:`████████`
``gray76``                  :gray76:`████████`
``gray77``                  :gray77:`████████`
``gray78``                  :gray78:`████████`
``gray79``                  :gray79:`████████`
``gray80``                  :gray80:`████████`
``gray81``                  :gray81:`████████`
``gray82``                  :gray82:`████████`
``gray83``                  :gray83:`████████`
``gray84``                  :gray84:`████████`
``gray85``                  :gray85:`████████`
``gray86``                  :gray86:`████████`
``gray87``                  :gray87:`████████`
``gray88``                  :gray88:`████████`
``gray89``                  :gray89:`████████`
``gray90``                  :gray90:`████████`
``gray91``                  :gray91:`████████`
``gray92``                  :gray92:`████████`
``gray93``                  :gray93:`████████`
``gray94``                  :gray94:`████████`
``gray95``                  :gray95:`████████`
``gray96``                  :gray96:`████████`
``gray97``                  :gray97:`████████`
``gray98``                  :gray98:`████████`
``gray99``                  :gray99:`████████`
``gray100``                 :gray100:`████████`
``green``                   :green:`████████`
``green1``                  :green1:`████████`
``green2``                  :green2:`████████`
``green3``                  :green3:`████████`
``green4``                  :green4:`████████`
``greenyellow``             :greenyellow:`████████`
``grey``                    :grey:`████████`
``grey0``                   :grey0:`████████`
``grey1``                   :grey1:`████████`
``grey2``                   :grey2:`████████`
``grey3``                   :grey3:`████████`
``grey4``                   :grey4:`████████`
``grey5``                   :grey5:`████████`
``grey6``                   :grey6:`████████`
``grey7``                   :grey7:`████████`
``grey8``                   :grey8:`████████`
``grey9``                   :grey9:`████████`
``grey10``                  :grey10:`████████`
``grey11``                  :grey11:`████████`
``grey12``                  :grey12:`████████`
``grey13``                  :grey13:`████████`
``grey14``                  :grey14:`████████`
``grey15``                  :grey15:`████████`
``grey16``                  :grey16:`████████`
``grey17``                  :grey17:`████████`
``grey18``                  :grey18:`████████`
``grey19``                  :grey19:`████████`
``grey20``                  :grey20:`████████`
``grey21``                  :grey21:`████████`
``grey22``                  :grey22:`████████`
``grey23``                  :grey23:`████████`
``grey24``                  :grey24:`████████`
``grey25``                  :grey25:`████████`
``grey26``                  :grey26:`████████`
``grey27``                  :grey27:`████████`
``grey28``                  :grey28:`████████`
``grey29``                  :grey29:`████████`
``grey30``                  :grey30:`████████`
``grey31``                  :grey31:`████████`
``grey32``                  :grey32:`████████`
``grey33``                  :grey33:`████████`
``grey34``                  :grey34:`████████`
``grey35``                  :grey35:`████████`
``grey36``                  :grey36:`████████`
``grey37``                  :grey37:`████████`
``grey38``                  :grey38:`████████`
``grey39``                  :grey39:`████████`
``grey40``                  :grey40:`████████`
``grey41``                  :grey41:`████████`
``grey42``                  :grey42:`████████`
``grey43``                  :grey43:`████████`
``grey44``                  :grey44:`████████`
``grey45``                  :grey45:`████████`
``grey46``                  :grey46:`████████`
``grey47``                  :grey47:`████████`
``grey48``                  :grey48:`████████`
``grey49``                  :grey49:`████████`
``grey50``                  :grey50:`████████`
``grey51``                  :grey51:`████████`
``grey52``                  :grey52:`████████`
``grey53``                  :grey53:`████████`
``grey54``                  :grey54:`████████`
``grey55``                  :grey55:`████████`
``grey56``                  :grey56:`████████`
``grey57``                  :grey57:`████████`
``grey58``                  :grey58:`████████`
``grey59``                  :grey59:`████████`
``grey60``                  :grey60:`████████`
``grey61``                  :grey61:`████████`
``grey62``                  :grey62:`████████`
``grey63``                  :grey63:`████████`
``grey64``                  :grey64:`████████`
``grey65``                  :grey65:`████████`
``grey66``                  :grey66:`████████`
``grey67``                  :grey67:`████████`
``grey68``                  :grey68:`████████`
``grey69``                  :grey69:`████████`
``grey70``                  :grey70:`████████`
``grey71``                  :grey71:`████████`
``grey72``                  :grey72:`████████`
``grey73``                  :grey73:`████████`
``grey74``                  :grey74:`████████`
``grey75``                  :grey75:`████████`
``grey76``                  :grey76:`████████`
``grey77``                  :grey77:`████████`
``grey78``                  :grey78:`████████`
``grey79``                  :grey79:`████████`
``grey80``                  :grey80:`████████`
``grey81``                  :grey81:`████████`
``grey82``                  :grey82:`████████`
``grey83``                  :grey83:`████████`
``grey84``                  :grey84:`████████`
``grey85``                  :grey85:`████████`
``grey86``                  :grey86:`████████`
``grey87``                  :grey87:`████████`
``grey88``                  :grey88:`████████`
``grey89``                  :grey89:`████████`
``grey90``                  :grey90:`████████`
``grey91``                  :grey91:`████████`
``grey92``                  :grey92:`████████`
``grey93``                  :grey93:`████████`
``grey94``                  :grey94:`████████`
``grey95``                  :grey95:`████████`
``grey96``                  :grey96:`████████`
``grey97``                  :grey97:`████████`
``grey98``                  :grey98:`████████`
``grey99``                  :grey99:`████████`
``grey100``                 :grey100:`████████`
``honeydew``                :honeydew:`████████`
``honeydew1``               :honeydew1:`████████`
``honeydew2``               :honeydew2:`████████`
``honeydew3``               :honeydew3:`████████`
``honeydew4``               :honeydew4:`████████`
``hotpink``                 :hotpink:`████████`
``hotpink1``                :hotpink1:`████████`
``hotpink2``                :hotpink2:`████████`
``hotpink3``                :hotpink3:`████████`
``hotpink4``                :hotpink4:`████████`
``indianred``               :indianred:`████████`
``indianred1``              :indianred1:`████████`
``indianred2``              :indianred2:`████████`
``indianred3``              :indianred3:`████████`
``indianred4``              :indianred4:`████████`
``indigo``                  :indigo:`████████`
``ivory``                   :ivory:`████████`
``ivory1``                  :ivory1:`████████`
``ivory2``                  :ivory2:`████████`
``ivory3``                  :ivory3:`████████`
``ivory4``                  :ivory4:`████████`
``khaki``                   :khaki:`████████`
``khaki1``                  :khaki1:`████████`
``khaki2``                  :khaki2:`████████`
``khaki3``                  :khaki3:`████████`
``khaki4``                  :khaki4:`████████`
``lavender``                :lavender:`████████`
``lavenderblush``           :lavenderblush:`████████`
``lavenderblush1``          :lavenderblush1:`████████`
``lavenderblush2``          :lavenderblush2:`████████`
``lavenderblush3``          :lavenderblush3:`████████`
``lavenderblush4``          :lavenderblush4:`████████`
``lawngreen``               :lawngreen:`████████`
``lemonchiffon``            :lemonchiffon:`████████`
``lemonchiffon1``           :lemonchiffon1:`████████`
``lemonchiffon2``           :lemonchiffon2:`████████`
``lemonchiffon3``           :lemonchiffon3:`████████`
``lemonchiffon4``           :lemonchiffon4:`████████`
``lightblue``               :lightblue:`████████`
``lightblue1``              :lightblue1:`████████`
``lightblue2``              :lightblue2:`████████`
``lightblue3``              :lightblue3:`████████`
``lightblue4``              :lightblue4:`████████`
``lightcoral``              :lightcoral:`████████`
``lightcyan``               :lightcyan:`████████`
``lightcyan1``              :lightcyan1:`████████`
``lightcyan2``              :lightcyan2:`████████`
``lightcyan3``              :lightcyan3:`████████`
``lightcyan4``              :lightcyan4:`████████`
``lightgoldenrod``          :lightgoldenrod:`████████`
``lightgoldenrod1``         :lightgoldenrod1:`████████`
``lightgoldenrod2``         :lightgoldenrod2:`████████`
``lightgoldenrod3``         :lightgoldenrod3:`████████`
``lightgoldenrod4``         :lightgoldenrod4:`████████`
``lightgoldenrodyellow``    :lightgoldenrodyellow:`████████`
``lightgray``               :lightgray:`████████`
``lightgreen``              :lightgreen:`████████`
``lightgrey``               :lightgrey:`████████`
``lightpink``               :lightpink:`████████`
``lightpink1``              :lightpink1:`████████`
``lightpink2``              :lightpink2:`████████`
``lightpink3``              :lightpink3:`████████`
``lightpink4``              :lightpink4:`████████`
``lightsalmon``             :lightsalmon:`████████`
``lightsalmon1``            :lightsalmon1:`████████`
``lightsalmon2``            :lightsalmon2:`████████`
``lightsalmon3``            :lightsalmon3:`████████`
``lightsalmon4``            :lightsalmon4:`████████`
``lightseagreen``           :lightseagreen:`████████`
``lightskyblue``            :lightskyblue:`████████`
``lightskyblue1``           :lightskyblue1:`████████`
``lightskyblue2``           :lightskyblue2:`████████`
``lightskyblue3``           :lightskyblue3:`████████`
``lightskyblue4``           :lightskyblue4:`████████`
``lightslateblue``          :lightslateblue:`████████`
``lightslategray``          :lightslategray:`████████`
``lightslategrey``          :lightslategrey:`████████`
``lightsteelblue``          :lightsteelblue:`████████`
``lightsteelblue1``         :lightsteelblue1:`████████`
``lightsteelblue2``         :lightsteelblue2:`████████`
``lightsteelblue3``         :lightsteelblue3:`████████`
``lightsteelblue4``         :lightsteelblue4:`████████`
``lightyellow``             :lightyellow:`████████`
``lightyellow1``            :lightyellow1:`████████`
``lightyellow2``            :lightyellow2:`████████`
``lightyellow3``            :lightyellow3:`████████`
``lightyellow4``            :lightyellow4:`████████`
``lime``                    :lime:`████████`
``limegreen``               :limegreen:`████████`
``linen``                   :linen:`████████`
``magenta``                 :magenta:`████████`
``magenta1``                :magenta1:`████████`
``magenta2``                :magenta2:`████████`
``magenta3``                :magenta3:`████████`
``magenta4``                :magenta4:`████████`
``maroon``                  :maroon:`████████`
``maroon1``                 :maroon1:`████████`
``maroon2``                 :maroon2:`████████`
``maroon3``                 :maroon3:`████████`
``maroon4``                 :maroon4:`████████`
``mediumaquamarine``        :mediumaquamarine:`████████`
``mediumblue``              :mediumblue:`████████`
``mediumorchid``            :mediumorchid:`████████`
``mediumorchid1``           :mediumorchid1:`████████`
``mediumorchid2``           :mediumorchid2:`████████`
``mediumorchid3``           :mediumorchid3:`████████`
``mediumorchid4``           :mediumorchid4:`████████`
``mediumpurple``            :mediumpurple:`████████`
``mediumpurple1``           :mediumpurple1:`████████`
``mediumpurple2``           :mediumpurple2:`████████`
``mediumpurple3``           :mediumpurple3:`████████`
``mediumpurple4``           :mediumpurple4:`████████`
``mediumseagreen``          :mediumseagreen:`████████`
``mediumslateblue``         :mediumslateblue:`████████`
``mediumspringgreen``       :mediumspringgreen:`████████`
``mediumturquoise``         :mediumturquoise:`████████`
``mediumvioletred``         :mediumvioletred:`████████`
``midnightblue``            :midnightblue:`████████`
``mintcream``               :mintcream:`████████`
``mistyrose``               :mistyrose:`████████`
``mistyrose1``              :mistyrose1:`████████`
``mistyrose2``              :mistyrose2:`████████`
``mistyrose3``              :mistyrose3:`████████`
``mistyrose4``              :mistyrose4:`████████`
``moccasin``                :moccasin:`████████`
``navajowhite``             :navajowhite:`████████`
``navajowhite1``            :navajowhite1:`████████`
``navajowhite2``            :navajowhite2:`████████`
``navajowhite3``            :navajowhite3:`████████`
``navajowhite4``            :navajowhite4:`████████`
``navy``                    :navy:`████████`
``navyblue``                :navyblue:`████████`
``oldlace``                 :oldlace:`████████`
``olive``                   :olive:`████████`
``olivedrab``               :olivedrab:`████████`
``olivedrab1``              :olivedrab1:`████████`
``olivedrab2``              :olivedrab2:`████████`
``olivedrab3``              :olivedrab3:`████████`
``olivedrab4``              :olivedrab4:`████████`
``orange``                  :orange:`████████`
``orange1``                 :orange1:`████████`
``orange2``                 :orange2:`████████`
``orange3``                 :orange3:`████████`
``orange4``                 :orange4:`████████`
``orangered``               :orangered:`████████`
``orangered1``              :orangered1:`████████`
``orangered2``              :orangered2:`████████`
``orangered3``              :orangered3:`████████`
``orangered4``              :orangered4:`████████`
``orchid``                  :orchid:`████████`
``orchid1``                 :orchid1:`████████`
``orchid2``                 :orchid2:`████████`
``orchid3``                 :orchid3:`████████`
``orchid4``                 :orchid4:`████████`
``palegoldenrod``           :palegoldenrod:`████████`
``palegreen``               :palegreen:`████████`
``palegreen1``              :palegreen1:`████████`
``palegreen2``              :palegreen2:`████████`
``palegreen3``              :palegreen3:`████████`
``palegreen4``              :palegreen4:`████████`
``paleturquoise``           :paleturquoise:`████████`
``paleturquoise1``          :paleturquoise1:`████████`
``paleturquoise2``          :paleturquoise2:`████████`
``paleturquoise3``          :paleturquoise3:`████████`
``paleturquoise4``          :paleturquoise4:`████████`
``palevioletred``           :palevioletred:`████████`
``palevioletred1``          :palevioletred1:`████████`
``palevioletred2``          :palevioletred2:`████████`
``palevioletred3``          :palevioletred3:`████████`
``palevioletred4``          :palevioletred4:`████████`
``papayawhip``              :papayawhip:`████████`
``peachpuff``               :peachpuff:`████████`
``peachpuff1``              :peachpuff1:`████████`
``peachpuff2``              :peachpuff2:`████████`
``peachpuff3``              :peachpuff3:`████████`
``peachpuff4``              :peachpuff4:`████████`
``peru``                    :peru:`████████`
``pink``                    :pink:`████████`
``pink1``                   :pink1:`████████`
``pink2``                   :pink2:`████████`
``pink3``                   :pink3:`████████`
``pink4``                   :pink4:`████████`
``plum``                    :plum:`████████`
``plum1``                   :plum1:`████████`
``plum2``                   :plum2:`████████`
``plum3``                   :plum3:`████████`
``plum4``                   :plum4:`████████`
``powderblue``              :powderblue:`████████`
``purple``                  :purple:`████████`
``purple1``                 :purple1:`████████`
``purple2``                 :purple2:`████████`
``purple3``                 :purple3:`████████`
``purple4``                 :purple4:`████████`
``red``                     :red:`████████`
``red1``                    :red1:`████████`
``red2``                    :red2:`████████`
``red3``                    :red3:`████████`
``red4``                    :red4:`████████`
``rosybrown``               :rosybrown:`████████`
``rosybrown1``              :rosybrown1:`████████`
``rosybrown2``              :rosybrown2:`████████`
``rosybrown3``              :rosybrown3:`████████`
``rosybrown4``              :rosybrown4:`████████`
``royalblue``               :royalblue:`████████`
``royalblue1``              :royalblue1:`████████`
``royalblue2``              :royalblue2:`████████`
``royalblue3``              :royalblue3:`████████`
``royalblue4``              :royalblue4:`████████`
``saddlebrown``             :saddlebrown:`████████`
``salmon``                  :salmon:`████████`
``salmon1``                 :salmon1:`████████`
``salmon2``                 :salmon2:`████████`
``salmon3``                 :salmon3:`████████`
``salmon4``                 :salmon4:`████████`
``sandybrown``              :sandybrown:`████████`
``seagreen``                :seagreen:`████████`
``seagreen1``               :seagreen1:`████████`
``seagreen2``               :seagreen2:`████████`
``seagreen3``               :seagreen3:`████████`
``seagreen4``               :seagreen4:`████████`
``seashell``                :seashell:`████████`
``seashell1``               :seashell1:`████████`
``seashell2``               :seashell2:`████████`
``seashell3``               :seashell3:`████████`
``seashell4``               :seashell4:`████████`
``sienna``                  :sienna:`████████`
``sienna1``                 :sienna1:`████████`
``sienna2``                 :sienna2:`████████`
``sienna3``                 :sienna3:`████████`
``sienna4``                 :sienna4:`████████`
``silver``                  :silver:`████████`
``skyblue``                 :skyblue:`████████`
``skyblue1``                :skyblue1:`████████`
``skyblue2``                :skyblue2:`████████`
``skyblue3``                :skyblue3:`████████`
``skyblue4``                :skyblue4:`████████`
``slateblue``               :slateblue:`████████`
``slateblue1``              :slateblue1:`████████`
``slateblue2``              :slateblue2:`████████`
``slateblue3``              :slateblue3:`████████`
``slateblue4``              :slateblue4:`████████`
``slategray``               :slategray:`████████`
``slategray1``              :slategray1:`████████`
``slategray2``              :slategray2:`████████`
``slategray3``              :slategray3:`████████`
``slategray4``              :slategray4:`████████`
``slategrey``               :slategrey:`████████`
``snow``                    :snow:`████████`
``snow1``                   :snow1:`████████`
``snow2``                   :snow2:`████████`
``snow3``                   :snow3:`████████`
``snow4``                   :snow4:`████████`
``springgreen``             :springgreen:`████████`
``springgreen1``            :springgreen1:`████████`
``springgreen2``            :springgreen2:`████████`
``springgreen3``            :springgreen3:`████████`
``springgreen4``            :springgreen4:`████████`
``steelblue``               :steelblue:`████████`
``steelblue1``              :steelblue1:`████████`
``steelblue2``              :steelblue2:`████████`
``steelblue3``              :steelblue3:`████████`
``steelblue4``              :steelblue4:`████████`
``tan``                     :tan:`████████`
``tan1``                    :tan1:`████████`
``tan2``                    :tan2:`████████`
``tan3``                    :tan3:`████████`
``tan4``                    :tan4:`████████`
``teal``                    :teal:`████████`
``thistle``                 :thistle:`████████`
``thistle1``                :thistle1:`████████`
``thistle2``                :thistle2:`████████`
``thistle3``                :thistle3:`████████`
``thistle4``                :thistle4:`████████`
``tomato``                  :tomato:`████████`
``tomato1``                 :tomato1:`████████`
``tomato2``                 :tomato2:`████████`
``tomato3``                 :tomato3:`████████`
``tomato4``                 :tomato4:`████████`
``turquoise``               :turquoise:`████████`
``turquoise1``              :turquoise1:`████████`
``turquoise2``              :turquoise2:`████████`
``turquoise3``              :turquoise3:`████████`
``turquoise4``              :turquoise4:`████████`
``violet``                  :violet:`████████`
``violetred``               :violetred:`████████`
``violetred1``              :violetred1:`████████`
``violetred2``              :violetred2:`████████`
``violetred3``              :violetred3:`████████`
``violetred4``              :violetred4:`████████`
``wheat``                   :wheat:`████████`
``wheat1``                  :wheat1:`████████`
``wheat2``                  :wheat2:`████████`
``wheat3``                  :wheat3:`████████`
``wheat4``                  :wheat4:`████████`
``white``                   :white:`████████`
``whitesmoke``              :whitesmoke:`████████`
``yellow``                  :yellow:`████████`
``yellow1``                 :yellow1:`████████`
``yellow2``                 :yellow2:`████████`
``yellow3``                 :yellow3:`████████`
``yellow4``                 :yellow4:`████████`
``yellowgreen``             :yellowgreen:`████████`
==========================  ======================================================================================================


--- Contenu du fichier : pixelcopy.rst.txt ---
.. include:: common.txt

:mod:`pygame.pixelcopy`
=======================

.. module:: pygame.pixelcopy
   :synopsis: pygame module for general pixel array copying

| :sl:`pygame module for general pixel array copying`

The ``pygame.pixelcopy`` module contains functions for copying between
surfaces and objects exporting an array structure interface. It is a backend
for :mod:`pygame.surfarray`, adding NumPy support. But pixelcopy is more
general, and intended for direct use.

The array struct interface exposes an array's data in a standard way.
It was introduced in NumPy. In Python 2.7 and above it is replaced by the
new buffer protocol, though the buffer protocol is still a work in progress.
The array struct interface, on the other hand, is stable and works with earlier
Python versions. So for now the array struct interface is the predominate way
pygame handles array introspection.

For 2d arrays of integer pixel values, the values are mapped to the
pixel format of the related surface. To get the actual color of a pixel
value use :meth:`pygame.Surface.unmap_rgb`. 2d arrays can only be used
directly between surfaces having the same pixel layout.

New in pygame 1.9.2.

.. function:: surface_to_array

   | :sl:`copy surface pixels to an array object`
   | :sg:`surface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None`

   The surface_to_array function copies pixels from a Surface object
   to a 2D or 3D array. Depending on argument ``kind`` and the target array
   dimension, a copy may be raw pixel value, RGB, a color component slice,
   or colorkey alpha transparency value. Recognized ``kind`` values are the
   single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case
   insensitive, so 'p' is equivalent to 'P'. The first two dimensions
   of the target must be the surface size (w, h).

   The default 'P' kind code does a direct raw integer pixel (mapped) value
   copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array
   having shape (w, h, 3). For an 8 bit colormap surface this means the
   table index is copied to a 2D array, not the table value itself. A 2D
   array's item size must be at least as large as the surface's pixel
   byte size. The item size of a 3D array must be at least one byte.

   For the 'R', 'G', 'B', and 'A' copy kinds a single color component
   of the unmapped surface pixels are copied to the target 2D array.
   For kind 'A' and surfaces with source alpha (the surface was created with
   the SRCALPHA flag), has a colorkey
   (set with :meth:`Surface.set_colorkey() <pygame.Surface.set_colorkey>`),
   or has a blanket alpha
   (set with :meth:`Surface.set_alpha() <pygame.Surface.set_alpha>`)
   then the alpha values are those expected for a SDL surface.
   If a surface has no explicit alpha value, then the target array
   is filled with the value of the optional ``opaque`` surface_to_array
   argument (default 255: not transparent).

   Copy kind 'C' is a special case for alpha copy of a source surface
   with colorkey. Unlike the 'A' color component copy, the ``clear``
   argument value is used for colorkey matches, ``opaque`` otherwise.
   By default, a match has alpha 0 (totally transparent), while everything
   else is alpha 255 (totally opaque). It is a more general implementation
   of :meth:`pygame.surfarray.array_colorkey`.

   Specific to surface_to_array, a ValueError is raised for target arrays
   with incorrect shape or item size. A TypeError is raised for an incorrect
   kind code. Surface specific problems, such as locking, raise a pygame.error.

   .. ## pygame.pixelcopy.surface_to_array ##

.. function:: array_to_surface

   | :sl:`copy an array object to a surface`
   | :sg:`array_to_surface(<surface>, <array>) -> None`

   See :func:`pygame.surfarray.blit_array`.

   .. ## pygame.pixelcopy.array_to_surface ##

.. function:: map_array

   | :sl:`copy an array to another array, using surface format`
   | :sg:`map_array(<array>, <array>, <surface>) -> None`

   Map an array of color element values - (w, h, ..., 3) - to an array of
   pixels - (w, h) according to the format of <surface>.

   .. ## pygame.pixelcopy.map_array ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`pygame.pixelcopy.make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format of the array.
   The array can be 2D or 3D with any sized integer values.

   .. ## pygame.pixelcopy.make_surface ##

.. ## pygame.pixelcopy ##


--- Contenu du fichier : midi.rst.txt ---
.. include:: common.txt

:mod:`pygame.midi`
==================

.. module:: pygame.midi
   :synopsis: pygame module for interacting with midi input and output.

| :sl:`pygame module for interacting with midi input and output.`

.. versionadded:: 1.9.0

The midi module can send output to midi devices and get input from midi
devices. It can also list midi devices on the system.

The midi module supports real and virtual midi devices.

It uses the portmidi library. Is portable to which ever platforms portmidi
supports (currently Windows, Mac OS X, and Linux).

This uses pyportmidi for now, but may use its own bindings at some point in the
future. The pyportmidi bindings are included with pygame.

|

.. versionadded:: 2.0.0

These are pygame events (:mod:`pygame.event`) reserved for midi use. The
``MIDIIN`` event is used by :func:`pygame.midi.midis2events` when converting
midi events to pygame events.

::

   MIDIIN
   MIDIOUT

|

.. function:: init

   | :sl:`initialize the midi module`
   | :sg:`init() -> None`

   Initializes the :mod:`pygame.midi` module. Must be called before using the
   :mod:`pygame.midi` module.

   It is safe to call this more than once.

   .. ## pygame.midi.init ##

.. function:: quit

   | :sl:`uninitialize the midi module`
   | :sg:`quit() -> None`

   Uninitializes the :mod:`pygame.midi` module. If :func:`pygame.midi.init` was
   called to initialize the :mod:`pygame.midi` module, then this function will
   be called automatically when your program exits.

   It is safe to call this function more than once.

   .. ## pygame.midi.quit ##

.. function:: get_init

   | :sl:`returns True if the midi module is currently initialized`
   | :sg:`get_init() -> bool`

   Gets the initialization state of the :mod:`pygame.midi` module.

   :returns: ``True`` if the :mod:`pygame.midi` module is currently initialized.
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.midi.get_init ##

.. class:: Input

   | :sl:`Input is used to get midi input from midi devices.`
   | :sg:`Input(device_id) -> None`
   | :sg:`Input(device_id, buffer_size) -> None`

   :param int device_id: midi device id
   :param int buffer_size: (optional) the number of input events to be buffered

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Input.close ##

   .. method:: poll

      | :sl:`returns True if there's data, or False if not.`
      | :sg:`poll() -> bool`

      Used to indicate if any data exists.

      :returns: ``True`` if there is data, ``False`` otherwise
      :rtype: bool

      :raises MidiException: on error

      .. ## Input.poll ##

   .. method:: read

      | :sl:`reads num_events midi events from the buffer.`
      | :sg:`read(num_events) -> midi_event_list`

      Reads from the input buffer and gives back midi events.

      :param int num_events: number of input events to read

      :returns: the format for midi_event_list is
         ``[[[status, data1, data2, data3], timestamp], ...]``
      :rtype: list

      .. ## Input.read ##

   .. ## pygame.midi.Input ##

.. class:: Output

   | :sl:`Output is used to send midi to an output device`
   | :sg:`Output(device_id) -> None`
   | :sg:`Output(device_id, latency=0) -> None`
   | :sg:`Output(device_id, buffer_size=256) -> None`
   | :sg:`Output(device_id, latency, buffer_size) -> None`

   The ``buffer_size`` specifies the number of output events to be buffered
   waiting for output. In some cases (see below) PortMidi does not buffer
   output at all and merely passes data to a lower-level API, in which case
   buffersize is ignored.

   ``latency`` is the delay in milliseconds applied to timestamps to determine
   when the output should actually occur. If ``latency`` is <<0, 0 is assumed.

   If ``latency`` is zero, timestamps are ignored and all output is delivered
   immediately. If ``latency`` is greater than zero, output is delayed until the
   message timestamp plus the ``latency``. In some cases, PortMidi can obtain
   better timing than your application by passing timestamps along to the
   device driver or hardware. Latency may also help you to synchronize midi
   data to audio data by matching midi latency to the audio buffer latency.

   .. note::
      Time is measured relative to the time source indicated by time_proc.
      Timestamps are absolute, not relative delays or offsets.

   .. method:: abort

      | :sl:`terminates outgoing messages immediately`
      | :sg:`abort() -> None`

      The caller should immediately close the output port; this call may result
      in transmission of a partial midi message. There is no abort for Midi
      input because the user can simply ignore messages in the buffer and close
      an input device at any time.

      .. ## Output.abort ##

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Output.close ##

   .. method:: note_off

      | :sl:`turns a midi note off (note must be on)`
      | :sg:`note_off(note, velocity=None, channel=0) -> None`

      Turn a note off in the output stream. The note must already be on for
      this to work correctly.

      .. ## Output.note_off ##

   .. method:: note_on

      | :sl:`turns a midi note on (note must be off)`
      | :sg:`note_on(note, velocity=None, channel=0) -> None`

      Turn a note on in the output stream. The note must already be off for
      this to work correctly.

      .. ## Output.note_on ##

   .. method:: set_instrument

      | :sl:`select an instrument, with a value between 0 and 127`
      | :sg:`set_instrument(instrument_id, channel=0) -> None`

      Select an instrument.

      .. ## Output.set_instrument ##

   .. method:: pitch_bend

      | :sl:`modify the pitch of a channel.`
      | :sg:`set_instrument(value=0, channel=0) -> None`

      Adjust the pitch of a channel. The value is a signed integer
      from -8192 to +8191. For example, 0 means "no change", +4096 is
      typically a semitone higher, and -8192 is 1 whole tone lower (though
      the musical range corresponding to the pitch bend range can also be
      changed in some synthesizers).

      If no value is given, the pitch bend is returned to "no change".

      .. versionadded:: 1.9.4

   .. method:: write

      | :sl:`writes a list of midi data to the Output`
      | :sg:`write(data) -> None`

      Writes series of MIDI information in the form of a list.

      :param list data: data to write, the expected format is
         ``[[[status, data1=0, data2=0, ...], timestamp], ...]``
         with the ``data#`` fields being optional

      :raises IndexError: if more than 1024 elements in the data list

      Example:
      ::

         # Program change at time 20000 and 500ms later send note 65 with
         # velocity 100.
         write([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])

      .. note::
         - Timestamps will be ignored if latency = 0
         - To get a note to play immediately, send MIDI info with timestamp
           read from function Time
         - Optional data fields: ``write([[[0xc0, 0, 0], 20000]])`` is
           equivalent to ``write([[[0xc0], 20000]])``

      .. ## Output.write ##

   .. method:: write_short

      | :sl:`writes up to 3 bytes of midi data to the Output`
      | :sg:`write_short(status) -> None`
      | :sg:`write_short(status, data1=0, data2=0) -> None`

      Output MIDI information of 3 bytes or less. The ``data`` fields are
      optional and assumed to be 0 if omitted.

      Examples of status byte values:
      ::

         0xc0  # program change
         0x90  # note on
         # etc.

      Example:
      ::

         # note 65 on with velocity 100
         write_short(0x90, 65, 100)

      .. ## Output.write_short ##

   .. method:: write_sys_ex

      | :sl:`writes a timestamped system-exclusive midi message.`
      | :sg:`write_sys_ex(when, msg) -> None`

      Writes a timestamped system-exclusive midi message.

      :param msg: midi message
      :type msg: list[int] or str
      :param when: timestamp in milliseconds

      Example:
      ::

         midi_output.write_sys_ex(0, '\xF0\x7D\x10\x11\x12\x13\xF7')

         # is equivalent to

         midi_output.write_sys_ex(pygame.midi.time(),
                                  [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])

      .. ## Output.write_sys_ex ##

   .. ## pygame.midi.Output ##

.. function:: get_count

   | :sl:`gets the number of devices.`
   | :sg:`get_count() -> num_devices`

   Device ids range from 0 to ``get_count() - 1``

   .. ## pygame.midi.get_count ##

.. function:: get_default_input_id

   | :sl:`gets default input device number`
   | :sg:`get_default_input_id() -> default_id`

   The following describes the usage details for this function and the
   :func:`get_default_output_id` function.

   Return the default device ID or ``-1`` if there are no devices. The result
   can be passed to the :class:`Input`/:class:`Output` class.

   On a PC the user can specify a default device by setting an environment
   variable. To use device #1, for example:
   ::

      set PM_RECOMMENDED_INPUT_DEVICE=1
      or
      set PM_RECOMMENDED_OUTPUT_DEVICE=1

   The user should first determine the available device ID by using the
   supplied application "testin" or "testout".

   In general, the registry is a better place for this kind of info. With
   USB devices that can come and go, using integers is not very reliable
   for device identification. Under Windows, if ``PM_RECOMMENDED_INPUT_DEVICE``
   (or ``PM_RECOMMENDED_OUTPUT_DEVICE``) is NOT found in the environment,
   then the default device is obtained by looking for a string in the registry
   under:
   ::

      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
      or
      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device


   The number of the first device with a substring that matches the
   string exactly is returned. For example, if the string in the registry is
   "USB" and device 1 is named "In USB MidiSport 1x1", then that will be
   the default input because it contains the string "USB".

   In addition to the name, :func:`get_device_info()` returns "interf", which is
   the interface name. The "interface" is the underlying software system or
   API used by PortMidi to access devices. Supported interfaces:
   ::

      MMSystem   # the only Win32 interface currently supported
      ALSA       # the only Linux interface currently supported
      CoreMIDI   # the only Mac OS X interface currently supported
      # DirectX - not implemented
      # OSS     - not implemented

   To specify both the interface and the device name in the registry, separate
   the two with a comma and a space. The string before the comma must be a
   substring of the "interf" string and the string after the space must be a
   substring of the "name" name string in order to match the device. e.g.:
   ::

      MMSystem, In USB MidiSport 1x1

   .. note::
      In the current release, the default is simply the first device (the
      input or output device with the lowest PmDeviceID).

   .. ## pygame.midi.get_default_input_id ##

.. function:: get_default_output_id

   | :sl:`gets default output device number`
   | :sg:`get_default_output_id() -> default_id`

   See :func:`get_default_input_id` for usage details.

   .. ## pygame.midi.get_default_output_id ##

.. function:: get_device_info

   | :sl:`returns information about a midi device`
   | :sg:`get_device_info(an_id) -> (interf, name, input, output, opened)`
   | :sg:`get_device_info(an_id) -> None`

   Gets the device info for a given id.

   :param int an_id: id of the midi device being queried

   :returns: if the id is out of range ``None`` is returned, otherwise
      a tuple of (interf, name, input, output, opened) is returned.

         - interf: string describing the device interface (e.g. 'ALSA')
         - name: string name of the device (e.g. 'Midi Through Port-0')
         - input: 1 if the device is an input device, otherwise 0
         - output: 1 if the device is an output device, otherwise 0
         - opened: 1 if the device is opened, otherwise 0
   :rtype: tuple or None

   .. ## pygame.midi.get_device_info ##

.. function:: midis2events

   | :sl:`converts midi events to pygame events`
   | :sg:`midis2events(midi_events, device_id) -> [Event, ...]`

   Takes a sequence of midi events and returns list of pygame events.

   The ``midi_events`` data is expected to be a sequence of
   ``((status, data1, data2, data3), timestamp)`` midi events (all values
   required).

   :returns: a list of pygame events of event type ``MIDIIN``
   :rtype: list

   .. ## pygame.midi.midis2events ##

.. function:: time

   | :sl:`returns the current time in ms of the PortMidi timer`
   | :sg:`time() -> time`

   The time is reset to 0 when the :mod:`pygame.midi` module is initialized.

   .. ## pygame.midi.time ##


.. function:: frequency_to_midi

   | :sl:`Converts a frequency into a MIDI note. Rounds to the closest midi note.`
   | :sg:`frequency_to_midi(midi_note) -> midi_note`

   example:
   ::

       frequency_to_midi(27.5) == 21

   .. versionadded:: 1.9.5

   .. ## pygame.midi.frequency_to_midi ##


.. function:: midi_to_frequency

   | :sl:`Converts a midi note to a frequency.`
   | :sg:`midi_to_frequency(midi_note) -> frequency`

   example:
   ::

       midi_to_frequency(21) == 27.5

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_frequency ##


.. function:: midi_to_ansi_note

   | :sl:`Returns the Ansi Note name for a midi number.`
   | :sg:`midi_to_ansi_note(midi_note) -> ansi_note`

   example:
   ::

       midi_to_ansi_note(21) == 'A0'

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_ansi_note ##

.. exception:: MidiException

   | :sl:`exception that pygame.midi functions and classes can raise`
   | :sg:`MidiException(errno) -> None`

   .. ## pygame.midi.MidiException ##


.. ## pygame.midi ##


--- Contenu du fichier : overlay.rst.txt ---
.. include:: common.txt

:mod:`pygame.Overlay`
=====================

.. currentmodule:: pygame

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.

.. class:: Overlay

   | :sl:`pygame object for video overlay graphics`
   | :sg:`Overlay(format, (width, height)) -> Overlay`

   The Overlay objects provide support for accessing hardware video overlays.
   Video overlays do not use standard ``RGB`` pixel formats, and can use
   multiple resolutions of data to create a single image.

   The Overlay objects represent lower level access to the display hardware. To
   use the object you must understand the technical details of video overlays.

   The Overlay format determines the type of pixel data used. Not all hardware
   will support all types of overlay formats. Here is a list of available
   format types:

   ::

     YV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY

   The width and height arguments control the size for the overlay image data.
   The overlay image can be displayed at any size, not just the resolution of
   the overlay.

   The overlay objects are always visible, and always show above the regular
   display contents.

   .. method:: display

      | :sl:`set the overlay pixel data`
      | :sg:`display((y, u, v)) -> None`
      | :sg:`display() -> None`

      Display the YUV data in SDL's overlay planes. The y, u, and v arguments
      are strings of binary data. The data must be in the correct format used
      to create the Overlay.

      If no argument is passed in, the Overlay will simply be redrawn with the
      current data. This can be useful when the Overlay is not really hardware
      accelerated.

      The strings are not validated, and improperly sized strings could crash
      the program.

      .. ## Overlay.display ##

   .. method:: set_location

      | :sl:`control where the overlay is displayed`
      | :sg:`set_location(rect) -> None`

      Set the location for the overlay. The overlay will always be shown
      relative to the main display Surface. This does not actually redraw the
      overlay, it will be updated on the next call to ``Overlay.display()``.

      .. ## Overlay.set_location ##

   .. method:: get_hardware

      | :sl:`test if the Overlay is hardware accelerated`
      | :sg:`get_hardware(rect) -> int`

      Returns a True value when the Overlay is hardware accelerated. If the
      platform does not support acceleration, software rendering is used.

      .. ## Overlay.get_hardware ##

   .. ## pygame.Overlay ##


--- Contenu du fichier : gfxdraw.rst.txt ---
.. include:: common.txt

:mod:`pygame.gfxdraw`
=====================

.. module:: pygame.gfxdraw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The pygame package does not import gfxdraw automatically when loaded, so it
must imported explicitly to be used.

::

    import pygame
    import pygame.gfxdraw

For all functions the arguments are strictly positional and integers are
accepted for coordinates and radii. The ``color`` argument can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)

The functions :meth:`rectangle` and :meth:`box` will accept any ``(x, y, w, h)``
sequence for their ``rect`` argument, though :mod:`pygame.Rect` instances are
preferred.

To draw a filled antialiased shape, first use the antialiased (aa*) version
of the function, and then use the filled (filled_*) version.
For example:

::

   col = (255, 0, 0)
   surf.fill((255, 255, 255))
   pygame.gfxdraw.aacircle(surf, x, y, 30, col)
   pygame.gfxdraw.filled_circle(surf, x, y, 30, col)


.. note::
   For threading, each of the functions releases the GIL during the C part of
   the call.

.. note::
   See the :mod:`pygame.draw` module for alternative draw methods.
   The ``pygame.gfxdraw`` module differs from the :mod:`pygame.draw` module in
   the API it uses and the different draw functions available.
   ``pygame.gfxdraw`` wraps the primitives from the library called SDL_gfx,
   rather than using modified versions.

.. versionadded:: 1.9.0


.. function:: pixel

   | :sl:`draw a pixel`
   | :sg:`pixel(surface, x, y, color) -> None`

   Draws a single pixel, at position (x ,y), on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the pixel
   :param int y: y coordinate of the pixel
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pixel ##

.. function:: hline

   | :sl:`draw a horizontal line`
   | :sg:`hline(surface, x1, x2, y, color) -> None`

   Draws a straight horizontal line (``(x1, y)`` to ``(x2, y)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y: y coordinate of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.hline ##

.. function:: vline

   | :sl:`draw a vertical line`
   | :sg:`vline(surface, x, y1, y2, color) -> None`

   Draws a straight vertical line (``(x, y1)`` to ``(x, y2)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the line
   :param int y1: y coordinate of one end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.vline ##

.. function:: line

   | :sl:`draw a line`
   | :sg:`line(surface, x1, y1, x2, y2, color) -> None`

   Draws a straight line (``(x1, y1)`` to ``(x2, y2)``) on the given surface.
   There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int y1: y coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.line ##

.. function:: rectangle

   | :sl:`draw a rectangle`
   | :sg:`rectangle(surface, rect, color) -> None`

   Draws an unfilled rectangle on the given surface. For a filled rectangle use
   :meth:`box`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. ## pygame.gfxdraw.rectangle ##

.. function:: box

   | :sl:`draw a filled rectangle`
   | :sg:`box(surface, rect, color) -> None`

   Draws a filled rectangle on the given surface. For an unfilled rectangle use
   :meth:`rectangle`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. note::
      The :func:`pygame.Surface.fill` method works just as well for drawing
      filled rectangles. In fact :func:`pygame.Surface.fill` can be hardware
      accelerated on some platforms with both software and hardware display
      modes.

   .. ## pygame.gfxdraw.box ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, x, y, r, color) -> None`

   Draws an unfilled circle on the given surface. For a filled circle use
   :meth:`filled_circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.circle ##

.. function:: aacircle

   | :sl:`draw an antialiased circle`
   | :sg:`aacircle(surface, x, y, r, color) -> None`

   Draws an unfilled antialiased circle on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aacircle ##

.. function:: filled_circle

   | :sl:`draw a filled circle`
   | :sg:`filled_circle(surface, x, y, r, color) -> None`

   Draws a filled circle on the given surface. For an unfilled circle use
   :meth:`circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled ellipse on the given surface. For a filled ellipse use
   :meth:`filled_ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.ellipse ##

.. function:: aaellipse

   | :sl:`draw an antialiased ellipse`
   | :sg:`aaellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled antialiased ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aaellipse ##

.. function:: filled_ellipse

   | :sl:`draw a filled ellipse`
   | :sg:`filled_ellipse(surface, x, y, rx, ry, color) -> None`

   Draws a filled ellipse on the given surface. For an unfilled ellipse use
   :meth:`ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_ellipse ##

.. function:: arc

   | :sl:`draw an arc`
   | :sg:`arc(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an arc on the given surface. For an arc with its endpoints connected
   to its center use :meth:`pie`.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the arc. The arc is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   nothing will be drawn

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the arc
   :param int y: y coordinate of the center of the arc
   :param int r: radius of the arc
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      This function uses *degrees* while the :func:`pygame.draw.arc` function
      uses *radians*.

   .. ## pygame.gfxdraw.arc ##

.. function:: pie

   | :sl:`draw a pie`
   | :sg:`pie(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an unfilled pie on the given surface. A pie is an :meth:`arc` with its
   endpoints connected to its center.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the pie. The pie is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   a straight line will be drawn from the center position at the given angle,
   to a length of the radius.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the pie
   :param int y: y coordinate of the center of the pie
   :param int r: radius of the pie
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pie ##

.. function:: trigon

   | :sl:`draw a trigon/triangle`
   | :sg:`trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled trigon (triangle) on the given surface. For a filled
   trigon use :meth:`filled_trigon`.

   A trigon can also be drawn using :meth:`polygon` e.g.
   ``polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.trigon ##

.. function:: aatrigon

   | :sl:`draw an antialiased trigon/triangle`
   | :sg:`aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled antialiased trigon (triangle) on the given surface.

   An aatrigon can also be drawn using :meth:`aapolygon` e.g.
   ``aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aatrigon ##

.. function:: filled_trigon

   | :sl:`draw a filled trigon/triangle`
   | :sg:`filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws a filled trigon (triangle) on the given surface. For an unfilled
   trigon use :meth:`trigon`.

   A filled_trigon can also be drawn using :meth:`filled_polygon` e.g.
   ``filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_trigon ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, points, color) -> None`

   Draws an unfilled polygon on the given surface. For a filled polygon use
   :meth:`filled_polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.polygon ##

.. function:: aapolygon

   | :sl:`draw an antialiased polygon`
   | :sg:`aapolygon(surface, points, color) -> None`

   Draws an unfilled antialiased polygon on the given surface.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.aapolygon ##

.. function:: filled_polygon

   | :sl:`draw a filled polygon`
   | :sg:`filled_polygon(surface, points, color) -> None`

   Draws a filled polygon on the given surface. For an unfilled polygon use
   :meth:`polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)`
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.filled_polygon ##

.. function:: textured_polygon

   | :sl:`draw a textured polygon`
   | :sg:`textured_polygon(surface, points, texture, tx, ty) -> None`

   Draws a textured polygon on the given surface. For better performance, the
   surface and the texture should have the same format.

   A per-pixel alpha texture blit to a per-pixel alpha surface will differ from
   a :func:`pygame.Surface.blit` blit. Also, a per-pixel alpha texture cannot be
   used with an 8-bit per pixel destination.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param Surface texture: texture to draw on the polygon
   :param int tx: x offset of the texture
   :param int ty: y offset of the texture

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.textured_polygon ##

.. function:: bezier

   | :sl:`draw a Bezier curve`
   | :sg:`bezier(surface, points, steps, color) -> None`

   Draws a Bézier curve on the given surface.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates used to form a
      curve, where each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param int steps: number of steps for the interpolation, the minimum is 2
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``steps < 2``
   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.bezier ##

.. ## pygame.gfxdraw ##


--- Contenu du fichier : fastevent.rst.txt ---
.. include:: common.txt

:mod:`pygame.fastevent`
=======================

.. module:: pygame.fastevent
   :synopsis: pygame module for interacting with events and queues from multiple
              threads.

| :sl:`pygame module for interacting with events and queues`

IMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2

In older pygame versions before pygame 2, :mod:`pygame.event` was not well
suited for posting events from different threads. This module served as a
replacement (with less features) for multithreaded use. Now, the usage of this
module is highly discouraged in favour of use of the main :mod:`pygame.event`
module. This module will be removed in a future pygame version.

Below, the legacy docs of the module is provided

.. function:: init

   | :sl:`initialize pygame.fastevent`
   | :sg:`init() -> None`

   Initialize the pygame.fastevent module.

   .. ## pygame.fastevent.init ##

.. function:: get_init

   | :sl:`returns True if the fastevent module is currently initialized`
   | :sg:`get_init() -> bool`

   Returns True if the pygame.fastevent module is currently initialized.

   .. ## pygame.fastevent.get_init ##

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.fastevent` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. ## pygame.fastevent.pump ##

.. function:: wait

   | :sl:`wait for an event`
   | :sg:`wait() -> Event`

   Returns the current event on the queue. If there are no messages
   waiting on the queue, this will not return until one is available.
   Sometimes it is important to use this wait to get events from the queue,
   it will allow your application to idle when the user isn't doing anything
   with it.

   .. ## pygame.fastevent.wait ##

.. function:: poll

   | :sl:`get an available event`
   | :sg:`poll() -> Event`

   Returns next event on queue. If there is no event waiting on the queue,
   this will return an event with type NOEVENT.

   .. ## pygame.fastevent.poll ##

.. function:: get

   | :sl:`get all events from the queue`
   | :sg:`get() -> list of Events`

   This will get all the messages and remove them from the queue.

   .. ## pygame.fastevent.get ##

.. function:: post

   | :sl:`place an event on the queue`
   | :sg:`post(Event) -> None`

   This will post your own event objects onto the event queue. You can post
   any event type you want, but some care must be taken. For example, if you
   post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving
   the event will expect the standard MOUSEBUTTONDOWN attributes to be
   available, like 'pos' and 'button'.

   Because pygame.fastevent.post() may have to wait for the queue to empty,
   you can get into a dead lock if you try to append an event on to a full
   queue from the thread that processes events. For that reason I do not
   recommend using this function in the main thread of an SDL program.

   .. ## pygame.fastevent.post ##

.. ## pygame.fastevent ##

--- Contenu du fichier : sdl2_controller.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.controller`
==============================

.. module:: pygame._sdl2.controller
   :synopsis: pygame module to work with controllers

| :sl:`Pygame module to work with controllers.`

.. note::
   Use import pygame._sdl2.controller before using this module.

This module offers control over common controller types like the dualshock 4 or
the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons,
a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.

Pygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but
they always refer to the same buttons. For example ``CONTROLLER_BUTTON_X`` is
always the leftmost button of the 4 buttons on the right.

Controllers can generate the following events::

   CONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,
   CONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED

Additionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated
(to get the version of sdl pygame is built with use :meth:`pygame.version.SDL`)::

   CONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP

These events can be enabled/disabled by :meth:`pygame._sdl2.controller.set_eventstate`
Note that controllers can generate joystick events as well. This function only toggles
events related to controllers.

.. note::
   See the :mod:`pygame.joystick` for a more versatile but more advanced api.

.. versionadded:: 2 This module requires SDL2.

.. function:: init

   | :sl:`initialize the controller module`
   | :sg:`init() -> None`

   Initialize the controller module.

   .. ## pygame._sdl2.controller.init ##

.. function:: quit

   | :sl:`Uninitialize the controller module.`
   | :sg:`quit() -> None`

   Uninitialize the controller module.

   .. ## pygame._sdl2.controller.quit ##

.. function:: get_init

   | :sl:`Returns True if the controller module is initialized.`
   | :sg:`get_init() -> bool`

   Test if ``pygame._sdl2.controller.init()`` was called.

    .. ## pygame._sdl2.controller.get_init ##

.. function:: set_eventstate

    | :sl:`Sets the current state of events related to controllers`
    | :sg:`set_eventstate(state) -> None`

    Enable or disable events connected to controllers.

    .. note::
        Controllers can still generate joystick events, which will not be toggled by this function.

    .. versionchanged:: 2.0.2: Changed return type from int to None

    .. ## pygame._sdl2.controller.set_eventstate ##

.. function:: get_eventstate

    | :sl:`Gets the current state of events related to controllers`
    | :sg:`get_eventstate() -> bool`

    Returns the current state of events related to controllers, True meaning
    events will be posted.

    .. versionadded:: 2.0.2

    .. ## pygame._sdl2.controller.get_eventstate ##

.. function:: get_count

    | :sl:`Get the number of joysticks connected`
    | :sg:`get_count() -> int`

    Get the number of joysticks connected.

    .. ## pygame._sdl2.controller.get_count ##

.. function:: is_controller

    | :sl:`Check if the given joystick is supported by the game controller interface`
    | :sg:`is_controller(index) -> bool`

    Returns True if the index given can be used to create a controller object.

    .. ## pygame._sdl2.controller.is_controller ##

.. function:: name_forindex

    | :sl:`Get the name of the controller`
    | :sg:`name_forindex(index) -> name or None`

    Returns the name of controller, or None if there's no name or the
    index is invalid.

    .. ## pygame._sdl2.controller.name_forindex ##

.. class:: Controller

    | :sl:`Create a new Controller object.`
    | :sg:`Controller(index) -> Controller`

    Create a new Controller object. Index should be integer between
    0 and ``pygame._sdl2.controller.get_count()``. Controllers also
    can be created from a ``pygame.joystick.Joystick`` using
    ``pygame._sdl2.controller.from_joystick``. Controllers are
    initialized on creation.

   .. method:: quit

      | :sl:`uninitialize the Controller`
      | :sg:`quit() -> None`

      Close a Controller object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Controller.quit ##

   .. method:: get_init

      | :sl:`check if the Controller is initialized`
      | :sg:`get_init() -> bool`

      Returns True if the Controller object is currently initialised.

      .. ## Controller.get_init ##

   .. staticmethod:: from_joystick

       | :sl:`Create a Controller from a pygame.joystick.Joystick object`
       | :sg:`from_joystick(joystick) -> Controller`

       Create a Controller object from a ``pygame.joystick.Joystick`` object

       .. ## Controller.from_joystick ##

   .. method:: attached

      | :sl:`Check if the Controller has been opened and is currently connected.`
      | :sg:`attached() -> bool`

      Returns True if the Controller object is opened and connected.

      .. ## Controller.attached ##

   .. method:: as_joystick

      | :sl:`Returns a pygame.joystick.Joystick() object`
      | :sg:`as_joystick() -> Joystick object`

      Returns a pygame.joystick.Joystick() object created from this controller's index

      .. ## Controller.as_joystick ##

   .. method:: get_axis

      | :sl:`Get the current state of a joystick axis`
      | :sg:`get_axis(axis) -> int`

      Get the current state of a trigger or joystick axis.
      The axis argument must be one of the following constants::

         CONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,
         CONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,
         CONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT

      Joysticks can return a value between -32768 and 32767. Triggers however
      can only return a value between 0 and 32768.

      .. ## Controller.get_axis ##

   .. method:: get_button

      | :sl:`Get the current state of a button`
      | :sg:`get_button(button) -> bool`

      Get the current state of a button, True meaning it is pressed down.
      The button argument must be one of the following constants::

         CONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,
         CONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y
         CONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,
         CONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,
         CONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,
         CONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,
         CONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,
         CONTROLLER_BUTTON_START


      .. ## Controller.get_button ##

   .. method:: get_mapping

      | :sl:`Get the mapping assigned to the controller`
      | :sg:`get_mapping() -> mapping`

      Returns a dict containing the mapping of the Controller. For more
      information see :meth:`Controller.set_mapping()`

      .. versionchanged:: 2.0.2: Return type changed from ``str`` to ``dict``

      .. ## Controller.get_mapping ##

   .. method:: set_mapping

      | :sl:`Assign a mapping to the controller`
      | :sg:`set_mapping(mapping) -> int`

      Rebind buttons, axes, triggers and dpads. The mapping should be a 
      dict containing all buttons, hats and axes. The easiest way to get this
      is to use the dict returned by :meth:`Controller.get_mapping`. To edit
      this mapping assign a value to the original button. The value of the
      dictionary must be a button, hat or axis represented in the following way:

      * For a button use: bX where X is the index of the button.
      * For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).
      * For an axis use: aX where x is the index of the axis.

      An example of mapping::

         mapping = controller.get_mapping() # Get current mapping
         mapping["a"] = "b3" # Remap button a to y
         mapping["y"] = "b0" # Remap button y to a
         controller.set_mapping(mapping) # Set the mapping


      The function will return 1 if a new mapping is added or 0 if an existing one is updated.

      .. versionchanged:: 2.0.2: Renamed from ``add_mapping`` to ``set_mapping``
      .. versionchanged:: 2.0.2: Argument type changed from ``str`` to ``dict``

      .. ## Controller.set_mapping ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the controller, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Controller.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      controller does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Controller.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the controller. See
      :meth:`Controller.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Controller.stop_rumble ##

.. ## pygame._sdl2.controller ##


--- Contenu du fichier : tests.rst.txt ---
.. include:: common.txt

:mod:`pygame.tests`
===================

.. module:: pygame.tests
   :synopsis: Pygame unit test suite package

| :sl:`Pygame unit test suite package`

A quick way to run the test suite package from the command line is to import
the go submodule with the Python -m option:

::

  python -m pygame.tests [<test options>]

Command line option --help displays a usage message. Available options
correspond to the :func:`pygame.tests.run` arguments.

The xxxx_test submodules of the tests package are unit test suites for
individual parts of pygame. Each can also be run as a main program. This is
useful if the test, such as cdrom_test, is interactive.

For pygame development the test suite can be run from a pygame distribution
root directory. Program ``run_tests.py`` is provided for convenience, though
test/go.py can be run directly.

Module level tags control which modules are included in a unit test run. Tags
are assigned to a unit test module with a corresponding <name>_tags.py module.
The tags module has the global __tags__, a list of tag names. For example,
``cdrom_test.py`` has a tag file ``cdrom_tags.py`` containing a tags list that
has the 'interactive' string. The 'interactive' tag indicates ``cdrom_test.py``
expects user input. It is excluded from a ``run_tests.py`` or
``pygame.tests.go`` run. 

Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These
two tags indicate unit tests that will not run on a particular platform, or
for which no corresponding pygame module is available.

The test runner will list each excluded module along with the tag responsible.

.. function:: run

   | :sl:`Run the pygame unit test suite`
   | :sg:`run(*args, **kwds) -> tuple`

   Positional arguments (optional):

   ::

       The names of tests to include. If omitted then all tests are run. Test names
       need not include the trailing '_test'.

   Keyword arguments:

   ::

       incomplete - fail incomplete tests (default False)
       nosubprocess - run all test suites in the current process
                      (default False, use separate subprocesses)
       dump - dump failures/errors as dict ready to eval (default False)
       file - if provided, the name of a file into which to dump failures/errors
       timings - if provided, the number of times to run each individual test to
                 get an average run time (default is run each test once)
       exclude - A list of TAG names to exclude from the run
       show_output - show silenced stderr/stdout on errors (default False)
       all - dump all results, not just errors (default False)
       randomize - randomize order of tests (default False)
       seed - if provided, a seed randomizer integer
       multi_thread - if provided, the number of THREADS in which to run
                      subprocessed tests
       time_out - if subprocess is True then the time limit in seconds before
                  killing a test (default 30)
       fake - if provided, the name of the fake tests package in the
              run_tests__tests subpackage to run instead of the normal
              pygame tests
       python - the path to a python executable to run subprocessed tests
                (default sys.executable)

   Return value:

   ::

       A tuple of total number of tests run, dictionary of error information.
       The dictionary is empty if no errors were recorded.

   By default individual test modules are run in separate subprocesses. This
   recreates normal pygame usage where ``pygame.init()`` and ``pygame.quit()``
   are called only once per program execution, and avoids unfortunate
   interactions between test modules. 
   
   A time limit is placed on test execution ensuring that any frozen tests
   processes are killed when their time allotment is expired. Use the single
   process option if threading is not working properly or if tests are taking
   too long. It is not guaranteed that all tests will pass in single process
   mode.

   Tests are run in a randomized order if the randomize argument is True or a
   seed argument is provided. If no seed integer is provided then the system
   time is used for the randomization seed value.

   Individual test modules may have a __tags__ attribute, a list of tag strings
   used to selectively omit modules from a run. By default only 'interactive'
   modules such as cdrom_test are ignored. An interactive module must be run
   from the console as a Python program.

   This function can only be called once per Python session. It is not
   reentrant.

   .. ## pygame.tests.run ##

.. ## pygame.tests ##


--- Contenu du fichier : cdrom.rst.txt ---
.. include:: common.txt

:mod:`pygame.cdrom`
===================

.. module:: pygame.cdrom
   :synopsis: pygame module for audio cdrom control

| :sl:`pygame module for audio cdrom control`

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.
	One alternative for python cdrom functionality is `pycdio <https://pypi.org/project/pycdio/>`_.
	
The cdrom module manages the ``CD`` and ``DVD`` drives on a computer. It can
also control the playback of audio CDs. This module needs to be initialized
before it can do anything. Each ``CD`` object you create represents a cdrom
drive and must also be initialized individually before it can do most things.

.. function:: init

   | :sl:`initialize the cdrom module`
   | :sg:`init() -> None`

   Initialize the cdrom module. This will scan the system for all ``CD``
   devices. The module must be initialized before any other functions will
   work. This automatically happens when you call ``pygame.init()``.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.init ##

.. function:: quit

   | :sl:`uninitialize the cdrom module`
   | :sg:`quit() -> None`

   Uninitialize the cdrom module. After you call this any existing ``CD``
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.quit ##

.. function:: get_init

   | :sl:`true if the cdrom module is initialized`
   | :sg:`get_init() -> bool`

   Test if the cdrom module is initialized or not. This is different than the
   ``CD.init()`` since each drive must also be initialized individually.

   .. ## pygame.cdrom.get_init ##

.. function:: get_count

   | :sl:`number of cd drives on the system`
   | :sg:`get_count() -> count`

   Return the number of cd drives on the system. When you create ``CD`` objects
   you need to pass an integer id that must be lower than this count. The count
   will be 0 if there are no drives on the system.

   .. ## pygame.cdrom.get_count ##

.. class:: CD

   | :sl:`class to manage a cdrom drive`
   | :sg:`CD(id) -> CD`

   You can create a ``CD`` object for each cdrom on the system. Use
   ``pygame.cdrom.get_count()`` to determine how many drives actually exist.
   The id argument is an integer of the drive, starting at zero.

   The ``CD`` object is not initialized, you can only call ``CD.get_id()`` and
   ``CD.get_name()`` on an uninitialized drive.

   It is safe to create multiple ``CD`` objects for the same drive, they will
   all cooperate normally.

   .. method:: init

      | :sl:`initialize a cdrom drive for use`
      | :sg:`init() -> None`

      Initialize the cdrom drive for use. The drive must be initialized for
      most ``CD`` methods to work. Even if the rest of pygame has been
      initialized.

      There may be a brief pause while the drive is initialized. Avoid
      ``CD.init()`` if the program should not stop for a second or two.

      .. ## CD.init ##

   .. method:: quit

      | :sl:`uninitialize a cdrom drive for use`
      | :sg:`quit() -> None`

      Uninitialize a drive for use. Call this when your program will not be
      accessing the drive for awhile.

      .. ## CD.quit ##

   .. method:: get_init

      | :sl:`true if this cd device initialized`
      | :sg:`get_init() -> bool`

      Test if this ``CDROM`` device is initialized. This is different than the
      ``pygame.cdrom.init()`` since each drive must also be initialized
      individually.

      .. ## CD.get_init ##

   .. method:: play

      | :sl:`start playing audio`
      | :sg:`play(track, start=None, end=None) -> None`

      Playback audio from an audio cdrom in the drive. Besides the track number
      argument, you can also pass a starting and ending time for playback. The
      start and end time are in seconds, and can limit the section of an audio
      track played.

      If you pass a start time but no end, the audio will play to the end of
      the track. If you pass a start time and 'None' for the end time, the
      audio will play to the end of the entire disc.

      See the ``CD.get_numtracks()`` and ``CD.get_track_audio()`` to find
      tracks to playback.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.play ##

   .. method:: stop

      | :sl:`stop audio playback`
      | :sg:`stop() -> None`

      Stops playback of audio from the cdrom. This will also lose the current
      playback position. This method does nothing if the drive isn't already
      playing audio.

      .. ## CD.stop ##

   .. method:: pause

      | :sl:`temporarily stop audio playback`
      | :sg:`pause() -> None`

      Temporarily stop audio playback on the ``CD``. The playback can be
      resumed at the same point with the ``CD.resume()`` method. If the ``CD``
      is not playing this method does nothing.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.pause ##

   .. method:: resume

      | :sl:`unpause audio playback`
      | :sg:`resume() -> None`

      Unpause a paused ``CD``. If the ``CD`` is not paused or already playing,
      this method does nothing.

      .. ## CD.resume ##

   .. method:: eject

      | :sl:`eject or open the cdrom drive`
      | :sg:`eject() -> None`

      This will open the cdrom drive and eject the cdrom. If the drive is
      playing or paused it will be stopped.

      .. ## CD.eject ##

   .. method:: get_id

      | :sl:`the index of the cdrom drive`
      | :sg:`get_id() -> id`

      Returns the integer id that was used to create the ``CD`` instance. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_id ##

   .. method:: get_name

      | :sl:`the system name of the cdrom drive`
      | :sg:`get_name() -> name`

      Return the string name of the drive. This is the system name used to
      represent the drive. It is often the drive letter or device name. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_name ##

   .. method:: get_busy

      | :sl:`true if the drive is playing audio`
      | :sg:`get_busy() -> bool`

      Returns True if the drive busy playing back audio.

      .. ## CD.get_busy ##

   .. method:: get_paused

      | :sl:`true if the drive is paused`
      | :sg:`get_paused() -> bool`

      Returns True if the drive is currently paused.

      .. ## CD.get_paused ##

   .. method:: get_current

      | :sl:`the current audio playback position`
      | :sg:`get_current() -> track, seconds`

      Returns both the current track and time of that track. This method works
      when the drive is either playing or paused.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_current ##

   .. method:: get_empty

      | :sl:`False if a cdrom is in the drive`
      | :sg:`get_empty() -> bool`

      Return False if there is a cdrom currently in the drive. If the drive is
      empty this will return True.

      .. ## CD.get_empty ##

   .. method:: get_numtracks

      | :sl:`the number of tracks on the cdrom`
      | :sg:`get_numtracks() -> count`

      Return the number of tracks on the cdrom in the drive. This will return
      zero of the drive is empty or has no tracks.

      .. ## CD.get_numtracks ##

   .. method:: get_track_audio

      | :sl:`true if the cdrom track has audio data`
      | :sg:`get_track_audio(track) -> bool`

      Determine if a track on a cdrom contains audio data. You can also call
      ``CD.num_tracks()`` and ``CD.get_all()`` to determine more information
      about the cdrom.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_audio ##

   .. method:: get_all

      | :sl:`get all track information`
      | :sg:`get_all() -> [(audio, start, end, length), ...]`

      Return a list with information for every track on the cdrom. The
      information consists of a tuple with four values. The audio value is True
      if the track contains audio data. The start, end, and length values are
      floating point numbers in seconds. Start and end represent absolute times
      on the entire disc.

      .. ## CD.get_all ##

   .. method:: get_track_start

      | :sl:`start time of a cdrom track`
      | :sg:`get_track_start(track) -> seconds`

      Return the absolute time in seconds where at start of the cdrom track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_start ##

   .. method:: get_track_length

      | :sl:`length of a cdrom track`
      | :sg:`get_track_length(track) -> seconds`

      Return a floating point value in seconds of the length of the cdrom
      track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_length ##

   .. ## pygame.cdrom.CD ##

.. ## pygame.cdrom ##


--- Contenu du fichier : pygame.rst.txt ---
.. include:: common.txt

:mod:`pygame`
=============

.. module:: pygame
   :synopsis: the top level pygame package

| :sl:`the top level pygame package`

The pygame package represents the top-level package for others to use. Pygame
itself is broken into many submodules, but this does not affect programs that
use pygame.

As a convenience, most of the top-level variables in pygame have been placed
inside a module named :mod:`pygame.locals`. This is meant to be used with
``from pygame.locals import *``, in addition to ``import pygame``.

When you ``import pygame`` all available pygame submodules are automatically
imported. Be aware that some of the pygame modules are considered *optional*,
and may not be available. In that case, pygame will provide a placeholder
object instead of the module, which can be used to test for availability.

.. function:: init

   | :sl:`initialize all imported pygame modules`
   | :sg:`init() -> (numpass, numfail)`

   Initialize all imported pygame modules. No exceptions will be raised if a
   module fails, but the total number if successful and failed inits will be
   returned as a tuple. You can always initialize individual modules manually,
   but :func:`pygame.init` is a convenient way to get everything started. The
   ``init()`` functions for individual modules will raise exceptions when they
   fail.

   You may want to initialize the different modules separately to speed up your
   program or to not use modules your game does not require.

   It is safe to call this ``init()`` more than once as repeated calls will have
   no effect. This is true even if you have ``pygame.quit()`` all the modules.

   .. ## pygame.init ##

.. function:: quit

   | :sl:`uninitialize all pygame modules`
   | :sg:`quit() -> None`

   Uninitialize all pygame modules that have previously been initialized. When
   the Python interpreter shuts down, this method is called regardless, so your
   program should not need it, except when it wants to terminate its pygame
   resources and continue. It is safe to call this function more than once as
   repeated calls have no effect.

   .. note::
      Calling :func:`pygame.quit` will not exit your program. Consider letting
      your program end in the same way a normal Python program will end.

   .. ## pygame.quit ##

.. function:: get_init

   | :sl:`returns True if pygame is currently initialized`
   | :sg:`get_init() -> bool`

   Returns ``True`` if pygame is currently initialized.

   .. versionadded:: 1.9.5

   .. ## pygame.get_init ##

.. exception:: error

   | :sl:`standard pygame exception`
   | :sg:`raise pygame.error(message)`

   This exception is raised whenever a pygame or SDL operation fails. You
   can catch any anticipated problems and deal with the error. The exception is
   always raised with a descriptive message about the problem.

   Derived from the ``RuntimeError`` exception, which can also be used to catch
   these raised errors.

   .. ## pygame.error ##

.. function:: get_error

   | :sl:`get the current error message`
   | :sg:`get_error() -> errorstr`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.get_error ##

.. function:: set_error

   | :sl:`set the current error message`
   | :sg:`set_error(error_msg) -> None`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.set_error ##

.. function:: get_sdl_version

   | :sl:`get the version number of SDL`
   | :sg:`get_sdl_version(linked=True) -> major, minor, patch`

   Returns the three version numbers of the SDL library. ``linked=True``
   will cause the function to return the version of the library that pygame
   is linked against while ``linked=False`` will cause the function to return
   the version of the library that pygame is compiled against.
   It can be used to detect which features may or may not be
   available through pygame.

   .. versionadded:: 1.7.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added

   .. ## pygame.get_sdl_version ##

.. function:: get_sdl_byteorder

   | :sl:`get the byte order of SDL`
   | :sg:`get_sdl_byteorder() -> int`

   Returns the byte order of the SDL library. It returns ``1234`` for little
   endian byte order and ``4321`` for big endian byte order.

   .. versionadded:: 1.8

   .. ## pygame.get_sdl_byteorder ##

.. function:: register_quit

   | :sl:`register a function to be called when pygame quits`
   | :sg:`register_quit(callable) -> None`

   When :func:`pygame.quit` is called, all registered quit functions are
   called. Pygame modules do this automatically when they are initializing, so
   this function will rarely be needed.

   .. ## pygame.register_quit ##

.. function:: encode_string

   | :sl:`Encode a Unicode or bytes object`
   | :sg:`encode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   encoding (string): If present, encoding to use. The default is
   ``'unicode_escape'``.

   errors (string): If given, how to handle unencodable characters. The default
   is ``'backslashreplace'``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``. For the default encoding and errors values
   there should be no encoding errors.

   This function is used in encoding file paths. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_string ##

.. function:: encode_file_path

   | :sl:`Encode a Unicode or bytes object as a file system path`
   | :sg:`encode_file_path([obj [, etype]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``.

   This function is used to encode file paths in pygame. Encoding is to the
   codec as returned by ``sys.getfilesystemencoding()``. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_file_path ##


:mod:`pygame.version`
=====================

.. module:: pygame.version
   :synopsis: small module containing version information

| :sl:`small module containing version information`

This module is automatically imported into the pygame package and can be used to
check which version of pygame has been imported.

.. data:: ver

   | :sl:`version number as a string`
   | :sg:`ver = '1.2'`

   This is the version represented as a string. It can contain a micro release
   number as well, e.g. ``'1.5.2'``

   .. ## pygame.version.ver ##

.. data:: vernum

   | :sl:`tupled integers of the version`
   | :sg:`vernum = (1, 5, 3)`

   This version information can easily be compared with other version
   numbers of the same format. An example of checking pygame version numbers
   would look like this:

   ::

       if pygame.version.vernum < (1, 5):
           print('Warning, older version of pygame (%s)' %  pygame.version.ver)
           disable_advanced_features = True

   .. versionadded:: 1.9.6 Attributes ``major``, ``minor``, and ``patch``.

   ::

      vernum.major == vernum[0]
      vernum.minor == vernum[1]
      vernum.patch == vernum[2]

   .. versionchanged:: 1.9.6
      ``str(pygame.version.vernum)`` returns a string like ``"2.0.0"`` instead
      of ``"(2, 0, 0)"``.

   .. versionchanged:: 1.9.6
      ``repr(pygame.version.vernum)`` returns a string like
      ``"PygameVersion(major=2, minor=0, patch=0)"`` instead of ``"(2, 0, 0)"``.

   .. ## pygame.version.vernum ##

.. data:: rev

   | :sl:`repository revision of the build`
   | :sg:`rev = 'a6f89747b551+'`

   The Mercurial node identifier of the repository checkout from which this
   package was built. If the identifier ends with a plus sign '+' then the
   package contains uncommitted changes. Please include this revision number
   in bug reports, especially for non-release pygame builds.
   
   Important note: pygame development has moved to github, this variable is 
   obsolete now. As soon as development shifted to github, this variable started
   returning an empty string ``""``. 
   It has always been returning an empty string since ``v1.9.5``.
   
   .. versionchanged:: 1.9.5
      Always returns an empty string ``""``.

   .. ## pygame.version.rev ##

.. data:: SDL

   | :sl:`tupled integers of the SDL library version`
   | :sg:`SDL = '(2, 0, 12)'`

   This is the SDL library version represented as an extended tuple. It also has
   attributes 'major', 'minor' & 'patch' that can be accessed like this:

   ::

     >>> pygame.version.SDL.major
     2

   printing the whole thing returns a string like this:

   ::

    >>> pygame.version.SDL
    SDLVersion(major=2, minor=0, patch=12)

   .. versionadded:: 2.0.0

   .. ## pygame.version.SDL ##

.. ## pygame.version ##

.. ## pygame ##

.. _environment-variables:

**Setting Environment Variables**

Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide
range of the library's functionality. Some of the variables are from pygame itself, while others come from
the underlying C SDL library that pygame uses.

In python, environment variables are usually set in code like this::

     import os
     os.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'

Or to preserve users ability to override the variable::

     import os
     os.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')

If the variable is more useful for users of an app to set than the developer then they can set it like this:

**Windows**::

    set NAME_OF_ENVIRONMENT_VARIABLE=value_to_set
    python my_application.py

**Linux/Mac**::

    ENV_VAR=value python my_application.py

For some variables they need to be set before initialising pygame, some must be set before even importing pygame,
and others can simply be set right before the area of code they control is run.

Below is a list of environment variables, their settable values, and a brief description of what they do.

|

**Pygame Environment Variables**

These variables are defined by pygame itself.

|

::

 PYGAME_DISPLAY - Experimental (subject to change)
 Set index of the display to use, "0" is the default.

This sets the display where pygame will open its window
or screen. The value set here will be used if set before
calling :func:`pygame.display.set_mode()`, and as long as no
'display' parameter is passed into :func:`pygame.display.set_mode()`.

|

::

 PYGAME_FORCE_SCALE -
 Set to "photo" or "default".

This forces set_mode() to use the SCALED display mode and,
if "photo" is set, makes the scaling use the slowest, but
highest quality anisotropic scaling algorithm, if it is
available. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 PYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0
 Set to "1" to enable the SDL2 blitter.

This makes pygame use the SDL2 blitter for all alpha
blending. The SDL2 blitter is sometimes faster than
the default blitter but uses a different formula so
the final colours may differ. Must be set before
:func:`pygame.init()` is called.

|

::

 PYGAME_HIDE_SUPPORT_PROMPT -
 Set to "1" to hide the prompt.

This stops the welcome message popping up in the
console that tells you which version of python,
pygame & SDL you are using. Must be set before
importing pygame.

|

::

 PYGAME_FREETYPE -
 Set to "1" to enable.

This switches the pygame.font module to a pure
freetype implementation that bypasses SDL_ttf.
See the font module for why you might want to
do this. Must be set before importing pygame.

|

::

 PYGAME_CAMERA -
 Set to "opencv" or "vidcapture"

Forces the library backend used in the camera
module, overriding the platform defaults. Must
be set before calling :func:`pygame.camera.init()`.

In pygame 2.0.3, backends can be set programmatically instead, and the old
OpenCV backend has been replaced with one on top of "opencv-python," rather
than the old "highgui" OpenCV port. Also, there is a new native Windows
backend available.

|
|

**SDL Environment Variables**

These variables are defined by SDL.

For documentation on the environment variables available in
pygame 1 try `here
<https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html>`__.
For Pygame 2, some selected environment variables are listed below.

|

::

 SDL_VIDEO_CENTERED -
 Set to "1" to enable centering the window.

This will make the pygame window open in the centre of the display.
Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEO_WINDOW_POS -
 Set to "x,y" to position the top left corner of the window.

This allows control over the placement of the pygame window within
the display. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEODRIVER -
 Set to "drivername" to change the video driver used.

On some platforms there are multiple video drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.display.init()`.

|

::

 SDL_AUDIODRIVER -
 Set to "drivername" to change the audio driver used.

On some platforms there are multiple audio drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.mixer.init()`.

|

::

 SDL_VIDEO_ALLOW_SCREENSAVER
 Set to "1" to allow screensavers while pygame apps are running.

By default pygame apps disable screensavers while
they are running. Setting this environment variable allows users or
developers to change that and make screensavers run again.

|

::

 SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
 Set to "0" to re-enable the compositor.

By default SDL tries to disable the X11 compositor for all pygame
apps. This is usually a good thing as it's faster, however if you
have an app which *doesn't* update every frame and are using linux
you may want to disable this bypass. The bypass has reported problems
on KDE linux. This variable is only used on x11/linux platforms.

|

::

 SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 Set to "1" to allow joysticks to be updated even when the window is out of focus

By default, when the window is not in focus, input devices do not get
updated. However, using this environment variable it is possible to get
joystick updates even when the window is in the background. Must be set
before calling :func:`pygame.init()` or :func:`pygame.joystick.init()`.


--- Contenu du fichier : camera.rst.txt ---
.. include:: common.txt

:mod:`pygame.camera`
====================

.. module:: pygame.camera
   :synopsis: pygame module for camera use

| :sl:`pygame module for camera use`

.. note::
   Use import pygame.camera before using this module.

Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively,
with wider platform support available via an integrated OpenCV backend.

.. versionadded:: 2.0.2 Windows native camera support
.. versionadded:: 2.0.3 New OpenCV backends

EXPERIMENTAL!: This API may change or disappear in later pygame releases. If
you use this, your code will very likely break with the next pygame release.

The Bayer to ``RGB`` function is based on:

::

 Sonix SN9C101 based webcam basic I/F routines
 Copyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

New in pygame 1.9.0.

.. function:: init

   | :sl:`Module init`
   | :sg:`init(backend = None) -> None`

   This function starts up the camera module, choosing the best webcam backend
   it can find for your system. This is not guaranteed to succeed, and may even
   attempt to import third party modules, like `OpenCV`. If you want to
   override its backend choice, you can call pass the name of the backend you
   want into this function. More about backends in
   :func:`get_backends()`.

   .. versionchanged:: 2.0.3 Option to explicitly select backend

   .. ## pygame.camera.init ##

.. function:: get_backends

   | :sl:`Get the backends supported on this system`
   | :sg:`get_backends() -> [str]`

   This function returns every backend it thinks has a possibility of working
   on your system, in order of priority.

   pygame.camera Backends:
   ::

      Backend           OS        Description
      ---------------------------------------------------------------------------------
      _camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3
      _camera (V4L2)    Linux     Builtin
      OpenCV            Any       Uses `opencv-python` module, can't enumerate cameras
      OpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration
      VideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate
                                  cameras, may be removed in the future

   There are two main differences among backends.

   The _camera backends are built in to pygame itself, and require no third
   party imports. All the other backends do. For the OpenCV and VideoCapture
   backends, those modules need to be installed on your system.

   The other big difference is "camera enumeration." Some backends don't have
   a way to list out camera names, or even the number of cameras on the
   system. In these cases, :func:`list_cameras()` will return
   something like ``[0]``. If you know you have multiple cameras on the 
   system, these backend ports will pass through a "camera index number" 
   through if you use that as the ``device`` parameter.

   .. versionadded:: 2.0.3

   .. ## pygame.camera.get_backends ##

.. function:: colorspace

   | :sl:`Surface colorspace conversion`
   | :sg:`colorspace(Surface, format, DestSurface = None) -> Surface`

   Allows for conversion from "RGB" to a destination colorspace of "HSV" or
   "YUV". The source and destination surfaces must be the same size and pixel
   depth. This is useful for computer vision on devices with limited processing
   power. Capture as small of an image as possible, ``transform.scale()`` it
   even smaller, and then convert the colorspace to ``YUV`` or ``HSV`` before
   doing any processing on it.

   .. ## pygame.camera.colorspace ##

.. function:: list_cameras

   | :sl:`returns a list of available cameras`
   | :sg:`list_cameras() -> [cameras]`

   Checks the computer for available cameras and returns a list of strings of
   camera names, ready to be fed into :class:`pygame.camera.Camera`.

   If the camera backend doesn't support webcam enumeration, this will return
   something like ``[0]``. See :func:`get_backends()` for much more
   information.

   .. ## pygame.camera.list_cameras ##

.. class:: Camera

   | :sl:`load a camera`
   | :sg:`Camera(device, (width, height), format) -> Camera`

   Loads a camera. On Linux, the device is typically something like
   "/dev/video0". Default width and height are 640 by 480. 
   Format is the desired colorspace of the output. 
   This is useful for computer vision purposes. The default is
   ``RGB``. The following are supported:

      * ``RGB`` - Red, Green, Blue

      * ``YUV`` - Luma, Blue Chrominance, Red Chrominance

      * ``HSV`` - Hue, Saturation, Value

   .. method:: start

      | :sl:`opens, initializes, and starts capturing`
      | :sg:`start() -> None`

      Opens the camera device, attempts to initialize it, and begins recording
      images to a buffer. The camera must be started before any of the below
      functions can be used.

      .. ## Camera.start ##

   .. method:: stop

      | :sl:`stops, uninitializes, and closes the camera`
      | :sg:`stop() -> None`

      Stops recording, uninitializes the camera, and closes it. Once a camera
      is stopped, the below functions cannot be used until it is started again.

      .. ## Camera.stop ##

   .. method:: get_controls

      | :sl:`gets current values of user controls`
      | :sg:`get_controls() -> (hflip = bool, vflip = bool, brightness)`

      If the camera supports it, get_controls will return the current settings
      for horizontal and vertical image flip as bools and brightness as an int.
      If unsupported, it will return the default values of (0, 0, 0). Note that
      the return values here may be different than those returned by
      set_controls, though these are more likely to be correct.

      .. ## Camera.get_controls ##

   .. method:: set_controls

      | :sl:`changes camera settings if supported by the camera`
      | :sg:`set_controls(hflip = bool, vflip = bool, brightness) -> (hflip = bool, vflip = bool, brightness)`

      Allows you to change camera settings if the camera supports it. The
      return values will be the input values if the camera claims it succeeded
      or the values previously in use if not. Each argument is optional, and
      the desired one can be chosen by supplying the keyword, like hflip. Note
      that the actual settings being used by the camera may not be the same as
      those returned by set_controls. On Windows, :code:`hflip` and :code:`vflip` are
      implemented by pygame, not by the Camera, so they should always work, but
      :code:`brightness` is unsupported.

      .. ## Camera.set_controls ##

   .. method:: get_size

      | :sl:`returns the dimensions of the images being recorded`
      | :sg:`get_size() -> (width, height)`

      Returns the current dimensions of the images being captured by the
      camera. This will return the actual size, which may be different than the
      one specified during initialization if the camera did not support that
      size.

      .. ## Camera.get_size ##

   .. method:: query_image

      | :sl:`checks if a frame is ready`
      | :sg:`query_image() -> bool`

      If an image is ready to get, it returns true. Otherwise it returns false.
      Note that some webcams will always return False and will only queue a
      frame when called with a blocking function like :func:`get_image()`.
      On Windows (MSMF), and the  OpenCV backends, :func:`query_image()`
      should be reliable, though. This is useful to separate the framerate of
      the game from that of the camera without having to use threading. 

      .. ## Camera.query_image ##

   .. method:: get_image

      | :sl:`captures an image as a Surface`
      | :sg:`get_image(Surface = None) -> Surface`

      Pulls an image off of the buffer as an ``RGB`` Surface. It can optionally
      reuse an existing Surface to save time. The bit-depth of the surface is
      24 bits on Linux, 32 bits on Windows, or the same as the optionally
      supplied Surface.

      .. ## Camera.get_image ##

   .. method:: get_raw

      | :sl:`returns an unmodified image as bytes`
      | :sg:`get_raw() -> bytes`

      Gets an image from a camera as a string in the native pixelformat of the
      camera. Useful for integration with other libraries. This returns a
      bytes object

      .. ## Camera.get_raw ##

   .. ## pygame.camera.Camera ##

.. ## pygame.camera ##


--- Contenu du fichier : mouse.rst.txt ---
.. include:: common.txt

:mod:`pygame.mouse`
===================

.. module:: pygame.mouse
   :synopsis: pygame module to work with the mouse

| :sl:`pygame module to work with the mouse`

The mouse functions can be used to get the current state of the mouse device.
These functions can also alter the system cursor for the mouse.

When the display mode is set, the event queue will start receiving mouse
events. The mouse buttons generate ``pygame.MOUSEBUTTONDOWN`` and
``pygame.MOUSEBUTTONUP`` events when they are pressed and released. These
events contain a button attribute representing which button was pressed. The
mouse wheel will generate ``pygame.MOUSEBUTTONDOWN`` and 
``pygame.MOUSEBUTTONUP`` events when rolled. The button will be set to 4 
when the wheel is rolled up, and to button 5 when the wheel is rolled down. 
Whenever the mouse is moved it generates a ``pygame.MOUSEMOTION`` event. The 
mouse movement is broken into small and accurate motion events. As the mouse 
is moving many motion events will be placed on the queue. Mouse motion events 
that are not properly cleaned from the event queue are the primary reason the 
event queue fills up.

If the mouse cursor is hidden, and input is grabbed to the current display the
mouse will enter a virtual input mode, where the relative movements of the
mouse will never be stopped by the borders of the screen. See the functions
``pygame.mouse.set_visible()`` and ``pygame.event.set_grab()`` to get this
configured.


**Mouse Wheel Behavior in pygame 2**

There is proper functionality for mouse wheel behaviour with pygame 2 supporting
``pygame.MOUSEWHEEL`` events.  The new events support horizontal and vertical 
scroll movements, with signed integer values representing the amount scrolled 
(``x`` and ``y``), as well as ``flipped`` direction (the set positive and 
negative values for each axis is flipped). Read more about SDL2 
input-related changes here `<https://wiki.libsdl.org/MigrationGuide#input>`_

In pygame 2, the mouse wheel functionality can be used by listening for the 
``pygame.MOUSEWHEEL`` type of an event (Bear in mind they still emit 
``pygame.MOUSEBUTTONDOWN`` events like in pygame 1.x, as well).
When this event is triggered, a developer can access the appropriate ``Event`` object 
with ``pygame.event.get()``. The object can be used to access data about the mouse 
scroll, such as ``which`` (it will tell you what exact mouse device trigger the event).

.. code-block:: python
   :caption: Code example of mouse scroll (tested on 2.0.0.dev7)
   :name: test.py

   # Taken from husano896's PR thread (slightly modified)
   import pygame
   from pygame.locals import *
   pygame.init()
   screen = pygame.display.set_mode((640, 480))
   clock = pygame.time.Clock()
   
   def main():
      while True:
         for event in pygame.event.get():
               if event.type == QUIT:
                  pygame.quit()
                  return
               elif event.type == MOUSEWHEEL:
                  print(event) 
                  print(event.x, event.y)
                  print(event.flipped)
                  print(event.which)
                  # can access properties with 
                  # proper notation(ex: event.y)
         clock.tick(60)

   # Execute game:
   main()

.. function:: get_pressed

   | :sl:`get the state of the mouse buttons`
   | :sg:`get_pressed(num_buttons=3) -> (button1, button2, button3)`
   | :sg:`get_pressed(num_buttons=5) -> (button1, button2, button3, button4, button5)`

   Returns a sequence of booleans representing the state of all the mouse
   buttons. A true value means the mouse is currently being pressed at the time
   of the call.

   Note, to get all of the mouse events it is better to use either 
   ``pygame.event.wait()`` or ``pygame.event.get()`` and check all of those 
   events to see if they are ``MOUSEBUTTONDOWN``, ``MOUSEBUTTONUP``, or
   ``MOUSEMOTION``.

   Note, that on ``X11`` some X servers use middle button emulation. When you
   click both buttons ``1`` and ``3`` at the same time a ``2`` button event 
   can be emitted.

   Note, remember to call ``pygame.event.get()`` before this function.
   Otherwise it will not work as expected.

   To support five button mice, an optional parameter ``num_buttons`` has been 
   added in pygame 2. When this is set to ``5``, ``button4`` and ``button5`` 
   are added to the returned tuple. Only ``3`` and ``5`` are valid values 
   for this parameter.
   
   .. versionchanged:: 2.0.0 ``num_buttons`` argument added

   .. ## pygame.mouse.get_pressed ##

.. function:: get_pos

   | :sl:`get the mouse cursor position`
   | :sg:`get_pos() -> (x, y)`

   Returns the ``x`` and ``y`` position of the mouse cursor. The position is
   relative to the top-left corner of the display. The cursor position can be
   located outside of the display window, but is always constrained to the
   screen.

   .. ## pygame.mouse.get_pos ##

.. function:: get_rel

   | :sl:`get the amount of mouse movement`
   | :sg:`get_rel() -> (x, y)`

   Returns the amount of movement in ``x`` and ``y`` since the previous call to
   this function. The relative movement of the mouse cursor is constrained to
   the edges of the screen, but see the virtual input mouse mode for a way
   around this. Virtual input mode is described at the top of the page.

   .. ## pygame.mouse.get_rel ##

.. function:: set_pos

   | :sl:`set the mouse cursor position`
   | :sg:`set_pos([x, y]) -> None`

   Set the current mouse position to arguments given. If the mouse cursor is
   visible it will jump to the new coordinates. Moving the mouse will generate
   a new ``pygame.MOUSEMOTION`` event.

   .. ## pygame.mouse.set_pos ##

.. function:: set_visible

   | :sl:`hide or show the mouse cursor`
   | :sg:`set_visible(bool) -> bool`

   If the bool argument is true, the mouse cursor will be visible. This will
   return the previous visible state of the cursor.

   .. ## pygame.mouse.set_visible ##

.. function:: get_visible

   | :sl:`get the current visibility state of the mouse cursor`
   | :sg:`get_visible() -> bool`

   Get the current visibility state of the mouse cursor. ``True`` if the mouse is
   visible, ``False`` otherwise.

   .. versionadded:: 2.0.0

   .. ## pygame.mouse.get_visible ##

.. function:: get_focused

   | :sl:`check if the display is receiving mouse input`
   | :sg:`get_focused() -> bool`

   Returns true when pygame is receiving mouse input events (or, in windowing
   terminology, is "active" or has the "focus").

   This method is most useful when working in a window. By contrast, in
   full-screen mode, this method always returns true.

   Note: under ``MS`` Windows, the window that has the mouse focus also has the
   keyboard focus. But under X-Windows, one window can receive mouse events and
   another receive keyboard events. ``pygame.mouse.get_focused()`` indicates
   whether the pygame window receives mouse events.

   .. ## pygame.mouse.get_focused ##

.. function:: set_cursor

   | :sl:`set the mouse cursor to a new cursor`
   | :sg:`set_cursor(pygame.cursors.Cursor) -> None`
   | :sg:`set_cursor(size, hotspot, xormasks, andmasks) -> None`
   | :sg:`set_cursor(hotspot, surface) -> None`
   | :sg:`set_cursor(constant) -> None`

   Set the mouse cursor to something new. This function accepts either an explicit
   ``Cursor`` object or arguments to create a ``Cursor`` object.

   See :class:`pygame.cursors.Cursor` for help creating cursors and for examples.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.set_cursor ##


.. function:: get_cursor

   | :sl:`get the current mouse cursor`
   | :sg:`get_cursor() -> pygame.cursors.Cursor`

   Get the information about the mouse system cursor. The return value contains
   the same data as the arguments passed into :func:`pygame.mouse.set_cursor()`.

   .. note:: Code that unpacked a get_cursor() call into 
             ``size, hotspot, xormasks, andmasks`` will still work,
	     assuming the call returns an old school type cursor.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.get_cursor ##

.. ## pygame.mouse ##


--- Contenu du fichier : mixer.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer`
===================

.. module:: pygame.mixer
   :synopsis: pygame module for loading and playing sounds

| :sl:`pygame module for loading and playing sounds`

This module contains classes for loading Sound objects and controlling
playback. The mixer module is optional and depends on SDL_mixer. Your program
should test that :mod:`pygame.mixer` is available and initialized before using
it.

The mixer module has a limited number of channels for playback of sounds.
Usually programs tell pygame to start playing audio and it selects an available
channel automatically. The default is 8 simultaneous channels, but complex
programs can get more precise control over the number of channels and their
use.

All sound playback is mixed in background threads. When you begin to play a
Sound object, it will return immediately while the sound continues to play. A
single Sound object can also be actively played back multiple times.

The mixer also has a special streaming channel. This is for music playback and
is accessed through the :mod:`pygame.mixer.music` module. Consider using this
module for playing long running music. Unlike mixer module, the music module
streams the music from the files without loading music at once into memory.

The mixer module must be initialized like other pygame modules, but it has some
extra conditions. The ``pygame.mixer.init()`` function takes several optional
arguments to control the playback rate and sample size. Pygame will default to
reasonable values, but pygame cannot perform Sound resampling, so the mixer
should be initialized to match the values of your audio resources.

``NOTE``: For less laggy sound use a smaller buffer size. The default
is set to reduce the chance of scratchy sounds on some computers. You can
change the default buffer by calling :func:`pygame.mixer.pre_init` before
:func:`pygame.mixer.init` or :func:`pygame.init` is called. For example:
``pygame.mixer.pre_init(44100,-16,2, 1024)``


.. function:: init

   | :sl:`initialize the mixer module`
   | :sg:`init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Initialize the mixer module for Sound loading and playback. The default
   arguments can be overridden to provide specific audio mixing. Keyword
   arguments are accepted. For backwards compatibility, argument values of 
   0 are replaced with the startup defaults, except for ``allowedchanges``,
   where -1 is used. (startup defaults may be changed by a :func:`pre_init` call).

   The size argument represents how many bits are used for each audio sample.
   If the value is negative then signed sample values will be used. Positive
   values mean unsigned audio samples will be used. An invalid value raises an
   exception.

   The channels argument is used to specify whether to use mono or stereo. 1
   for mono and 2 for stereo.

   The buffer argument controls the number of internal samples used in the
   sound mixer. The default value should work for most cases. It can be lowered
   to reduce latency, but sound dropout may occur. It can be raised to larger
   values to ensure playback never skips, but it will impose latency on sound
   playback. The buffer size must be a power of two (if not it is rounded up to
   the next nearest power of 2).

   Some platforms require the :mod:`pygame.mixer` module to be initialized
   after the display modules have initialized. The top level ``pygame.init()``
   takes care of this automatically, but cannot pass any arguments to the mixer
   init. To solve this, mixer has a function ``pygame.mixer.pre_init()`` to set
   the proper defaults before the toplevel init is used.

   When using allowedchanges=0 it will convert the samples at runtime to match
   what the hardware supports. For example a sound card may not
   support 16bit sound samples, so instead it will use 8bit samples internally.
   If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will
   change to the closest that SDL2 supports.

   Apart from 0, allowedchanged accepts the following constants ORed together:

      - AUDIO_ALLOW_FREQUENCY_CHANGE
      - AUDIO_ALLOW_FORMAT_CHANGE
      - AUDIO_ALLOW_CHANNELS_CHANGE
      - AUDIO_ALLOW_ANY_CHANGE

   It is safe to call this more than once, but after the mixer is initialized
   you cannot change the playback arguments without first calling
   ``pygame.mixer.quit()``.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionchanged:: 2.0.0 ``size`` can be 32 (32-bit floats).
   .. versionchanged:: 2.0.0 ``channels`` can also be 4 or 6.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.init ##

.. function:: pre_init

   | :sl:`preset the mixer init arguments`
   | :sg:`pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Call pre_init to change the defaults used when the real
   ``pygame.mixer.init()`` is called. Keyword arguments are accepted. The best
   way to set custom mixer playback values is to call
   ``pygame.mixer.pre_init()`` before calling the top level ``pygame.init()``.
   For backwards compatibility, argument values of 0 are replaced with the
   startup defaults, except for ``allowedchanges``, where -1 is used.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.pre_init ##

.. function:: quit

   | :sl:`uninitialize the mixer`
   | :sg:`quit() -> None`

   This will uninitialize :mod:`pygame.mixer`. All playback will stop and any
   loaded Sound objects may not be compatible with the mixer if it is
   reinitialized later.

   .. ## pygame.mixer.quit ##

.. function:: get_init

   | :sl:`test if the mixer is initialized`
   | :sg:`get_init() -> (frequency, format, channels)`

   If the mixer is initialized, this returns the playback arguments it is
   using. If the mixer has not been initialized this returns ``None``.

   .. ## pygame.mixer.get_init ##

.. function:: stop

   | :sl:`stop playback of all sound channels`
   | :sg:`stop() -> None`

   This will stop all playback of all active mixer channels.

   .. ## pygame.mixer.stop ##

.. function:: pause

   | :sl:`temporarily stop playback of all sound channels`
   | :sg:`pause() -> None`

   This will temporarily stop all playback on the active mixer channels. The
   playback can later be resumed with ``pygame.mixer.unpause()``

   .. ## pygame.mixer.pause ##

.. function:: unpause

   | :sl:`resume paused playback of sound channels`
   | :sg:`unpause() -> None`

   This will resume all active sound channels after they have been paused.

   .. ## pygame.mixer.unpause ##

.. function:: fadeout

   | :sl:`fade out the volume on all sounds before stopping`
   | :sg:`fadeout(time) -> None`

   This will fade out the volume on all active channels over the time argument
   in milliseconds. After the sound is muted the playback will stop.

   .. ## pygame.mixer.fadeout ##

.. function:: set_num_channels

   | :sl:`set the total number of playback channels`
   | :sg:`set_num_channels(count) -> None`

   Sets the number of available channels for the mixer. The default value is 8.
   The value can be increased or decreased. If the value is decreased, sounds
   playing on the truncated channels are stopped.

   .. ## pygame.mixer.set_num_channels ##

.. function:: get_num_channels

   | :sl:`get the total number of playback channels`
   | :sg:`get_num_channels() -> count`

   Returns the number of currently active playback channels.

   .. ## pygame.mixer.get_num_channels ##

.. function:: set_reserved

   | :sl:`reserve channels from being automatically used`
   | :sg:`set_reserved(count) -> count`

   The mixer can reserve any number of channels that will not be automatically
   selected for playback by Sounds. This means that whenever you play a Sound 
   without specifying a channel, a reserved channel will never be used. If sounds
   are currently playing on the reserved channels they will not be stopped.

   This allows the application to reserve a specific number of channels for
   important sounds that must not be dropped or have a guaranteed channel to
   play on.

   Will return number of channels actually reserved, this may be less than requested
   depending on the number of channels previously allocated.

   .. ## pygame.mixer.set_reserved ##

.. function:: find_channel

   | :sl:`find an unused channel`
   | :sg:`find_channel(force=False) -> Channel`

   This will find and return an inactive Channel object. If there are no
   inactive Channels this function will return ``None``. If there are no
   inactive channels and the force argument is ``True``, this will find the
   Channel with the longest running Sound and return it.

   .. ## pygame.mixer.find_channel ##

.. function:: get_busy

   | :sl:`test if any sound is being mixed`
   | :sg:`get_busy() -> bool`

   Returns ``True`` if the mixer is busy mixing any channels. If the mixer is
   idle then this return ``False``.

   .. ## pygame.mixer.get_busy ##

.. function:: get_sdl_mixer_version

   | :sl:`get the mixer's SDL version`
   | :sg:`get_sdl_mixer_version() -> (major, minor, patch)`
   | :sg:`get_sdl_mixer_version(linked=True) -> (major, minor, patch)`

   :param bool linked: if ``True`` (default) the linked version number is
      returned, otherwise the compiled version number is returned

   :returns: the mixer's SDL library version number (linked or compiled
      depending on the ``linked`` parameter) as a tuple of 3 integers
      ``(major, minor, patch)``
   :rtype: tuple

   .. note::
      The linked and compile version numbers should be the same.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.get_sdl_mixer_version ##

.. class:: Sound

   | :sl:`Create a new Sound object from a file or buffer object`
   | :sg:`Sound(filename) -> Sound`
   | :sg:`Sound(file=filename) -> Sound`
   | :sg:`Sound(file=pathlib_path) -> Sound`
   | :sg:`Sound(buffer) -> Sound`
   | :sg:`Sound(buffer=buffer) -> Sound`
   | :sg:`Sound(object) -> Sound`
   | :sg:`Sound(file=object) -> Sound`
   | :sg:`Sound(array=object) -> Sound`

   Load a new sound buffer from a filename, a python file object or a readable
   buffer object. Limited resampling will be performed to help the sample match
   the initialize arguments for the mixer. A Unicode string can only be a file
   pathname. A bytes object can be either a pathname or a buffer object.
   Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may
   guess wrong. If the array keyword is used, the object is expected to export 
   a new buffer interface (The object is checked for a buffer interface first.)

   The Sound object represents actual sound sample data. Methods that change
   the state of the Sound object will the all instances of the Sound playback.
   A Sound object also exports a new buffer interface.

   The Sound can be loaded from an ``OGG`` audio file or from an uncompressed
   ``WAV``.

   Note: The buffer will be copied internally, no data will be shared between
   it and the Sound object.

   For now buffer and array support is consistent with ``sndarray.make_sound``
   for NumPy arrays, in that sample sign and byte order are ignored. This
   will change, either by correctly handling sign and byte order, or by raising
   an exception when different. Also, source samples are truncated to fit the
   audio sample size. This will not change.

   .. versionadded:: 1.8 ``pygame.mixer.Sound(buffer)``
   .. versionadded:: 1.9.2
      :class:`pygame.mixer.Sound` keyword arguments and array interface support
   .. versionadded:: 2.0.1 pathlib.Path support on Python 3.

   .. method:: play

      | :sl:`begin sound playback`
      | :sg:`play(loops=0, maxtime=0, fade_ms=0) -> Channel`

      Begin playback of the Sound (i.e., on the computer's speakers) on an
      available Channel. This will forcibly select a Channel, so playback may
      cut off a currently playing sound if necessary.

      The loops argument controls how many times the sample will be repeated
      after being played the first time. A value of 5 means that the sound will
      be played once, then repeated five times, and so is played a total of six
      times. The default value (zero) means the Sound is not repeated, and so
      is only played once. If loops is set to -1 the Sound will loop
      indefinitely (though you can still call ``stop()`` to stop it).

      The maxtime argument can be used to stop playback after a given number of
      milliseconds.

      The fade_ms argument will make the sound start playing at 0 volume and
      fade up to full volume over the time given. The sample may end before the
      fade-in is complete.

      This returns the Channel object for the channel that was selected.

      .. ## Sound.play ##

   .. method:: stop

      | :sl:`stop sound playback`
      | :sg:`stop() -> None`

      This will stop the playback of this Sound on any active Channels.

      .. ## Sound.stop ##

   .. method:: fadeout

      | :sl:`stop sound playback after fading out`
      | :sg:`fadeout(time) -> None`

      This will stop playback of the sound after fading it out over the time
      argument in milliseconds. The Sound will fade and stop on all actively
      playing channels.

      .. ## Sound.fadeout ##

   .. method:: set_volume

      | :sl:`set the playback volume for this Sound`
      | :sg:`set_volume(value) -> None`

      This will set the playback volume (loudness) for this Sound. This will
      immediately affect the Sound if it is playing. It will also affect any
      future playback of this Sound.

      :param float value: volume in the range of 0.0 to 1.0 (inclusive)

         | If value < 0.0, the volume will not be changed
         | If value > 1.0, the volume will be set to 1.0

      .. ## Sound.set_volume ##

   .. method:: get_volume

      | :sl:`get the playback volume`
      | :sg:`get_volume() -> value`

      Return a value from 0.0 to 1.0 representing the volume for this Sound.

      .. ## Sound.get_volume ##

   .. method:: get_num_channels

      | :sl:`count how many times this Sound is playing`
      | :sg:`get_num_channels() -> count`

      Return the number of active channels this sound is playing on.

      .. ## Sound.get_num_channels ##

   .. method:: get_length

      | :sl:`get the length of the Sound`
      | :sg:`get_length() -> seconds`

      Return the length of this Sound in seconds.

      .. ## Sound.get_length ##

   .. method:: get_raw

      | :sl:`return a bytestring copy of the Sound samples.`
      | :sg:`get_raw() -> bytes`

      Return a copy of the Sound object buffer as a bytes.

      .. versionadded:: 1.9.2

      .. ## Sound.get_raw ##

   .. ## pygame.mixer.Sound ##

.. class:: Channel

   | :sl:`Create a Channel object for controlling playback`
   | :sg:`Channel(id) -> Channel`

   Return a Channel object for one of the current channels. The id must be a
   value from 0 to the value of ``pygame.mixer.get_num_channels()``.

   The Channel object can be used to get fine control over the playback of
   Sounds. A channel can only playback a single Sound at time. Using channels
   is entirely optional since pygame can manage them by default.

   .. method:: play

      | :sl:`play a Sound on a specific Channel`
      | :sg:`play(Sound, loops=0, maxtime=0, fade_ms=0) -> None`

      This will begin playback of a Sound on a specific Channel. If the Channel
      is currently playing any other Sound it will be stopped.

      The loops argument has the same meaning as in ``Sound.play()``: it is the
      number of times to repeat the sound after the first time. If it is 3, the
      sound will be played 4 times (the first time, then three more). If loops
      is -1 then the playback will repeat indefinitely.

      As in ``Sound.play()``, the maxtime argument can be used to stop playback
      of the Sound after a given number of milliseconds.

      As in ``Sound.play()``, the fade_ms argument can be used fade in the
      sound.

      .. ## Channel.play ##

   .. method:: stop

      | :sl:`stop playback on a Channel`
      | :sg:`stop() -> None`

      Stop sound playback on a channel. After playback is stopped the channel
      becomes available for new Sounds to play on it.

      .. ## Channel.stop ##

   .. method:: pause

      | :sl:`temporarily stop playback of a channel`
      | :sg:`pause() -> None`

      Temporarily stop the playback of sound on a channel. It can be resumed at
      a later time with ``Channel.unpause()``

      .. ## Channel.pause ##

   .. method:: unpause

      | :sl:`resume pause playback of a channel`
      | :sg:`unpause() -> None`

      Resume the playback on a paused channel.

      .. ## Channel.unpause ##

   .. method:: fadeout

      | :sl:`stop playback after fading channel out`
      | :sg:`fadeout(time) -> None`

      Stop playback of a channel after fading out the sound over the given time
      argument in milliseconds.

      .. ## Channel.fadeout ##

   .. method:: set_volume

      | :sl:`set the volume of a playing channel`
      | :sg:`set_volume(value) -> None`
      | :sg:`set_volume(left, right) -> None`

      Set the volume (loudness) of a playing sound. When a channel starts to
      play its volume value is reset. This only affects the current sound. The
      value argument is between 0.0 and 1.0.

      If one argument is passed, it will be the volume of both speakers. If two
      arguments are passed and the mixer is in stereo mode, the first argument
      will be the volume of the left speaker and the second will be the volume
      of the right speaker. (If the second argument is ``None``, the first
      argument will be the volume of both speakers.)

      If the channel is playing a Sound on which ``set_volume()`` has also been
      called, both calls are taken into account. For example:

      ::

          sound = pygame.mixer.Sound("s.wav")
          channel = s.play()      # Sound plays at full volume by default
          sound.set_volume(0.9)   # Now plays at 90% of full volume.
          sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
          channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).

      .. ## Channel.set_volume ##

   .. method:: get_volume

      | :sl:`get the volume of the playing channel`
      | :sg:`get_volume() -> value`

      Return the volume of the channel for the current playing sound. This does
      not take into account stereo separation used by
      :meth:`Channel.set_volume`. The Sound object also has its own volume
      which is mixed with the channel.

      .. ## Channel.get_volume ##

   .. method:: get_busy

      | :sl:`check if the channel is active`
      | :sg:`get_busy() -> bool`

      Returns ``True`` if the channel is actively mixing sound. If the channel
      is idle this returns ``False``.

      .. ## Channel.get_busy ##

   .. method:: get_sound

      | :sl:`get the currently playing Sound`
      | :sg:`get_sound() -> Sound`

      Return the actual Sound object currently playing on this channel. If the
      channel is idle ``None`` is returned.

      .. ## Channel.get_sound ##

   .. method:: queue

      | :sl:`queue a Sound object to follow the current`
      | :sg:`queue(Sound) -> None`

      When a Sound is queued on a Channel, it will begin playing immediately
      after the current Sound is finished. Each channel can only have a single
      Sound queued at a time. The queued Sound will only play if the current
      playback finished automatically. It is cleared on any other call to
      ``Channel.stop()`` or ``Channel.play()``.

      If there is no sound actively playing on the Channel then the Sound will
      begin playing immediately.

      .. ## Channel.queue ##

   .. method:: get_queue

      | :sl:`return any Sound that is queued`
      | :sg:`get_queue() -> Sound`

      If a Sound is already queued on this channel it will be returned. Once
      the queued sound begins playback it will no longer be on the queue.

      .. ## Channel.get_queue ##

   .. method:: set_endevent

      | :sl:`have the channel send an event when playback stops`
      | :sg:`set_endevent() -> None`
      | :sg:`set_endevent(type) -> None`

      When an endevent is set for a channel, it will send an event to the
      pygame queue every time a sound finishes playing on that channel (not
      just the first time). Use ``pygame.event.get()`` to retrieve the endevent
      once it's sent.

      Note that if you called ``Sound.play(n)`` or ``Channel.play(sound,n)``,
      the end event is sent only once: after the sound has been played "n+1"
      times (see the documentation of Sound.play).

      If ``Channel.stop()`` or ``Channel.play()`` is called while the sound was
      still playing, the event will be posted immediately.

      The type argument will be the event id sent to the queue. This can be any
      valid event type, but a good choice would be a value between
      ``pygame.locals.USEREVENT`` and ``pygame.locals.NUMEVENTS``. If no type
      argument is given then the Channel will stop sending endevents.

      .. ## Channel.set_endevent ##

   .. method:: get_endevent

      | :sl:`get the event a channel sends when playback stops`
      | :sg:`get_endevent() -> type`

      Returns the event type to be sent every time the Channel finishes
      playback of a Sound. If there is no endevent the function returns
      ``pygame.NOEVENT``.

      .. ## Channel.get_endevent ##

   .. ## pygame.mixer.Channel ##

.. ## pygame.mixer ##


--- Contenu du fichier : music.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer.music`
=========================

.. module:: pygame.mixer.music
   :synopsis: pygame module for controlling streamed audio

| :sl:`pygame module for controlling streamed audio`

The music module is closely tied to :mod:`pygame.mixer`. Use the music module
to control the playback of music in the sound mixer.

The difference between the music playback and regular Sound playback is that
the music is streamed, and never actually loaded all at once. The mixer system
only supports a single music stream at once.

On older pygame versions, ``MP3`` support was limited under Mac and Linux. This
changed in pygame ``v2.0.2`` which got improved MP3 support. Consider using
``OGG`` file format for music as that can give slightly better compression than
MP3 in most cases.

.. function:: load

   | :sl:`Load a music file for playback`
   | :sg:`load(filename) -> None`
   | :sg:`load(fileobj, namehint="") -> None`

   This will load a music filename/file object and prepare it for playback. If
   a music stream is already playing it will be stopped. This does not start
   the music playing.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`load(fileobj, "ogg")`.

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.load ##

.. function:: unload

   | :sl:`Unload the currently loaded music to free up resources`
   | :sg:`unload() -> None`

   This closes resources like files for any music that may be loaded.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.music.load ##


.. function:: play

   | :sl:`Start the playback of the music stream`
   | :sg:`play(loops=0, start=0.0, fade_ms=0) -> None`

   This will play the loaded music stream. If the music is already playing it
   will be restarted.
   
   ``loops`` is an optional integer argument, which is ``0`` by default, which 
   indicates how many times to repeat the music. The music repeats indefinitely if 
   this argument is set to ``-1``. 
   
   ``start`` is an optional float argument, which is ``0.0`` by default, which 
   denotes the position in time from which the music starts playing. The starting 
   position depends on the format of the music played. ``MP3`` and ``OGG`` use 
   the position as time in seconds. For ``MP3`` files the start time position
   selected may not be accurate as things like variable bit rate encoding and ID3
   tags can throw off the timing calculations. For ``MOD``  music it is the pattern 
   order number. Passing a start position will raise a NotImplementedError if 
   the start position cannot be set.

   ``fade_ms`` is an optional integer argument, which is ``0`` by default,
   which denotes the period of time (in milliseconds) over which the music
   will fade up from volume level ``0.0`` to full volume (or the volume level
   previously set by :func:`set_volume`). The sample may end before the fade-in
   is complete. If the music is already streaming ``fade_ms`` is ignored.
   
   .. versionchanged:: 2.0.0 Added optional ``fade_ms`` argument

   .. ## pygame.mixer.music.play ##

.. function:: rewind

   | :sl:`restart music`
   | :sg:`rewind() -> None`

   Resets playback of the current music to the beginning. If :func:`pause` has
   previously been used to pause the music, the music will remain paused.
   
   .. note:: :func:`rewind` supports a limited number of file types and notably
             ``WAV`` files are NOT supported. For unsupported file types use :func:`play`
             which will restart the music that's already playing (note that this
             will start the music playing again even if previously paused).

   .. ## pygame.mixer.music.rewind ##

.. function:: stop

   | :sl:`stop the music playback`
   | :sg:`stop() -> None`

   Stops the music playback if it is currently playing.
   endevent will be triggered, if set.
   It won't unload the music.

   .. ## pygame.mixer.music.stop ##

.. function:: pause

   | :sl:`temporarily stop music playback`
   | :sg:`pause() -> None`

   Temporarily stop playback of the music stream. It can be resumed with the
   :func:`unpause` function.

   .. ## pygame.mixer.music.pause ##

.. function:: unpause

   | :sl:`resume paused music`
   | :sg:`unpause() -> None`

   This will resume the playback of a music stream after it has been paused.

   .. ## pygame.mixer.music.unpause ##

.. function:: fadeout

   | :sl:`stop music playback after fading out`
   | :sg:`fadeout(time) -> None`

   Fade out and stop the currently playing music.

   The ``time`` argument denotes the integer milliseconds for which the 
   fading effect is generated.

   Note, that this function blocks until the music has faded out. Calls 
   to :func:`fadeout` and :func:`set_volume` will have no effect during 
   this time. If an event was set using :func:`set_endevent` it will be 
   called after the music has faded.

   .. ## pygame.mixer.music.fadeout ##

.. function:: set_volume

   | :sl:`set the music volume`
   | :sg:`set_volume(volume) -> None`

   Set the volume of the music playback.
   
   The ``volume`` argument is a float between ``0.0`` and ``1.0`` that sets 
   the volume level. When new music is loaded the volume is reset to full
   volume. If ``volume`` is a negative value it will be ignored and the
   volume will remain set at the current level. If the ``volume`` argument
   is greater than ``1.0``, the volume will be set to ``1.0``.

   .. ## pygame.mixer.music.set_volume ##

.. function:: get_volume

   | :sl:`get the music volume`
   | :sg:`get_volume() -> value`

   Returns the current volume for the mixer. The value will be between ``0.0`` 
   and ``1.0``.

   .. ## pygame.mixer.music.get_volume ##

.. function:: get_busy

   | :sl:`check if the music stream is playing`
   | :sg:`get_busy() -> bool`

   Returns True when the music stream is actively playing. When the music is
   idle this returns False. In pygame 2.0.1 and above this function returns
   False when the music is paused. In pygame 1 it returns True when the music
   is paused.

   .. versionchanged:: 2.0.1 Returns False when music paused.

   .. ## pygame.mixer.music.get_busy ##

.. function:: set_pos

   | :sl:`set position to play from`
   | :sg:`set_pos(pos) -> None`

   This sets the position in the music file where playback will start.
   The meaning of "pos", a float (or a number that can be converted to a float),
   depends on the music format.
   
   For ``MOD`` files, pos is the integer pattern number in the module.
   For ``OGG`` it is the absolute position, in seconds, from
   the beginning of the sound. For ``MP3`` files, it is the relative position,
   in seconds, from the current position. For absolute positioning in an ``MP3``
   file, first call :func:`rewind`.

   Other file formats are unsupported. Newer versions of SDL_mixer have
   better positioning support than earlier ones. An SDLError is raised if a
   particular format does not support positioning.

   Function :func:`set_pos` calls underlining SDL_mixer function
   ``Mix_SetMusicPosition``.

   .. versionadded:: 1.9.2

   .. ## pygame.mixer.music.set_pos ##

.. function:: get_pos

   | :sl:`get the music play time`
   | :sg:`get_pos() -> time`

   This gets the number of milliseconds that the music has been playing for.
   The returned time only represents how long the music has been playing; it
   does not take into account any starting position offsets.

   .. ## pygame.mixer.music.get_pos ##

.. function:: queue

   | :sl:`queue a sound file to follow the current`
   | :sg:`queue(filename) -> None`
   | :sg:`queue(fileobj, namehint="", loops=0) -> None`

   This will load a sound file and queue it. A queued sound file will begin as
   soon as the current sound naturally ends. Only one sound can be queued at a
   time. Queuing a new sound while another sound is queued will result in the
   new sound becoming the queued sound. Also, if the current sound is ever
   stopped or changed, the queued sound will be lost.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`queue(fileobj, "ogg")`.

   The following example will play music by Bach six times, then play music by
   Mozart once:

   ::

       pygame.mixer.music.load('bach.ogg')
       pygame.mixer.music.play(5)        # Plays six times, not five!
       pygame.mixer.music.queue('mozart.ogg')

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.queue ##

.. function:: set_endevent

   | :sl:`have the music send an event when playback stops`
   | :sg:`set_endevent() -> None`
   | :sg:`set_endevent(type) -> None`

   This causes pygame to signal (by means of the event queue) when the music is
   done playing. The argument determines the type of event that will be queued.

   The event will be queued every time the music finishes, not just the first
   time. To stop the event from being queued, call this method with no
   argument.

   .. ## pygame.mixer.music.set_endevent ##

.. function:: get_endevent

   | :sl:`get the event a channel sends when playback stops`
   | :sg:`get_endevent() -> type`

   Returns the event type to be sent every time the music finishes playback. If
   there is no endevent the function returns ``pygame.NOEVENT``.

   .. ## pygame.mixer.music.get_endevent ##

.. ## pygame.mixer.music ##


--- Contenu du fichier : sndarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.sndarray`
======================

.. module:: pygame.sndarray
   :synopsis: pygame module for accessing sound sample data

| :sl:`pygame module for accessing sound sample data`

Functions to convert between NumPy arrays and Sound objects. This
module will only be functional when pygame can use the external NumPy
package. If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule``
object.

Sound data is made of thousands of samples per second, and each sample is the
amplitude of the wave at a particular moment in time. For example, in 22-kHz
format, element number 5 of the array is the amplitude of the wave after
5/22000 seconds.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Each sample is an 8-bit or 16-bit integer, depending on the data format. A
stereo sound file has two values per sample, while a mono sound file only has
one.

.. function:: array

   | :sl:`copy Sound samples into an array`
   | :sg:`array(Sound) -> array`

   Creates a new array for the sound data and copies the samples. The array
   will always be in the format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.array ##

.. function:: samples

   | :sl:`reference Sound samples into an array`
   | :sg:`samples(Sound) -> array`

   Creates a new array that directly references the samples in a Sound object.
   Modifying the array will change the Sound. The array will always be in the
   format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.samples ##

.. function:: make_sound

   | :sl:`convert an array into a Sound object`
   | :sg:`make_sound(array) -> Sound`

   Create a new playable Sound object from an array. The mixer module must be
   initialized and the array format must be similar to the mixer audio format.

   .. ## pygame.sndarray.make_sound ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for sound arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions. The
   only supported arraytype is ``'numpy'``. Other values will raise ValueError.
   Using this function will raise a ``DeprecationWarning``.
   .. ## pygame.sndarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.sndarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytypes ##

.. ## pygame.sndarray ##


--- Contenu du fichier : time.rst.txt ---
.. include:: common.txt

:mod:`pygame.time`
==================

.. module:: pygame.time
   :synopsis: pygame module for monitoring time

| :sl:`pygame module for monitoring time`

Times in pygame are represented in milliseconds (1/1000 seconds). Most
platforms have a limited time resolution of around 10 milliseconds. This
resolution, in milliseconds, is given in the ``TIMER_RESOLUTION`` constant.

.. function:: get_ticks

   | :sl:`get the time in milliseconds`
   | :sg:`get_ticks() -> milliseconds`

   Return the number of milliseconds since ``pygame.init()`` was called. Before
   pygame is initialized this will always be 0.

   .. ## pygame.time.get_ticks ##

.. function:: wait

   | :sl:`pause the program for an amount of time`
   | :sg:`wait(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function sleeps the
   process to share the processor with other programs. A program that waits for
   even a few milliseconds will consume very little processor time. It is
   slightly less accurate than the ``pygame.time.delay()`` function.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.wait ##

.. function:: delay

   | :sl:`pause the program for an amount of time`
   | :sg:`delay(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function will use the
   processor (rather than sleeping) in order to make the delay more accurate
   than ``pygame.time.wait()``.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.delay ##

.. function:: set_timer

   | :sl:`repeatedly create an event on the event queue`
   | :sg:`set_timer(event, millis) -> None`
   | :sg:`set_timer(event, millis, loops=0) -> None`

   Set an event to appear on the event queue every given number of milliseconds.
   The first event will not appear until the amount of time has passed.

   The ``event`` attribute can be a ``pygame.event.Event`` object or an integer
   type that denotes an event.

   ``loops`` is an integer that denotes the number of events posted. If 0 (default)
   then the events will keep getting posted, unless explicitly stopped.

   To disable the timer for such an event, call the function again with the same
   event argument with ``millis`` argument set to 0.

   It is also worth mentioning that a particular event type can only be put on a
   timer once. In other words, there cannot be two timers for the same event type.
   Setting an event timer for a particular event discards the old one for that
   event type.

   ``loops`` replaces the ``once`` argument, and this does not break backward
   compatibility

   .. versionadded:: 2.0.0.dev3 once argument added.
   .. versionchanged:: 2.0.1 event argument supports ``pygame.event.Event`` object
   .. versionadded:: 2.0.1 added loops argument to replace once argument

   .. ## pygame.time.set_timer ##

.. class:: Clock

   | :sl:`create an object to help track time`
   | :sg:`Clock() -> Clock`

   Creates a new Clock object that can be used to track an amount of time. The
   clock also provides several functions to help control a game's framerate.

   .. method:: tick

      | :sl:`update the clock`
      | :sg:`tick(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick(40)`` once per frame, the program will never run at more
      than 40 frames per second.

      Note that this function uses SDL_Delay function which is not accurate on
      every platform, but does not use much CPU. Use tick_busy_loop if you want
      an accurate timer, and don't mind chewing CPU.

      .. ## Clock.tick ##

   .. method:: tick_busy_loop

      | :sl:`update the clock`
      | :sg:`tick_busy_loop(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick_busy_loop(40)`` once per frame, the program will never run at
      more than 40 frames per second.

      Note that this function uses :func:`pygame.time.delay`, which uses lots
      of CPU in a busy loop to make sure that timing is more accurate.

      .. versionadded:: 1.8

      .. ## Clock.tick_busy_loop ##

   .. method:: get_time

      | :sl:`time used in the previous tick`
      | :sg:`get_time() -> milliseconds`

      The number of milliseconds that passed between the previous two calls to
      ``Clock.tick()``.

      .. ## Clock.get_time ##

   .. method:: get_rawtime

      | :sl:`actual time used in the previous tick`
      | :sg:`get_rawtime() -> milliseconds`

      Similar to ``Clock.get_time()``, but does not include any time used
      while ``Clock.tick()`` was delaying to limit the framerate.

      .. ## Clock.get_rawtime ##

   .. method:: get_fps

      | :sl:`compute the clock framerate`
      | :sg:`get_fps() -> float`

      Compute your game's framerate (in frames per second). It is computed by
      averaging the last ten calls to ``Clock.tick()``.

      .. ## Clock.get_fps ##

   .. ## pygame.time.Clock ##

.. ## pygame.time ##


--- Contenu du fichier : surfarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.surfarray`
=======================

.. module:: pygame.surfarray
   :synopsis: pygame module for accessing surface pixel data using array interfaces

| :sl:`pygame module for accessing surface pixel data using array interfaces`

Functions to convert between NumPy arrays and Surface objects. This module
will only be functional when pygame can use the external NumPy package.
If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule`` object.

Every pixel is stored as a single integer value to represent the red, green,
and blue colors. The 8-bit images use a value that looks into a colormap. Pixels
with higher depth use a bit packing process to place three or four values into
a single number.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Arrays that treat the pixels as a single integer are referred to as 2D arrays.
This module can also separate the red, green, and blue color values into
separate indices. These types of arrays are referred to as 3D arrays, and the
last index is 0 for red, 1 for green, and 2 for blue.

The pixels of a 2D array as returned by :func:`array2d` and :func:`pixels2d`
are mapped to the specific surface. Use :meth:`pygame.Surface.unmap_rgb`
to convert to a color, and :meth:`pygame.Surface.map_rgb` to get the surface
specific pixel value of a color. Integer pixel values can only be used directly
between surfaces with matching pixel layouts (see :class:`pygame.Surface`).

All functions that refer to "array" will copy the surface information to a new
numpy array. All functions that refer to "pixels" will directly reference the
pixels from the surface and any changes performed to the array will make changes
in the surface. As this last functions share memory with the surface, this one
will be locked during the lifetime of the array.

.. function:: array2d

   | :sl:`Copy pixels into a 2d array`
   | :sg:`array2d(Surface) -> array`

   Copy the :meth:`mapped <pygame.Surface.map_rgb>` (raw) pixels from a Surface
   into a 2D array.
   The bit depth of the surface will control the size of the integer values,
   and will work for any type of pixel format.

   This function will temporarily lock the Surface as pixels are copied
   (see the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array2d ##

.. function:: pixels2d

   | :sl:`Reference pixels into a 2d array`
   | :sg:`pixels2d(Surface) -> array`

   Create a new 2D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit
   depths can.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels2d ##

.. function:: array3d

   | :sl:`Copy pixels into a 3d array`
   | :sg:`array3d(Surface) -> array`

   Copy the pixels from a Surface into a 3D array. The bit depth of the surface
   will control the size of the integer values, and will work for any type of
   pixel format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array3d ##

.. function:: pixels3d

   | :sl:`Reference pixels into a 3d array`
   | :sg:`pixels3d(Surface) -> array`

   Create a new 3D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This will only work on Surfaces that have 24-bit or 32-bit formats. Lower
   pixel formats cannot be referenced.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels3d ##

.. function:: array_alpha

   | :sl:`Copy pixel alphas into a 2d array`
   | :sg:`array_alpha(Surface) -> array`

   Copy the pixel alpha values (degree of transparency) from a Surface into a
   2D array. This will work for any type of Surface format. Surfaces without a
   pixel alpha will return an array with all opaque values.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array_alpha ##

.. function:: pixels_alpha

   | :sl:`Reference pixel alphas into a 2d array`
   | :sg:`pixels_alpha(Surface) -> array`

   Create a new 2D array that directly references the alpha values (degree of
   transparency) in a Surface. Any changes to the array will affect the pixels
   in the Surface. This is a fast operation since no data is copied.

   This can only work on 32-bit Surfaces with a per-pixel alpha value.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_alpha ##

.. function:: array_red

   | :sl:`Copy red pixels into a 2d array`
   | :sg:`array_red(Surface) -> array`

   Copy the pixel red values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_red ##

.. function:: pixels_red

   | :sl:`Reference pixel red into a 2d array.`
   | :sg:`pixels_red (Surface) -> array`

   Create a new 2D array that directly references the red values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_red ##

.. function:: array_green

   | :sl:`Copy green pixels into a 2d array`
   | :sg:`array_green(Surface) -> array`

   Copy the pixel green values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_green ##

.. function:: pixels_green

   | :sl:`Reference pixel green into a 2d array.`
   | :sg:`pixels_green (Surface) -> array`

   Create a new 2D array that directly references the green values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_green ##

.. function:: array_blue

   | :sl:`Copy blue pixels into a 2d array`
   | :sg:`array_blue(Surface) -> array`

   Copy the pixel blue values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_blue ##

.. function:: pixels_blue

   | :sl:`Reference pixel blue into a 2d array.`
   | :sg:`pixels_blue (Surface) -> array`

   Create a new 2D array that directly references the blue values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_blue ##

.. function:: array_colorkey

   | :sl:`Copy the colorkey values into a 2d array`
   | :sg:`array_colorkey(Surface) -> array`

   Create a new array with the colorkey transparency value from each pixel. If
   the pixel matches the colorkey it will be fully transparent; otherwise it
   will be fully opaque.

   This will work on any type of Surface format. If the image has no colorkey a
   solid opaque array will be returned.

   This function will temporarily lock the Surface as pixels are copied.

   .. ## pygame.surfarray.array_colorkey ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format on the array.
   The array can be 2D or 3D with any sized integer values. Function
   make_surface uses the array struct interface to acquire array properties,
   so is not limited to just NumPy arrays. See :mod:`pygame.pixelcopy`.

   New in pygame 1.9.2: array struct interface support.

   .. ## pygame.surfarray.make_surface ##

.. function:: blit_array

   | :sl:`Blit directly from a array values`
   | :sg:`blit_array(Surface, array) -> None`

   Directly copy values from an array into a Surface. This is faster than
   converting the array into a Surface and blitting. The array must be the same
   dimensions as the Surface and will completely replace all pixel values. Only
   integer, ASCII character and record arrays are accepted.

   This function will temporarily lock the Surface as the new values are
   copied.

   .. ## pygame.surfarray.blit_array ##

.. function:: map_array

   | :sl:`Map a 3d array into a 2d array`
   | :sg:`map_array(Surface, array3d) -> array2d`

   Convert a 3D array into a 2D array. This will use the given Surface format
   to control the conversion. Palette surface formats are supported for NumPy
   arrays.

   .. ## pygame.surfarray.map_array ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for surface arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions.
   The only supported arraytype is ``'numpy'``. Other values will raise
   ValueError. Using this function will raise a ``DeprecationWarning``.

   .. ## pygame.surfarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.surfarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytypes ##

.. ## pygame.surfarray ##


--- Contenu du fichier : sdl2_video.rst.txt ---
.. include:: common.txt

:mod:`pygame.sdl2_video`
========================

.. module:: pygame._sdl2.video
   :synopsis: Experimental pygame module for porting new SDL video systems

.. warning::
	This module isn't ready for prime time yet, it's still in development.
        These docs are primarily meant to help the pygame developers and super-early adopters
        who are in communication with the developers. This API will change.

| :sl:`Experimental pygame module for porting new SDL video systems`

.. class:: Window

   | :sl:`pygame object that represents a window`
   | :sg:`Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -> Window`

   .. classmethod:: from_display_module
   
      | :sl:`Creates window using window created by pygame.display.set_mode().`
      | :sg:`from_display_module() -> Window`

   .. classmethod:: from_window

      | :sl:`Create Window from another window. Could be from another UI toolkit.`
      | :sg:`from_window(other) -> Window`

   .. attribute:: grab

      | :sl:`Gets or sets whether the mouse is confined to the window.`
      | :sg:`grab -> bool`

   .. attribute:: relative_mouse

      | :sl:`Gets or sets the window's relative mouse motion state.`
      | :sg:`relative_mouse -> bool`

   .. method:: set_windowed

      | :sl:`Enable windowed mode (exit fullscreen).`
      | :sg:`set_windowed() -> None`

   .. method:: set_fullscreen

      | :sl:`Enter fullscreen.`
      | :sg:`set_fullscreen(desktop=False) -> None`

   .. attribute:: title

      | :sl:`Gets or sets whether the window title.`
      | :sg:`title -> string`

   .. method:: destroy

      | :sl:`Destroys the window.`
      | :sg:`destroy() -> None`

   .. method:: hide

      | :sl:`Hide the window.`
      | :sg:`hide() -> None`

   .. method:: show

      | :sl:`Show the window.`
      | :sg:`show() -> None`

   .. method:: focus

      | :sl:`Raise the window above other windows and set the input focus. The "input_only" argument is only supported on X11.`
      | :sg:`focus(input_only=False) -> None`

   .. method:: restore

      | :sl:`Restore the size and position of a minimized or maximized window.`
      | :sg:`restore() -> None`

   .. method:: maximize

      | :sl:`Maximize the window.`
      | :sg:`maximize() -> None`

   .. method:: minimize

      | :sl:`Minimize the window.`
      | :sg:`maximize() -> None`

   .. attribute:: resizable

      | :sl:`Gets and sets whether the window is resizable.`
      | :sg:`resizable -> bool`

   .. attribute:: borderless

      | :sl:`Add or remove the border from the window.`
      | :sg:`borderless -> bool`

   .. method:: set_icon

      | :sl:`Set the icon for the window.`
      | :sg:`set_icon(surface) -> None`

   .. attribute:: id

      | :sl:`Get the unique window ID. *Read-only*`
      | :sg:`id -> int`

   .. attribute:: size

      | :sl:`Gets and sets the window size.`
      | :sg:`size -> (int, int)`

   .. attribute:: position

      | :sl:`Gets and sets the window position.`
      | :sg:`position -> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED`	

   .. attribute:: opacity

      | :sl:`Gets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).`
      | :sg:`opacity -> float`

   .. attribute:: display_index

      | :sl:`Get the index of the display that owns the window. *Read-only*`
      | :sg:`display_index -> int`

   .. method:: set_modal_for

      | :sl:`Set the window as a modal for a parent window. This function is only supported on X11.`
      | :sg:`set_modal_for(Window) -> None`

.. class:: Texture	

   | :sl:`pygame object that representing a Texture.`
   | :sg:`Texture(renderer, size, depth=0, static=False, streaming=False, target=False) -> Texture`

   .. staticmethod:: from_surface

      | :sl:`Create a texture from an existing surface.`
      | :sg:`from_surface(renderer, surface) -> Texture`

   .. attribute:: renderer

      | :sl:`Gets the renderer associated with the Texture. *Read-only*`
      | :sg:`renderer -> Renderer`

   .. attribute:: width

      | :sl:`Gets the width of the Texture. *Read-only*`
      | :sg:`width -> int`

   .. attribute:: height

      | :sl:`Gets the height of the Texture. *Read-only*`
      | :sg:`height -> int`

   .. attribute:: alpha

      | :sl:`Gets and sets an additional alpha value multiplied into render copy operations.`
      | :sg:`alpha -> int`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Texture.`
      | :sg:`blend_mode -> int`

   .. attribute:: color

      | :sl:`Gets and sets an additional color value multiplied into render copy operations.`
      | :sg:`color -> color`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the texture.`
      | :sg:`get_rect(**kwargs) -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the texture to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None`

   .. method:: update

      | :sl:`Update the texture with a Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`update(surface, area=None) -> None`

.. class:: Image

   | :sl:`Easy way to use a portion of a Texture without worrying about srcrect all the time.`
   | :sg:`Image(textureOrImage, srcrect=None) -> Image`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the Image.`
      | :sg:`get_rect() -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the Image to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None) -> None`

   .. attribute:: angle

      | :sl:`Gets and sets the angle the Image draws itself with.`
      | :sg:`angle -> float`

   .. attribute:: origin

      | :sl:`Gets and sets the origin. Origin=None means the Image will be rotated around its center.`
      | :sg:`origin -> (float, float) or None.`

   .. attribute:: flip_x

      | :sl:`Gets and sets whether the Image is flipped on the x axis.`
      | :sg:`flip_x -> bool`

   .. attribute:: flip_y

      | :sl:`Gets and sets whether the Image is flipped on the y axis.`
      | :sg:`flip_y -> bool`

   .. attribute:: color

      | :sl:`Gets and sets the Image color modifier.`
      | :sg:`color -> Color`

   .. attribute:: alpha

      | :sl:`Gets and sets the Image alpha modifier.`
      | :sg:`alpha -> float`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Image.`
      | :sg:`blend_mode -> int`

   .. attribute:: texture

      | :sl:`Gets and sets the Texture the Image is based on.`
      | :sg:`texture -> Texture`

   .. attribute:: srcrect

      | :sl:`Gets and sets the Rect the Image is based on.`
      | :sg:`srcrect -> Rect`

.. class:: Renderer

   | :sl:`Create a 2D rendering context for a window.`
   | :sg:`Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer`

   .. classmethod:: from_window

      | :sl:`Easy way to create a Renderer.`
      | :sg:`from_window(window) -> Renderer`

   .. attribute:: draw_blend_mode

      | :sl:`Gets and sets the blend mode used by the drawing functions.`
      | :sg:`draw_blend_mode -> int`   

   .. attribute:: draw_color

      | :sl:`Gets and sets the color used by the drawing functions.`
      | :sg:`draw_color -> Color`

   .. method:: clear

      | :sl:`Clear the current rendering target with the drawing color.`
      | :sg:`clear() -> None`

   .. method:: present

      | :sl:`Updates the screen with any new rendering since previous call.`
      | :sg:`present() -> None`	

   .. method:: get_viewport

      | :sl:`Returns the drawing area on the target.`
      | :sg:`get_viewport() -> Rect`

   .. method:: set_viewport

      | :sl:`Set the drawing area on the target. If area is None, the entire target will be used.`
      | :sg:`set_viewport(area) -> None`

   .. attribute:: logical_size

      | :sl:`Gets and sets the logical size.`
      | :sg:`logical_size -> (int width, int height)`

   .. attribute:: scale

      | :sl:`Gets and sets the scale.`
      | :sg:`scale -> (float x_scale, float y_scale)`

   .. attribute:: target

      | :sl:`Gets and sets the render target. None represents the default target (the renderer).`
      | :sg:`target -> Texture or None`

   .. method:: blit

      | :sl:`For compatibility purposes. Textures created by different Renderers cannot be shared!`
      | :sg:`blit(source, dest, area=None, special_flags=0)-> Rect`

   .. method:: draw_line

      | :sl:`Draws a line.`
      | :sg:`draw_line(p1, p2) -> None`

   .. method:: draw_point

      | :sl:`Draws a point.`
      | :sg:`draw_point(point) -> None`

   .. method:: draw_rect

      | :sl:`Draws a rectangle.`
      | :sg:`draw_rect(rect)-> None`

   .. method:: fill_rect

      | :sl:`Fills a rectangle.`
      | :sg:`fill_rect(rect)-> None`

   .. method:: to_surface

      | :sl:`Read pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`to_surface(surface=None, area=None)-> Surface`

--- Contenu du fichier : font.rst.txt ---
.. include:: common.txt

:mod:`pygame.font`
==================

.. module:: pygame.font
   :synopsis: pygame module for loading and rendering fonts

| :sl:`pygame module for loading and rendering fonts`

The font module allows for rendering TrueType fonts into Surface objects.
This module is built on top of the SDL_ttf library, which comes with all
normal pygame installations.

Most of the work done with fonts are done by using the actual Font objects.
The module by itself only has routines to support the creation of Font objects
with :func:`pygame.font.Font`.

You can load fonts from the system by using the :func:`pygame.font.SysFont`
function. There are a few other functions to help look up the system fonts.

Pygame comes with a builtin default font, freesansbold. This can always be
accessed by passing ``None`` as the font name.

Before pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character
('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf
2.0.15 accepts any valid UCS-4 / UTF-32 character 
(like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')).
More about this in :func:`Font.render`.

Before pygame 2.0.3, this character space restriction can be avoided by
using the  :mod:`pygame.freetype` based ``pygame.ftfont`` to emulate the Font
module. This can be used by defining the environment variable PYGAME_FREETYPE
before the first import of :mod:`pygame`. Since the problem ``pygame.ftfont``
solves no longer exists, it will likely be removed in the future.

.. function:: init

   | :sl:`initialize the font module`
   | :sg:`init() -> None`

   This method is called automatically by ``pygame.init()``. It initializes the
   font module. The module must be initialized before any other functions will
   work.

   It is safe to call this function more than once.

   .. ## pygame.font.init ##

.. function:: quit

   | :sl:`uninitialize the font module`
   | :sg:`quit() -> None`

   Manually uninitialize SDL_ttf's font system. This is called automatically by
   ``pygame.quit()``.

   It is safe to call this function even if font is currently not initialized.

   .. ## pygame.font.quit ##

.. function:: get_init

   | :sl:`true if the font module is initialized`
   | :sg:`get_init() -> bool`

   Test if the font module is initialized or not.

   .. ## pygame.font.get_init ##

.. function:: get_default_font

   | :sl:`get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the system font. This is not the full path to the
   file. This file can usually be found in the same directory as the font
   module, but it can also be bundled in separate archives.

   .. ## pygame.font.get_default_font ##

.. function:: get_sdl_ttf_version

   | :sl:`gets SDL_ttf version`
   | :sg:`get_sdl_ttf_version(linked=True) -> (major, minor, patch)`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave get_sdl_ttf_version feedback with authors <https://github.com/pygame/pygame/pull/3095>`_

   Returns a tuple of integers that identify SDL_ttf's version.
   SDL_ttf is the underlying font rendering library, written in C,
   on which pygame's font module depends. If 'linked' is True (the default), 
   the function returns the version of the linked TTF library. 
   Otherwise this function returns the version of TTF pygame was compiled with

   .. versionadded:: 2.1.3

   .. ## pygame.font.get_sdl_ttf_version ##

.. function:: get_fonts

   | :sl:`get all available fonts`
   | :sg:`get_fonts() -> list of strings`

   Returns a list of all the fonts available on the system. The names of the
   fonts will be set to lowercase with all spaces and punctuation removed. This
   works on most systems, but some will return an empty list if they cannot
   find fonts.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.get_fonts ##

.. function:: match_font

   | :sl:`find a specific font on the system`
   | :sg:`match_font(name, bold=False, italic=False) -> path`

   Returns the full path to a font file on the system. If bold or italic are
   set to true, this will attempt to find the correct family of font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.
   If none of the given names are found, None is returned.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   Example:

   ::

       print pygame.font.match_font('bitstreamverasans')
       # output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf
       # (but only if you have Vera on your system)

   .. ## pygame.font.match_font ##

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested bold and italic flags. Pygame uses a small set of common
   font aliases. If the specific font you ask for is not available, a reasonable
   alternative may be used. If a suitable system font is not found this will
   fall back on loading the default pygame font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.SysFont ##

.. class:: Font

   | :sl:`create a new Font object from a file`
   | :sg:`Font(file_path=None, size=12) -> Font`
   | :sg:`Font(file_path, size) -> Font`
   | :sg:`Font(pathlib.Path, size) -> Font`
   | :sg:`Font(object, size) -> Font`

   Load a new font from a given filename or a python file object. The size is
   the height of the font in pixels. If the filename is ``None`` the pygame
   default font will be loaded. If a font cannot be loaded from the arguments
   given an exception will be raised. Once the font is created the size cannot
   be changed. If no arguments are given then the default font will be used and
   a font size of 12 is used.

   Font objects are mainly used to render text into new Surface objects. The
   render can emulate bold or italic features, but it is better to load from a
   font with actual italic or bold glyphs.

   .. attribute:: bold

      | :sl:`Gets or sets whether the font should be rendered in (faked) bold.`
      | :sg:`bold -> bool`

      Whether the font should be rendered in bold.

      When set to True, this enables the bold rendering of text. This
      is a fake stretching of the font that doesn't look good on many
      font types. If possible load the font from a real bold font
      file. While bold, the font will have a different width than when
      normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.bold ##

   .. attribute:: italic

      | :sl:`Gets or sets whether the font should be rendered in (faked) italics.`
      | :sg:`italic -> bool`

      Whether the font should be rendered in italic.

      When set to True, this enables fake rendering of italic
      text. This is a fake skewing of the font that doesn't look good
      on many font types. If possible load the font from a real italic
      font file. While italic the font will have a different width
      than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.italic ##

   .. attribute:: underline

      | :sl:`Gets or sets whether the font should be rendered with an underline.`
      | :sg:`underline -> bool`

      Whether the font should be rendered in underline.

      When set to True, all rendered fonts will include an
      underline. The underline is always one pixel thick, regardless
      of font size. This can be mixed with the bold, italic and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.underline ##
   
   .. attribute:: strikethrough

      | :sl:`Gets or sets whether the font should be rendered with a strikethrough.`
      | :sg:`strikethrough -> bool`

      Whether the font should be rendered with a strikethrough.

      When set to True, all rendered fonts will include an
      strikethrough. The strikethrough is always one pixel thick,
      regardless of font size. This can be mixed with the bold,
      italic and underline modes.

      .. versionadded:: 2.1.3

      .. ## Font.strikethrough ##

   .. method:: render

      | :sl:`draw text on a new Surface`
      | :sg:`render(text, antialias, color, background=None) -> Surface`

      This creates a new Surface with the specified text rendered on it. 
      :mod:`pygame.font` provides no way to directly draw text on an existing
      Surface: instead you must use :func:`Font.render` to create an image
      (Surface) of the text, then blit this image onto another Surface.

      The text can only be a single line: newline characters are not rendered.
      Null characters ('\x00') raise a TypeError. Both Unicode and char (byte)
      strings are accepted. For Unicode strings only UCS-2 characters
      ('\\u0001' to '\\uFFFF') were previously supported and any greater
      unicode codepoint would raise a UnicodeError. Now, characters in the
      UCS-4 range are supported. For char strings a ``LATIN1`` encoding is
      assumed. The antialias argument is a boolean: if True the characters
      will have smooth edges. The color argument is the color of the text
      [e.g.: (0,0,255) for blue]. The optional background argument is a color
      to use for the text background. If no background is passed the area
      outside the text will be transparent.

      The Surface returned will be of the dimensions required to hold the text.
      (the same as those returned by :func:`Font.size`). If an empty string is passed
      for the text, a blank surface will be returned that is zero pixel wide and
      the height of the font.

      Depending on the type of background and antialiasing used, this returns
      different types of Surfaces. For performance reasons, it is good to know
      what type of image will be used. If antialiasing is not used, the return
      image will always be an 8-bit image with a two-color palette. If the
      background is transparent a colorkey will be set. Antialiased images are
      rendered to 24-bit ``RGB`` images. If the background is transparent a
      pixel alpha will be included.

      Optimization: if you know that the final destination for the text (on the
      screen) will always have a solid background, and the text is antialiased,
      you can improve performance by specifying the background color. This will
      cause the resulting image to maintain transparency information by
      colorkey rather than (much less efficient) alpha values.

      If you render '\\n' an unknown char will be rendered. Usually a
      rectangle. Instead you need to handle newlines yourself.

      Font rendering is not thread safe: only a single thread can render text
      at any time.

      .. versionchanged:: 2.0.3 Rendering UCS4 unicode works and does not
        raise an exception. Use `if hasattr(pygame.font, "UCS4"):` to see if
        pygame supports rendering UCS4 unicode including more languages and
        emoji.

      .. ## Font.render ##

   .. method:: size

      | :sl:`determine the amount of space needed to render text`
      | :sg:`size(text) -> (width, height)`

      Returns the dimensions needed to render the text. This can be used to
      help determine the positioning needed for text before it is rendered. It
      can also be used for word wrapping and other layout effects.

      Be aware that most fonts use kerning which adjusts the widths for
      specific letter pairs. For example, the width for "ae" will not always
      match the width for "a" + "e".

      .. ## Font.size ##

   .. method:: set_underline

      | :sl:`control if text is rendered with an underline`
      | :sg:`set_underline(bool) -> None`

      When enabled, all rendered fonts will include an underline. The underline
      is always one pixel thick, regardless of font size. This can be mixed
      with the bold, italic and strikethrough modes.

      .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.set_underline ##

   .. method:: get_underline

      | :sl:`check if text will be rendered with an underline`
      | :sg:`get_underline() -> bool`

      Return True when the font underline is enabled.

       .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.get_underline ##
   
   .. method:: set_strikethrough

      | :sl:`control if text is rendered with a strikethrough`
      | :sg:`set_strikethrough(bool) -> None`

      When enabled, all rendered fonts will include a strikethrough. The
      strikethrough is always one pixel thick, regardless of font size.
      This can be mixed with the bold, italic and underline modes.

      .. note:: This is the same as the :attr:`strikethrough` attribute.
      
      .. versionadded:: 2.1.3

      .. ## Font.set_strikethrough ##

   .. method:: get_strikethrough

      | :sl:`check if text will be rendered with a strikethrough`
      | :sg:`get_strikethrough() -> bool`

      Return True when the font strikethrough is enabled.

       .. note:: This is the same as the :attr:`strikethrough` attribute.
       
       .. versionadded:: 2.1.3

      .. ## Font.get_strikethrough ##

   .. method:: set_bold

      | :sl:`enable fake rendering of bold text`
      | :sg:`set_bold(bool) -> None`

      Enables the bold rendering of text. This is a fake stretching of the font
      that doesn't look good on many font types. If possible load the font from
      a real bold font file. While bold, the font will have a different width
      than when normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.set_bold ##

   .. method:: get_bold

      | :sl:`check if text will be rendered bold`
      | :sg:`get_bold() -> bool`

      Return True when the font bold rendering mode is enabled.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.get_bold ##

   .. method:: set_italic

      | :sl:`enable fake rendering of italic text`
      | :sg:`set_italic(bool) -> None`

      Enables fake rendering of italic text. This is a fake skewing of the font
      that doesn't look good on many font types. If possible load the font from
      a real italic font file. While italic the font will have a different
      width than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.set_italic ##

   .. method:: metrics

      | :sl:`gets the metrics for each character in the passed string`
      | :sg:`metrics(text) -> list`

      The list contains tuples for each character, which contain the minimum
      ``X`` offset, the maximum ``X`` offset, the minimum ``Y`` offset, the
      maximum ``Y`` offset and the advance offset (bearing plus width) of the
      character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy,
      advance), ...]. None is entered in the list for each unrecognized
      character.

      .. ## Font.metrics ##

   .. method:: get_italic

      | :sl:`check if the text will be rendered italic`
      | :sg:`get_italic() -> bool`

      Return True when the font italic rendering mode is enabled.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.get_italic ##

   .. method:: get_linesize

      | :sl:`get the line space of the font text`
      | :sg:`get_linesize() -> int`

      Return the height in pixels for a line of text with the font. When
      rendering multiple lines of text this is the recommended amount of space
      between lines.

      .. ## Font.get_linesize ##

   .. method:: get_height

      | :sl:`get the height of the font`
      | :sg:`get_height() -> int`

      Return the height in pixels of the actual rendered text. This is the
      average size for each glyph in the font.

      .. ## Font.get_height ##

   .. method:: get_ascent

      | :sl:`get the ascent of the font`
      | :sg:`get_ascent() -> int`

      Return the height in pixels for the font ascent. The ascent is the number
      of pixels from the font baseline to the top of the font.

      .. ## Font.get_ascent ##

   .. method:: get_descent

      | :sl:`get the descent of the font`
      | :sg:`get_descent() -> int`

      Return the height in pixels for the font descent. The descent is the
      number of pixels from the font baseline to the bottom of the font.

      .. ## Font.get_descent ##

   .. method:: set_script

      | :sl:`set the script code for text shaping`
      | :sg:`set_script(str) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave feedback with authors <https://github.com/pygame/pygame/pull/3330>`_

      Sets the script used by harfbuzz text shaping, taking a 4 character
      script code as input. For example, Hindi is written in the Devanagari
      script, for which the script code is `"Deva"`. See the full list of
      script codes in `ISO 15924 <https://www.unicode.org/iso15924/iso15924-codes.html>`_.

      This method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the
      method will raise a pygame.error.

      .. versionadded:: 2.2.0

      .. ## Font.set_script ## 

   .. ## pygame.font.Font ##

.. ## pygame.font ##


--- Contenu du fichier : sprite.rst.txt ---
.. include:: common.txt

:mod:`pygame.sprite`
====================

.. module:: pygame.sprite
   :synopsis: pygame module with basic game object classes

| :sl:`pygame module with basic game object classes`

This module contains several simple classes to be used within games. There is
the main Sprite class and several Group classes that contain Sprites. The use
of these classes is entirely optional when using pygame. The classes are fairly
lightweight and only provide a starting place for the code that is common to
most games.

The Sprite class is intended to be used as a base class for the different types
of objects in the game. There is also a base Group class that simply stores
sprites. A game could create new types of Group classes that operate on
specially customized Sprite instances they contain.

The basic Group class can draw the Sprites it contains to a Surface. The
``Group.draw()`` method requires that each Sprite have a ``Surface.image``
attribute and a ``Surface.rect``. The ``Group.clear()`` method requires these
same attributes, and can be used to erase all the Sprites with background.
There are also more advanced Groups: ``pygame.sprite.RenderUpdates()`` and
``pygame.sprite.OrderedUpdates()``.

Lastly, this module contains several collision functions. These help find
sprites inside multiple groups that have intersecting bounding rectangles. To
find the collisions, the Sprites are required to have a ``Surface.rect``
attribute assigned.

The groups are designed for high efficiency in removing and adding Sprites to
them. They also allow cheap testing to see if a Sprite already exists in a
Group. A given Sprite can exist in any number of groups. A game could use some
groups to control object rendering, and a completely separate set of groups to
control interaction or player movement. Instead of adding type attributes or
bools to a derived Sprite class, consider keeping the Sprites inside organized
Groups. This will allow for easier lookup later in the game.

Sprites and Groups manage their relationships with the ``add()`` and
``remove()`` methods. These methods can accept a single or multiple targets for
membership. The default initializers for these classes also takes a single or
list of targets for initial membership. It is safe to repeatedly add and remove
the same Sprite from a Group.

While it is possible to design sprite and group classes that don't derive from
the Sprite and AbstractGroup classes below, it is strongly recommended that you
extend those when you add a Sprite or Group class.

Sprites are not thread safe. So lock them yourself if using threads.

.. class:: Sprite

   | :sl:`Simple base class for visible game objects.`
   | :sg:`Sprite(*groups) -> Sprite`

   The base class for visible game objects. Derived classes will want to
   override the ``Sprite.update()`` and assign a ``Sprite.image`` and
   ``Sprite.rect`` attributes. The initializer can accept any number of Group
   instances to be added to.

   When subclassing the Sprite, be sure to call the base initializer before
   adding the Sprite to Groups. For example:

   .. code-block:: python
   
       class Block(pygame.sprite.Sprite):
            
           # Constructor. Pass in the color of the block, 
           # and its x and y position
           def __init__(self, color, width, height):
              # Call the parent class (Sprite) constructor
              pygame.sprite.Sprite.__init__(self) 
        
              # Create an image of the block, and fill it with a color.
              # This could also be an image loaded from the disk.
              self.image = pygame.Surface([width, height])
              self.image.fill(color)
        
              # Fetch the rectangle object that has the dimensions of the image
              # Update the position of this object by setting the values of rect.x and rect.y
              self.rect = self.image.get_rect()   
      
   .. method:: update

      | :sl:`method to control sprite behavior`
      | :sg:`update(*args, **kwargs) -> None`

      The default implementation of this method does nothing; it's just a
      convenient "hook" that you can override. This method is called by
      ``Group.update()`` with whatever arguments you give it.

      There is no need to use this method if not using the convenience method
      by the same name in the Group class.

      .. ## Sprite.update ##

   .. method:: add

      | :sl:`add the sprite to groups`
      | :sg:`add(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be added to the Groups it is not already a member of.

      .. ## Sprite.add ##

   .. method:: remove

      | :sl:`remove the sprite from groups`
      | :sg:`remove(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be removed from the Groups it is currently a member of.

      .. ## Sprite.remove ##

   .. method:: kill

      | :sl:`remove the Sprite from all Groups`
      | :sg:`kill() -> None`

      The Sprite is removed from all the Groups that contain it. This won't
      change anything about the state of the Sprite. It is possible to continue
      to use the Sprite after this method has been called, including adding it
      to Groups.

      .. ## Sprite.kill ##

   .. method:: alive

      | :sl:`does the sprite belong to any groups`
      | :sg:`alive() -> bool`

      Returns True when the Sprite belongs to one or more Groups.

      .. ## Sprite.alive ##

   .. method:: groups

      | :sl:`list of Groups that contain this Sprite`
      | :sg:`groups() -> group_list`

      Return a list of all the Groups that contain this Sprite.

      .. ## Sprite.groups ##

   .. ## pygame.sprite.Sprite ##

.. class:: WeakSprite

   | :sl:`A subclass of Sprite that references its Groups weakly. This means that any group this belongs to that is not referenced anywhere else is garbage collected automatically.`
   | :sg:`WeakSprite(*groups) -> WeakSprite`

.. class:: DirtySprite

   | :sl:`A subclass of Sprite with more attributes and features.`
   | :sg:`DirtySprite(*groups) -> DirtySprite`

   Extra DirtySprite attributes with their default values:

   dirty = 1

   ::

       if set to 1, it is repainted and then set to 0 again
       if set to 2 then it is always dirty ( repainted each frame,
       flag is not reset)
       0 means that it is not dirty and therefore not repainted again

   blendmode = 0

   ::

       its the special_flags argument of blit, blendmodes

   source_rect = None

   ::

       source rect to use, remember that it is relative to
       topleft (0,0) of self.image

   visible = 1

   ::

       normally 1, if set to 0 it will not be repainted
       (you must set it dirty too to be erased from screen)

   layer = 0

   ::

       (READONLY value, it is read when adding it to the
       LayeredDirty, for details see doc of LayeredDirty)

   .. ##  ##

   .. ## pygame.sprite.DirtySprite ##

.. class:: Group

   | :sl:`A container class to hold and manage multiple Sprite objects.`
   | :sg:`Group(*sprites) -> Group`

   A simple container for Sprite objects. This class can be inherited to create
   containers with more specific behaviors. The constructor takes any number of
   Sprite arguments to add to the Group. The group supports the following
   standard Python operations:

   ::

       in      test if a Sprite is contained
       len     the number of Sprites contained
       bool    test if any Sprites are contained
       iter    iterate through all the Sprites

   The Sprites in the Group are ordered only on python 3.6 and higher.
   Below python 3.6 drawing and iterating over the Sprites is in no particular order.

   .. method:: sprites

      | :sl:`list of the Sprites this Group contains`
      | :sg:`sprites() -> sprite_list`

      Return a list of all the Sprites this group contains. You can also get an
      iterator from the group, but you cannot iterate over a Group while
      modifying it.

      .. ## Group.sprites ##

   .. method:: copy

      | :sl:`duplicate the Group`
      | :sg:`copy() -> Group`

      Creates a new Group with all the same Sprites as the original. If you
      have subclassed Group, the new object will have the same (sub-)class as
      the original. This only works if the derived class's constructor takes
      the same arguments as the Group class's.

      .. ## Group.copy ##

   .. method:: add

      | :sl:`add Sprites to this Group`
      | :sg:`add(*sprites) -> None`

      Add any number of Sprites to this Group. This will only add Sprites that
      are not already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.add ##

   .. method:: remove

      | :sl:`remove Sprites from the Group`
      | :sg:`remove(*sprites) -> None`

      Remove any number of Sprites from the Group. This will only remove
      Sprites that are already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.remove ##

   .. method:: has

      | :sl:`test if a Group contains Sprites`
      | :sg:`has(*sprites) -> bool`

      Return True if the Group contains all of the given sprites. This is
      similar to using the "in" operator on the Group ("if sprite in group:
      ..."), which tests if a single Sprite belongs to a Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.has ##

   .. method:: update

      | :sl:`call the update method on contained Sprites`
      | :sg:`update(*args, **kwargs) -> None`

      Calls the ``update()`` method on all Sprites in the Group. The base
      Sprite class has an update method that takes any number of arguments and
      does nothing. The arguments passed to ``Group.update()`` will be passed
      to each Sprite.

      There is no way to get the return value from the ``Sprite.update()``
      methods.

      .. ## Group.update ##

   .. method:: draw

      | :sl:`blit the Sprite images`
      | :sg:`draw(Surface, bgsurf=None, special_flags=0) -> List[Rect]`

      Draws the contained Sprites to the Surface argument. This uses the
      ``Sprite.image`` attribute for the source surface, and ``Sprite.rect``
      for the position. ``special_flags`` is passed to ``Surface.blit()``.
      ``bgsurf`` is unused in this method but ``LayeredDirty.draw()`` uses
      it.

      The Group does not keep sprites in any order, so the draw order is
      arbitrary.

      .. ## Group.draw ##

   .. method:: clear

      | :sl:`draw a background over the Sprites`
      | :sg:`clear(Surface_dest, background) -> None`

      Erases the Sprites used in the last ``Group.draw()`` call. The
      destination Surface is cleared by filling the drawn Sprite positions with
      the background.

      The background is usually a Surface image the same dimensions as the
      destination Surface. However, it can also be a callback function that
      takes two arguments; the destination Surface and an area to clear. The
      background callback function will be called several times each clear.

      Here is an example callback that will clear the Sprites with solid red:

      ::

          def clear_callback(surf, rect):
              color = 255, 0, 0
              surf.fill(color, rect)

      .. ## Group.clear ##

   .. method:: empty

      | :sl:`remove all Sprites`
      | :sg:`empty() -> None`

      Removes all Sprites from this Group.

      .. ## Group.empty ##

   .. ## pygame.sprite.Group ##

.. class:: WeakDirtySprite

   | :sl:`A subclass of WeakSprite and DirtySprite that combines the benefits of both classes.`
   | :sg:`WeakDirtySprite(*groups) -> WeakDirtySprite`

.. class:: RenderPlain

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderClear

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderUpdates

   | :sl:`Group sub-class that tracks dirty updates.`
   | :sg:`RenderUpdates(*sprites) -> RenderUpdates`

   This class is derived from ``pygame.sprite.Group()``. It has an extended
   ``draw()`` method that tracks the changed areas of the screen.

   .. method:: draw

      | :sl:`blit the Sprite images and track changed areas`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      Draws all the Sprites to the surface, the same as ``Group.draw()``. This
      method also returns a list of Rectangular areas on the screen that have
      been changed. The returned changes include areas of the screen that have
      been affected by previous ``Group.clear()`` calls. ``special_flags`` is
      passed to ``Surface.blit()``.

      The returned Rect list should be passed to ``pygame.display.update()``.
      This will help performance on software driven display modes. This type of
      updating is usually only helpful on destinations with non-animating
      backgrounds.

      .. ## RenderUpdates.draw ##

   .. ## pygame.sprite.RenderUpdates ##

.. function:: OrderedUpdates

   | :sl:`RenderUpdates sub-class that draws Sprites in order of addition.`
   | :sg:`OrderedUpdates(*sprites) -> OrderedUpdates`

   This class derives from ``pygame.sprite.RenderUpdates()``. It maintains the
   order in which the Sprites were added to the Group for rendering. This makes
   adding and removing Sprites from the Group a little slower than regular
   Groups.

   .. ## pygame.sprite.OrderedUpdates ##

.. class:: LayeredUpdates

   | :sl:`LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.`
   | :sg:`LayeredUpdates(*sprites, **kwargs) -> LayeredUpdates`

   This group is fully compatible with :class:`pygame.sprite.Sprite`.

   You can set the default layer through kwargs using 'default_layer' and an
   integer for the layer. The default layer is 0.

   If the sprite you add has an attribute _layer then that layer will be used.
   If the \**kwarg contains 'layer' then the sprites passed will be added to
   that layer (overriding the ``sprite.layer`` attribute). If neither sprite
   has attribute layer nor \**kwarg then the default layer is used to add the
   sprites.

   .. versionadded:: 1.8

   .. method:: add

      | :sl:`add a sprite or sequence of sprites to a group`
      | :sg:`add(*sprites, **kwargs) -> None`

      If the ``sprite(s)`` have an attribute layer then that is used for the
      layer. If \**kwargs contains 'layer' then the ``sprite(s)`` will be added
      to that argument (overriding the sprite layer attribute). If neither is
      passed then the ``sprite(s)`` will be added to the default layer.

      .. ## LayeredUpdates.add ##

   .. method:: sprites

      | :sl:`returns a ordered list of sprites (first back, last top).`
      | :sg:`sprites() -> sprites`

      .. ## LayeredUpdates.sprites ##

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      .. ## LayeredUpdates.draw ##

   .. method:: get_sprites_at

      | :sl:`returns a list with all sprites at that position.`
      | :sg:`get_sprites_at(pos) -> colliding_sprites`

      Bottom sprites first, top last.

      .. ## LayeredUpdates.get_sprites_at ##

   .. method:: get_sprite

      | :sl:`returns the sprite at the index idx from the groups sprites`
      | :sg:`get_sprite(idx) -> sprite`

      Raises IndexOutOfBounds if the idx is not within range.

      .. ## LayeredUpdates.get_sprite ##

   .. method:: remove_sprites_of_layer

      | :sl:`removes all sprites from a layer and returns them as a list.`
      | :sg:`remove_sprites_of_layer(layer_nr) -> sprites`

      .. ## LayeredUpdates.remove_sprites_of_layer ##

   .. method:: layers

      | :sl:`returns a list of layers defined (unique), sorted from bottom up.`
      | :sg:`layers() -> layers`

      .. ## LayeredUpdates.layers ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredUpdates.change_layer ##

   .. method:: get_layer_of_sprite

      | :sl:`returns the layer that sprite is currently in.`
      | :sg:`get_layer_of_sprite(sprite) -> layer`

      If the sprite is not found then it will return the default layer.

      .. ## LayeredUpdates.get_layer_of_sprite ##

   .. method:: get_top_layer

      | :sl:`returns the top layer`
      | :sg:`get_top_layer() -> layer`

      .. ## LayeredUpdates.get_top_layer ##

   .. method:: get_bottom_layer

      | :sl:`returns the bottom layer`
      | :sg:`get_bottom_layer() -> layer`

      .. ## LayeredUpdates.get_bottom_layer ##

   .. method:: move_to_front

      | :sl:`brings the sprite to front layer`
      | :sg:`move_to_front(sprite) -> None`

      Brings the sprite to front, changing sprite layer to topmost layer (added
      at the end of that layer).

      .. ## LayeredUpdates.move_to_front ##

   .. method:: move_to_back

      | :sl:`moves the sprite to the bottom layer`
      | :sg:`move_to_back(sprite) -> None`

      Moves the sprite to the bottom layer, moving it behind all other layers
      and adding one additional layer.

      .. ## LayeredUpdates.move_to_back ##

   .. method:: get_top_sprite

      | :sl:`returns the topmost sprite`
      | :sg:`get_top_sprite() -> Sprite`

      .. ## LayeredUpdates.get_top_sprite ##

   .. method:: get_sprites_from_layer

      | :sl:`returns all sprites from a layer, ordered by how they where added`
      | :sg:`get_sprites_from_layer(layer) -> sprites`

      Returns all sprites from a layer, ordered by how they where added. It
      uses linear search and the sprites are not removed from layer.

      .. ## LayeredUpdates.get_sprites_from_layer ##

   .. method:: switch_layer

      | :sl:`switches the sprites from layer1 to layer2`
      | :sg:`switch_layer(layer1_nr, layer2_nr) -> None`

      The layers number must exist, it is not checked.

      .. ## LayeredUpdates.switch_layer ##

   .. ## pygame.sprite.LayeredUpdates ##

.. class:: LayeredDirty

   | :sl:`LayeredDirty group is for DirtySprite objects.  Subclasses LayeredUpdates.`
   | :sg:`LayeredDirty(*sprites, **kwargs) -> LayeredDirty`

   This group requires :class:`pygame.sprite.DirtySprite` or any sprite that
   has the following attributes:

   ::

       image, rect, dirty, visible, blendmode (see doc of DirtySprite).

   It uses the dirty flag technique and is therefore faster than the
   :class:`pygame.sprite.RenderUpdates` if you have many static sprites. It
   also switches automatically between dirty rect update and full screen
   drawing, so you do not have to worry what would be faster.

   Same as for the :class:`pygame.sprite.Group`. You can specify some
   additional attributes through kwargs:

   ::

       _use_update: True/False   default is False
       _default_layer: default layer where sprites without a layer are added.
       _time_threshold: threshold time for switching between dirty rect mode
           and fullscreen mode, defaults to 1000./80  == 1000./fps

   .. versionadded:: 1.8

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=None) -> Rect_list`

      You can pass the background too. If a background is already set, then the
      bgsurf argument has no effect. If present, the ``special_flags`` argument is
      always passed to ``Surface.blit()``, overriding ``DirtySprite.blendmode``. 
      If ``special_flags`` is not present, ``DirtySprite.blendmode`` is passed
      to the ``Surface.blit()`` instead.

      .. ## LayeredDirty.draw ##

   .. method:: clear

      | :sl:`used to set background`
      | :sg:`clear(surface, bgd) -> None`

      .. ## LayeredDirty.clear ##

   .. method:: repaint_rect

      | :sl:`repaints the given area`
      | :sg:`repaint_rect(screen_rect) -> None`

      screen_rect is in screen coordinates.

      .. ## LayeredDirty.repaint_rect ##

   .. method:: set_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`set_clip(screen_rect=None) -> None`

      .. ## LayeredDirty.set_clip ##

   .. method:: get_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`get_clip() -> Rect`

      .. ## LayeredDirty.get_clip ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredDirty.change_layer ##

   .. method:: set_timing_treshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_treshold(time_ms) -> None`

      DEPRECATED: Use set_timing_threshold() instead.

      .. deprecated:: 2.1.1

      .. ## LayeredDirty.set_timing_treshold ##

   .. method:: set_timing_threshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_threshold(time_ms) -> None`

      Defaults to 1000.0 / 80.0. This means that the screen will be painted
      using the flip method rather than the update method if the update
      method is taking so long to update the screen that the frame rate falls
      below 80 frames per second.

      .. versionadded:: 2.1.1

      :raises TypeError: if ``time_ms`` is not int or float

      .. ## LayeredDirty.set_timing_threshold ##

   .. ## pygame.sprite.LayeredDirty ##

.. function:: GroupSingle

   | :sl:`Group container that holds a single sprite.`
   | :sg:`GroupSingle(sprite=None) -> GroupSingle`

   The GroupSingle container only holds a single Sprite. When a new Sprite is
   added, the old one is removed.

   There is a special property, ``GroupSingle.sprite``, that accesses the
   Sprite that this Group contains. It can be None when the Group is empty. The
   property can also be assigned to add a Sprite into the GroupSingle
   container.

   .. ## pygame.sprite.GroupSingle ##

.. function:: spritecollide

   | :sl:`Find sprites in a group that intersect another sprite.`
   | :sg:`spritecollide(sprite, group, dokill, collided = None) -> Sprite_list`

   Return a list containing all Sprites in a Group that intersect with another
   Sprite. Intersection is determined by comparing the ``Sprite.rect``
   attribute of each Sprite.

   The dokill argument is a bool. If set to True, all Sprites that collide will
   be removed from the Group.

   The collided argument is a callback function used to calculate if two
   sprites are colliding. it should take two sprites as values, and return a
   bool value indicating if they are colliding. If collided is not passed, all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   collided callables:

   ::

       collide_rect, collide_rect_ratio, collide_circle,
       collide_circle_ratio, collide_mask

   Example:
   
   .. code-block:: python

    # See if the Sprite block has collided with anything in the Group block_list
    # The True flag will remove the sprite in block_list
    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)  
     
    # Check the list of colliding sprites, and add one to the score for each one
    for block in blocks_hit_list:
        score +=1
       
   .. ## pygame.sprite.spritecollide ##

.. function:: collide_rect

   | :sl:`Collision detection between two sprites, using rects.`
   | :sg:`collide_rect(left, right) -> bool`

   Tests for collision between two sprites. Uses the pygame rect colliderect
   function to calculate the collision. Intended to be passed as a collided
   callback function to the \*collide functions. Sprites must have a "rect"
   attributes.

   .. versionadded:: 1.8

   .. ## pygame.sprite.collide_rect ##

.. function:: collide_rect_ratio

   | :sl:`Collision detection between two sprites, using rects scaled to a ratio.`
   | :sg:`collide_rect_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites rects.

   Is created with a ratio, the instance is then intended to be passed as a
   collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_rect_ratio ##

.. function:: collide_circle

   | :sl:`Collision detection between two sprites, using circles.`
   | :sg:`collide_circle(left, right) -> bool`

   Tests for collision between two sprites, by testing to see if two circles
   centered on the sprites overlap. If the sprites have a "radius" attribute,
   that is used to create the circle, otherwise a circle is created that is big
   enough to completely enclose the sprites rect as given by the "rect"
   attribute. Intended to be passed as a collided callback function to the
   \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle ##

.. function:: collide_circle_ratio

   | :sl:`Collision detection between two sprites, using circles scaled to a ratio.`
   | :sg:`collide_circle_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites radius.

   Is created with a floating point ratio, the instance is then intended to be
   passed as a collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   The created callable tests for collision between two sprites, by testing to
   see if two circles centered on the sprites overlap, after scaling the
   circles radius by the stored ratio. If the sprites have a "radius"
   attribute, that is used to create the circle, otherwise a circle is created
   that is big enough to completely enclose the sprites rect as given by the
   "rect" attribute. Intended to be passed as a collided callback function to
   the \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle_ratio ##

.. function:: collide_mask

   | :sl:`Collision detection between two sprites, using masks.`
   | :sg:`collide_mask(sprite1, sprite2) -> (int, int)`
   | :sg:`collide_mask(sprite1, sprite2) -> None`

   Tests for collision between two sprites, by testing if their bitmasks
   overlap (uses :func:`pygame.mask.Mask.overlap`). If the sprites have a
   ``mask`` attribute, it is used as the mask, otherwise a mask is created from
   the sprite's ``image`` (uses :func:`pygame.mask.from_surface`). Sprites must
   have a ``rect`` attribute; the ``mask`` attribute is optional.

   The first point of collision between the masks is returned. The collision
   point is offset from ``sprite1``'s mask's topleft corner (which is always
   (0, 0)). The collision point is a position within the mask and is not
   related to the actual screen position of ``sprite1``.

   This function is intended to be passed as a ``collided`` callback function
   to the group collide functions (see :meth:`spritecollide`,
   :meth:`groupcollide`, :meth:`spritecollideany`).

   .. note::
      To increase performance, create and set a ``mask`` attribute for all
      sprites that will use this function to check for collisions. Otherwise,
      each time this function is called it will create new masks.

   .. note::
      A new mask needs to be recreated each time a sprite's image is changed
      (e.g. if a new image is used or the existing image is rotated).

   ::

      # Example of mask creation for a sprite.
      sprite.mask = pygame.mask.from_surface(sprite.image)

   :returns: first point of collision between the masks or ``None`` if no
      collision
   :rtype: tuple(int, int) or NoneType

   .. versionadded:: 1.8.0

   .. ## pygame.sprite.collide_mask ##

.. function:: groupcollide

   | :sl:`Find all sprites that collide between two groups.`
   | :sg:`groupcollide(group1, group2, dokill1, dokill2, collided = None) -> Sprite_dict`

   This will find collisions between all the Sprites in two groups.
   Collision is determined by comparing the ``Sprite.rect`` attribute of
   each Sprite or by using the collided function if it is not None.

   Every Sprite inside group1 is added to the return dictionary. The value for
   each item is the list of Sprites in group2 that intersect.

   If either dokill argument is True, the colliding Sprites will be removed
   from their respective Group.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.groupcollide ##

.. function:: spritecollideany

   | :sl:`Simple test if a sprite intersects anything in a group.`
   | :sg:`spritecollideany(sprite, group, collided = None) -> Sprite` Collision with the returned sprite.
   | :sg:`spritecollideany(sprite, group, collided = None) -> None` No collision

   If the sprite collides with any single sprite in the group, a single
   sprite from the group is returned.  On no collision None is returned.

   If you don't need all the features of the ``pygame.sprite.spritecollide()`` function, this
   function will be a bit quicker.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.spritecollideany ##

.. ##  ##

.. ## pygame.sprite ##


--- Contenu du fichier : color.rst.txt ---
.. include:: common.txt

:mod:`pygame.Color`
===================

.. currentmodule:: pygame

.. class:: Color

   | :sl:`pygame object for color representations`
   | :sg:`Color(r, g, b) -> Color`
   | :sg:`Color(r, g, b, a=255) -> Color`
   | :sg:`Color(color_value) -> Color`

   The ``Color`` class represents ``RGBA`` color values using a value range of
   0 to 255 inclusive. It allows basic arithmetic operations — binary
   operations ``+``, ``-``, ``*``, ``//``, ``%``, and unary operation ``~`` — to
   create new colors, supports conversions to other color spaces such as ``HSV``
   or ``HSL`` and lets you adjust single color channels.
   Alpha defaults to 255 (fully opaque) when not given.
   The arithmetic operations and ``correct_gamma()`` method preserve subclasses.
   For the binary operators, the class of the returned color is that of the
   left hand color object of the operator.

   Color objects support equality comparison with other color objects and 3 or
   4 element tuples of integers. There was a bug in pygame 1.8.1
   where the default alpha was 0, not 255 like previously.

   Color objects export the C level array interface. The interface exports a
   read-only one dimensional unsigned byte array of the same assigned length
   as the color. The new buffer interface is also exported, with the same
   characteristics as the array interface.

   The floor division, ``//``, and modulus, ``%``, operators do not raise
   an exception for division by zero. Instead, if a color, or alpha, channel
   in the right hand color is 0, then the result is 0. For example: ::

       # These expressions are True
       Color(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)
       Color(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)

   Use ``int(color)`` to return the immutable integer value of the color,
   usable as a ``dict`` key. This integer value differs from the mapped
   pixel values of :meth:`pygame.Surface.get_at_mapped`,
   :meth:`pygame.Surface.map_rgb` and :meth:`pygame.Surface.unmap_rgb`.
   It can be passed as a ``color_value`` argument to :class:`Color`
   (useful with sets).

   See :doc:`color_list` for samples of the available named colors.

   :param int r: red value in the range of 0 to 255 inclusive
   :param int g: green value in the range of 0 to 255 inclusive
   :param int b: blue value in the range of 0 to 255 inclusive
   :param int a: (optional) alpha value in the range of 0 to 255 inclusive,
      default is 255
   :param color_value: color value (see note below for the supported formats)

      .. note::
         Supported ``color_value`` formats:
            | - **Color object:** clones the given :class:`Color` object
            | - **Color name: str:** name of the color to use, e.g. ``'red'``
              (all the supported name strings can be found in the
               :doc:`color_list`, with sample swatches)
            | - **HTML color format str:** ``'#rrggbbaa'`` or ``'#rrggbb'``,
              where rr, gg, bb, and aa are 2-digit hex numbers in the range
              of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF
              if not provided
            | - **hex number str:** ``'0xrrggbbaa'`` or ``'0xrrggbb'``, where
              rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00
              to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not
              provided
            | - **int:** int value of the color to use, using hex numbers can
              make this parameter more readable, e.g. ``0xrrggbbaa``, where rr,
              gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to
              0xFF inclusive, note that the aa (alpha) value is not optional for
              the int format and must be provided
            | - **tuple/list of int color values:** ``(R, G, B, A)`` or
              ``(R, G, B)``, where R, G, B, and A are int values in the range of
              0 to 255 inclusive, the A (alpha) value defaults to 255 if not
              provided

   :type color_value: Color or str or int or tuple(int, int, int, [int]) or
      list(int, int, int, [int])

   :returns: a newly created :class:`Color` object
   :rtype: Color

   .. versionchanged:: 2.0.0
      Support for tuples, lists, and :class:`Color` objects when creating
      :class:`Color` objects.
   .. versionchanged:: 1.9.2 Color objects export the C level array interface.
   .. versionchanged:: 1.9.0 Color objects support 4-element tuples of integers.
   .. versionchanged:: 1.8.1 New implementation of the class.

   .. attribute:: r

      | :sl:`Gets or sets the red value of the Color.`
      | :sg:`r -> int`

      The red value of the Color.

      .. ## Color.r ##

   .. attribute:: g

      | :sl:`Gets or sets the green value of the Color.`
      | :sg:`g -> int`

      The green value of the Color.

      .. ## Color.g ##

   .. attribute:: b

      | :sl:`Gets or sets the blue value of the Color.`
      | :sg:`b -> int`

      The blue value of the Color.

      .. ## Color.b ##

   .. attribute:: a

      | :sl:`Gets or sets the alpha value of the Color.`
      | :sg:`a -> int`

      The alpha value of the Color.

      .. ## Color.a ##

   .. attribute:: cmy

      | :sl:`Gets or sets the CMY representation of the Color.`
      | :sg:`cmy -> tuple`

      The ``CMY`` representation of the Color. The ``CMY`` components are in
      the ranges ``C`` = [0, 1], ``M`` = [0, 1], ``Y`` = [0, 1]. Note that this
      will not return the absolutely exact ``CMY`` values for the set ``RGB``
      values in all cases. Due to the ``RGB`` mapping from 0-255 and the
      ``CMY`` mapping from 0-1 rounding errors may cause the ``CMY`` values to
      differ slightly from what you might expect.

      .. ## Color.cmy ##

   .. attribute:: hsva

      | :sl:`Gets or sets the HSVA representation of the Color.`
      | :sg:`hsva -> tuple`

      The ``HSVA`` representation of the Color. The ``HSVA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``V`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSV`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSV`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSV`` values to differ slightly from what you might expect.

      .. ## Color.hsva ##

   .. attribute:: hsla

      | :sl:`Gets or sets the HSLA representation of the Color.`
      | :sg:`hsla -> tuple`

      The ``HSLA`` representation of the Color. The ``HSLA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``L`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSL`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSL`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSL`` values to differ slightly from what you might expect.

      .. ## Color.hsla ##

   .. attribute:: i1i2i3

      | :sl:`Gets or sets the I1I2I3 representation of the Color.`
      | :sg:`i1i2i3 -> tuple`

      The ``I1I2I3`` representation of the Color. The ``I1I2I3`` components are
      in the ranges ``I1`` = [0, 1], ``I2`` = [-0.5, 0.5], ``I3`` = [-0.5,
      0.5]. Note that this will not return the absolutely exact ``I1I2I3``
      values for the set ``RGB`` values in all cases. Due to the ``RGB``
      mapping from 0-255 and the ``I1I2I3`` mapping from 0-1 rounding errors
      may cause the ``I1I2I3`` values to differ slightly from what you might
      expect.

      .. ## Color.i1i2i3 ##

   .. method:: normalize

      | :sl:`Returns the normalized RGBA values of the Color.`
      | :sg:`normalize() -> tuple`

      Returns the normalized ``RGBA`` values of the Color as floating point
      values.

      .. ## Color.normalize ##

   .. method:: correct_gamma

      | :sl:`Applies a certain gamma value to the Color.`
      | :sg:`correct_gamma (gamma) -> Color`

      Applies a certain gamma value to the Color and returns a new Color with
      the adjusted ``RGBA`` values.

      .. ## Color.correct_gamma ##

   .. method:: set_length

      | :sl:`Set the number of elements in the Color to 1,2,3, or 4.`
      | :sg:`set_length(len) -> None`

      DEPRECATED: You may unpack the values you need like so, 
      ``r, g, b, _ = pygame.Color(100, 100, 100)``
      If you only want r, g and b
      Or 
      ``r, g, *_ = pygame.Color(100, 100, 100)`` 
      if you only want r and g

      The default Color length is 4. Colors can have lengths 1,2,3 or 4. This
      is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to
      get the length of a Color do ``len(acolor)``.

      .. deprecated:: 2.1.3
      .. versionadded:: 1.9.0

      .. ## Color.set_length ##

   .. method:: grayscale

      | :sl:`returns the grayscale of a Color`
      | :sg:`grayscale() -> Color`

      Returns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..

      .. ## Color.grayscale ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given Color.`
      | :sg:`lerp(Color, float) -> Color`

      Returns a Color which is a linear interpolation between self and the
      given Color in RGBA space. The second parameter determines how far
      between self and other the result is going to be.
      It must be a value between 0 and 1 where 0 means self and 1 means
      other will be returned.

      .. versionadded:: 2.0.1

      .. ## Color.lerp ##

   .. method:: premul_alpha

      | :sl:`returns a Color where the r,g,b components have been multiplied by the alpha.`
      | :sg:`premul_alpha() -> Color`

      Returns a new Color where each of the red, green and blue colour
      channels have been multiplied by the alpha channel of the original
      color. The alpha channel remains unchanged.

      This is useful when working with the ``BLEND_PREMULTIPLIED`` blending mode
      flag for :meth:`pygame.Surface.blit()`, which assumes that all surfaces using
      it are using pre-multiplied alpha colors.

      .. versionadded:: 2.0.0

      .. ## Color.premul_alpha ##

   .. method:: update

      | :sl:`Sets the elements of the color`
      | :sg:`update(r, g, b) -> None`
      | :sg:`update(r, g, b, a=255) -> None`
      | :sg:`update(color_value) -> None`

      Sets the elements of the color. See parameters for :meth:`pygame.Color` for the
      parameters of this function. If the alpha value was not set it will not change.

      .. versionadded:: 2.0.1

      .. ## Color.update ##
   .. ## pygame.Color ##


--- Contenu du fichier : transform.rst.txt ---
.. include:: common.txt

:mod:`pygame.transform`
=======================

.. module:: pygame.transform
   :synopsis: pygame module to transform surfaces

| :sl:`pygame module to transform surfaces`

A Surface transform is an operation that moves or resizes the pixels. All these
functions take a Surface to operate on and return a new Surface with the
results.

Some of the transforms are considered destructive. These means every time they
are performed they lose pixel data. Common examples of this are resizing and
rotating. For this reason, it is better to re-transform the original surface
than to keep transforming an image multiple times. (For example, suppose you
are animating a bouncing spring which expands and contracts. If you applied the
size changes incrementally to the previous images, you would lose detail.
Instead, always begin with the original image and scale to the desired size.)

.. versionchanged:: 2.0.2 transform functions now support keyword arguments.

.. function:: flip

   | :sl:`flip vertically and horizontally`
   | :sg:`flip(surface, flip_x, flip_y) -> Surface`

   This can flip a Surface either vertically, horizontally, or both.
   The arguments ``flip_x`` and ``flip_y`` are booleans that control whether
   to flip each axis. Flipping a Surface is non-destructive and returns a new
   Surface with the same dimensions.

   .. ## pygame.transform.flip ##

.. function:: scale

   | :sl:`resize to new resolution`
   | :sg:`scale(surface, size, dest_surface=None) -> Surface`

   Resizes the Surface to a new size, given as (width, height). 
   This is a fast scale operation that does not sample the results.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be the same size as the size (width, height) passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale ##

.. function:: scale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`scale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave scale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`scale()`, but scales by some factor, rather than taking
   the new size explicitly. For example, :code:`transform.scale_by(surf, 3)`
   will triple the size of the surface in both dimensions. Optionally, the
   scale factor can be a sequence of two numbers, controlling x and y scaling
   separately. For example, :code:`transform.scale_by(surf, (2, 1))` doubles
   the image width but keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.scale_by ##

.. function:: rotate

   | :sl:`rotate an image`
   | :sg:`rotate(surface, angle) -> Surface`

   Unfiltered counterclockwise rotation. The angle argument represents degrees
   and can be any floating point value. Negative angle amounts will rotate
   clockwise.

   Unless rotating by 90 degree increments, the image will be padded larger to
   hold the new size. If the image has pixel alphas, the padded area will be
   transparent. Otherwise pygame will pick a color that matches the Surface
   colorkey or the topleft pixel value.

   .. ## pygame.transform.rotate ##

.. function:: rotozoom

   | :sl:`filtered scale and rotation`
   | :sg:`rotozoom(surface, angle, scale) -> Surface`

   This is a combined scale and rotation transform. The resulting Surface will
   be a filtered 32-bit Surface. The scale argument is a floating point value
   that will be multiplied by the current resolution. The angle argument is a
   floating point value that represents the counterclockwise degrees to rotate.
   A negative rotation angle will rotate clockwise.

   .. ## pygame.transform.rotozoom ##

.. function:: scale2x

   | :sl:`specialized image doubler`
   | :sg:`scale2x(surface, dest_surface=None) -> Surface`

   This will return a new image that is double the size of the original. It
   uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of
   bitmap graphics.

   This really only has an effect on simple images with solid colors. On
   photographic and antialiased images it will look like a regular unfiltered
   scale.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be twice the size of the source surface passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale2x ##

.. function:: smoothscale

   | :sl:`scale a surface to an arbitrary size smoothly`
   | :sg:`smoothscale(surface, size, dest_surface=None) -> Surface`

   Uses one of two different algorithms for scaling each dimension of the input
   surface as required. For shrinkage, the output pixels are area averages of
   the colors they cover. For expansion, a bilinear filter is used. For the
   x86-64 and i686 architectures, optimized ``MMX`` routines are included and
   will run much faster than other machine types. The size is a 2 number
   sequence for (width, height). This function only works for 24-bit or 32-bit
   surfaces. An exception will be thrown if the input surface bit depth is less
   than 24.

   .. versionadded:: 1.8

   .. ## pygame.transform.smoothscale ##

.. function:: smoothscale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`smoothscale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave smoothscale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`smoothscale()`, but scales by some factor, rather than
   taking the new size explicitly. For example,
   :code:`transform.smoothscale_by(surf, 3)` will triple the size of the
   surface in both dimensions. Optionally, the scale factor can be a sequence
   of two numbers, controlling x and y scaling separately. For example,
   :code:`transform.smoothscale_by(surf, (2, 1))` doubles the image width but
   keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.smoothscale_by ##

.. function:: get_smoothscale_backend

   | :sl:`return smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`get_smoothscale_backend() -> string`

   Shows whether or not smoothscale is using ``MMX`` or ``SSE`` acceleration.
   If no acceleration is available then "GENERIC" is returned. For a x86
   processor the level of acceleration to use is determined at runtime.

   This function is provided for pygame testing and debugging.

   .. ## pygame.transform.get_smoothscale_backend ##

.. function:: set_smoothscale_backend

   | :sl:`set smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`set_smoothscale_backend(backend) -> None`

   Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'
   turns off acceleration. 'MMX' uses ``MMX`` instructions only. 'SSE' allows
   ``SSE`` extensions as well. A value error is raised if type is not
   recognized or not supported by the current processor.

   This function is provided for pygame testing and debugging. If smoothscale
   causes an invalid instruction error then it is a pygame/SDL bug that should
   be reported. Use this function as a temporary fix only.

   .. ## pygame.transform.set_smoothscale_backend ##

.. function:: chop

   | :sl:`gets a copy of an image with an interior area removed`
   | :sg:`chop(surface, rect) -> Surface`

   Extracts a portion of an image. All vertical and horizontal pixels
   surrounding the given rectangle area are removed. The corner areas (diagonal
   to the rect) are then brought together. (The original image is not altered
   by this operation.)

   ``NOTE``: If you want a "crop" that returns the part of an image within a
   rect, you can blit with a rect to a new surface or copy a subsurface.

   .. ## pygame.transform.chop ##

.. function:: laplacian

   | :sl:`find edges in a surface`
   | :sg:`laplacian(surface, dest_surface=None) -> Surface`

   Finds the edges in a surface using the laplacian algorithm.

   .. versionadded:: 1.8

   .. ## pygame.transform.laplacian ##

.. function:: average_surfaces

   | :sl:`find the average surface from many surfaces.`
   | :sg:`average_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface`

   Takes a sequence of surfaces and returns a surface with average colors from
   each of the surfaces.

   palette_colors - if true we average the colors in palette, otherwise we
   average the pixel values. This is useful if the surface is actually
   greyscale colors, and not palette colors.

   Note, this function currently does not handle palette using surfaces
   correctly.

   .. versionadded:: 1.8
   .. versionadded:: 1.9 ``palette_colors`` argument

   .. ## pygame.transform.average_surfaces ##

.. function:: average_color

   | :sl:`finds the average color of a surface`
   | :sg:`average_color(surface, rect=None, consider_alpha=False) -> Color`

   Finds the average color of a Surface or a region of a surface specified by a
   Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is
   taken into account (removing the black artifacts).

   .. versionadded:: 2.1.2 ``consider_alpha`` argument

   .. ## pygame.transform.average_color ##

.. function:: grayscale

   | :sl:`grayscale a surface`
   | :sg:`grayscale(surface, dest_surface=None) -> Surface`

   Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.

   An optional destination surface can be passed which is faster than creating a new Surface.
   This destination surface must have the same dimensions (width, height) and depth as the source Surface.

   .. ## pygame.transform.grayscale ##

.. function:: threshold

   | :sl:`finds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.`
   | :sg:`threshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -> num_threshold_pixels`

   This versatile function can be used for find colors in a 'surf' close to a 'search_color'
   or close to colors in a separate 'search_surf'.

   It can also be used to transfer pixels into a 'dest_surf' that match or don't match.

   By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the
   threshold are changed to set_color. If inverse_set is optionally set to True,
   the pixels that ARE within the threshold are changed to set_color.

   If the optional 'search_surf' surface is given, it is used to threshold against
   rather than the specified 'set_color'. That is, it will find each pixel in the
   'surf' that is within the 'threshold' of the pixel at the same coordinates
   of the 'search_surf'.

   :param dest_surf: Surface we are changing. See 'set_behavior'.
    Should be None if counting (set_behavior is 0).
   :type dest_surf: pygame.Surface or None

   :param pygame.Surface surf: Surface we are looking at.

   :param pygame.Color search_color: Color we are searching for.

   :param pygame.Color threshold: Within this distance from search_color (or search_surf).
     You can use a threshold of (r,g,b,a) where the r,g,b can have different
     thresholds. So you could use an r threshold of 40 and a blue threshold of 2
     if you like.

   :param set_color: Color we set in dest_surf.
   :type set_color: pygame.Color or None

   :param int set_behavior:
    - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.
    - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.
    - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.

   :param search_surf:
    - search_surf=None (default). Search against 'search_color' instead.
    - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.
   :type search_surf: pygame.Surface or None

   :param bool inverse_set:
     - False, default. Pixels outside of threshold are changed.
     - True, Pixels within threshold are changed.

   :rtype: int
   :returns: The number of pixels that are within the 'threshold' in 'surf'
     compared to either 'search_color' or `search_surf`.

   :Examples:

   See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/main/test/transform_test.py

   .. literalinclude:: ../../../test/transform_test.py
      :pyobject: TransformModuleTest.test_threshold_dest_surf_not_change


   .. versionadded:: 1.8
   .. versionchanged:: 1.9.4
      Fixed a lot of bugs and added keyword arguments. Test your code.

   .. ## pygame.transform.threshold ##

.. ## pygame.transform ##


--- Contenu du fichier : examples.rst.txt ---
.. include:: common.txt

:mod:`pygame.examples`
======================

.. module:: pygame.examples
   :synopsis: module of example programs

| :sl:`module of example programs`

These examples should help get you started with pygame. Here is a brief rundown
of what you get. The source code for these examples is in the public domain.
Feel free to use for your own projects.

There are several ways to run the examples. First they can be run as
stand-alone programs. Second they can be imported and their ``main()`` methods
called (see below). Finally, the easiest way is to use the python -m option:

::

   python -m pygame.examples.<example name> <example arguments>

eg:

::

   python -m pygame.examples.scaletest someimage.png

Resources such as images and sounds for the examples are found in the 
pygame/examples/data subdirectory.

You can find where the example files are installed by using the following
commands inside the python interpreter.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.__file__
   '/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'

On each OS and version of Python the location will be slightly different.
For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/'
On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'


You can also run the examples in the python interpreter by calling each modules main() function.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.main()


We're always on the lookout for more examples and/or example requests. Code
like this is probably the best way to start getting involved with python
gaming.

examples as a package is new to pygame 1.9.0. But most of the examples came with
pygame much earlier.

.. function:: aliens.main

   | :sl:`play the full aliens example`
   | :sg:`aliens.main() -> None`

   This started off as a port of the ``SDL`` demonstration, Aliens. Now it has
   evolved into something sort of resembling fun. This demonstrates a lot of
   different uses of sprites and optimized blitting. Also transparency,
   colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is
   117! goodluck)

   .. ## pygame.examples.aliens.main ##

.. function:: stars.main

   | :sl:`run a simple starfield example`
   | :sg:`stars.main() -> None`

   A simple starfield example. You can change the center of perspective by
   leftclicking the mouse on the screen.

   .. ## pygame.examples.stars.main ##

.. function:: chimp.main

   | :sl:`hit the moving chimp`
   | :sg:`chimp.main() -> None`

   This simple example is derived from the line-by-line tutorial that comes
   with pygame. It is based on a 'popular' web banner. Note there are comments
   here, but for the full explanation, follow along in the tutorial.

   .. ## pygame.examples.chimp.main ##

.. function:: moveit.main

   | :sl:`display animated objects on the screen`
   | :sg:`moveit.main() -> None`

   This is the full and final example from the Pygame Tutorial, "How Do I Make
   It Move". It creates 10 objects and animates them on the screen.

   Note it's a bit scant on error checking, but it's easy to read. :]
   Fortunately, this is python, and we needn't wrestle with a pile of error
   codes.

   .. ## pygame.examples.moveit.main ##

.. function:: fonty.main

   | :sl:`run a font rendering example`
   | :sg:`fonty.main() -> None`

   Super quick, super simple application demonstrating the different ways to
   render fonts with the font module

   .. ## pygame.examples.fonty.main ##

.. function:: freetype_misc.main

   | :sl:`run a FreeType rendering example`
   | :sg:`freetype_misc.main() -> None`

   A showcase of rendering features the :class:`pygame.freetype.Font`
   class provides in addition to those available with :class:`pygame.font.Font`.
   It is a demonstration of direct to surface rendering, with vertical text
   and rotated text, opaque text and semi transparent text, horizontally
   stretched text and vertically stretched text.

   .. ## pygame.examples.fonty.main ##

.. function:: vgrade.main

   | :sl:`display a vertical gradient`
   | :sg:`vgrade.main() -> None`

   Demonstrates creating a vertical gradient with pixelcopy and NumPy python.
   The app will create a new gradient every half second and report the time
   needed to create and display the image. If you're not prepared to start
   working with the NumPy arrays, don't worry about the source for this one :]

   .. ## pygame.examples.vgrade.main ##

.. function:: eventlist.main

   | :sl:`display pygame events`
   | :sg:`eventlist.main() -> None`

   Eventlist is a sloppy style of pygame, but is a handy tool for learning
   about pygame events and input. At the top of the screen are the state of
   several device values, and a scrolling list of events are displayed on the
   bottom.

   This is not quality 'ui' code at all, but you can see how to implement very
   non-interactive status displays, or even a crude text output control.

   .. ## pygame.examples.eventlist.main ##

.. function:: arraydemo.main

   | :sl:`show various surfarray effects`
   | :sg:`arraydemo.main(arraytype=None) -> None`

   Another example filled with various surfarray effects. It requires the
   surfarray and image modules to be installed. This little demo can also make
   a good starting point for any of your own tests with surfarray

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.arraydemo.main ##

.. function:: sound.main

   | :sl:`load and play a sound`
   | :sg:`sound.main(file_path=None) -> None`

   Extremely basic testing of the mixer module. Load a sound and play it. All
   from the command shell, no graphics.

   If provided, use the audio file 'file_path', otherwise use a default file.

   ``sound.py`` optional command line argument: an audio file

   .. ## pygame.examples.sound.main ##

.. function:: sound_array_demos.main

   | :sl:`play various sndarray effects`
   | :sg:`sound_array_demos.main(arraytype=None) -> None`


   Uses sndarray and NumPy to create offset faded copies of the
   original sound. Currently it just uses hardcoded values for the number of
   echoes and the delay. Easy for you to recreate as needed.

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.sound_array_demos.main ##

.. function:: liquid.main

   | :sl:`display an animated liquid effect`
   | :sg:`liquid.main() -> None`

   This example was created in a quick comparison with the BlitzBasic gaming
   language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).

   .. ## pygame.examples.liquid.main ##

.. function:: glcube.main

   | :sl:`display an animated 3D cube using OpenGL`
   | :sg:`glcube.main() -> None`

   Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.

   .. ## pygame.examples.glcube.main ##

.. function:: scrap_clipboard.main

   | :sl:`access the clipboard`
   | :sg:`scrap_clipboard.main() -> None`

   A simple demonstration example for the clipboard support.

   .. ## pygame.examples.scrap_clipboard.main ##

.. function:: mask.main

   | :sl:`display multiple images bounce off each other using collision detection`
   | :sg:`mask.main(*args) -> None`

   Positional arguments:

   ::

       one or more image file names.

   This ``pygame.masks`` demo will display multiple moving sprites bouncing off
   each other. More than one sprite image can be provided.

   If run as a program then ``mask.py`` takes one or more image files as
   command line arguments.

   .. ## pygame.examples.mask.main ##

.. function:: testsprite.main

   | :sl:`show lots of sprites moving around`
   | :sg:`testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = [640, 480], use_alpha = False, flags = 0) -> None`

   Optional keyword arguments:

   ::

       update_rects - use the RenderUpdate sprite group class
       use_static - include non-moving images
       use_FastRenderGroup - Use the FastRenderGroup sprite group
       screen_dims - pygame window dimensions
       use_alpha - use alpha blending
       flags - additional display mode flags

   Like the ``testsprite.c`` that comes with SDL, this pygame version shows
   lots of sprites moving around.

   If run as a stand-alone program then no command line arguments are taken.

   .. ## pygame.examples.testsprite.main ##

.. function:: headless_no_windows_needed.main

   | :sl:`write an image file that is smoothscaled copy of an input file`
   | :sg:`headless_no_windows_needed.main(fin, fout, w, h) -> None`

   arguments:

   ::

       fin - name of an input image file
       fout - name of the output file to create/overwrite
       w, h - size of the rescaled image, as integer width and height

   How to use pygame with no windowing system, like on headless servers.

   Thumbnail generation with scaling is an example of what you can do with
   pygame.

   ``NOTE``: the pygame scale function uses MMX/SSE if available, and can be
   run in multiple threads.

   If ``headless_no_windows_needed.py`` is run as a program it takes the
   following command line arguments:

   ::

       -scale inputimage outputimage new_width new_height
       eg. -scale in.png outpng 50 50

   .. ## pygame.examples.headless_no_windows_needed.main ##

.. function:: joystick.main

   | :sl:`demonstrate joystick functionality`
   | :sg:`joystick.main() -> None`

   A demo showing full joystick support.

   .. versionadded:: 2.0.2

   .. ## pygame.examples.joystick.main ##

.. function:: blend_fill.main

   | :sl:`demonstrate the various surface.fill method blend options`
   | :sg:`blend_fill.main() -> None`

   A interactive demo that lets one choose which BLEND_xxx option to apply to a
   surface.

   .. ## pygame.examples.blend_fill.main ##

.. function:: blit_blends.main

   | :sl:`uses alternative additive fill to that of surface.fill`
   | :sg:`blit_blends.main() -> None`

   Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat
   like blend_fill.

   .. ## pygame.examples.blit_blends.main ##

.. function:: cursors.main

   | :sl:`display two different custom cursors`
   | :sg:`cursors.main() -> None`

   Display an arrow or circle with crossbar cursor.

   .. ## pygame.examples.cursors.main ##

.. function:: pixelarray.main

   | :sl:`display various pixelarray generated effects`
   | :sg:`pixelarray.main() -> None`

   Display various pixelarray generated effects.

   .. ## pygame.examples.pixelarray.main ##

.. function:: scaletest.main

   | :sl:`interactively scale an image using smoothscale`
   | :sg:`scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -> None`

   arguments:

   ::

       imagefile - file name of source image (required)
       convert_alpha - use convert_alpha() on the surf (default False)
       run_speed_test - (default False)

   A smoothscale example that resized an image on the screen. Vertical and
   horizontal arrow keys are used to change the width and height of the
   displayed image. If the convert_alpha option is True then the source image
   is forced to have source alpha, whether or not the original images does. If
   run_speed_test is True then a background timing test is performed instead of
   the interactive scaler.

   If ``scaletest.py`` is run as a program then the command line options are:

   ::

       ImageFile [-t] [-convert_alpha]
       [-t] = Run Speed Test
       [-convert_alpha] = Use convert_alpha() on the surf.

   .. ## pygame.examples.scaletest.main ##

.. function:: midi.main

   | :sl:`run a midi example`
   | :sg:`midi.main(mode='output', device_id=None) -> None`

   Arguments:

   ::

       mode - if 'output' run a midi keyboard output example
                 'input' run a midi event logger input example
                 'list' list available midi devices
              (default 'output')
       device_id - midi device number; if None then use the default midi input or
                   output device for the system

   The output example shows how to translate mouse clicks or computer keyboard
   events into midi notes. It implements a rudimentary button widget and state
   machine.

   The input example shows how to translate midi input to pygame events.

   With the use of a virtual midi patch cord the output and input examples can
   be run as separate processes and connected so the keyboard output is
   displayed on a console.

   new to pygame 1.9.0

   .. ## pygame.examples.midi.main ##

.. function:: scroll.main

   | :sl:`run a Surface.scroll example that shows a magnified image`
   | :sg:`scroll.main(image_file=None) -> None`

   This example shows a scrollable image that has a zoom factor of eight. It
   uses the :meth:`Surface.scroll() <pygame.Surface.scroll>`
   function to shift the image on the display surface.
   A clip rectangle protects a margin area. If called as a function,
   the example accepts an optional image file path. If run as a program it
   takes an optional file path command line argument. If no file is provided a
   default image file is used.

   When running click on a black triangle to move one pixel in the direction
   the triangle points. Or use the arrow keys. Close the window or press
   ``ESC`` to quit.

   .. ## pygame.examples.scroll.main ##

.. function:: camera.main

   | :sl:`display video captured live from an attached camera`
   | :sg:`camera.main() -> None`

   A simple live video player, it uses the first available camera it finds on
   the system.

   .. ## pygame.examples.camera.main ##

.. function:: playmus.main

   | :sl:`play an audio file`
   | :sg:`playmus.main(file_path) -> None`

   A simple music player with window and keyboard playback control. Playback can
   be paused and rewound to the beginning.

   .. ## pygame.examples.playmus.main ##

.. ## pygame.examples ##


--- Contenu du fichier : testmail.txt ---
alice.johnson@example.com
bob.smith@example.net
carol.martin@example.org
david.lee@example.co
emma.white@example.edu
frank.taylor@example.biz
grace.wilson@example.info
hank.moore@example.tv
isabella.jones@example.museum
jackson.brown@example.asia

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEst-ce que tout fonctionne ? test [F test2

--- Contenu du fichier : data.txt ---
i'm trying open file in the another file 

--- Contenu du fichier : final.txt ---




--- Contenu du fichier : top_level.txt ---
pygame


--- Contenu du fichier : entry_points.txt ---
[pyinstaller40]
hook-dirs = pygame.__pyinstaller:get_hook_dirs


--- Contenu du fichier : vendor.txt ---
CacheControl==0.14.0
distlib==0.3.8
distro==1.9.0
msgpack==1.0.8
packaging==24.1
platformdirs==4.2.2
pyproject-hooks==1.0.0
requests==2.32.3
    certifi==2024.7.4
    idna==3.7
    urllib3==1.26.18
rich==13.7.1
    pygments==2.18.0
    typing_extensions==4.12.2
resolvelib==1.0.1
setuptools==70.3.0
tomli==2.0.1
truststore==0.9.1


--- Contenu du fichier : AUTHORS.txt ---
@Switch01
A_Rog
Aakanksha Agrawal
Abhinav Sagar
ABHYUDAY PRATAP SINGH
abs51295
AceGentile
Adam Chainz
Adam Tse
Adam Wentz
admin
Adolfo Ochagavía
Adrien Morison
Agus
ahayrapetyan
Ahilya
AinsworthK
Akash Srivastava
Alan Yee
Albert Tugushev
Albert-Guan
albertg
Alberto Sottile
Aleks Bunin
Ales Erjavec
Alethea Flowers
Alex Gaynor
Alex Grönholm
Alex Hedges
Alex Loosley
Alex Morega
Alex Stachowiak
Alexander Shtyrov
Alexandre Conrad
Alexey Popravka
Aleš Erjavec
Alli
Ami Fischman
Ananya Maiti
Anatoly Techtonik
Anders Kaseorg
Andre Aguiar
Andreas Lutro
Andrei Geacar
Andrew Gaul
Andrew Shymanel
Andrey Bienkowski
Andrey Bulgakov
Andrés Delfino
Andy Freeland
Andy Kluger
Ani Hayrapetyan
Aniruddha Basak
Anish Tambe
Anrs Hu
Anthony Sottile
Antoine Musso
Anton Ovchinnikov
Anton Patrushev
Antonio Alvarado Hernandez
Antony Lee
Antti Kaihola
Anubhav Patel
Anudit Nagar
Anuj Godase
AQNOUCH Mohammed
AraHaan
arena
arenasys
Arindam Choudhury
Armin Ronacher
Arnon Yaari
Artem
Arun Babu Neelicattu
Ashley Manton
Ashwin Ramaswami
atse
Atsushi Odagiri
Avinash Karhana
Avner Cohen
Awit (Ah-Wit) Ghirmai
Baptiste Mispelon
Barney Gale
barneygale
Bartek Ogryczak
Bastian Venthur
Ben Bodenmiller
Ben Darnell
Ben Hoyt
Ben Mares
Ben Rosser
Bence Nagy
Benjamin Peterson
Benjamin VanEvery
Benoit Pierre
Berker Peksag
Bernard
Bernard Tyers
Bernardo B. Marques
Bernhard M. Wiedemann
Bertil Hatt
Bhavam Vidyarthi
Blazej Michalik
Bogdan Opanchuk
BorisZZZ
Brad Erickson
Bradley Ayers
Branch Vincent
Brandon L. Reiss
Brandt Bucher
Brannon Dorsey
Brett Randall
Brett Rosen
Brian Cristante
Brian Rosner
briantracy
BrownTruck
Bruno Oliveira
Bruno Renié
Bruno S
Bstrdsmkr
Buck Golemon
burrows
Bussonnier Matthias
bwoodsend
c22
Caleb Martinez
Calvin Smith
Carl Meyer
Carlos Liam
Carol Willing
Carter Thayer
Cass
Chandrasekhar Atina
Charlie Marsh
Chih-Hsuan Yen
Chris Brinker
Chris Hunt
Chris Jerdonek
Chris Kuehl
Chris Markiewicz
Chris McDonough
Chris Pawley
Chris Pryer
Chris Wolfe
Christian Clauss
Christian Heimes
Christian Oudard
Christoph Reiter
Christopher Hunt
Christopher Snyder
chrysle
cjc7373
Clark Boylan
Claudio Jolowicz
Clay McClure
Cody
Cody Soyland
Colin Watson
Collin Anderson
Connor Osborn
Cooper Lees
Cooper Ry Lees
Cory Benfield
Cory Wright
Craig Kerstiens
Cristian Sorinel
Cristina
Cristina Muñoz
ctg123
Curtis Doty
cytolentino
Daan De Meyer
Dale
Damian
Damian Quiroga
Damian Shaw
Dan Black
Dan Savilonis
Dan Sully
Dane Hillard
daniel
Daniel Collins
Daniel Hahler
Daniel Holth
Daniel Jost
Daniel Katz
Daniel Shaulov
Daniele Esposti
Daniele Nicolodi
Daniele Procida
Daniil Konovalenko
Danny Hermes
Danny McClanahan
Darren Kavanagh
Dav Clark
Dave Abrahams
Dave Jones
David Aguilar
David Black
David Bordeynik
David Caro
David D Lowe
David Evans
David Hewitt
David Linke
David Poggi
David Poznik
David Pursehouse
David Runge
David Tucker
David Wales
Davidovich
ddelange
Deepak Sharma
Deepyaman Datta
Denise Yu
dependabot[bot]
derwolfe
Desetude
Devesh Kumar Singh
devsagul
Diego Caraballo
Diego Ramirez
DiegoCaraballo
Dimitri Merejkowsky
Dimitri Papadopoulos
Dirk Stolle
Dmitry Gladkov
Dmitry Volodin
Domen Kožar
Dominic Davis-Foster
Donald Stufft
Dongweiming
doron zarhi
Dos Moonen
Douglas Thor
DrFeathers
Dustin Ingram
Dustin Rodrigues
Dwayne Bailey
Ed Morley
Edgar Ramírez
Edgar Ramírez Mondragón
Ee Durbin
Efflam Lemaillet
efflamlemaillet
Eitan Adler
ekristina
elainechan
Eli Schwartz
Elisha Hollander
Ellen Marie Dash
Emil Burzo
Emil Styrke
Emmanuel Arias
Endoh Takanao
enoch
Erdinc Mutlu
Eric Cousineau
Eric Gillingham
Eric Hanchrow
Eric Hopper
Erik M. Bray
Erik Rose
Erwin Janssen
Eugene Vereshchagin
everdimension
Federico
Felipe Peter
Felix Yan
fiber-space
Filip Kokosiński
Filipe Laíns
Finn Womack
finnagin
Flavio Amurrio
Florian Briand
Florian Rathgeber
Francesco
Francesco Montesano
Fredrik Orderud
Frost Ming
Gabriel Curio
Gabriel de Perthuis
Garry Polley
gavin
gdanielson
Geoffrey Sneddon
George Song
Georgi Valkov
Georgy Pchelkin
ghost
Giftlin Rajaiah
gizmoguy1
gkdoc
Godefroid Chapelle
Gopinath M
GOTO Hayato
gousaiyang
gpiks
Greg Roodt
Greg Ward
Guilherme Espada
Guillaume Seguin
gutsytechster
Guy Rozendorn
Guy Tuval
gzpan123
Hanjun Kim
Hari Charan
Harsh Vardhan
harupy
Harutaka Kawamura
hauntsaninja
Henrich Hartzer
Henry Schreiner
Herbert Pfennig
Holly Stotelmyer
Honnix
Hsiaoming Yang
Hugo Lopes Tavares
Hugo van Kemenade
Hugues Bruant
Hynek Schlawack
Ian Bicking
Ian Cordasco
Ian Lee
Ian Stapleton Cordasco
Ian Wienand
Igor Kuzmitshov
Igor Sobreira
Ikko Ashimine
Ilan Schnell
Illia Volochii
Ilya Baryshev
Inada Naoki
Ionel Cristian Mărieș
Ionel Maries Cristian
Itamar Turner-Trauring
Ivan Pozdeev
J. Nick Koston
Jacob Kim
Jacob Walls
Jaime Sanz
jakirkham
Jakub Kuczys
Jakub Stasiak
Jakub Vysoky
Jakub Wilk
James Cleveland
James Curtin
James Firth
James Gerity
James Polley
Jan Pokorný
Jannis Leidel
Jarek Potiuk
jarondl
Jason Curtis
Jason R. Coombs
JasonMo
JasonMo1
Jay Graves
Jean Abou Samra
Jean-Christophe Fillion-Robin
Jeff Barber
Jeff Dairiki
Jeff Widman
Jelmer Vernooĳ
jenix21
Jeremy Fleischman
Jeremy Stanley
Jeremy Zafran
Jesse Rittner
Jiashuo Li
Jim Fisher
Jim Garrison
Jinzhe Zeng
Jiun Bae
Jivan Amara
Joe Bylund
Joe Michelini
John Paton
John Sirois
John T. Wodder II
John-Scott Atlakson
johnthagen
Jon Banafato
Jon Dufresne
Jon Parise
Jonas Nockert
Jonathan Herbert
Joonatan Partanen
Joost Molenaar
Jorge Niedbalski
Joseph Bylund
Joseph Long
Josh Bronson
Josh Cannon
Josh Hansen
Josh Schneier
Joshua
Juan Luis Cano Rodríguez
Juanjo Bazán
Judah Rand
Julian Berman
Julian Gethmann
Julien Demoor
Jussi Kukkonen
jwg4
Jyrki Pulliainen
Kai Chen
Kai Mueller
Kamal Bin Mustafa
kasium
kaustav haldar
keanemind
Keith Maxwell
Kelsey Hightower
Kenneth Belitzky
Kenneth Reitz
Kevin Burke
Kevin Carter
Kevin Frommelt
Kevin R Patterson
Kexuan Sun
Kit Randel
Klaas van Schelven
KOLANICH
konstin
kpinc
Krishna Oza
Kumar McMillan
Kuntal Majumder
Kurt McKee
Kyle Persohn
lakshmanaram
Laszlo Kiss-Kollar
Laurent Bristiel
Laurent LAPORTE
Laurie O
Laurie Opperman
layday
Leon Sasson
Lev Givon
Lincoln de Sousa
Lipis
lorddavidiii
Loren Carvalho
Lucas Cimon
Ludovic Gasc
Luis Medel
Lukas Geiger
Lukas Juhrich
Luke Macken
Luo Jiebin
luojiebin
luz.paz
László Kiss Kollár
M00nL1ght
Marc Abramowitz
Marc Tamlyn
Marcus Smith
Mariatta
Mark Kohler
Mark McLoughlin
Mark Williams
Markus Hametner
Martey Dodoo
Martin Fischer
Martin Häcker
Martin Pavlasek
Masaki
Masklinn
Matej Stuchlik
Mathew Jennings
Mathieu Bridon
Mathieu Kniewallner
Matt Bacchi
Matt Good
Matt Maker
Matt Robenolt
Matt Wozniski
matthew
Matthew Einhorn
Matthew Feickert
Matthew Gilliard
Matthew Hughes
Matthew Iversen
Matthew Treinish
Matthew Trumbell
Matthew Willson
Matthias Bussonnier
mattip
Maurits van Rees
Max W Chase
Maxim Kurnikov
Maxime Rouyrre
mayeut
mbaluna
mdebi
memoselyk
meowmeowcat
Michael
Michael Aquilina
Michael E. Karpeles
Michael Klich
Michael Mintz
Michael Williamson
michaelpacer
Michał Górny
Mickaël Schoentgen
Miguel Araujo Perez
Mihir Singh
Mike
Mike Hendricks
Min RK
MinRK
Miro Hrončok
Monica Baluna
montefra
Monty Taylor
morotti
mrKazzila
Muha Ajjan
Nadav Wexler
Nahuel Ambrosini
Nate Coraor
Nate Prewitt
Nathan Houghton
Nathaniel J. Smith
Nehal J Wani
Neil Botelho
Nguyễn Gia Phong
Nicholas Serra
Nick Coghlan
Nick Stenning
Nick Timkovich
Nicolas Bock
Nicole Harris
Nikhil Benesch
Nikhil Ladha
Nikita Chepanov
Nikolay Korolev
Nipunn Koorapati
Nitesh Sharma
Niyas Sait
Noah
Noah Gorny
Nowell Strite
NtaleGrey
nvdv
OBITORASU
Ofek Lev
ofrinevo
Oliver Freund
Oliver Jeeves
Oliver Mannion
Oliver Tonnhofer
Olivier Girardot
Olivier Grisel
Ollie Rutherfurd
OMOTO Kenji
Omry Yadan
onlinejudge95
Oren Held
Oscar Benjamin
Oz N Tiram
Pachwenko
Patrick Dubroy
Patrick Jenkins
Patrick Lawson
patricktokeeffe
Patrik Kopkan
Paul Ganssle
Paul Kehrer
Paul Moore
Paul Nasrat
Paul Oswald
Paul van der Linden
Paulus Schoutsen
Pavel Safronov
Pavithra Eswaramoorthy
Pawel Jasinski
Paweł Szramowski
Pekka Klärck
Peter Gessler
Peter Lisák
Peter Shen
Peter Waller
Petr Viktorin
petr-tik
Phaneendra Chiruvella
Phil Elson
Phil Freo
Phil Pennock
Phil Whelan
Philip Jägenstedt
Philip Molloy
Philippe Ombredanne
Pi Delport
Pierre-Yves Rofes
Pieter Degroote
pip
Prabakaran Kumaresshan
Prabhjyotsing Surjit Singh Sodhi
Prabhu Marappan
Pradyun Gedam
Prashant Sharma
Pratik Mallya
pre-commit-ci[bot]
Preet Thakkar
Preston Holmes
Przemek Wrzos
Pulkit Goyal
q0w
Qiangning Hong
Qiming Xu
Quentin Lee
Quentin Pradet
R. David Murray
Rafael Caricio
Ralf Schmitt
Ran Benita
Razzi Abuissa
rdb
Reece Dunham
Remi Rampin
Rene Dudfield
Riccardo Magliocchetti
Riccardo Schirone
Richard Jones
Richard Si
Ricky Ng-Adam
Rishi
rmorotti
RobberPhex
Robert Collins
Robert McGibbon
Robert Pollak
Robert T. McGibbon
robin elisha robinson
Roey Berman
Rohan Jain
Roman Bogorodskiy
Roman Donchenko
Romuald Brunet
ronaudinho
Ronny Pfannschmidt
Rory McCann
Ross Brattain
Roy Wellington Ⅳ
Ruairidh MacLeod
Russell Keith-Magee
Ryan Shepherd
Ryan Wooden
ryneeverett
S. Guliaev
Sachi King
Salvatore Rinchiera
sandeepkiran-js
Sander Van Balen
Savio Jomton
schlamar
Scott Kitterman
Sean
seanj
Sebastian Jordan
Sebastian Schaetz
Segev Finer
SeongSoo Cho
Sergey Vasilyev
Seth Michael Larson
Seth Woodworth
Shahar Epstein
Shantanu
shenxianpeng
shireenrao
Shivansh-007
Shixian Sheng
Shlomi Fish
Shovan Maity
Simeon Visser
Simon Cross
Simon Pichugin
sinoroc
sinscary
snook92
socketubs
Sorin Sbarnea
Srinivas Nyayapati
Stavros Korokithakis
Stefan Scherfke
Stefano Rivera
Stephan Erb
Stephen Rosen
stepshal
Steve (Gadget) Barnes
Steve Barnes
Steve Dower
Steve Kowalik
Steven Myint
Steven Silvester
stonebig
studioj
Stéphane Bidoul
Stéphane Bidoul (ACSONE)
Stéphane Klein
Sumana Harihareswara
Surbhi Sharma
Sviatoslav Sydorenko
Sviatoslav Sydorenko (Святослав Сидоренко)
Swat009
Sylvain
Takayuki SHIMIZUKAWA
Taneli Hukkinen
tbeswick
Thiago
Thijs Triemstra
Thomas Fenzl
Thomas Grainger
Thomas Guettler
Thomas Johansson
Thomas Kluyver
Thomas Smith
Thomas VINCENT
Tim D. Smith
Tim Gates
Tim Harder
Tim Heap
tim smith
tinruufu
Tobias Hermann
Tom Forbes
Tom Freudenheim
Tom V
Tomas Hrnciar
Tomas Orsava
Tomer Chachamu
Tommi Enenkel | AnB
Tomáš Hrnčiar
Tony Beswick
Tony Narlock
Tony Zhaocheng Tan
TonyBeswick
toonarmycaptain
Toshio Kuratomi
toxinu
Travis Swicegood
Tushar Sadhwani
Tzu-ping Chung
Valentin Haenel
Victor Stinner
victorvpaulo
Vikram - Google
Viktor Szépe
Ville Skyttä
Vinay Sajip
Vincent Philippon
Vinicyus Macedo
Vipul Kumar
Vitaly Babiy
Vladimir Fokow
Vladimir Rutsky
W. Trevor King
Wil Tan
Wilfred Hughes
William Edwards
William ML Leslie
William T Olson
William Woodruff
Wilson Mo
wim glenn
Winson Luk
Wolfgang Maier
Wu Zhenyu
XAMES3
Xavier Fernandez
Xianpeng Shen
xoviat
xtreak
YAMAMOTO Takashi
Yen Chi Hsuan
Yeray Diaz Diaz
Yoval P
Yu Jian
Yuan Jing Vincent Yan
Yusuke Hayashi
Zearin
Zhiping Deng
ziebam
Zvezdan Petkovic
Łukasz Langa
Роман Донченко
Семён Марьясин


--- Contenu du fichier : top_level.txt ---
pip


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : entry_points.txt ---
[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main


--- Contenu du fichier : LGPL.txt ---
		  GNU LESSER GENERAL PUBLIC LICENSE
		       Version 2.1, February 1999

 Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
 as the successor of the GNU Library Public License, version 2, hence
 the version number 2.1.]

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software packages--typically libraries--of the
Free Software Foundation and other authors who decide to use it.  You
can use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of
it in new free programs; and that you are informed that you can do
these things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the "Lesser" General Public License because it
does Less to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

		  GNU LESSER GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms of
this Lesser General Public License (also called "this License").
Each licensee is addressed as "you".

  A "library" means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The "Library", below, refers to any such software library or work
which has been distributed under these terms.  A "work based on the
Library" means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term "modification".)

  "Source code" for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.
  
  1. You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

  2. You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) The modified work must itself be a software library.

    b) You must cause the files modified to carry prominent notices
    stating that you changed the files and the date of any change.

    c) You must cause the whole of the work to be licensed at no
    charge to all third parties under the terms of this License.

    d) If a facility in the modified Library refers to a function or a
    table of data to be supplied by an application program that uses
    the facility, other than as an argument passed when the facility
    is invoked, then you must make a good faith effort to ensure that,
    in the event an application does not supply such function or
    table, the facility still operates, and performs whatever part of
    its purpose remains meaningful.

    (For example, a function in a library to compute square roots has
    a purpose that is entirely well-defined independent of the
    application.  Therefore, Subsection 2d requires that any
    application-supplied function or table used by this function must
    be optional: if the application does not supply it, the square
    root function must still compute square roots.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a "work that uses the Library".  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a "work that uses the Library" with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a "work that uses the
library".  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a "work that uses the Library" uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
link a "work that uses the Library" with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

    a) Accompany the work with the complete corresponding
    machine-readable source code for the Library including whatever
    changes were used in the work (which must be distributed under
    Sections 1 and 2 above); and, if the work is an executable linked
    with the Library, with the complete machine-readable "work that
    uses the Library", as object code and/or source code, so that the
    user can modify the Library and then relink to produce a modified
    executable containing the modified Library.  (It is understood
    that the user who changes the contents of definitions files in the
    Library will not necessarily be able to recompile the application
    to use the modified definitions.)

    b) Use a suitable shared library mechanism for linking with the
    Library.  A suitable mechanism is one that (1) uses at run time a
    copy of the library already present on the user's computer system,
    rather than copying library functions into the executable, and (2)
    will operate properly with a modified version of the library, if
    the user installs one, as long as the modified version is
    interface-compatible with the version that the work was made with.

    c) Accompany the work with a written offer, valid for at
    least three years, to give the same user the materials
    specified in Subsection 6a, above, for a charge no more
    than the cost of performing this distribution.

    d) If distribution of the work is made by offering access to copy
    from a designated place, offer equivalent access to copy the above
    specified materials from the same place.

    e) Verify that the user has already received a copy of these
    materials or that you have already sent this user a copy.

  For an executable, the required form of the "work that uses the
Library" must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies
the executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

  7. You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

    a) Accompany the combined library with a copy of the same work
    based on the Library, uncombined with any other library
    facilities.  This must be distributed under the terms of the
    Sections above.

    b) Give prominent notice with the combined library of the fact
    that part of it is a work based on the Library, and explaining
    where to find the accompanying uncombined form of the same work.

  8. You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

  9. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

  11. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

  13. The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
"any later version", you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

			    NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

		     END OF TERMS AND CONDITIONS

           How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the library's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the library, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  library `Frob' (a library for tweaking knobs) written by James Random Hacker.

  <signature of Ty Coon>, 1 April 1990
  Ty Coon, President of Vice

That's all there is to it!




--- Contenu du fichier : filepaths.rst.txt ---
File Path Function Arguments
============================

A pygame function or method which takes a file path argument will accept
either a Unicode or a byte (8-bit or ASCII character) string.
Unicode strings are translated to Python's default filesystem encoding,
as returned by sys.getfilesystemencoding().  A Unicode code point
above U+FFFF (``\uFFFF``) can be coded directly with a 32-bit escape sequences
(``\Uxxxxxxxx``), even for Python interpreters built with an UCS-2
(16-bit character) Unicode type.  Byte strings are passed
to the operating system unchanged.

Null characters (``\x00``) are not permitted in the path, raising an exception.
An exception is also raised if an Unicode file path cannot be encoded.
How UTF-16 surrogate codes are handled is Python-interpreter-dependent.
Use UTF-32 code points and 32-bit escape sequences instead.
The exception types are function-dependent.


--- Contenu du fichier : c_api.rst.txt ---
pygame C API
============

.. toctree::
   :maxdepth: 1
   :glob:

   c_api/slots.rst
   c_api/base.rst
   c_api/bufferproxy.rst
   c_api/color.rst
   c_api/display.rst
   c_api/event.rst
   c_api/freetype.rst
   c_api/mixer.rst
   c_api/rect.rst
   c_api/rwobject.rst
   c_api/surface.rst
   c_api/surflock.rst
   c_api/version.rst


src_c/include/ contains header files for applications
that use the pygame C API, while src_c/ contains
headers used by pygame internally.


--- Contenu du fichier : index.rst.txt ---
Pygame Front Page
=================

.. toctree::
   :maxdepth: 2
   :glob:
   :hidden:

   ref/*
   tut/*
   tut/en/**/*
   tut/ko/**/*
   c_api
   filepaths
   logos

Quick start
-----------

Welcome to pygame! Once you've got pygame installed (:code:`pip install pygame` or
:code:`pip3 install pygame` for most people), the next question is how to get a game
loop running. Pygame, unlike some other libraries, gives you full control of program
execution. That freedom means it is easy to mess up in your initial steps.

Here is a good example of a basic setup (opens the window, updates the screen, and handles events)--

.. literalinclude:: ref/code_examples/base_script.py

Here is a slightly more fleshed out example, which shows you how to move something
(a circle in this case) around on screen--

.. literalinclude:: ref/code_examples/base_script_example.py

For more in depth reference, check out the :ref:`tutorials-reference-label`
section below, check out a video tutorial (`I'm a fan of this one
<https://www.youtube.com/watch?v=AY9MnQ4x3zk>`_), or reference the API
documentation by module.

Documents
---------

`Readme`_
  Basic information about pygame: what it is, who is involved, and where to find it.

`Install`_
  Steps needed to compile pygame on several platforms.
  Also help on finding and installing prebuilt binaries for your system.

:doc:`filepaths`
  How pygame handles file system paths.

:doc:`Pygame Logos <logos>`
   The logos of Pygame in different resolutions.


`LGPL License`_
  This is the license pygame is distributed under.
  It provides for pygame to be distributed with open source and commercial software.
  Generally, if pygame is not changed, it can be used with any type of program.

.. _tutorials-reference-label:

Tutorials
---------

:doc:`Introduction to Pygame <tut/PygameIntro>`
  An introduction to the basics of pygame.
  This is written for users of Python and appeared in volume two of the Py magazine.

:doc:`Import and Initialize <tut/ImportInit>`
  The beginning steps on importing and initializing pygame.
  The pygame package is made of several modules.
  Some modules are not included on all platforms.

:doc:`How do I move an Image? <tut/MoveIt>`
  A basic tutorial that covers the concepts behind 2D computer animation.
  Information about drawing and clearing objects to make them appear animated.

:doc:`Chimp Tutorial, Line by Line <tut/ChimpLineByLine>`
  The pygame examples include a simple program with an interactive fist and a chimpanzee.
  This was inspired by the annoying flash banner of the early 2000s.
  This tutorial examines every line of code used in the example.

:doc:`Sprite Module Introduction <tut/SpriteIntro>`
  Pygame includes a higher level sprite module to help organize games.
  The sprite module includes several classes that help manage details found in almost all games types.
  The Sprite classes are a bit more advanced than the regular pygame modules,
  and need more understanding to be properly used.

:doc:`Surfarray Introduction <tut/SurfarrayIntro>`
  Pygame used the NumPy python module to allow efficient per pixel effects on images.
  Using the surface arrays is an advanced feature that allows custom effects and filters.
  This also examines some of the simple effects from the pygame example, arraydemo.py.

:doc:`Camera Module Introduction <tut/CameraIntro>`
  Pygame, as of 1.9, has a camera module that allows you to capture images,
  watch live streams, and do some basic computer vision.
  This tutorial covers those use cases.

:doc:`Newbie Guide <tut/newbieguide>`
  A list of thirteen helpful tips for people to get comfortable using pygame.

:doc:`Making Games Tutorial <tut/MakeGames>`
  A large tutorial that covers the bigger topics needed to create an entire game.

:doc:`Display Modes <tut/DisplayModes>`
  Getting a display surface for the screen.

:doc:`한국어 튜토리얼 (Korean Tutorial) <tut/ko/빨간블록 검은블록/개요>`
  빨간블록 검은블록


Reference
---------

:ref:`genindex`
  A list of all functions, classes, and methods in the pygame package.

:doc:`ref/bufferproxy`
  An array protocol view of surface pixels

:doc:`ref/color`
  Color representation.

:doc:`ref/cursors`
  Loading and compiling cursor images.

:doc:`ref/display`
  Configure the display surface.

:doc:`ref/draw`
  Drawing simple shapes like lines and ellipses to surfaces.

:doc:`ref/event`
  Manage the incoming events from various input devices and the windowing platform.

:doc:`ref/examples`
  Various programs demonstrating the use of individual pygame modules.

:doc:`ref/font`
  Loading and rendering TrueType fonts.

:doc:`ref/freetype`
  Enhanced pygame module for loading and rendering font faces.

:doc:`ref/gfxdraw`
  Anti-aliasing draw functions.

:doc:`ref/image`
  Loading, saving, and transferring of surfaces.

:doc:`ref/joystick`
  Manage the joystick devices.

:doc:`ref/key`
  Manage the keyboard device.

:doc:`ref/locals`
  Pygame constants.

:doc:`ref/mixer`
  Load and play sounds

:doc:`ref/mouse`
  Manage the mouse device and display.

:doc:`ref/music`
  Play streaming music tracks.

:doc:`ref/pygame`
  Top level functions to manage pygame.

:doc:`ref/pixelarray`
  Manipulate image pixel data.

:doc:`ref/rect`
  Flexible container for a rectangle.

:doc:`ref/scrap`
  Native clipboard access.

:doc:`ref/sndarray`
  Manipulate sound sample data.

:doc:`ref/sprite`
  Higher level objects to represent game images.

:doc:`ref/surface`
  Objects for images and the screen.

:doc:`ref/surfarray`
  Manipulate image pixel data.

:doc:`ref/tests`
  Test pygame.

:doc:`ref/time`
  Manage timing and framerate.

:doc:`ref/transform`
  Resize and move images.

:doc:`pygame C API <c_api>`
  The C api shared amongst pygame extension modules.

:ref:`search`
  Search pygame documents by keyword.

.. _Readme: ../wiki/about

.. _Install: ../wiki/GettingStarted#Pygame%20Installation

.. _LGPL License: LGPL.txt


--- Contenu du fichier : logos.rst.txt ---
*************************************************
  Pygame Logos Page
*************************************************

Pygame Logos
============

These logos are available for use in your own game projects.
Please put them up wherever you see fit. The logo was created
by TheCorruptor on July 29, 2001 and upscaled by Mega_JC on
August 29, 2021.

.. container:: fullwidth

    .. image:: _static/pygame_logo.png

    | `pygame_logo.svg <_static/pygame_logo.svg>`_
    | `pygame_logo.png <_static/pygame_logo.png>`_ - 1561 x 438

    .. image:: _static/pygame_lofi.png

    | `pygame_lofi.svg <_static/pygame_lofi.svg>`_
    | `pygame_lofi.png <_static/pygame_lofi.png>`_ - 1561 x 438

    .. image:: _static/pygame_powered.png

    | `pygame_powered.svg <_static/pygame_powered.svg>`_
    | `pygame_powered.png <_static/pygame_powered.png>`_ - 1617 x 640

    .. image:: _static/pygame_tiny.png

    | `pygame_tiny.png <_static/pygame_tiny.png>`_ - 214 x 60

    .. image:: _static/pygame_powered_lowres.png

    | `pygame_powered_lowres.png <_static/pygame_powered_lowres.png>`_ - 101 x 40


There is a higher resolution layered photoshop image
available `here <https://www.pygame.org/ftp/pygame_logo.psd>`_. *(1.3 MB)*

Legacy logos
------------

.. container:: fullwidth

    `legacy_logos.zip <_static/legacy_logos.zip>`_ - 50.1 KB

--- Contenu du fichier : key.rst.txt ---
.. include:: common.txt

:mod:`pygame.key`
=================

.. module:: pygame.key
   :synopsis: pygame module to work with the keyboard

| :sl:`pygame module to work with the keyboard`

This module contains functions for dealing with the keyboard.

The :mod:`pygame.event` queue gets ``pygame.KEYDOWN`` and ``pygame.KEYUP``
events when the keyboard buttons are pressed and released. Both events have
``key`` and ``mod`` attributes.

   * ``key``: an :ref:`integer ID <key-constants-label>` representing every key
     on the keyboard
   * ``mod``: a bitmask of all the :ref:`modifier keys <key-modifiers-label>`
     that were in a pressed state when the event occurred

The ``pygame.KEYDOWN`` event has the additional attributes ``unicode`` and
``scancode``.

   * ``unicode``: a single character string that is the fully translated
     character entered, this takes into account the shift and composition keys
   * ``scancode``: the platform-specific key code, which could be different from
     keyboard to keyboard, but is useful for key selection of weird keys like
     the multimedia keys

.. versionadded:: 2.0.0
    The ``pygame.TEXTINPUT`` event is preferred to the ``unicode`` attribute
    of ``pygame.KEYDOWN``. The attribute ``text`` contains the input.


.. _key-constants-label:

The following is a list of all the constants (from :mod:`pygame.locals`) used to
represent keyboard keys.

Portability note: The integers for key constants differ between pygame 1 and 2.
Always use key constants (``K_a``) rather than integers directly (``97``) so
that your key handling code works well on both pygame 1 and pygame 2.


::

      pygame
      Constant      ASCII   Description
      ---------------------------------
      K_BACKSPACE   \b      backspace
      K_TAB         \t      tab
      K_CLEAR               clear
      K_RETURN      \r      return
      K_PAUSE               pause
      K_ESCAPE      ^[      escape
      K_SPACE               space
      K_EXCLAIM     !       exclaim
      K_QUOTEDBL    "       quotedbl
      K_HASH        #       hash
      K_DOLLAR      $       dollar
      K_AMPERSAND   &       ampersand
      K_QUOTE               quote
      K_LEFTPAREN   (       left parenthesis
      K_RIGHTPAREN  )       right parenthesis
      K_ASTERISK    *       asterisk
      K_PLUS        +       plus sign
      K_COMMA       ,       comma
      K_MINUS       -       minus sign
      K_PERIOD      .       period
      K_SLASH       /       forward slash
      K_0           0       0
      K_1           1       1
      K_2           2       2
      K_3           3       3
      K_4           4       4
      K_5           5       5
      K_6           6       6
      K_7           7       7
      K_8           8       8
      K_9           9       9
      K_COLON       :       colon
      K_SEMICOLON   ;       semicolon
      K_LESS        <       less-than sign
      K_EQUALS      =       equals sign
      K_GREATER     >       greater-than sign
      K_QUESTION    ?       question mark
      K_AT          @       at
      K_LEFTBRACKET [       left bracket
      K_BACKSLASH   \       backslash
      K_RIGHTBRACKET ]      right bracket
      K_CARET       ^       caret
      K_UNDERSCORE  _       underscore
      K_BACKQUOTE   `       grave
      K_a           a       a
      K_b           b       b
      K_c           c       c
      K_d           d       d
      K_e           e       e
      K_f           f       f
      K_g           g       g
      K_h           h       h
      K_i           i       i
      K_j           j       j
      K_k           k       k
      K_l           l       l
      K_m           m       m
      K_n           n       n
      K_o           o       o
      K_p           p       p
      K_q           q       q
      K_r           r       r
      K_s           s       s
      K_t           t       t
      K_u           u       u
      K_v           v       v
      K_w           w       w
      K_x           x       x
      K_y           y       y
      K_z           z       z
      K_DELETE              delete
      K_KP0                 keypad 0
      K_KP1                 keypad 1
      K_KP2                 keypad 2
      K_KP3                 keypad 3
      K_KP4                 keypad 4
      K_KP5                 keypad 5
      K_KP6                 keypad 6
      K_KP7                 keypad 7
      K_KP8                 keypad 8
      K_KP9                 keypad 9
      K_KP_PERIOD   .       keypad period
      K_KP_DIVIDE   /       keypad divide
      K_KP_MULTIPLY *       keypad multiply
      K_KP_MINUS    -       keypad minus
      K_KP_PLUS     +       keypad plus
      K_KP_ENTER    \r      keypad enter
      K_KP_EQUALS   =       keypad equals
      K_UP                  up arrow
      K_DOWN                down arrow
      K_RIGHT               right arrow
      K_LEFT                left arrow
      K_INSERT              insert
      K_HOME                home
      K_END                 end
      K_PAGEUP              page up
      K_PAGEDOWN            page down
      K_F1                  F1
      K_F2                  F2
      K_F3                  F3
      K_F4                  F4
      K_F5                  F5
      K_F6                  F6
      K_F7                  F7
      K_F8                  F8
      K_F9                  F9
      K_F10                 F10
      K_F11                 F11
      K_F12                 F12
      K_F13                 F13
      K_F14                 F14
      K_F15                 F15
      K_NUMLOCK             numlock
      K_CAPSLOCK            capslock
      K_SCROLLOCK           scrollock
      K_RSHIFT              right shift
      K_LSHIFT              left shift
      K_RCTRL               right control
      K_LCTRL               left control
      K_RALT                right alt
      K_LALT                left alt
      K_RMETA               right meta
      K_LMETA               left meta
      K_LSUPER              left Windows key
      K_RSUPER              right Windows key
      K_MODE                mode shift
      K_HELP                help
      K_PRINT               print screen
      K_SYSREQ              sysrq
      K_BREAK               break
      K_MENU                menu
      K_POWER               power
      K_EURO                Euro
      K_AC_BACK             Android back button


.. _key-modifiers-label:

The keyboard also has a list of modifier states (from :mod:`pygame.locals`) that
can be assembled by bitwise-ORing them together.

::

      pygame
      Constant      Description
      -------------------------
      KMOD_NONE     no modifier keys pressed
      KMOD_LSHIFT   left shift
      KMOD_RSHIFT   right shift
      KMOD_SHIFT    left shift or right shift or both
      KMOD_LCTRL    left control
      KMOD_RCTRL    right control
      KMOD_CTRL     left control or right control or both
      KMOD_LALT     left alt
      KMOD_RALT     right alt
      KMOD_ALT      left alt or right alt or both
      KMOD_LMETA    left meta
      KMOD_RMETA    right meta
      KMOD_META     left meta or right meta or both
      KMOD_CAPS     caps lock
      KMOD_NUM      num lock
      KMOD_MODE     AltGr


The modifier information is contained in the ``mod`` attribute of the
``pygame.KEYDOWN`` and ``pygame.KEYUP`` events. The ``mod`` attribute is a
bitmask of all the modifier keys that were in a pressed state when the event
occurred. The modifier information can be decoded using a bitwise AND (except
for ``KMOD_NONE``, which should be compared using equals ``==``). For example:

::

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:
            if event.mod == pygame.KMOD_NONE:
                print('No modifier keys were in a pressed state when this '
                      'event occurred.')
            else:
                if event.mod & pygame.KMOD_LSHIFT:
                    print('Left shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_RSHIFT:
                    print('Right shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_SHIFT:
                    print('Left shift or right shift or both were in a '
                          'pressed state when this event occurred.')



.. function:: get_focused

   | :sl:`true if the display is receiving keyboard input from the system`
   | :sg:`get_focused() -> bool`

   Returns ``True`` when the display window has keyboard focus from the
   system. If the display needs to ensure it does not lose keyboard focus, it
   can use :func:`pygame.event.set_grab()` to grab all input.

   .. ## pygame.key.get_focused ##

.. function:: get_pressed

   | :sl:`get the state of all keyboard buttons`
   | :sg:`get_pressed() -> bools`

   Returns a sequence of boolean values representing the state of every key on
   the keyboard. Use the key constant values to index the array. A ``True``
   value means that the button is pressed.

   .. note::
      Getting the list of pushed buttons with this function is not the proper
      way to handle text entry from the user. There is no way to know the order
      of keys pressed, and rapidly pushed keys can be completely unnoticed
      between two calls to ``pygame.key.get_pressed()``. There is also no way to
      translate these pushed keys into a fully translated character value. See
      the ``pygame.KEYDOWN`` events on the :mod:`pygame.event` queue for this
      functionality.
   
   .. versionadded:: 2.2.0
      The collection of bools returned by ``get_pressed`` can not be iterated
      over because the indexes of the internal tuple does not correspond to the 
      keycodes.

   .. versionadded:: 2.5.0
      Iteration over the collection of bools returned by ``get_pressed`` is now
      restored. However it still does not make sense to iterate over it. Currently.

   .. ## pygame.key.get_pressed ##

.. function:: get_mods

   | :sl:`determine which modifier keys are being held`
   | :sg:`get_mods() -> int`

   Returns a single integer representing a bitmask of all the modifier keys
   being held. Using bitwise operators you can test if specific
   :ref:`modifier keys <key-modifiers-label>` are pressed.

   .. ## pygame.key.get_mods ##

.. function:: set_mods

   | :sl:`temporarily set which modifier keys are pressed`
   | :sg:`set_mods(int) -> None`

   Create a bitmask of the :ref:`modifier key constants <key-modifiers-label>`
   you want to impose on your program.

   .. ## pygame.key.set_mods ##

.. function:: set_repeat

   | :sl:`control how held keys are repeated`
   | :sg:`set_repeat() -> None`
   | :sg:`set_repeat(delay) -> None`
   | :sg:`set_repeat(delay, interval) -> None`

   When the keyboard repeat is enabled, keys that are held down will generate
   multiple ``pygame.KEYDOWN`` events. The ``delay`` parameter is the number of
   milliseconds before the first repeated ``pygame.KEYDOWN`` event will be sent.
   After that, another ``pygame.KEYDOWN`` event will be sent every ``interval``
   milliseconds. If a ``delay`` value is provided and an ``interval`` value is
   not provided or is 0, then the ``interval`` will be set to the same value as
   ``delay``.

   To disable key repeat call this function with no arguments or with ``delay``
   set to 0.

   When pygame is initialized the key repeat is disabled.

   :raises ValueError: if ``delay`` or ``interval`` is < 0

   .. versionchanged:: 2.0.0 A ``ValueError`` is now raised (instead of a
      ``pygame.error``) if ``delay`` or ``interval`` is < 0.

   .. ## pygame.key.set_repeat ##

.. function:: get_repeat

   | :sl:`see how held keys are repeated`
   | :sg:`get_repeat() -> (delay, interval)`

   Get the ``delay`` and ``interval`` keyboard repeat values. Refer to
   :func:`pygame.key.set_repeat()` for a description of these values.

   .. versionadded:: 1.8

   .. ## pygame.key.get_repeat ##

.. function:: name

   | :sl:`get the name of a key identifier`
   | :sg:`name(key, use_compat=True) -> str`

   Get the descriptive name of the button from a keyboard button id constant.
   Returns an empty string (``""``) if the key is not found.

   If ``use_compat`` argument is ``True`` (which is the default), this function
   returns the legacy name of a key where applicable. The return value is
   expected to be the same across different pygame versions (provided the
   corresponding key constant exists and is unique). If the return value is
   passed to the ``key_code`` function, the original constant will be returned.

   **Experimental:** ``use_compat`` parameter still in development for testing and feedback. It may change.
   `Please leave use_compat feedback with authors <https://github.com/pygame/pygame/pull/3312>`_

   If this argument is ``False``, the returned name may be prettier to display
   and may cover a wider range of keys than with ``use_compat``, but there are
   no guarantees that this name will be the same across different pygame
   versions. If the name returned is passed to the ``key_code`` function, the
   original constant is returned back (this is an implementation detail which
   may change later, do not rely on this)

   .. versionchanged:: 2.1.3 Added ``use_compat`` argument and guaranteed API stability for it

   .. ## pygame.key.name ##

.. function:: key_code

   | :sl:`get the key identifier from a key name`
   | :sg:`key_code(name=string) -> int`

   Get the key identifier code from the descriptive name of the key. This
   returns an integer matching one of the K_* keycodes. For example:

   ::

        >>> pygame.key.key_code("return") == pygame.K_RETURN
        True
        >>> pygame.key.key_code("0") == pygame.K_0
        True
        >>> pygame.key.key_code("space") == pygame.K_SPACE
        True

   :raises ValueError: if the key name is not known.

   .. versionadded:: 2.0.0

   .. ## pygame.key.key_code ##

.. function:: start_text_input

   | :sl:`start handling Unicode text input events`
   | :sg:`start_text_input() -> None`

   Start receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If applicable, show the on-screen keyboard or IME editor.

   For many languages, key presses will automatically generate a
   corresponding ``pygame.TEXTINPUT`` event. Special keys like
   escape or function keys, and certain key combinations will not
   generate ``pygame.TEXTINPUT`` events.

   In other languages, entering a single symbol may require multiple
   key presses, or a language-specific user interface. In this case,
   ``pygame.TEXTINPUT`` events are preferable to ``pygame.KEYDOWN``
   events for text input.

   A ``pygame.TEXTEDITING`` event is received when an IME composition
   is started or changed. It contains the composition ``text``, ``length``,
   and editing ``start`` position within the composition (attributes
   ``text``, ``length``, and ``start``, respectively).
   When the composition is committed (or non-IME input is received),
   a ``pygame.TEXTINPUT`` event is generated.

   Text input events handling is on by default.

   .. versionadded:: 2.0.0

   .. ## pygame.key.start_text_input ##

.. function:: stop_text_input

   | :sl:`stop handling Unicode text input events`
   | :sg:`stop_text_input() -> None`

   Stop receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If an on-screen keyboard or IME editor was shown with
   ``pygame.key.start_text_input()``, hide it again.

   Text input events handling is on by default.

   To avoid triggering the IME editor or the on-screen keyboard
   when the user is holding down a key during gameplay, text input
   should be disabled once text entry is finished, or when the user
   clicks outside of a text box.

   .. versionadded:: 2.0.0

   .. ## pygame.key.stop_text_input ##

.. function:: set_text_input_rect

   | :sl:`controls the position of the candidate list`
   | :sg:`set_text_input_rect(Rect) -> None`

   This sets the rectangle used for typing with an IME.
   It controls where the candidate list will open, if supported.

   .. versionadded:: 2.0.0

   .. ## pygame.key.set_text_input_rect ##

.. ## pygame.key ##


--- Contenu du fichier : pixelarray.rst.txt ---
.. include:: common.txt

:class:`pygame.PixelArray`
==========================

.. currentmodule:: pygame

.. class:: PixelArray

   | :sl:`pygame object for direct pixel access of surfaces`
   | :sg:`PixelArray(Surface) -> PixelArray`

   The PixelArray wraps a Surface and provides direct access to the
   surface's pixels. A pixel array can be one or two dimensional.
   A two dimensional array, like its surface, is indexed [column, row].
   Pixel arrays support slicing, both for returning a subarray or
   for assignment. A pixel array sliced on a single column or row
   returns a one dimensional pixel array. Arithmetic and other operations
   are not supported. A pixel array can be safely assigned to itself.
   Finally, pixel arrays export an array struct interface, allowing
   them to interact with :mod:`pygame.pixelcopy` methods and NumPy
   arrays.

   A PixelArray pixel item can be assigned a raw integer values, a
   :class:`pygame.Color` instance, or a (r, g, b[, a]) tuple.

   ::

     pxarray[x, y] = 0xFF00FF
     pxarray[x, y] = pygame.Color(255, 0, 255)
     pxarray[x, y] = (255, 0, 255)

   However, only a pixel's integer value is returned. So, to compare a pixel
   to a particular color the color needs to be first mapped using
   the :meth:`Surface.map_rgb()` method of the Surface object for which the
   PixelArray was created.

   ::

     pxarray = pygame.PixelArray(surface)
     # Check, if the first pixel at the topleft corner is blue
     if pxarray[0, 0] == surface.map_rgb((0, 0, 255)):
         ...

   When assigning to a range of of pixels, a non tuple sequence of colors or
   a PixelArray can be used as the value. For a sequence, the length must
   match the PixelArray width.

   ::

     pxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF
     pxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,
                                               # second pixel  = 0xAACCEE, ...
     pxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above
     pxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above
     pxarray[a:b] = otherarray[x:y]            # slice sizes must match

   For PixelArray assignment, if the right hand side array has a row length
   of 1, then the column is broadcast over the target array's rows. An
   array of height 1 is broadcast over the target's columns, and is equivalent
   to assigning a 1D PixelArray.

   Subscript slices can also be used to assign to a rectangular subview of
   the target PixelArray.

   ::

     # Create some new PixelArray objects providing a different view
     # of the original array/surface.
     newarray = pxarray[2:4, 3:5]
     otherarray = pxarray[::2, ::2]

   Subscript slices can also be used to do fast rectangular pixel manipulations
   instead of iterating over the x or y axis. The

   ::

     pxarray[::2, :] = (0, 0, 0)               # Make even columns black.
     pxarray[::2] = (0, 0, 0)                  # Same as [::2, :]

   During its lifetime, the PixelArray locks the surface, thus you explicitly
   have to close() it once its not used any more and the surface should perform
   operations in the same scope. It is best to use it as a context manager
   using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.

   A simple ``:`` slice index for the column can be omitted.

   ::

     pxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]
     pxarray[...] = (255, 0, 0)                # Same as pxarray[:]

   A note about PixelArray to PixelArray assignment, for arrays with an
   item size of 3 (created from 24 bit surfaces) pixel values are translated
   from the source to the destinations format. The red, green, and blue
   color elements of each pixel are shifted to match the format of the
   target surface. For all other pixel sizes no such remapping occurs.
   This should change in later pygame releases, where format conversions
   are performed for all pixel sizes. To avoid code breakage when full mapped
   copying is implemented it is suggested PixelArray to PixelArray copies be
   only between surfaces of identical format.

   .. versionadded:: 1.9.4

    - close() method was added. For explicitly cleaning up.
    - being able to use PixelArray as a context manager for cleanup.
    - both of these are useful for when working without reference counting (pypy).

   .. versionadded:: 1.9.2

    - array struct interface
    - transpose method
    - broadcasting for a length 1 dimension

   .. versionchanged:: 1.9.2

    - A 2D PixelArray can have a length 1 dimension.
      Only an integer index on a 2D PixelArray returns a 1D array.
    - For assignment, a tuple can only be a color. Any other sequence type
      is a sequence of colors.


   .. versionadded: 1.8.0
      Subscript support

   .. versionadded: 1.8.1
      Methods :meth:`make_surface`, :meth:`replace`, :meth:`extract`, and
      :meth:`compare`

   .. versionadded: 1.9.2
      Properties :attr:`itemsize`, :attr:`ndim`, :attr:`shape`,
      and :attr:`strides`

   .. versionadded: 1.9.2
      Array struct interface

   .. versionadded: 1.9.4
      Methods :meth:`close`

   .. attribute:: surface

      | :sl:`Gets the Surface the PixelArray uses.`
      | :sg:`surface -> Surface`

      The Surface the PixelArray was created for.

      .. ## PixelArray.surface ##

   .. attribute:: itemsize

      | :sl:`Returns the byte size of a pixel array item`
      | :sg:`itemsize -> int`

      This is the same as :meth:`Surface.get_bytesize` for the
      pixel array's surface.

      .. versionadded:: 1.9.2

   .. attribute:: ndim

      | :sl:`Returns the number of dimensions.`
      | :sg:`ndim -> int`

      A pixel array can be 1 or 2 dimensional.

      .. versionadded:: 1.9.2

   .. attribute:: shape

      | :sl:`Returns the array size.`
      | :sg:`shape -> tuple of int's`

      A tuple or length :attr:`ndim` giving the length of each
      dimension. Analogous to :meth:`Surface.get_size`.

      .. versionadded:: 1.9.2

   .. attribute:: strides

      | :sl:`Returns byte offsets for each array dimension.`
      | :sg:`strides -> tuple of int's`

      A tuple or length :attr:`ndim` byte counts. When a stride is
      multiplied by the corresponding index it gives the offset
      of that index from the start of the array. A stride is negative
      for an array that has is inverted (has a negative step).

      .. versionadded:: 1.9.2

   .. method:: make_surface

      | :sl:`Creates a new Surface from the current PixelArray.`
      | :sg:`make_surface() -> Surface`

      Creates a new Surface from the current PixelArray. Depending on the
      current PixelArray the size, pixel order etc. will be different from the
      original Surface.

      ::

        # Create a new surface flipped around the vertical axis.
        sf = pxarray[:,::-1].make_surface ()

      .. versionadded:: 1.8.1

      .. ## PixelArray.make_surface ##

   .. method:: replace

      | :sl:`Replaces the passed color in the PixelArray with another one.`
      | :sg:`replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -> None`

      Replaces the pixels with the passed color in the PixelArray by changing
      them them to the passed replacement color.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      replacement to take pixels with a similar, but not exactly identical
      color, into account as well.

      This is an in place operation that directly affects the pixels of the
      PixelArray.

      .. versionadded:: 1.8.1

      .. ## PixelArray.replace ##

   .. method:: extract

      | :sl:`Extracts the passed color from the PixelArray.`
      | :sg:`extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Extracts the passed color by changing all matching pixels to white, while
      non-matching pixels are changed to black. This returns a new PixelArray
      with the black/white color mask.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      extraction to take pixels with a similar, but not exactly identical
      color, into account as well.

      .. versionadded:: 1.8.1

      .. ## PixelArray.extract ##

   .. method:: compare

      | :sl:`Compares the PixelArray with another one.`
      | :sg:`compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Compares the contents of the PixelArray with those from the passed in
      PixelArray. It returns a new PixelArray with a black/white color mask
      that indicates the differences (black) of both arrays. Both PixelArray
      objects must have identical bit depths and dimensions.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as a threshold for the color detection. This causes the
      comparison to mark pixels with a similar, but not exactly identical
      color, as white.

      .. versionadded:: 1.8.1

      .. ## PixelArray.compare ##

   .. method:: transpose

      | :sl:`Exchanges the x and y axis.`
      | :sg:`transpose() -> PixelArray`

      This method returns a new view of the pixel array with the rows and
      columns swapped. So for a (w, h) sized array a (h, w) slice is returned.
      If an array is one dimensional, then a length 1 x dimension is added,
      resulting in a 2D pixel array.

      .. versionadded:: 1.9.2

      .. ## PixelArray.transpose ##

   .. method:: close

      | :sl:`Closes the PixelArray, and releases Surface lock.`
      | :sg:`close() -> PixelArray`

      This method is for explicitly closing the PixelArray, and releasing
      a lock on the Surface.

      .. versionadded:: 1.9.4

      .. ## PixelArray.close ##


   .. ## pygame.PixelArray ##


--- Contenu du fichier : freetype.rst.txt ---
.. include:: common.txt

:mod:`pygame.freetype`
======================

.. module:: pygame.freetype
   :synopsis: Enhanced pygame module for loading and rendering computer fonts

| :sl:`Enhanced pygame module for loading and rendering computer fonts`

The ``pygame.freetype`` module is a replacement for :mod:`pygame.font`.
It has all of the functionality of the original, plus many new features.
Yet is has absolutely no dependencies on the SDL_ttf library.
It is implemented directly on the FreeType 2 library.
The ``pygame.freetype`` module is not itself backward compatible with
:mod:`pygame.font`.
Instead, use the ``pygame.ftfont`` module as a drop-in replacement
for :mod:`pygame.font`.

All font file formats supported by FreeType can be rendered by
``pygame.freetype``, namely ``TTF``, Type1, ``CFF``, OpenType,
``SFNT``, ``PCF``, ``FNT``, ``BDF``, ``PFR`` and Type42 fonts.
All glyphs having UTF-32 code points are accessible
(see :attr:`Font.ucs4`).

Most work on fonts is done using :class:`Font` instances.
The module itself only has routines for initialization and creation
of :class:`Font` objects.
You can load fonts from the system using the :func:`SysFont` function.

Extra support of bitmap fonts is available. Available bitmap sizes can
be listed (see :meth:`Font.get_sizes`). For bitmap only fonts :class:`Font`
can set the size for you (see the :attr:`Font.size` property).

For now undefined character codes are replaced with the ``.notdef``
(not defined) character.
How undefined codes are handled may become configurable in a future release.

Pygame comes with a built-in default font. This can always be accessed by
passing None as the font name to the :class:`Font` constructor.

Extra rendering features available to :class:`pygame.freetype.Font`
are direct to surface rendering (see :meth:`Font.render_to`), character kerning
(see :attr:`Font.kerning`), vertical layout (see :attr:`Font.vertical`),
rotation of rendered text (see :attr:`Font.rotation`),
and the strong style (see :attr:`Font.strong`).
Some properties are configurable, such as
strong style strength (see :attr:`Font.strength`) and underline positioning
(see :attr:`Font.underline_adjustment`). Text can be positioned by the upper
right corner of the text box or by the text baseline (see :attr:`Font.origin`).
Finally, a font's vertical and horizontal size can be adjusted separately
(see :attr:`Font.size`).
The :any:`pygame.examples.freetype_misc <pygame.examples.freetype_misc.main>`
example shows these features in use.

The pygame package does not import ``freetype`` automatically when
loaded. This module must be imported explicitly to be used. ::

   import pygame
   import pygame.freetype

.. versionadded:: 1.9.2 :mod:`freetype`


.. function:: get_error

   | :sl:`Return the latest FreeType error`
   | :sg:`get_error() -> str`
   | :sg:`get_error() -> None`

   Return a description of the last error which occurred in the FreeType2
   library, or ``None`` if no errors have occurred.

.. function:: get_version

   | :sl:`Return the FreeType version`
   | :sg:`get_version(linked=True) -> (int, int, int)`

   Returns the version of the FreeType library in use by this module. ``linked=True``
   is the default behavior and returns the linked version of FreeType and ``linked=False``
   returns the compiled version of FreeType.

   Note that the ``freetype`` module depends on the FreeType 2 library.
   It will not compile with the original FreeType 1.0. Hence, the first element
   of the tuple will always be "2".

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

.. function:: init

   | :sl:`Initialize the underlying FreeType library.`
   | :sg:`init(cache_size=64, resolution=72) -> None`

   This function initializes the underlying FreeType library and must be
   called before trying to use any of the functionality of the ``freetype``
   module.

   However, :func:`pygame.init()` will automatically call this function
   if the ``freetype`` module is already imported. It is safe to call this
   function more than once.

   Optionally, you may specify a default *cache_size* for the Glyph cache: the
   maximum number of glyphs that will be cached at any given time by the
   module. Exceedingly small values will be automatically tuned for
   performance. Also a default pixel *resolution*, in dots per inch, can
   be given to adjust font scaling.

.. function:: quit

   | :sl:`Shut down the underlying FreeType library.`
   | :sg:`quit() -> None`

   This function closes the ``freetype`` module. After calling this
   function, you should not invoke any class, method or function related to the
   ``freetype`` module as they are likely to fail or might give unpredictable
   results. It is safe to call this function even if the module hasn't been
   initialized yet.

.. function:: get_init

   | :sl:`Returns True if the FreeType module is currently initialized.`
   | :sg:`get_init() -> bool`

   Returns ``True`` if the ``pygame.freetype`` module is currently initialized.

   .. versionadded:: 1.9.5

.. function:: was_init

   | :sl:`DEPRECATED: Use get_init() instead.`
   | :sg:`was_init() -> bool`

   DEPRECATED: Returns ``True`` if the ``pygame.freetype`` module is currently
   initialized. Use ``get_init()`` instead.

.. function:: get_cache_size

   | :sl:`Return the glyph case size`
   | :sg:`get_cache_size() -> long`

   See :func:`pygame.freetype.init()`.

.. function:: get_default_resolution

   | :sl:`Return the default pixel size in dots per inch`
   | :sg:`get_default_resolution() -> long`

   Returns the default pixel size, in dots per inch, for the module.
   The default is 72 DPI.

.. function:: set_default_resolution

   | :sl:`Set the default pixel size in dots per inch for the module`
   | :sg:`set_default_resolution([resolution])`

   Set the default pixel size, in dots per inch, for the module. If the
   optional argument is omitted or zero the resolution is reset to 72 DPI.

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested *bold* and *italic* flags. Pygame uses a small set of
   common font aliases. If the specific font you ask for is not available, a
   reasonable alternative may be used. If a suitable system font is not found
   this will fall back on loading the default pygame font.

   The font *name* can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

.. function:: get_default_font

   | :sl:`Get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the default pygame font. This is not the full path
   to the file. The file is usually in the same directory as the font module,
   but can also be bundled in a separate archive.

.. class:: Font

   | :sl:`Create a new Font instance from a supported font file.`
   | :sg:`Font(file, size=0, font_index=0, resolution=0, ucs4=False) -> Font`
   | :sg:`Font(pathlib.Path) -> Font`

   Argument *file* can be either a string representing the font's filename, a
   file-like object containing the font, or None; if None, a default,
   Pygame, font is used.

   .. _freetype-font-size-argument:

   Optionally, a *size* argument may be specified to set the default size in
   points, which determines the size of the rendered characters.
   The size can also be passed explicitly to each method call.
   Because of the way the caching   system works, specifying a default size on
   the constructor doesn't imply a performance gain over manually passing
   the size on each function call. If the font is bitmap and no *size*
   is given, the default size is set to the first available size for the font.

   If the font file has more than one font, the font to load can be chosen with
   the *index* argument. An exception is raised for an out-of-range font index
   value.

   The optional *resolution* argument sets the pixel size, in dots per inch,
   for use in scaling glyphs for this Font instance. If 0 then the default
   module value, set by :func:`init`, is used. The Font object's
   resolution can only be changed by re-initializing the Font instance.

   The optional *ucs4* argument, an integer, sets the default text translation
   mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True),
   to treat Unicode text as UCS-4, with no surrogate pairs. See
   :attr:`Font.ucs4`.

   .. attribute:: name

      | :sl:`Proper font name.`
      | :sg:`name -> string`

      Read only. Returns the real (long) name of the font, as
      recorded in the font file.

   .. attribute:: path

      | :sl:`Font file path`
      | :sg:`path -> unicode`

      Read only. Returns the path of the loaded font file

   .. attribute:: size

      | :sl:`The default point size used in rendering`
      | :sg:`size -> float`
      | :sg:`size -> (float, float)`

      Get or set the default size for text metrics and rendering. It can be
      a single point size, given as a Python ``int`` or ``float``, or a
      font ppem (width, height) ``tuple``. Size values are non-negative.
      A zero size or width represents an undefined size. In this case
      the size must be given as a method argument, or an exception is
      raised. A zero width but non-zero height is a ValueError.

      For a scalable font, a single number value is equivalent to a tuple
      with width equal height. A font can be stretched vertically with
      height set greater than width, or horizontally with width set
      greater than height. For embedded bitmaps, as listed by :meth:`get_sizes`,
      use the nominal width and height to select an available size.

      Font size differs for a non-scalable, bitmap, font. During a
      method call it must match one of the available sizes returned by
      method :meth:`get_sizes`. If not, an exception is raised.
      If the size is a single number, the size is first matched against the
      point size value. If no match, then the available size with the
      same nominal width and height is chosen.

   .. method:: get_rect

      | :sl:`Return the size and offset of rendered text`
      | :sg:`get_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -> rect`

      Gets the final dimensions and origin, in pixels, of *text* using the
      optional *size* in points, *style*, and *rotation*. For other
      relevant render properties, and for any optional argument not given,
      the default values set for the :class:`Font` instance are used.

      Returns a :class:`Rect <pygame.Rect>` instance containing the
      width and height of the text's bounding box and the position of the
      text's origin.
      The origin is useful in aligning separately rendered pieces of text.
      It gives the baseline position and bearing at the start of the text.
      See the :meth:`render_to` method for an example.

      If *text* is a char (byte) string, its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will return the bounding
      rectangle for the text passed to a previous :meth:`get_rect`,
      :meth:`render`, :meth:`render_to`, :meth:`render_raw`, or
      :meth:`render_raw_to` call. See :meth:`render_to` for more
      details.

   .. method:: get_metrics

      | :sl:`Return the glyph metrics for the given text`
      | :sg:`get_metrics(text, size=0) -> [(...), ...]`

      Returns the glyph metrics for each character in *text*.

      The glyph metrics are returned as a list of tuples. Each tuple gives
      metrics of a single character glyph. The glyph metrics are:

      ::

          (min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)

      The bounding box min_x, max_x, min_y, and max_y values are returned as
      grid-fitted pixel coordinates of type int. The advance values are
      float values.

      The calculations are done using the font's default size in points.
      Optionally you may specify another point size with the *size* argument.

      The metrics are adjusted for the current rotation, strong, and oblique
      settings.

      If text is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. attribute:: height

      | :sl:`The unscaled height of the font in font units`
      | :sg:`height -> int`

      Read only. Gets the height of the font. This is the average value of all
      glyphs in the font.

   .. attribute:: ascender

      | :sl:`The unscaled ascent of the font in font units`
      | :sg:`ascender -> int`

      Read only. Return the number of units from the font's baseline to
      the top of the bounding box.

   .. attribute:: descender

      | :sl:`The unscaled descent of the font in font units`
      | :sg:`descender -> int`

      Read only. Return the height in font units for the font descent.
      The descent is the number of units from the font's baseline to the
      bottom of the bounding box.

   .. method:: get_sized_ascender

      | :sl:`The scaled ascent of the font in pixels`
      | :sg:`get_sized_ascender(<size>=0) -> int`

      Return the number of units from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_descender

      | :sl:`The scaled descent of the font in pixels`
      | :sg:`get_sized_descender(<size>=0) -> int`

      Return the number of pixels from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_height

      | :sl:`The scaled height of the font in pixels`
      | :sg:`get_sized_height(<size>=0) -> int`

      Returns the height of the font. This is the average value of all
      glyphs in the font. It is not adjusted for strong or rotation.

   .. method:: get_sized_glyph_height

      | :sl:`The scaled bounding box height of the font in pixels`
      | :sg:`get_sized_glyph_height(<size>=0) -> int`

      Return the glyph bounding box height of the font in pixels.
      This is the average value of all glyphs in the font.
      It is not adjusted for strong or rotation.

   .. method:: get_sizes

      | :sl:`return the available sizes of embedded bitmaps`
      | :sg:`get_sizes() -> [(int, int, int, float, float), ...]`
      | :sg:`get_sizes() -> []`

      Returns a list of tuple records, one for each point size
      supported. Each tuple containing the point size, the height in pixels,
      width in pixels, horizontal ppem (nominal width) in fractional pixels,
      and vertical ppem (nominal height) in fractional pixels.

   .. method:: render

      | :sl:`Return rendered text as a surface`
      | :sg:`render(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> (Surface, Rect)`

      Returns a new :class:`Surface <pygame.Surface>`,
      with the text rendered to it
      in the color given by 'fgcolor'. If no foreground color is given,
      the default foreground color, :attr:`fgcolor <Font.fgcolor>` is used.
      If ``bgcolor`` is given, the surface
      will be filled with this color. When no background color is given,
      the surface background is transparent, zero alpha. Normally the returned
      surface has a 32 bit pixel size. However, if ``bgcolor`` is ``None``
      and anti-aliasing is disabled a monochrome 8 bit colorkey surface,
      with colorkey set for the background color, is returned.

      The return value is a tuple: the new surface and the bounding
      rectangle giving the size and origin of the rendered text.

      If an empty string is passed for text then the returned Rect is zero
      width and the height of the font.

      Optional *fgcolor*, *style*, *rotation*, and *size* arguments override
      the default values set for the :class:`Font` instance.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will render the text
      passed to a previous :meth:`get_rect`, :meth:`render`, :meth:`render_to`,
      :meth:`render_raw`, or :meth:`render_raw_to` call.
      See :meth:`render_to` for details.

   .. method:: render_to

      | :sl:`Render text onto an existing surface`
      | :sg:`render_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> Rect`

      Renders the string *text* to the :mod:`pygame.Surface` *surf*,
      at position *dest*, a (x, y) surface coordinate pair.
      If either x or y is not an integer it is converted to one if possible.
      Any sequence where the first two items are x and y positional elements
      is accepted, including a :class:`Rect <pygame.Rect>` instance.
      As with :meth:`render`,
      optional *fgcolor*, *style*, *rotation*, and *size* argument are
      available.

      If a background color *bgcolor* is given, the text bounding box is
      first filled with that color. The text is blitted next.
      Both the background fill and text rendering involve full alpha blits.
      That is, the alpha values of the foreground, background, and destination
      target surface all affect the blit.

      The return value is a rectangle giving the size and position of the
      rendered text within the surface.

      If an empty string is passed for text then the returned
      :class:`Rect <pygame.Rect>` is zero width and the height of the font.
      The rect will test False.

      Optionally, *text* can be set ``None``, which will re-render text
      passed to a previous :meth:`render_to`, :meth:`get_rect`, :meth:`render`,
      :meth:`render_raw`, or :meth:`render_raw_to` call. Primarily, this
      feature is an aid to using :meth:`render_to` in combination with
      :meth:`get_rect`. An example: ::

          def word_wrap(surf, text, font, color=(0, 0, 0)):
              font.origin = True
              words = text.split(' ')
              width, height = surf.get_size()
              line_spacing = font.get_sized_height() + 2
              x, y = 0, line_spacing
              space = font.get_rect(' ')
              for word in words:
                  bounds = font.get_rect(word)
                  if x + bounds.width + bounds.x >= width:
                      x, y = 0, y + line_spacing
                  if x + bounds.width + bounds.x >= width:
                      raise ValueError("word too wide for the surface")
                  if y + bounds.height - bounds.y >= height:
                      raise ValueError("text to long for the surface")
                  font.render_to(surf, (x, y), None, color)
                  x += bounds.width + space.width
              return x, y

      When :meth:`render_to` is called with the same
      font properties ― :attr:`size`, :attr:`style`, :attr:`strength`,
      :attr:`wide`, :attr:`antialiased`, :attr:`vertical`, :attr:`rotation`,
      :attr:`kerning`, and :attr:`use_bitmap_strikes` ― as :meth:`get_rect`,
      :meth:`render_to` will use the layout calculated by :meth:`get_rect`.
      Otherwise, :meth:`render_to` will recalculate the layout if called
      with a text string or one of the above properties has changed
      after the :meth:`get_rect` call.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. method:: render_raw

      | :sl:`Return rendered text as a string of bytes`
      | :sg:`render_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> (bytes, (int, int))`

      Like :meth:`render` but with the pixels returned as a byte string
      of 8-bit gray-scale values. The foreground color is 255, the
      background 0, useful as an alpha mask for a foreground pattern.

   .. method:: render_raw_to

      | :sl:`Render text into an array of ints`
      | :sg:`render_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> Rect`

      Render to an array object exposing an array struct interface. The array
      must be two dimensional with integer items. The default *dest* value,
      ``None``, is equivalent to position (0, 0). See :meth:`render_to`.
      As with the other render methods, *text* can be ``None`` to
      render a text string passed previously to another method.

      The return value is a :func:`pygame.Rect` giving the size and position of
      the rendered text.

   .. attribute:: style

      | :sl:`The font's style flags`
      | :sg:`style -> int`

      Gets or sets the default style of the Font. This default style will be
      used for all text rendering and size calculations unless overridden
      specifically a render or :meth:`get_rect` call.
      The style value may be a bit-wise OR of one or more of the following
      constants:

      ::

          STYLE_NORMAL
          STYLE_UNDERLINE
          STYLE_OBLIQUE
          STYLE_STRONG
          STYLE_WIDE
          STYLE_DEFAULT

      These constants may be found on the FreeType constants module.
      Optionally, the default style can be modified or obtained accessing the
      individual style attributes (underline, oblique, strong).

      The ``STYLE_OBLIQUE`` and ``STYLE_STRONG`` styles are for
      scalable fonts only. An attempt to set either for a bitmap font raises
      an AttributeError. An attempt to set either for an inactive font,
      as returned by ``Font.__new__()``, raises a RuntimeError.

      Assigning ``STYLE_DEFAULT`` to the :attr:`style` property leaves
      the property unchanged, as this property defines the default.
      The :attr:`style` property will never return ``STYLE_DEFAULT``.

   .. attribute:: underline

      | :sl:`The state of the font's underline style flag`
      | :sg:`underline -> bool`

      Gets or sets whether the font will be underlined when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: strong

      | :sl:`The state of the font's strong style flag`
      | :sg:`strong -> bool`

      Gets or sets whether the font will be bold when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: oblique

      | :sl:`The state of the font's oblique style flag`
      | :sg:`oblique -> bool`

      Gets or sets whether the font will be rendered as oblique. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the *style* parameter.

      The oblique style is only supported for scalable (outline) fonts.
      An attempt to set this style on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, setting this property raises a RuntimeError.

   .. attribute:: wide

      | :sl:`The state of the font's wide style flag`
      | :sg:`wide -> bool`

      Gets or sets whether the font will be stretched horizontally
      when drawing text. It produces a result similar to
      :class:`pygame.font.Font`'s bold. This style not available for
      rotated text.

   .. attribute:: strength

      | :sl:`The strength associated with the strong or wide font styles`
      | :sg:`strength -> float`

      The amount by which a font glyph's size is enlarged for the
      strong or wide transformations, as a fraction of the untransformed
      size. For the wide style only the horizontal dimension is
      increased. For strong text both the horizontal and vertical
      dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is
      equivalent to the :class:`pygame.font.Font` bold style.
      The default is 0.02778 ( 1/36 ).

      The strength style is only supported for scalable (outline) fonts.
      An attempt to set this property on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, assignment to this property raises a RuntimeError.

   .. attribute:: underline_adjustment

      | :sl:`Adjustment factor for the underline position`
      | :sg:`underline_adjustment -> float`

      Gets or sets a factor which, when positive, is multiplied with the
      font's underline offset to adjust the underline position. A negative
      value turns an underline into a strike-through or overline. It is
      multiplied with the ascender. Accepted values range between -2.0 and 2.0
      inclusive. A value of 0.5 closely matches Tango underlining. A value of
      1.0 mimics :class:`pygame.font.Font` underlining.

   .. attribute:: fixed_width

      | :sl:`Gets whether the font is fixed-width`
      | :sg:`fixed_width -> bool`

      Read only. Returns ``True`` if the font contains fixed-width
      characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).

   .. attribute:: fixed_sizes

      | :sl:`the number of available bitmap sizes for the font`
      | :sg:`fixed_sizes -> int`

      Read only. Returns the number of point sizes for which the font contains
      bitmap character images. If zero then the font is not a bitmap font.
      A scalable font may contain pre-rendered point sizes as strikes.

   .. attribute:: scalable

      | :sl:`Gets whether the font is scalable`
      | :sg:`scalable -> bool`

      Read only. Returns ``True`` if the font contains outline glyphs.
      If so, the point size is not limited to available bitmap sizes.

   .. attribute:: use_bitmap_strikes

      | :sl:`allow the use of embedded bitmaps in an outline font file`
      | :sg:`use_bitmap_strikes -> bool`

      Some scalable fonts include embedded bitmaps for particular point
      sizes. This property controls whether or not those bitmap strikes
      are used. Set it ``False`` to disable the loading of any bitmap
      strike. Set it ``True``, the default, to permit bitmap strikes
      for a non-rotated render with no style other than :attr:`wide` or
      :attr:`underline`. This property is ignored for bitmap fonts.

      See also :attr:`fixed_sizes` and :meth:`get_sizes`.

   .. attribute:: antialiased

      | :sl:`Font anti-aliasing mode`
      | :sg:`antialiased -> bool`

      Gets or sets the font's anti-aliasing mode. This defaults to
      ``True`` on all fonts, which are rendered with full 8 bit blending.

      Set to ``False`` to do monochrome rendering. This should
      provide a small speed gain and reduce cache memory size.

   .. attribute:: kerning

      | :sl:`Character kerning mode`
      | :sg:`kerning -> bool`

      Gets or sets the font's kerning mode. This defaults to ``False``
      on all fonts, which will be rendered without kerning.

      Set to ``True`` to add kerning between character pairs, if supported
      by the font, when positioning glyphs.

   .. attribute:: vertical

      | :sl:`Font vertical mode`
      | :sg:`vertical -> bool`

      Gets or sets whether the characters are laid out vertically rather
      than horizontally. May be useful when rendering Kanji or some other
      vertical script.

      Set to ``True`` to switch to a vertical text layout. The default
      is ``False``, place horizontally.

      Note that the :class:`Font` class does not automatically determine
      script orientation. Vertical layout must be selected explicitly.

      Also note that several font formats (especially bitmap based ones) don't
      contain the necessary metrics to draw glyphs vertically, so drawing in
      those cases will give unspecified results.

   .. attribute:: rotation

      | :sl:`text rotation in degrees counterclockwise`
      | :sg:`rotation -> int`

      Gets or sets the baseline angle of the rendered text. The angle is
      represented as integer degrees. The default angle is 0, with horizontal
      text rendered along the X-axis, and vertical text along the Y-axis.
      A positive value rotates these axes counterclockwise that many degrees.
      A negative angle corresponds to a clockwise rotation. The rotation
      value is normalized to a value within the range 0 to 359 inclusive
      (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,
      720 -> 720 - (2 * 360) -> 0).

      Only scalable (outline) fonts can be rotated. An attempt to change
      the rotation of a bitmap font raises an AttributeError.
      An attempt to change the rotation of an inactive font instance, as
      returned by ``Font.__new__()``, raises a RuntimeError.

   .. attribute:: fgcolor

      | :sl:`default foreground color`
      | :sg:`fgcolor -> Color`

      Gets or sets the default glyph rendering color. It is initially opaque
      black ― (0, 0, 0, 255). Applies to :meth:`render` and :meth:`render_to`.

   .. attribute:: bgcolor

      | :sl:`default background color`
      | :sg:`bgcolor -> Color`

      Gets or sets the default background rendering color. Initially it is
      unset and text will render with a transparent background by default.
      Applies to :meth:`render` and :meth:`render_to`.

   .. versionadded:: 2.0.0

   .. attribute:: origin

      | :sl:`Font render to text origin mode`
      | :sg:`origin -> bool`

      If set ``True``, :meth:`render_to` and :meth:`render_raw_to` will
      take the *dest* position to be that of the text origin, as opposed to
      the top-left corner of the bounding box. See :meth:`get_rect` for
      details.

   .. attribute:: pad

      | :sl:`padded boundary mode`
      | :sg:`pad -> bool`

      If set ``True``, then the text boundary rectangle will be inflated
      to match that of :class:`font.Font <pygame.font.Font>`.
      Otherwise, the boundary rectangle is just large enough for the text.

   .. attribute:: ucs4

      | :sl:`Enable UCS-4 mode`
      | :sg:`ucs4 -> bool`

      Gets or sets the decoding of Unicode text. By default, the
      freetype module performs UTF-16 surrogate pair decoding on Unicode text.
      This allows 32-bit escape sequences ('\Uxxxxxxxx') between 0x10000 and
      0x10FFFF to represent their corresponding UTF-32 code points on Python
      interpreters built with a UCS-2 Unicode type (on Windows, for instance).
      It also means character values within the UTF-16 surrogate area (0xD800
      to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate
      pair will raise a UnicodeEncodeError. Setting ucs4 ``True`` turns
      surrogate pair decoding off, allowing access the full UCS-4 character
      range to a Python interpreter built with four-byte Unicode character
      support.

   .. attribute:: resolution

      | :sl:`Pixel resolution in dots per inch`
      | :sg:`resolution -> int`

      Read only. Gets pixel size used in scaling font glyphs for this
      :class:`Font` instance.


--- Contenu du fichier : image.rst.txt ---
.. include:: common.txt

:mod:`pygame.image`
===================

.. module:: pygame.image
   :synopsis: pygame module for loading and saving images

| :sl:`pygame module for image transfer`

The image module contains functions for loading and saving pictures, as well as
transferring Surfaces to formats usable by other packages.

Note that there is no Image class; an image is loaded as a Surface object. The
Surface class allows manipulation (drawing lines, setting pixels, capturing
regions, etc.).

In the vast majority of installations, pygame is built to support extended
formats, using the SDL_Image library behind the scenes. However, some
installations may only support uncompressed ``BMP`` images. With full image
support, the :func:`pygame.image.load()` function can load the following
formats.

   * ``BMP``

   * ``GIF`` (non-animated)

   * ``JPEG``

   * ``LBM`` (and ``PBM``, ``PGM``, ``PPM``)

   * ``PCX``

   * ``PNG``
   
   * ``PNM``

   * ``SVG`` (limited support, using Nano SVG)

   * ``TGA`` (uncompressed)

   * ``TIFF``

   * ``WEBP``

   * ``XPM``
   
   
.. versionadded:: 2.0 Loading SVG, WebP, PNM

Saving images only supports a limited set of formats. You can save to the
following formats.

   * ``BMP``

   * ``JPEG``

   * ``PNG``

   * ``TGA``
   

``JPEG`` and ``JPG``, as well as ``TIF`` and ``TIFF`` refer to the same file format

.. versionadded:: 1.8 Saving PNG and JPEG files.


.. function:: load

   | :sl:`load new image from a file (or file-like object)`
   | :sg:`load(filename) -> Surface`
   | :sg:`load(fileobj, namehint="") -> Surface`

   Load an image from a file source. You can pass either a filename, a Python
   file-like object, or a pathlib.Path.

   Pygame will automatically determine the image type (e.g., ``GIF`` or bitmap)
   and create a new Surface object from the data. In some cases it will need to
   know the file extension (e.g., ``GIF`` images should end in ".gif"). If you
   pass a raw file-like object, you may also want to pass the original filename
   as the namehint argument.

   The returned Surface will contain the same color format, colorkey and alpha
   transparency as the file it came from. You will often want to call
   :func:`pygame.Surface.convert()` with no arguments, to create a copy that
   will draw more quickly on the screen.

   For alpha transparency, like in .png images, use the
   :func:`pygame.Surface.convert_alpha()` method after loading so that the
   image has per pixel transparency.

   Pygame may not always be built to support all image formats. At minimum it
   will support uncompressed ``BMP``. If :func:`pygame.image.get_extended()`
   returns ``True``, you should be able to load most images (including PNG, JPG
   and GIF).

   You should use :func:`os.path.join()` for compatibility.

   ::

     eg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))

   .. ## pygame.image.load ##

.. function:: save

   | :sl:`save an image to file (or file-like object)`
   | :sg:`save(Surface, filename) -> None`
   | :sg:`save(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``BMP``, ``TGA``, ``PNG``, or
   ``JPEG`` image. If the filename extension is unrecognized it will default to
   ``TGA``. Both ``TGA``, and ``BMP`` file formats create uncompressed files.
   You can pass a filename, a pathlib.Path or a Python file-like object.
   For file-like object, the image is saved to ``TGA`` format unless
   a namehint with a recognizable extension is passed in.

   .. note:: When saving to a file-like object, it seems that for most formats,
             the object needs to be flushed after saving to it to make loading
             from it possible.

   .. versionchanged:: 1.8 Saving PNG and JPEG files.
   .. versionchanged:: 2.0.0
                       The ``namehint`` parameter was added to make it possible
                       to save other formats than ``TGA`` to a file-like object.
                       Saving to a file-like object with JPEG is possible.

   .. ## pygame.image.save ##

.. function:: get_sdl_image_version

   | :sl:`get version number of the SDL_Image library being used`
   | :sg:`get_sdl_image_version(linked=True) -> None`
   | :sg:`get_sdl_image_version(linked=True) -> (major, minor, patch)`

   If pygame is built with extended image formats, then this function will
   return the SDL_Image library's version number as a tuple of 3 integers
   ``(major, minor, patch)``. If not, then it will return ``None``.

   ``linked=True`` is the default behavior and the function will return the
   version of the library that Pygame is linked against, while ``linked=False``
   will return the version of the library that Pygame is compiled against.

   .. versionadded:: 2.0.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

   .. ## pygame.image.get_sdl_image_version ##

.. function:: get_extended

   | :sl:`test if extended image formats can be loaded`
   | :sg:`get_extended() -> bool`

   If pygame is built with extended image formats this function will return
   True. It is still not possible to determine which formats will be available,
   but generally you will be able to load them all.

   .. ## pygame.image.get_extended ##

.. function:: tostring

   | :sl:`transfer image to byte buffer`
   | :sg:`tostring(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first

   .. note:: it is preferred to use :func:`tobytes` as of pygame 2.1.3

   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.tostring ##

.. function:: tobytes

   | :sl:`transfer image to byte buffer`
   | :sg:`tobytes(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped      

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first
   
   .. note:: this function is an alias for :func:`tostring`. The use of this
             function is recommended over :func:`tostring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.tobytes ##


.. function:: fromstring

   | :sl:`create new Surface from a byte buffer`
   | :sg:`fromstring(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tostring()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: it is preferred to use :func:`frombytes` as of pygame 2.1.3

   .. ## pygame.image.fromstring ##

.. function:: frombytes

   | :sl:`create new Surface from a byte buffer`
   | :sg:`frombytes(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tobytes()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: this function is an alias for :func:`fromstring`. The use of this
             function is recommended over :func:`fromstring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.frombytes ##

.. function:: frombuffer

   | :sl:`create a new Surface that shares data inside a bytes buffer`
   | :sg:`frombuffer(buffer, size, format) -> Surface`

   Create a new Surface that shares pixel data directly from a buffer. This
   buffer can be bytes, a bytearray, a memoryview, a
   :class:`pygame.BufferProxy`, or any object that supports the buffer protocol.
   This method takes similar arguments to :func:`pygame.image.fromstring()`, but
   is unable to vertically flip the source data.

   This will run much faster than :func:`pygame.image.fromstring`, since no
   pixel data must be allocated and copied.

   It accepts the following 'format' arguments:

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``BGR``, 24-bit image, red and blue channels swapped.

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first

      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped
  
   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.frombuffer ##

.. function:: load_basic

   | :sl:`load new BMP image from a file (or file-like object)`
   | :sg:`load_basic(file) -> Surface`

   Load an image from a file source. You can pass either a filename or a Python
   file-like object, or a pathlib.Path.

   This function only supports loading "basic" image format, ie ``BMP``
   format.
   This function is always available, no matter how pygame was built.

   .. ## pygame.image.load_basic ##

.. function:: load_extended

   | :sl:`load an image from a file (or file-like object)`
   | :sg:`load_extended(filename) -> Surface`
   | :sg:`load_extended(fileobj, namehint="") -> Surface`

   This function is similar to :func:`pygame.image.load()`, except that this
   function can only be used if pygame was built with extended image format
   support.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.load_extended ##

.. function:: save_extended

   | :sl:`save a png/jpg image to file (or file-like object)`
   | :sg:`save_extended(Surface, filename) -> None`
   | :sg:`save_extended(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``PNG`` or ``JPEG`` image.

   In case the image is being saved to a file-like object, this function
   uses the namehint argument to determine the format of the file being
   saved. Saves to ``JPEG`` in case the namehint was not specified while
   saving to a file-like object.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.save_extended ##

.. ## pygame.image ##


--- Contenu du fichier : draw.rst.txt ---
.. include:: common.txt

:mod:`pygame.draw`
==================

.. module:: pygame.draw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

Draw several simple shapes to a surface. These functions will work for
rendering to any format of surface.

Most of the functions take a width argument to represent the size of stroke
(thickness) around the edge of the shape. If a width of 0 is passed the shape
will be filled (solid).

All the drawing functions respect the clip area for the surface and will be
constrained to that area. The functions return a rectangle representing the
bounding area of changed pixels. This bounding rectangle is the 'minimum'
bounding box that encloses the affected area.

All the drawing functions accept a color argument that can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)
   - an integer value that has been mapped to the surface's pixel format
     (see :func:`pygame.Surface.map_rgb` and :func:`pygame.Surface.unmap_rgb`)

A color's alpha value will be written directly into the surface (if the
surface contains pixel alphas), but the draw function will not draw
transparently.

These functions temporarily lock the surface they are operating on. Many
sequential drawing calls can be sped up by locking and unlocking the surface
object around the draw calls (see :func:`pygame.Surface.lock` and
:func:`pygame.Surface.unlock`).

.. note ::
   See the :mod:`pygame.gfxdraw` module for alternative draw methods.


.. function:: rect

   | :sl:`draw a rectangle`
   | :sg:`rect(surface, color, rect) -> Rect`
   | :sg:`rect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect`

   Draws a rectangle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to draw, position and dimensions
   :param int width: (optional) used for line thickness or to indicate that
      the rectangle is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the rectangle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |
      
      .. versionchanged:: 2.1.1 
          Drawing rects with width now draws the width correctly inside the 
          rect's area, rather than using an internal call to draw.lines(), 
          which had half the width spill outside the rect area.

   :param int border_radius: (optional) used for drawing rectangle with rounded corners.
      The supported range is [0, min(height, width) / 2], with 0 representing a rectangle
      without rounded corners.
   :param int border_top_left_radius: (optional) used for setting the value of top left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_top_right_radius: (optional) used for setting the value of top right
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_left_radius: (optional) used for setting the value of bottom left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_right_radius: (optional) used for setting the value of bottom right
      border. If you don't set this value, it will use the border_radius value.

         | if ``border_radius < 1`` it will draw rectangle without rounded corners
         | if any of border radii has the value ``< 0`` it will use value of the border_radius
         | If sum of radii on the same side of the rectangle is greater than the rect size the radii
         | will get scaled

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. note::
      The :func:`pygame.Surface.fill()` method works just as well for drawing
      filled rectangles and can be hardware accelerated on some platforms.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
   .. versionchanged:: 2.0.0.dev8 Added support for border radius.

   .. ## pygame.draw.rect ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, color, points) -> Rect`
   | :sg:`polygon(surface, color, points, width=0) -> Rect`

   Draws a polygon on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param points: a sequence of 3 or more (x, y) coordinates that make up the
      vertices of the polygon, each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats,
      e.g. ``[(x1, y1), (x2, y2), (x3, y3)]``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness or to indicate that
      the polygon is to be filled

         | if width == 0, (default) fill the polygon
         | if width > 0, used for line thickness
         | if width < 0, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will grow
            outside the original boundary of the polygon. For more details on
            how the thickness for edge lines grow, refer to the ``width`` notes
            of the :func:`pygame.draw.line` function.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. note::
       For an aapolygon, use :func:`aalines()` with ``closed=True``.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.polygon ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, color, center, radius) -> Rect`
   | :sg:`circle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect`

   Draws a circle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param center: center point of the circle as a sequence of 2 ints/floats,
      e.g. ``(x, y)``
   :type center: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param radius: radius of the circle, measured from the ``center`` parameter,
      nothing will be drawn if the ``radius`` is less than 1
   :type radius: int or float
   :param int width: (optional) used for line thickness or to indicate that
      the circle is to be filled

         | if ``width == 0``, (default) fill the circle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward.
   :param bool draw_top_right: (optional) if this is set to True then the top right corner
      of the circle will be drawn
   :param bool draw_top_left: (optional) if this is set to True then the top left corner
      of the circle will be drawn
   :param bool draw_bottom_left: (optional) if this is set to True then the bottom left corner
      of the circle will be drawn
   :param bool draw_bottom_right: (optional) if this is set to True then the bottom right corner
      of the circle will be drawn

         | if any of the draw_circle_part is True then it will draw all circle parts that have the True
         | value, otherwise it will draw the entire circle.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``center`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``center`` is not a sequence of two numbers
   :raises TypeError: if ``radius`` is not a number

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
      Nothing is drawn when the radius is 0 (a pixel at the ``center`` coordinates
      used to be drawn when the radius equaled 0).
      Floats, and Vector2 are accepted for the ``center`` param.
      The drawing algorithm was improved to look more like a circle.
   .. versionchanged:: 2.0.0.dev8 Added support for drawing circle quadrants.

   .. ## pygame.draw.circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, color, rect) -> Rect`
   | :sg:`ellipse(surface, color, rect, width=0) -> Rect`

   Draws an ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse, the ellipse will be centered inside the rectangle and bounded
      by it
   :param int width: (optional) used for line thickness or to indicate that
      the ellipse is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the ellipse
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.ellipse ##

.. function:: arc

   | :sl:`draw an elliptical arc`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle) -> Rect`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect`

   Draws an elliptical arc on the given surface.

   The two angle arguments are given in radians and indicate the start and stop
   positions of the arc. The arc is drawn in a counterclockwise direction from
   the ``start_angle`` to the ``stop_angle``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse which the arc will be based on, the ellipse will be centered
      inside the rectangle
   :param float start_angle: start angle of the arc in radians
   :param float stop_angle: stop angle of the arc in
      radians

         | if ``start_angle < stop_angle``, the arc is drawn in a
            counterclockwise direction from the ``start_angle`` to the
            ``stop_angle``
         | if ``start_angle > stop_angle``, tau (tau == 2 * pi) will be added
            to the ``stop_angle``, if the resulting stop angle value is greater
            than the ``start_angle`` the above ``start_angle < stop_angle`` case
            applies, otherwise nothing will be drawn
         | if ``start_angle == stop_angle``, nothing will be drawn
         |

   :param int width: (optional) used for line thickness (not to be confused
      with the width value of the ``rect`` parameter)

         | if ``width == 0``, nothing will be drawn
         | if ``width > 0``, (default is 1) used for line thickness
         | if ``width < 0``, same as ``width == 0``

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.arc ##

.. function:: line

   | :sl:`draw a straight line`
   | :sg:`line(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`line(surface, color, start_pos, end_pos, width=1) -> Rect`

   Draws a straight line on the given surface. There are no endcaps. For thick
   lines the ends are squared off.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, lines will grow as follows.

            For odd ``width`` values, the thickness of each line grows with the
            original line being in the center.

            For even ``width`` values, the thickness of each line grows with the
            original line being offset from the center (as there is no exact
            center line drawn). As a result, lines with a slope < 1
            (horizontal-ish) will have 1 more pixel of thickness below the
            original line (in the y direction). Lines with a slope >= 1
            (vertical-ish) will have 1 more pixel of thickness to the right of
            the original line (in the x direction).

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.line ##

.. function:: lines

   | :sl:`draw multiple contiguous straight line segments`
   | :sg:`lines(surface, color, closed, points) -> Rect`
   | :sg:`lines(surface, color, closed, points, width=1) -> Rect`

   Draws a sequence of contiguous straight lines on the given surface. There are
   no endcaps or miter joints. For thick lines the ends are squared off.
   Drawing thick lines with sharp corners can have undesired looking results.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1`` refer to the ``width`` notes
            of :func:`line` for details on how thick lines grow.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.lines ##

.. function:: aaline

   | :sl:`draw a straight antialiased line`
   | :sg:`aaline(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`aaline(surface, color, start_pos, end_pos, blend=1) -> Rect`

   Draws a straight antialiased line on the given surface.

   The line has a thickness of one pixel and the endpoints have a height and
   width of one pixel each.

   The way a line and its endpoints are drawn:
      If both endpoints are equal, only a single pixel is drawn (after
      rounding floats to nearest integer).

      Otherwise if the line is not steep (i.e. if the length along the x-axis
      is greater than the height along the y-axis):

         For each endpoint:

            If ``x``, the endpoint's x-coordinate, is a whole number find
            which pixels would be covered by it and draw them.

            Otherwise:

               Calculate the position of the nearest point with a whole number
               for its x-coordinate, when extending the line past the
               endpoint.

               Find which pixels would be covered and how much by that point.

               If the endpoint is the left one, multiply the coverage by (1 -
               the decimal part of ``x``).

               Otherwise multiply the coverage by the decimal part of ``x``.

               Then draw those pixels.

               *e.g.:*
                  | The left endpoint of the line ``((1, 1.3), (5, 3))`` would
                    cover 70% of the pixel ``(1, 1)`` and 30% of the pixel
                    ``(1, 2)`` while the right one would cover 100% of the
                    pixel ``(5, 3)``.
                  | The left endpoint of the line ``((1.2, 1.4), (4.6, 3.1))``
                    would cover 56% *(i.e. 0.8 * 70%)* of the pixel ``(1, 1)``
                    and 24% *(i.e. 0.8 * 30%)* of the pixel ``(1, 2)`` while
                    the right one would cover 42% *(i.e. 0.6 * 70%)* of the
                    pixel ``(5, 3)`` and 18% *(i.e. 0.6 * 30%)* of the pixel
                    ``(5, 4)`` while the right

         Then for each point between the endpoints, along the line, whose
         x-coordinate is a whole number:

            Find which pixels would be covered and how much by that point and
            draw them.

            *e.g.:*
               | The points along the line ``((1, 1), (4, 2.5))`` would be
                 ``(2, 1.5)`` and ``(3, 2)`` and would cover 50% of the pixel
                 ``(2, 1)``, 50% of the pixel ``(2, 2)`` and 100% of the pixel
                 ``(3, 2)``.
               | The points along the line ``((1.2, 1.4), (4.6, 3.1))`` would
                 be ``(2, 1.8)`` (covering 20% of the pixel ``(2, 1)`` and 80%
                 of the pixel ``(2, 2)``), ``(3, 2.3)`` (covering 70% of the
                 pixel ``(3, 2)`` and 30% of the pixel ``(3, 3)``) and ``(4,
                 2.8)`` (covering 20% of the pixel ``(2, 1)`` and 80% of the
                 pixel ``(2, 2)``)

      Otherwise do the same for steep lines as for non-steep lines except
      along the y-axis instead of the x-axis (using ``y`` instead of ``x``,
      top instead of left and bottom instead of right).

   .. note::
      Regarding float values for coordinates, a point with coordinate
      consisting of two whole numbers is considered being right in the center
      of said pixel (and having a height and width of 1 pixel would therefore
      completely cover it), while a point with coordinate where one (or both)
      of the numbers have non-zero decimal parts would be partially covering
      two (or four if both numbers have decimal parts) adjacent pixels, *e.g.*
      the point ``(1.4, 2)`` covers 60% of the pixel ``(1, 2)`` and 40% of the
      pixel ``(2,2)``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int blend: (optional) (deprecated) if non-zero (default) the line will be blended
      with the surface's existing pixel shades, otherwise it will overwrite them

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aaline ##

.. function:: aalines

   | :sl:`draw multiple contiguous straight antialiased line segments`
   | :sg:`aalines(surface, color, closed, points) -> Rect`
   | :sg:`aalines(surface, color, closed, points, blend=1) -> Rect`

   Draws a sequence of contiguous straight antialiased lines on the given
   surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int blend: (optional) (deprecated) if non-zero (default) each line will be blended
      with the surface's existing pixel shades, otherwise the pixels will be
      overwritten

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aalines ##

.. ## pygame.draw ##

.. figure:: code_examples/draw_module_example.png
   :alt: draw module example

   Example code for draw module.

.. literalinclude:: code_examples/draw_module_example.py



--- Contenu du fichier : rect.rst.txt ---
.. include:: common.txt

:mod:`pygame.Rect`
==================

.. currentmodule:: pygame

.. class:: Rect

   | :sl:`pygame object for storing rectangular coordinates`
   | :sg:`Rect(left, top, width, height) -> Rect`
   | :sg:`Rect((left, top), (width, height)) -> Rect`
   | :sg:`Rect(object) -> Rect`

   Pygame uses Rect objects to store and manipulate rectangular areas. A Rect
   can be created from a combination of left, top, width, and height values.
   Rects can also be created from Python objects that are already a Rect or
   have an attribute named "rect".

   Any Pygame function that requires a Rect argument also accepts any of these
   values to construct a Rect. This makes it easier to create Rects on the fly
   as arguments for functions.

   The Rect functions that change the position or size of a Rect return a new
   copy of the Rect with the affected changes. The original Rect is not
   modified. Some methods have an alternate "in-place" version that returns
   None but affects the original Rect. These "in-place" methods are denoted
   with the "ip" suffix.

   The Rect object has several virtual attributes which can be used to move and
   align the Rect:

   ::

       x,y
       top, left, bottom, right
       topleft, bottomleft, topright, bottomright
       midtop, midleft, midbottom, midright
       center, centerx, centery
       size, width, height
       w,h

   All of these attributes can be assigned to:

   ::

       rect1.right = 10
       rect2.center = (20,30)

   Assigning to size, width or height changes the dimensions of the rectangle;
   all other assignments move the rectangle without resizing it. Notice that
   some attributes are integers and others are pairs of integers.

   If a Rect has a nonzero width or height, it will return ``True`` for a
   nonzero test. Some methods return a Rect with 0 size to represent an invalid
   rectangle. A Rect with a 0 size will not collide when using collision
   detection methods (e.g. :meth:`collidepoint`, :meth:`colliderect`, etc.).

   The coordinates for Rect objects are all integers. The size values can be
   programmed to have negative values, but these are considered illegal Rects
   for most operations.

   There are several collision tests between other rectangles. Most python
   containers can be searched for collisions against a single Rect.

   The area covered by a Rect does not include the right- and bottom-most edge
   of pixels. If one Rect's bottom border is another Rect's top border (i.e.,
   rect1.bottom=rect2.top), the two meet exactly on the screen but do not
   overlap, and ``rect1.colliderect(rect2)`` returns false.

   The Rect object is also iterable:

   ::

      r = Rect(0, 1, 2, 3)
      x, y, w, h = r

   .. versionadded:: 1.9.2
      The Rect class can be subclassed. Methods such as ``copy()`` and ``move()``
      will recognize this and return instances of the subclass.
      However, the subclass's ``__init__()`` method is not called,
      and ``__new__()`` is assumed to take no arguments. So these methods should be
      overridden if any extra attributes need to be copied.

   .. method:: copy

      | :sl:`copy the rectangle`
      | :sg:`copy() -> Rect`

      Returns a new rectangle having the same position and size as the original.

      New in pygame 1.9

      .. ## Rect.copy ##

   .. method:: move

      | :sl:`moves the rectangle`
      | :sg:`move(x, y) -> Rect`

      Returns a new rectangle that is moved by the given offset. The x and y
      arguments can be any integer value, positive or negative.

      .. ## Rect.move ##

   .. method:: move_ip

      | :sl:`moves the rectangle, in place`
      | :sg:`move_ip(x, y) -> None`

      Same as the ``Rect.move()`` method, but operates in place.

      .. ## Rect.move_ip ##

   .. method:: inflate

      | :sl:`grow or shrink the rectangle size`
      | :sg:`inflate(x, y) -> Rect`

      Returns a new rectangle with the size changed by the given offset. The
      rectangle remains centered around its current center. Negative values
      will shrink the rectangle. Note, uses integers, if the offset given is
      too small(< 2 > -2), center will be off.

      .. ## Rect.inflate ##

   .. method:: inflate_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`inflate_ip(x, y) -> None`

      Same as the ``Rect.inflate()`` method, but operates in place.

      .. ## Rect.inflate_ip ##

   .. method:: scale_by

      | :sl:`scale the rectangle by given a multiplier`
      | :sg:`scale_by(scalar) -> Rect`
      | :sg:`scale_by(scalex, scaley) -> Rect`

      Returns a new rectangle with the size scaled by the given multipliers.
      The rectangle remains centered around its current center. A single 
      scalar or separate width and height scalars are allowed. Values above
      one will increase the size of the rectangle, whereas values between
      zero and one will decrease the size of the rectangle.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by ##

   .. method:: scale_by_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`scale_by_ip(scalar) -> None`
      | :sg:`scale_by_ip(scalex, scaley) -> None`

      Same as the ``Rect.scale_by()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by_ip ##

   .. method:: update

      | :sl:`sets the position and size of the rectangle`
      | :sg:`update(left, top, width, height) -> None`
      | :sg:`update((left, top), (width, height)) -> None`
      | :sg:`update(object) -> None`

      Sets the position and size of the rectangle, in place. See
      parameters for :meth:`pygame.Rect` for the parameters of this function.

      .. versionadded:: 2.0.1

      .. ## Rect.update ##

   .. method:: clamp

      | :sl:`moves the rectangle inside another`
      | :sg:`clamp(Rect) -> Rect`

      Returns a new rectangle that is moved to be completely inside the
      argument Rect. If the rectangle is too large to fit inside, it is
      centered inside the argument Rect, but its size is not changed.

      .. ## Rect.clamp ##

   .. method:: clamp_ip

      | :sl:`moves the rectangle inside another, in place`
      | :sg:`clamp_ip(Rect) -> None`

      Same as the ``Rect.clamp()`` method, but operates in place.

      .. ## Rect.clamp_ip ##

   .. method:: clip

      | :sl:`crops a rectangle inside another`
      | :sg:`clip(Rect) -> Rect`

      Returns a new rectangle that is cropped to be completely inside the
      argument Rect. If the two rectangles do not overlap to begin with, a Rect
      with 0 size is returned.

      .. ## Rect.clip ##

   .. method:: clipline

      | :sl:`crops a line inside a rectangle`
      | :sg:`clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(x1, y1, x2, y2) -> ()`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ()`
      | :sg:`clipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1, x2, y2)) -> ()`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ()`

      Returns the coordinates of a line that is cropped to be completely inside
      the rectangle. If the line does not overlap the rectangle, then an empty
      tuple is returned.

      The line to crop can be any of the following formats (floats can be used
      in place of ints, but they will be truncated):

         - four ints
         - 2 lists/tuples/Vector2s of 2 ints
         - a list/tuple of four ints
         - a list/tuple of 2 lists/tuples/Vector2s of 2 ints

      :returns: a tuple with the coordinates of the given line cropped to be
         completely inside the rectangle is returned, if the given line does
         not overlap the rectangle, an empty tuple is returned
      :rtype: tuple(tuple(int, int), tuple(int, int)) or ()

      :raises TypeError: if the line coordinates are not given as one of the
         above described line formats

      .. note ::
         This method can be used for collision detection between a rect and a
         line. See example code below.

      .. note ::
         The ``rect.bottom`` and ``rect.right`` attributes of a
         :mod:`pygame.Rect` always lie one pixel outside of its actual border.

      ::

         # Example using clipline().
         clipped_line = rect.clipline(line)

         if clipped_line:
             # If clipped_line is not an empty tuple then the line
             # collides/overlaps with the rect. The returned value contains
             # the endpoints of the clipped line.
             start, end = clipped_line
             x1, y1 = start
             x2, y2 = end
         else:
             print("No clipping. The line is fully outside the rect.")

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. versionadded:: 2.0.0

      .. ## Rect.clipline ##

   .. method:: union

      | :sl:`joins two rectangles into one`
      | :sg:`union(Rect) -> Rect`

      Returns a new rectangle that completely covers the area of the two
      provided rectangles. There may be area inside the new Rect that is not
      covered by the originals.

      .. ## Rect.union ##

   .. method:: union_ip

      | :sl:`joins two rectangles into one, in place`
      | :sg:`union_ip(Rect) -> None`

      Same as the ``Rect.union()`` method, but operates in place.

      .. ## Rect.union_ip ##

   .. method:: unionall

      | :sl:`the union of many rectangles`
      | :sg:`unionall(Rect_sequence) -> Rect`

      Returns the union of one rectangle with a sequence of many rectangles.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall ##

   .. method:: unionall_ip

      | :sl:`the union of many rectangles, in place`
      | :sg:`unionall_ip(Rect_sequence) -> None`

      The same as the ``Rect.unionall()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall_ip ##

   .. method:: fit

      | :sl:`resize and move a rectangle with aspect ratio`
      | :sg:`fit(Rect) -> Rect`

      Returns a new rectangle that is moved and resized to fit another. The
      aspect ratio of the original Rect is preserved, so the new rectangle may
      be smaller than the target in either width or height.

      .. ## Rect.fit ##

   .. method:: normalize

      | :sl:`correct negative sizes`
      | :sg:`normalize() -> None`

      This will flip the width or height of a rectangle if it has a negative
      size. The rectangle will remain in the same place, with only the sides
      swapped.

      .. ## Rect.normalize ##

   .. method:: contains

      | :sl:`test if one rectangle is inside another`
      | :sg:`contains(Rect) -> bool`

      Returns true when the argument is completely inside the Rect.

      .. ## Rect.contains ##

   .. method:: collidepoint

      | :sl:`test if a point is inside a rectangle`
      | :sg:`collidepoint(x, y) -> bool`
      | :sg:`collidepoint((x,y)) -> bool`

      Returns true if the given point is inside the rectangle. A point along
      the right or bottom edge is not considered to be inside the rectangle.

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.collidepoint ##

   .. method:: colliderect

      | :sl:`test if two rectangles overlap`
      | :sg:`colliderect(Rect) -> bool`

      Returns true if any portion of either rectangle overlap (except the
      top+bottom or left+right edges).

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.colliderect ##

   .. method:: collidelist

      | :sl:`test if one rectangle in a list intersects`
      | :sg:`collidelist(list) -> index`

      Test whether the rectangle collides with any in a sequence of rectangles.
      The index of the first collision found is returned. If no collisions are
      found an index of -1 is returned.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelist ##

   .. method:: collidelistall

      | :sl:`test if all rectangles in a list intersect`
      | :sg:`collidelistall(list) -> indices`

      Returns a list of all the indices that contain rectangles that collide
      with the Rect. If no intersecting rectangles are found, an empty list is
      returned.

      Not only Rects are valid arguments, but these are all valid calls:

      .. code-block:: python
    
          Rect = pygame.Rect
          r = Rect(0, 0, 10, 10)
          
          list_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]
          indices0 = r.collidelistall(list_of_rects)
          
          list_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]
          indices1 = r.collidelistall(list_of_lists)
          
          list_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]
          indices2 = r.collidelistall(list_of_tuples)
          
          list_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]
          indices3 = r.collidelistall(list_of_double_tuples)
          
          class ObjectWithRectAttribute(object):
              def __init__(self, r):
                  self.rect = r
          
          list_of_object_with_rect_attribute = [
              ObjectWithRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices4 = r.collidelistall(list_of_object_with_rect_attribute)
          
          class ObjectWithCallableRectAttribute(object):
              def __init__(self, r):
                  self._rect = r
          
              def rect(self):
                  return self._rect
          
          list_of_object_with_callable_rect = [
              ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices5 = r.collidelistall(list_of_object_with_callable_rect)

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelistall ##

   .. method:: collideobjects

      | :sl:`test if any object in a list intersects`
      | :sg:`collideobjects(rect_list) -> object`
      | :sg:`collideobjects(obj_list, key=func) -> object`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjects feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Test whether the rectangle collides with any object in the sequence.
      The object of the first collision found is returned. If no collisions are
      found then ``None`` is returned

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
          ]

          # collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object
          collision = r.collideobjects(
              objects, key=lambda o: o.collision_box
          )  # -> <ObjectWithSomRectAttribute("B", [1, 1, 10, 10], [300, 300, 50, 50])>
          print(collision)

          screen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None
          print(screen_rect)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjects ##

   .. method:: collideobjectsall

      | :sl:`test if all objects in a list intersect`
      | :sg:`collideobjectsall(rect_list) -> objects`
      | :sg:`collideobjectsall(obj_list, key=func) -> objects`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjectsall feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Returns a list of all the objects that contain rectangles that collide
      with the Rect. If no intersecting objects are found, an empty list is
      returned.

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjectsall(
              rects
          )  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
          ]

          # collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object
          collisions = r.collideobjectsall(
              objects, key=lambda o: o.collision_box
          )  # -> [<ObjectWithSomRectAttribute("A", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute("B", [5, 5, 10, 10], [200, 500, 50, 50])>]
          print(collisions)

          screen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []
          print(screen_rects)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjectsall ##

   .. method:: collidedict

      | :sl:`test if one rectangle in a dictionary intersects`
      | :sg:`collidedict(dict) -> (key, value)`
      | :sg:`collidedict(dict) -> None`
      | :sg:`collidedict(dict, use_values=0) -> (key, value)`
      | :sg:`collidedict(dict, use_values=0) -> None`

      Returns the first key and value pair that intersects with the calling
      Rect object. If no collisions are found, ``None`` is returned. If
      ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedict({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedict ##

   .. method:: collidedictall

      | :sl:`test if all rectangles in a dictionary intersect`
      | :sg:`collidedictall(dict) -> [(key, value), ...]`
      | :sg:`collidedictall(dict, use_values=0) -> [(key, value), ...]`

      Returns a list of all the key and value pairs that intersect with the
      calling Rect object. If no collisions are found an empty list is returned.
      If ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedictall({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedictall ##

   .. ## pygame.Rect ##


--- Contenu du fichier : surface.rst.txt ---
.. include:: common.txt

:mod:`pygame.Surface`
=====================

.. currentmodule:: pygame

.. class:: Surface

   | :sl:`pygame object for representing images`
   | :sg:`Surface((width, height), flags=0, depth=0, masks=None) -> Surface`
   | :sg:`Surface((width, height), flags=0, Surface) -> Surface`

   A pygame Surface is used to represent any image. The Surface has a fixed
   resolution and pixel format. Surfaces with 8-bit pixels use a color palette
   to map to 24-bit color.

   Call :meth:`pygame.Surface()` to create a new image object. The Surface will
   be cleared to all black. The only required arguments are the sizes. With no
   additional arguments, the Surface will be created in a format that best
   matches the display Surface.

   The pixel format can be controlled by passing the bit depth or an existing
   Surface. The flags argument is a bitmask of additional features for the
   surface. You can pass any combination of these flags:

   ::

     HWSURFACE    (obsolete in pygame 2) creates the image in video memory
     SRCALPHA     the pixel format will include a per-pixel alpha

   Both flags are only a request, and may not be possible for all displays and
   formats.

   Advance users can combine a set of bitmasks with a depth value. The masks
   are a set of 4 integers representing which bits in a pixel will represent
   each color. Normal Surfaces should not require the masks argument.

   Surfaces can have many extra attributes like alpha planes, colorkeys, source
   rectangle clipping. These functions mainly effect how the Surface is blitted
   to other Surfaces. The blit routines will attempt to use hardware
   acceleration when possible, otherwise they will use highly optimized
   software blitting methods.

   There are three types of transparency supported in pygame: colorkeys,
   surface alphas, and pixel alphas. Surface alphas can be mixed with
   colorkeys, but an image with per pixel alphas cannot use the other modes.
   Colorkey transparency makes a single color value transparent. Any pixels
   matching the colorkey will not be drawn. The surface alpha value is a single
   value that changes the transparency for the entire image. A surface alpha of
   255 is opaque, and a value of 0 is completely transparent.

   Per pixel alphas are different because they store a transparency value for
   every pixel. This allows for the most precise transparency effects, but it
   also the slowest. Per pixel alphas cannot be mixed with surface alpha and
   colorkeys.

   There is support for pixel access for the Surfaces. Pixel access on hardware
   surfaces is slow and not recommended. Pixels can be accessed using the
   :meth:`get_at()` and :meth:`set_at()` functions. These methods are fine for
   simple access, but will be considerably slow when doing of pixel work with
   them. If you plan on doing a lot of pixel level work, it is recommended to
   use a :class:`pygame.PixelArray`, which gives an array like view of the
   surface. For involved mathematical manipulations try the
   :mod:`pygame.surfarray` module (It's quite quick, but requires NumPy.)

   Any functions that directly access a surface's pixel data will need that
   surface to be lock()'ed. These functions can :meth:`lock()` and
   :meth:`unlock()` the surfaces themselves without assistance. But, if a
   function will be called many times, there will be a lot of overhead for
   multiple locking and unlocking of the surface. It is best to lock the
   surface manually before making the function call many times, and then
   unlocking when you are finished. All functions that need a locked surface
   will say so in their docs. Remember to leave the Surface locked only while
   necessary.

   Surface pixels are stored internally as a single number that has all the
   colors encoded into it. Use the :meth:`map_rgb()` and
   :meth:`unmap_rgb()` to convert between individual red, green, and blue
   values into a packed integer for that Surface.

   Surfaces can also reference sections of other Surfaces. These are created
   with the :meth:`subsurface()` method. Any change to either Surface will
   effect the other.

   Each Surface contains a clipping area. By default the clip area covers the
   entire Surface. If it is changed, all drawing operations will only effect
   the smaller area.

   .. method:: blit

      | :sl:`draw one image onto another`
      | :sg:`blit(source, dest, area=None, special_flags=0) -> Rect`

      Draws a source Surface onto this Surface. The draw can be positioned with
      the dest argument. The dest argument can either be a pair of coordinates representing the position of
      the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the
      position for the blit. The size of the destination rectangle does not
      effect the blit.

      An optional area rectangle can be passed as well. This represents a
      smaller portion of the source Surface to draw.

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      .. versionadded:: 1.9.2
         Optional ``special_flags``: ``BLEND_PREMULTIPLIED``

      .. versionadded:: 2.0.0
         Optional ``special_flags``:  ``BLEND_ALPHA_SDL2`` - Uses the SDL2 blitter for alpha blending,
         this gives different results than the default blitter, which is modelled after SDL1, due to
         different approximations used for the alpha blending formula. The SDL2 blitter also supports
         RLE on alpha blended surfaces which the pygame one does not.

      The return rectangle is the area of the affected pixels, excluding any
      pixels outside the destination Surface, or outside the clipping area.

      Pixel alphas will be ignored when blitting to an 8 bit Surface.

      For a surface with colorkey or blanket alpha, a blit to self may give
      slightly different colors than a non self-blit.

      .. ## Surface.blit ##

   .. method:: blits

      | :sl:`draw many images onto another`
      | :sg:`blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None`
      | :sg:`blits(((source, dest, area), ...)) -> [Rect, ...]`
      | :sg:`blits(((source, dest, area, special_flags), ...)) -> [Rect, ...]`

      Draws many surfaces onto this Surface. It takes a sequence as input,
      with each of the elements corresponding to the ones of :meth:`blit()`.
      It needs at minimum a sequence of (source, dest).

      :param blit_sequence: a sequence of surfaces and arguments to blit them,
         they correspond to the :meth:`blit()` arguments
      :param doreturn: if ``True``, return a list of rects of the areas changed,
         otherwise return ``None``

      :returns: a list of rects of the areas changed if ``doreturn`` is
         ``True``, otherwise ``None``
      :rtype: list or None

      New in pygame 1.9.4.

      .. ## Surface.blits ##


   .. method:: convert

      | :sl:`change the pixel format of an image`
      | :sg:`convert(Surface=None) -> Surface`
      | :sg:`convert(depth, flags=0) -> Surface`
      | :sg:`convert(masks, flags=0) -> Surface`

      Creates a new copy of the Surface with the pixel format changed. The new
      pixel format can be determined from another existing Surface. Otherwise
      depth, flags, and masks arguments can be used, similar to the
      :meth:`pygame.Surface()` call.

      If no arguments are passed the new Surface will have the same pixel
      format as the display Surface. This is always the fastest format for
      blitting. It is a good idea to convert all Surfaces before they are
      blitted many times.

      The converted Surface will have no pixel alphas. They will be stripped if
      the original had them. See :meth:`convert_alpha()` for preserving or
      creating per-pixel alphas.

      The new copy will have the same class as the copied surface. This lets
      as Surface subclass inherit this method without the need to override,
      unless subclass specific instance attributes also need copying.

      .. ## Surface.convert ##

   .. method:: convert_alpha

      | :sl:`change the pixel format of an image including per pixel alphas`
      | :sg:`convert_alpha(Surface) -> Surface`
      | :sg:`convert_alpha() -> Surface`

      Creates a new copy of the surface with the desired pixel format. The new
      surface will be in a format suited for quick blitting to the given format
      with per pixel alpha. If no surface is given, the new surface will be
      optimized for blitting to the current display.

      Unlike the :meth:`convert()` method, the pixel format for the new
      image will not be exactly the same as the requested source, but it will
      be optimized for fast alpha blitting to the destination.

      As with :meth:`convert()` the returned surface has the same class as
      the converted surface.

      .. ## Surface.convert_alpha ##

   .. method:: copy

      | :sl:`create a new copy of a Surface`
      | :sg:`copy() -> Surface`

      Makes a duplicate copy of a Surface. The new surface will have the same
      pixel formats, color palettes, transparency settings, and class as the
      original. If a Surface subclass also needs to copy any instance specific
      attributes then it should override ``copy()``.

      .. ## Surface.copy ##

   .. method:: fill

      | :sl:`fill Surface with a solid color`
      | :sg:`fill(color, rect=None, special_flags=0) -> Rect`

      Fill the Surface with a solid color. If no rect argument is given the
      entire Surface will be filled. The rect argument will limit the fill to a
      specific area. The fill will also be contained by the Surface clip area.

      The color argument can be either a ``RGB`` sequence, a ``RGBA`` sequence
      or a mapped color index. If using ``RGBA``, the Alpha (A part of
      ``RGBA``) is ignored unless the surface uses per pixel alpha (Surface has
      the ``SRCALPHA`` flag).

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      This will return the affected Surface area.

      .. ## Surface.fill ##

   .. method:: scroll

      | :sl:`Shift the surface image in place`
      | :sg:`scroll(dx=0, dy=0) -> None`

      Move the image by dx pixels right and dy pixels down. dx and dy may be
      negative for left and up scrolls respectively. Areas of the surface that
      are not overwritten retain their original pixel values. Scrolling is
      contained by the Surface clip area. It is safe to have dx and dy values
      that exceed the surface size.

      .. versionadded:: 1.9

      .. ## Surface.scroll ##

   .. method:: set_colorkey

      | :sl:`Set the transparent colorkey`
      | :sg:`set_colorkey(Color, flags=0) -> None`
      | :sg:`set_colorkey(None) -> None`

      Set the current color key for the Surface. When blitting this Surface
      onto a destination, any pixels that have the same color as the colorkey
      will be transparent. The color can be an ``RGB`` color or a mapped color
      integer. If ``None`` is passed, the colorkey will be unset.

      The colorkey will be ignored if the Surface is formatted to use per pixel
      alpha values. The colorkey can be mixed with the full Surface alpha
      value.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_colorkey ##

   .. method:: get_colorkey

      | :sl:`Get the current transparent colorkey`
      | :sg:`get_colorkey() -> RGB or None`

      Return the current colorkey value for the Surface. If the colorkey is not
      set then ``None`` is returned.

      .. ## Surface.get_colorkey ##

   .. method:: set_alpha

      | :sl:`set the alpha value for the full Surface image`
      | :sg:`set_alpha(value, flags=0) -> None`
      | :sg:`set_alpha(None) -> None`

      Set the current alpha value for the Surface. When blitting this Surface
      onto a destination, the pixels will be drawn slightly transparent. The
      alpha value is an integer from 0 to 255, 0 is fully transparent and 255
      is fully opaque. If ``None`` is passed for the alpha value, then alpha
      blending will be disabled, including per-pixel alpha.

      This value is different than the per pixel Surface alpha. For a surface
      with per pixel alpha, blanket alpha is ignored and ``None`` is returned.

      .. versionchanged:: 2.0 per-surface alpha can be combined with per-pixel
                          alpha.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_alpha ##

   .. method:: get_alpha

      | :sl:`get the current Surface transparency value`
      | :sg:`get_alpha() -> int_value`

      Return the current alpha value for the Surface.

      .. ## Surface.get_alpha ##

   .. method:: lock

      | :sl:`lock the Surface memory for pixel access`
      | :sg:`lock() -> None`

      Lock the pixel data of a Surface for access. On accelerated Surfaces, the
      pixel data may be stored in volatile video memory or nonlinear compressed
      forms. When a Surface is locked the pixel memory becomes available to
      access by regular software. Code that reads or writes pixel values will
      need the Surface to be locked.

      Surfaces should not remain locked for more than necessary. A locked
      Surface can often not be displayed or managed by pygame.

      Not all Surfaces require locking. The :meth:`mustlock()` method can
      determine if it is actually required. There is no performance penalty for
      locking and unlocking a Surface that does not need it.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.lock ##

   .. method:: unlock

      | :sl:`unlock the Surface memory from pixel access`
      | :sg:`unlock() -> None`

      Unlock the Surface pixel data after it has been locked. The unlocked
      Surface can once again be drawn and managed by pygame. See the
      :meth:`lock()` documentation for more details.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.unlock ##

   .. method:: mustlock

      | :sl:`test if the Surface requires locking`
      | :sg:`mustlock() -> bool`

      Returns ``True`` if the Surface is required to be locked to access pixel
      data. Usually pure software Surfaces do not require locking. This method
      is rarely needed, since it is safe and quickest to just lock all Surfaces
      as needed.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      .. ## Surface.mustlock ##

   .. method:: get_locked

      | :sl:`test if the Surface is current locked`
      | :sg:`get_locked() -> bool`

      Returns ``True`` when the Surface is locked. It doesn't matter how many
      times the Surface is locked.

      .. ## Surface.get_locked ##

   .. method:: get_locks

      | :sl:`Gets the locks for the Surface`
      | :sg:`get_locks() -> tuple`

      Returns the currently existing locks for the Surface.

      .. ## Surface.get_locks ##

   .. method:: get_at

      | :sl:`get the color value at a single pixel`
      | :sg:`get_at((x, y)) -> Color`

      Return a copy of the ``RGBA`` Color value at the given pixel. If the
      Surface has no per pixel alpha, then the alpha value will always be 255
      (opaque). If the pixel position is outside the area of the Surface an
      ``IndexError`` exception will be raised.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation. It is better to use methods which
      operate on many pixels at a time like with the blit, fill and draw
      methods - or by using :mod:`pygame.surfarray`/:mod:`pygame.PixelArray`.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9
         Returning a Color instead of tuple. Use ``tuple(surf.get_at((x,y)))``
         if you want a tuple, and not a Color. This should only matter if
         you want to use the color as a key in a dict.

      .. ## Surface.get_at ##

   .. method:: set_at

      | :sl:`set the color value for a single pixel`
      | :sg:`set_at((x, y), Color) -> None`

      Set the ``RGBA`` or mapped integer color value for a single pixel. If the
      Surface does not have per pixel alphas, the alpha value is ignored.
      Setting pixels outside the Surface area or outside the Surface clipping
      will have no effect.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation.

      This function will temporarily lock and unlock the Surface as needed.

      .. note:: If the surface is palettized, the pixel color will be set to the
                most similar color in the palette.

      .. ## Surface.set_at ##

   .. method:: get_at_mapped

      | :sl:`get the mapped color value at a single pixel`
      | :sg:`get_at_mapped((x, y)) -> Color`

      Return the integer value of the given pixel. If the pixel position is
      outside the area of the Surface an ``IndexError`` exception will be
      raised.

      This method is intended for pygame unit testing. It unlikely has any use
      in an application.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9.2

      .. ## Surface.get_at_mapped ##

   .. method:: get_palette

      | :sl:`get the color index palette for an 8-bit Surface`
      | :sg:`get_palette() -> [RGB, RGB, RGB, ...]`

      Return a list of up to 256 color elements that represent the indexed
      colors used in an 8-bit Surface. The returned list is a copy of the
      palette, and changes will have no effect on the Surface.

      Returning a list of ``Color(with length 3)`` instances instead of tuples.

      .. versionadded:: 1.9

      .. ## Surface.get_palette ##

   .. method:: get_palette_at

      | :sl:`get the color for a single entry in a palette`
      | :sg:`get_palette_at(index) -> RGB`

      Returns the red, green, and blue color values for a single index in a
      Surface palette. The index should be a value from 0 to 255.

      .. versionadded:: 1.9
         Returning ``Color(with length 3)`` instance instead of a tuple.

      .. ## Surface.get_palette_at ##

   .. method:: set_palette

      | :sl:`set the color palette for an 8-bit Surface`
      | :sg:`set_palette([RGB, RGB, RGB, ...]) -> None`

      Set the full palette for an 8-bit Surface. This will replace the colors in
      the existing palette. A partial palette can be passed and only the first
      colors in the original palette will be changed.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette ##

   .. method:: set_palette_at

      | :sl:`set the color for a single index in an 8-bit Surface palette`
      | :sg:`set_palette_at(index, RGB) -> None`

      Set the palette value for a single entry in a Surface palette. The index
      should be a value from 0 to 255.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette_at ##

   .. method:: map_rgb

      | :sl:`convert a color into a mapped color value`
      | :sg:`map_rgb(Color) -> mapped_int`

      Convert an ``RGBA`` color into the mapped integer value for this Surface.
      The returned integer will contain no more bits than the bit depth of the
      Surface. Mapped color values are not often used inside pygame, but can be
      passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.map_rgb ##

   .. method:: unmap_rgb

      | :sl:`convert a mapped integer color value into a Color`
      | :sg:`unmap_rgb(mapped_int) -> Color`

      Convert an mapped integer color into the ``RGB`` color components for
      this Surface. Mapped color values are not often used inside pygame, but
      can be passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.unmap_rgb ##

   .. method:: set_clip

      | :sl:`set the current clipping area of the Surface`
      | :sg:`set_clip(rect) -> None`
      | :sg:`set_clip(None) -> None`

      Each Surface has an active clipping area. This is a rectangle that
      represents the only pixels on the Surface that can be modified. If
      ``None`` is passed for the rectangle the full Surface will be available
      for changes.

      The clipping area is always restricted to the area of the Surface itself.
      If the clip rectangle is too large it will be shrunk to fit inside the
      Surface.

      .. ## Surface.set_clip ##

   .. method:: get_clip

      | :sl:`get the current clipping area of the Surface`
      | :sg:`get_clip() -> Rect`

      Return a rectangle of the current clipping area. The Surface will always
      return a valid rectangle that will never be outside the bounds of the
      image. If the Surface has had ``None`` set for the clipping area, the
      Surface will return a rectangle with the full area of the Surface.

      .. ## Surface.get_clip ##

   .. method:: subsurface

      | :sl:`create a new surface that references its parent`
      | :sg:`subsurface(Rect) -> Surface`

      Returns a new Surface that shares its pixels with its new parent. The new
      Surface is considered a child of the original. Modifications to either
      Surface pixels will effect each other. Surface information like clipping
      area and color keys are unique to each Surface.

      The new Surface will inherit the palette, color key, and alpha settings
      from its parent.

      It is possible to have any number of subsurfaces and subsubsurfaces on
      the parent. It is also possible to subsurface the display Surface if the
      display mode is not hardware accelerated.

      See :meth:`get_offset()` and :meth:`get_parent()` to learn more
      about the state of a subsurface.

      A subsurface will have the same class as the parent surface.

      .. ## Surface.subsurface ##

   .. method:: get_parent

      | :sl:`find the parent of a subsurface`
      | :sg:`get_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then ``None`` will be returned.

      .. ## Surface.get_parent ##

   .. method:: get_abs_parent

      | :sl:`find the top level parent of a subsurface`
      | :sg:`get_abs_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then this surface will be returned.

      .. ## Surface.get_abs_parent ##

   .. method:: get_offset

      | :sl:`find the position of a child subsurface inside a parent`
      | :sg:`get_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of a parent. If the
      Surface is not a subsurface this will return (0, 0).

      .. ## Surface.get_offset ##

   .. method:: get_abs_offset

      | :sl:`find the absolute position of a child subsurface inside its top level parent`
      | :sg:`get_abs_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of its top level
      parent Surface. If the Surface is not a subsurface this will return (0,
      0).

      .. ## Surface.get_abs_offset ##

   .. method:: get_size

      | :sl:`get the dimensions of the Surface`
      | :sg:`get_size() -> (width, height)`

      Return the width and height of the Surface in pixels.

      .. ## Surface.get_size ##

   .. method:: get_width

      | :sl:`get the width of the Surface`
      | :sg:`get_width() -> width`

      Return the width of the Surface in pixels.

      .. ## Surface.get_width ##

   .. method:: get_height

      | :sl:`get the height of the Surface`
      | :sg:`get_height() -> height`

      Return the height of the Surface in pixels.

      .. ## Surface.get_height ##

   .. method:: get_rect

      | :sl:`get the rectangular area of the Surface`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new rectangle covering the entire surface. This rectangle will
      always start at (0, 0) with a width and height the same size as the image.

      You can pass keyword argument values to this function. These named values
      will be applied to the attributes of the Rect before it is returned. An
      example would be ``mysurf.get_rect(center=(100, 100))`` to create a
      rectangle for the Surface centered at a given position.

      .. ## Surface.get_rect ##

   .. method:: get_bitsize

      | :sl:`get the bit depth of the Surface pixel format`
      | :sg:`get_bitsize() -> int`

      Returns the number of bits used to represent each pixel. This value may
      not exactly fill the number of bytes used per pixel. For example a 15 bit
      Surface still requires a full 2 bytes.

      .. ## Surface.get_bitsize ##

   .. method:: get_bytesize

      | :sl:`get the bytes used per Surface pixel`
      | :sg:`get_bytesize() -> int`

      Return the number of bytes used per pixel.

      .. ## Surface.get_bytesize ##

   .. method:: get_flags

      | :sl:`get the additional flags used for the Surface`
      | :sg:`get_flags() -> int`

      Returns a set of current Surface features. Each feature is a bit in the
      flags bitmask. Typical flags are ``RLEACCEL``, ``SRCALPHA``, and
      ``SRCCOLORKEY``.

      Here is a more complete list of flags. A full list can be found in
      ``SDL_video.h``

      ::

        SWSURFACE      0x00000000    # Surface is in system memory
        HWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory
        ASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible

      See :func:`pygame.display.set_mode()` for flags exclusive to the
      display surface.

      Used internally (read-only)

      ::

        HWACCEL        0x00000100    # Blit uses hardware acceleration
        SRCCOLORKEY    0x00001000    # Blit uses a source color key
        RLEACCELOK     0x00002000    # Private flag
        RLEACCEL       0x00004000    # Surface is RLE encoded
        SRCALPHA       0x00010000    # Blit uses source alpha blending
        PREALLOC       0x01000000    # Surface uses preallocated memory

      .. ## Surface.get_flags ##

   .. method:: get_pitch

      | :sl:`get the number of bytes used per Surface row`
      | :sg:`get_pitch() -> int`

      Return the number of bytes separating each row in the Surface. Surfaces
      in video memory are not always linearly packed. Subsurfaces will also
      have a larger pitch than their real width.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_pitch ##

   .. method:: get_masks

      | :sl:`the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`get_masks() -> (R, G, B, A)`

      Returns the bitmasks used to isolate each color in a mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_masks ##

   .. method:: set_masks

      | :sl:`set the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`set_masks((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the masks are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_masks ##

   .. method:: get_shifts

      | :sl:`the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`get_shifts() -> (R, G, B, A)`

      Returns the pixel shifts need to convert between each color and a mapped
      integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_shifts ##

   .. method:: set_shifts

      | :sl:`sets the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`set_shifts((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the shifts are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_shifts ##

   .. method:: get_losses

      | :sl:`the significant bits used to convert between a color and a mapped integer`
      | :sg:`get_losses() -> (R, G, B, A)`

      Return the least significant number of bits stripped from each color in a
      mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_losses ##

   .. method:: get_bounding_rect

      | :sl:`find the smallest rect containing data`
      | :sg:`get_bounding_rect(min_alpha = 1) -> Rect`

      Returns the smallest rectangular region that contains all the pixels in
      the surface that have an alpha value greater than or equal to the minimum
      alpha value.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.8

      .. ## Surface.get_bounding_rect ##

   .. method:: get_view

      | :sl:`return a buffer view of the Surface's pixels.`
      | :sg:`get_view(<kind>='2') -> BufferProxy`

      Return an object which exports a surface's internal pixel buffer as
      a C level array struct, Python level array interface or a C level
      buffer interface. The new buffer protocol is supported.

      The kind argument is the length 1 string '0', '1', '2', '3',
      'r', 'g', 'b', or 'a'. The letters are case insensitive;
      'A' will work as well. The argument can be either a Unicode or byte (char)
      string. The default is '2'.

      '0' returns a contiguous unstructured bytes view. No surface shape
      information is given. A ``ValueError`` is raised if the surface's pixels
      are discontinuous.

      '1' returns a (surface-width * surface-height) array of continuous
      pixels. A ``ValueError`` is raised if the surface pixels are
      discontinuous.

      '2' returns a (surface-width, surface-height) array of raw pixels.
      The pixels are surface-bytesize-d unsigned integers. The pixel format is
      surface specific. The 3 byte unsigned integers of 24 bit surfaces are
      unlikely accepted by anything other than other pygame functions.

      '3' returns a (surface-width, surface-height, 3) array of ``RGB`` color
      components. Each of the red, green, and blue components are unsigned
      bytes. Only 24-bit and 32-bit surfaces are supported. The color
      components must be in either ``RGB`` or ``BGR`` order within the pixel.

      'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a
      (surface-width, surface-height) view of a single color component within a
      surface: a color plane. Color components are unsigned bytes. Both 24-bit
      and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with
      ``SRCALPHA`` support 'a'.

      The surface is locked only when an exposed interface is accessed.
      For new buffer interface accesses, the surface is unlocked once the
      last buffer view is released. For array interface and old buffer
      interface accesses, the surface remains locked until the BufferProxy
      object is released.

      .. versionadded:: 1.9.2

   .. method:: get_buffer

      | :sl:`acquires a buffer object for the pixels of the Surface.`
      | :sg:`get_buffer() -> BufferProxy`

      Return a buffer object for the pixels of the Surface. The buffer can be
      used for direct pixel access and manipulation. Surface pixel data is
      represented as an unstructured block of memory, with a start address
      and length in bytes. The data need not be contiguous. Any gaps are
      included in the length, but otherwise ignored.

      This method implicitly locks the Surface. The lock will be released when
      the returned :mod:`pygame.BufferProxy` object is garbage collected.

      .. versionadded:: 1.8

      .. ## Surface.get_buffer ##

   .. attribute:: _pixels_address

      | :sl:`pixel buffer address`
      | :sg:`_pixels_address -> int`

      The starting address of the surface's raw pixel bytes.

      .. versionadded:: 1.9.2

   .. method:: premul_alpha

      | :sl:`returns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.`
      | :sg:`premul_alpha() -> Surface`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave premul_alpha feedback with authors <https://github.com/pygame/pygame/pull/3276>`_

      Returns a copy of the initial surface with the red, green and blue color channels multiplied
      by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED
      blend mode flag of the blit() method. Surfaces which have called this method will only look
      correct after blitting if the BLEND_PREMULTIPLED special flag is used.

      It is worth noting that after calling this method, methods that return the colour of a pixel
      such as get_at() will return the alpha multiplied colour values. It is not possible to fully
      reverse an alpha multiplication of the colours in a surface as integer colour channel data
      is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct
      the original 255 from just the two remaining zeros in the colour and alpha channels).

      If you call this method, and then call it again, it will multiply the colour channels by the alpha channel
      twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the
      alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels.
      It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and
      one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied
      alpha blending.

      Surfaces without an alpha channel cannot use this method and will return an error if you use
      it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting
      on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.

      In general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces
      superior results when blitting an alpha surface onto another surface with alpha - assuming both
      surfaces contain pre-multiplied alpha colours.

      .. versionadded:: 2.2.0

      .. ## Surface.premul_alpha ##

   .. ## pygame.Surface ##




--- Contenu du fichier : scrap.rst.txt ---
.. include:: common.txt

:mod:`pygame.scrap`
===================

.. module:: pygame.scrap
   :synopsis: pygame module for clipboard support.

| :sl:`pygame module for clipboard support.`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The scrap module is for transferring data to/from the clipboard. This allows
for cutting and pasting data between pygame and other applications. Some basic
data (MIME) types are defined and registered:

::

   pygame         string
  constant        value        description
  --------------------------------------------------
  SCRAP_TEXT   "text/plain"    plain text
  SCRAP_BMP    "image/bmp"     BMP encoded image data
  SCRAP_PBM    "image/pbm"     PBM encoded image data
  SCRAP_PPM    "image/ppm"     PPM encoded image data

``pygame.SCRAP_PPM``, ``pygame.SCRAP_PBM`` and ``pygame.SCRAP_BMP`` are
suitable for surface buffers to be shared with other applications.
``pygame.SCRAP_TEXT`` is an alias for the plain text clipboard type.

Depending on the platform, additional types are automatically registered when
data is placed into the clipboard to guarantee a consistent sharing behaviour
with other applications. The following listed types can be used as strings to
be passed to the respective :mod:`pygame.scrap` module functions.

For **Windows** platforms, these additional types are supported automatically
and resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "audio/wav"                  WAV encoded audio
  "image/tiff"                 TIFF encoded image data

For **X11** platforms, these additional types are supported automatically and
resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "UTF8_STRING"                UTF-8 encoded text
  "COMPOUND_TEXT"              COMPOUND text

User defined types can be used, but the data might not be accessible by other
applications unless they know what data type to look for.
Example: Data placed into the clipboard by
``pygame.scrap.put("my_data_type", byte_data)`` can only be accessed by
applications which query the clipboard for the ``"my_data_type"`` data type.

For an example of how the scrap module works refer to the examples page
(:func:`pygame.examples.scrap_clipboard.main`) or the code directly in GitHub
(`pygame/examples/scrap_clipboard.py <https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py>`_).

.. versionadded:: 1.8

.. note::
   The scrap module is currently only supported for Windows, X11 and Mac OS X.
   On Mac OS X only text works at the moment - other types may be supported in
   future releases.

.. function:: init

   | :sl:`Initializes the scrap module.`
   | :sg:`init() -> None`

   Initialize the scrap module.

   :raises pygame.error: if unable to initialize scrap module

   .. note:: The scrap module requires :func:`pygame.display.set_mode()` be
      called before being initialized.

   .. ## pygame.scrap.init ##

.. function:: get_init

   | :sl:`Returns True if the scrap module is currently initialized.`
   | :sg:`get_init() -> bool`

   Gets the scrap module's initialization state.

   :returns: ``True`` if the :mod:`pygame.scrap` module is currently
      initialized, ``False`` otherwise
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.scrap.get_init ##

.. function:: get

   | :sl:`Gets the data for the specified type from the clipboard.`
   | :sg:`get(type) -> bytes | None`

   Retrieves the data for the specified type from the clipboard. The data is
   returned as a byte string and might need further processing (such as
   decoding to Unicode).

   :param string type: data type to retrieve from the clipboard

   :returns: data (bytes object) for the given type identifier or ``None`` if
      no data for the given type is available
   :rtype: bytes | None

   ::

     text = pygame.scrap.get(pygame.SCRAP_TEXT)
     if text:
         print("There is text in the clipboard.")
     else:
         print("There does not seem to be text in the clipboard.")

   .. ## pygame.scrap.get ##

.. function:: get_types

   | :sl:`Gets a list of the available clipboard types.`
   | :sg:`get_types() -> list`

   Gets a list of data type string identifiers for the data currently
   available on the clipboard. Each identifier can be used in the
   :func:`pygame.scrap.get()` method to get the clipboard content of the
   specific type.

   :returns: list of strings of the available clipboard data types, if there
      is no data in the clipboard an empty list is returned
   :rtype: list

   ::

     for t in pygame.scrap.get_types():
         if "text" in t:
             # There is some content with the word "text" in its type string.
             print(pygame.scrap.get(t))

   .. ## pygame.scrap.get_types ##

.. function:: put

   | :sl:`Places data into the clipboard.`
   | :sg:`put(type, data) -> None`

   Places data for a given clipboard type into the clipboard. The data must
   be a string buffer. The type is a string identifying the type of data to be
   placed into the clipboard. This can be one of the predefined
   ``pygame.SCRAP_PBM``, ``pygame.SCRAP_PPM``, ``pygame.SCRAP_BMP`` or
   ``pygame.SCRAP_TEXT`` values or a user defined string identifier.

   :param string type: type identifier of the data to be placed into the
      clipboard
   :param data: data to be place into the clipboard, a bytes object
   :type data: bytes

   :raises pygame.error: if unable to put the data into the clipboard

   ::

     with open("example.bmp", "rb") as fp:
         pygame.scrap.put(pygame.SCRAP_BMP, fp.read())
     # The image data is now on the clipboard for other applications to access
     # it.
     pygame.scrap.put(pygame.SCRAP_TEXT, b"A text to copy")
     pygame.scrap.put("Plain text", b"Data for user defined type 'Plain text'")

   .. ## pygame.scrap.put ##

.. function:: contains

   | :sl:`Checks whether data for a given type is available in the clipboard.`
   | :sg:`contains(type) -> bool`

   Checks whether data for the given type is currently available in the
   clipboard.

   :param string type: data type to check availability of

   :returns: ``True`` if data for the passed type is available in the
      clipboard, ``False`` otherwise
   :rtype: bool

   ::

     if pygame.scrap.contains(pygame.SCRAP_TEXT):
         print("There is text in the clipboard.")
     if pygame.scrap.contains("own_data_type"):
         print("There is stuff in the clipboard.")

   .. ## pygame.scrap.contains ##

.. function:: lost

   | :sl:`Indicates if the clipboard ownership has been lost by the pygame application.`
   | :sg:`lost() -> bool`

   Indicates if the clipboard ownership has been lost by the pygame
   application.

   :returns: ``True``, if the clipboard ownership has been lost by the pygame
      application, ``False`` if the pygame application still owns the clipboard
   :rtype: bool

   ::

     if pygame.scrap.lost():
         print("The clipboard is in use by another application.")

   .. ## pygame.scrap.lost ##

.. function:: set_mode

   | :sl:`Sets the clipboard access mode.`
   | :sg:`set_mode(mode) -> None`

   Sets the access mode for the clipboard. This is only of interest for X11
   environments where clipboard modes ``pygame.SCRAP_SELECTION`` (for mouse
   selections) and ``pygame.SCRAP_CLIPBOARD`` (for the clipboard) are
   available. Setting the mode to ``pygame.SCRAP_SELECTION`` in other
   environments will not change the mode from ``pygame.SCRAP_CLIPBOARD``.

   :param mode: access mode, supported values are ``pygame.SCRAP_CLIPBOARD``
      and ``pygame.SCRAP_SELECTION`` (``pygame.SCRAP_SELECTION`` only has an
      effect when used on X11 platforms)

   :raises ValueError: if the ``mode`` parameter is not
      ``pygame.SCRAP_CLIPBOARD`` or ``pygame.SCRAP_SELECTION``

   .. ## pygame.scrap.set_mode ##

.. ## pygame.scrap ##


--- Contenu du fichier : display.rst.txt ---
.. include:: common.txt

:mod:`pygame.display`
=====================

.. module:: pygame.display
   :synopsis: pygame module to control the display window and screen

| :sl:`pygame module to control the display window and screen`

This module offers control over the pygame display. Pygame has a single display
Surface that is either contained in a window or runs full screen. Once you
create the display you treat it as a regular Surface. Changes are not
immediately visible onscreen; you must choose one of the two flipping functions
to update the actual display.

The origin of the display, where x = 0 and y = 0, is the top left of the
screen. Both axes increase positively towards the bottom right of the screen.

The pygame display can actually be initialized in one of several modes. By
default, the display is a basic software driven framebuffer. You can request
special modules like automatic scaling or OpenGL support. These are
controlled by flags passed to ``pygame.display.set_mode()``.

Pygame can only have a single display active at any time. Creating a new one
with ``pygame.display.set_mode()`` will close the previous display. To detect
the number and size of attached screens, you can use
``pygame.display.get_desktop_sizes`` and then select appropriate window size
and display index to pass to ``pygame.display.set_mode()``.

For backward compatibility ``pygame.display`` allows precise control over
the pixel format or display resolutions. This used to be necessary with old
graphics cards and CRT screens, but is usually not needed any more. Use the
functions ``pygame.display.mode_ok()``, ``pygame.display.list_modes()``, and
``pygame.display.Info()`` to query detailed information about the display.

Once the display Surface is created, the functions from this module affect the
single existing display. The Surface becomes invalid if the module is
uninitialized. If a new display mode is set, the existing Surface will
automatically switch to operate on the new display.

When the display mode is set, several events are placed on the pygame event
queue. ``pygame.QUIT`` is sent when the user has requested the program to
shut down. The window will receive ``pygame.ACTIVEEVENT`` events as the display
gains and loses input focus. If the display is set with the
``pygame.RESIZABLE`` flag, ``pygame.VIDEORESIZE`` events will be sent when the
user adjusts the window dimensions. Hardware displays that draw direct to the
screen will get ``pygame.VIDEOEXPOSE`` events when portions of the window must
be redrawn.

A new windowevent API was introduced in pygame 2.0.1. Check event module docs
for more information on that

Some display environments have an option for automatically stretching all
windows. When this option is enabled, this automatic stretching distorts the
appearance of the pygame window. In the pygame examples directory, there is
example code (prevent_display_stretching.py) which shows how to disable this
automatic stretching of the pygame display on Microsoft Windows (Vista or newer
required).

.. function:: init

   | :sl:`Initialize the display module`
   | :sg:`init() -> None`

   Initializes the pygame display module. The display module cannot do anything
   until it is initialized. This is usually handled for you automatically when
   you call the higher level ``pygame.init()``.

   Pygame will select from one of several internal display backends when it is
   initialized. The display mode will be chosen depending on the platform and
   permissions of current user. Before the display module is initialized the
   environment variable ``SDL_VIDEODRIVER`` can be set to control which backend
   is used. The systems with multiple choices are listed here.

   ::

      Windows : windib, directx
      Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib

   On some platforms it is possible to embed the pygame display into an already
   existing window. To do this, the environment variable ``SDL_WINDOWID`` must
   be set to a string containing the window id or handle. The environment
   variable is checked when the pygame display is initialized. Be aware that
   there can be many strange side effects when running in an embedded display.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.init ##

.. function:: quit

   | :sl:`Uninitialize the display module`
   | :sg:`quit() -> None`

   This will shut down the entire display module. This means any active
   displays will be closed. This will also be handled automatically when the
   program exits.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.quit ##

.. function:: get_init

   | :sl:`Returns True if the display module has been initialized`
   | :sg:`get_init() -> bool`

   Returns True if the :mod:`pygame.display` module is currently initialized.

   .. ## pygame.display.get_init ##

.. function:: set_mode

   | :sl:`Initialize a window or screen for display`
   | :sg:`set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface`

   This function will create a display Surface. The arguments passed in are
   requests for a display type. The actual created display will be the best
   possible match supported by the system.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   The size argument is a pair of numbers representing the width and
   height. The flags argument is a collection of additional options. The depth
   argument represents the number of bits to use for color.

   The Surface that gets returned can be drawn to like a regular Surface but
   changes will eventually be seen on the monitor.

   If no size is passed or is set to ``(0, 0)`` and pygame uses ``SDL``
   version 1.2.10 or above, the created Surface will have the same size as the
   current screen resolution. If only the width or height are set to ``0``, the
   Surface will have the same width or height as the screen resolution. Using a
   ``SDL`` version prior to 1.2.10 will raise an exception.

   It is usually best to not pass the depth argument. It will default to the
   best and fastest color depth for the system. If your game requires a
   specific color format you can control the depth with this argument. Pygame
   will emulate an unavailable color depth which can be slow.

   When requesting fullscreen display modes, sometimes an exact match for the
   requested size cannot be made. In these situations pygame will select
   the closest compatible match. The returned surface will still always match
   the requested size.

   On high resolution displays(4k, 1080p) and tiny graphics games (640x480)
   show up very small so that they are unplayable. SCALED scales up the window
   for you. The game thinks it's a 640x480 window, but really it can be bigger.
   Mouse events are scaled for you, so your game doesn't need to do it. Note
   that SCALED is considered an experimental API and may change in future
   releases.

   The flags argument controls which type of display you want. There are
   several to choose from, and you can even combine multiple types using the
   bitwise or operator, (the pipe "|" character). Here are the display
   flags you will want to choose from:

   ::

      pygame.FULLSCREEN    create a fullscreen display
      pygame.DOUBLEBUF     only applicable with OPENGL
      pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
      pygame.OPENGL        create an OpenGL-renderable display
      pygame.RESIZABLE     display window should be resizeable
      pygame.NOFRAME       display window will have no border or controls
      pygame.SCALED        resolution depends on desktop size and scale graphics
      pygame.SHOWN         window is opened in visible mode (default)
      pygame.HIDDEN        window is opened in hidden mode


   .. versionadded:: 2.0.0 ``SCALED``, ``SHOWN`` and ``HIDDEN``

   By setting the ``vsync`` parameter to ``1``, it is possible to get a display
   with vertical sync, but you are not guaranteed to get one. The request only
   works at all for calls to ``set_mode()`` with the ``pygame.OPENGL`` or
   ``pygame.SCALED`` flags set, and is still not guaranteed even with one of
   those set. What you get depends on the hardware and driver configuration
   of the system pygame is running on. Here is an example usage of a call
   to ``set_mode()`` that may give you a display with vsync:

   ::

     flags = pygame.OPENGL | pygame.FULLSCREEN
     window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)

   Vsync behaviour is considered experimental, and may change in future releases.

   .. versionadded:: 2.0.0 ``vsync``

   Basic example:

   ::

        # Open a window on the screen
        screen_width=700
        screen_height=400
        screen=pygame.display.set_mode([screen_width, screen_height])

   The display index ``0`` means the default display is used. If no display
   index argument is provided, the default display can be overridden with an
   environment variable.


   .. versionchanged:: 1.9.5 ``display`` argument added

   .. versionchanged:: 2.1.3
      pygame now ensures that subsequent calls to this function clears the
      window to black. On older versions, this was an implementation detail
      on the major platforms this function was tested with.

   .. ## pygame.display.set_mode ##

.. function:: get_surface

   | :sl:`Get a reference to the currently set display surface`
   | :sg:`get_surface() -> Surface`

   Return a reference to the currently set display Surface. If no display mode
   has been set this will return None.

   .. ## pygame.display.get_surface ##

.. function:: flip

   | :sl:`Update the full display Surface to the screen`
   | :sg:`flip() -> None`

   This will update the contents of the entire display. If your display mode is
   using the flags ``pygame.HWSURFACE`` and ``pygame.DOUBLEBUF`` on pygame 1,
   this will wait for a vertical retrace and swap the surfaces.

   When using an ``pygame.OPENGL`` display mode this will perform a gl buffer
   swap.

   .. ## pygame.display.flip ##

.. function:: update

   | :sl:`Update portions of the screen for software displays`
   | :sg:`update(rectangle=None) -> None`
   | :sg:`update(rectangle_list) -> None`

   This function is like an optimized version of ``pygame.display.flip()`` for
   software displays. It allows only a portion of the screen to be updated,
   instead of the entire area. If no argument is passed it updates the entire
   Surface area like ``pygame.display.flip()``.

   Note that calling ``display.update(None)`` means no part of the window is
   updated. Whereas ``display.update()`` means the whole window is updated.

   You can pass the function a single rectangle, or a sequence of rectangles.
   It is more efficient to pass many rectangles at once than to call update
   multiple times with single or a partial list of rectangles. If passing a
   sequence of rectangles it is safe to include None values in the list, which
   will be skipped.

   This call cannot be used on ``pygame.OPENGL`` displays and will generate an
   exception.

   .. ## pygame.display.update ##

.. function:: get_driver

   | :sl:`Get the name of the pygame display backend`
   | :sg:`get_driver() -> name`

   Pygame chooses one of many available display backends when it is
   initialized. This returns the internal name used for the display backend.
   This can be used to provide limited information about what display
   capabilities might be accelerated. See the ``SDL_VIDEODRIVER`` flags in
   ``pygame.display.set_mode()`` to see some of the common options.

   .. ## pygame.display.get_driver ##

.. function:: Info

   | :sl:`Create a video display information object`
   | :sg:`Info() -> VideoInfo`

   Creates a simple object containing several attributes to describe the
   current graphics environment. If this is called before
   ``pygame.display.set_mode()`` some platforms can provide information about
   the default display mode. This can also be called after setting the display
   mode to verify specific display options were satisfied. The VidInfo object
   has several attributes:

   ::

     hw:         1 if the display is hardware accelerated
     wm:         1 if windowed display modes can be used
     video_mem:  The megabytes of video memory on the display. This is 0 if
                 unknown
     bitsize:    Number of bits used to store each pixel
     bytesize:   Number of bytes used to store each pixel
     masks:      Four values used to pack RGBA values into pixels
     shifts:     Four values used to pack RGBA values into pixels
     losses:     Four values used to pack RGBA values into pixels
     blit_hw:    1 if hardware Surface blitting is accelerated
     blit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated
     blit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated
     blit_sw:    1 if software Surface blitting is accelerated
     blit_sw_CC: 1 if software Surface colorkey blitting is accelerated
     blit_sw_A:  1 if software Surface pixel alpha blitting is accelerated
     current_h, current_w:  Height and width of the current video mode, or
                 of the desktop mode if called before the display.set_mode
                 is called. (current_h, current_w are available since
                 SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if
                 an old SDL is being used.

   .. ## pygame.display.Info ##

.. function:: get_wm_info

   | :sl:`Get information about the current windowing system`
   | :sg:`get_wm_info() -> dict`

   Creates a dictionary filled with string keys. The strings and values are
   arbitrarily created by the system. Some systems may have no information and
   an empty dictionary will be returned. Most platforms will return a "window"
   key with the value set to the system id for the current display.

   .. versionadded:: 1.7.1

   .. ## pygame.display.get_wm_info ##

.. function:: get_desktop_sizes

   | :sl:`Get sizes of active desktops`
   | :sg:`get_desktop_sizes() -> list`

   This function returns the sizes of the currently configured
   virtual desktops as a list of (x, y) tuples of integers.

   The length of the list is not the same as the number of attached monitors,
   as a desktop can be mirrored across multiple monitors. The desktop sizes
   do not indicate the maximum monitor resolutions supported by the hardware,
   but the desktop size configured in the operating system.

   In order to fit windows into the desktop as it is currently configured, and
   to respect the resolution configured by the operating system in fullscreen
   mode, this function *should* be used to replace many use cases of
   ``pygame.display.list_modes()`` whenever applicable.

   .. versionadded:: 2.0.0

.. function:: list_modes

   | :sl:`Get list of available fullscreen modes`
   | :sg:`list_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -> list`

   This function returns a list of possible sizes for a specified color
   depth. The return value will be an empty list if no display modes are
   available with the given arguments. A return value of ``-1`` means that
   any requested size should work (this is likely the case for windowed
   modes). Mode sizes are sorted from biggest to smallest.

   If depth is ``0``, the current/best color depth for the display is used.
   The flags defaults to ``pygame.FULLSCREEN``, but you may need to add
   additional flags for specific fullscreen modes.

   The display index ``0`` means the default display is used.

   Since pygame 2.0, ``pygame.display.get_desktop_sizes()`` has taken over
   some use cases from ``pygame.display.list_modes()``:

   To find a suitable size for non-fullscreen windows, it is preferable to
   use ``pygame.display.get_desktop_sizes()`` to get the size of the *current*
   desktop, and to then choose a smaller window size. This way, the window is
   guaranteed to fit, even when the monitor is configured to a lower resolution
   than the maximum supported by the hardware.

   To avoid changing the physical monitor resolution, it is also preferable to
   use ``pygame.display.get_desktop_sizes()`` to determine the fullscreen
   resolution. Developers are strongly advised to default to the current
   physical monitor resolution unless the user explicitly requests a different
   one (e.g. in an options menu or configuration file).

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.list_modes ##

.. function:: mode_ok

   | :sl:`Pick the best color depth for a display mode`
   | :sg:`mode_ok(size, flags=0, depth=0, display=0) -> depth`

   This function uses the same arguments as ``pygame.display.set_mode()``. It
   is used to determine if a requested display mode is available. It will
   return ``0`` if the display mode cannot be set. Otherwise it will return a
   pixel depth that best matches the display asked for.

   Usually the depth argument is not passed, but some platforms can support
   multiple display depths. If passed it will hint to which depth is a better
   match.

   The function will return ``0`` if the passed display flags cannot be set.

   The display index ``0`` means the default display is used.

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.mode_ok ##

.. function:: gl_get_attribute

   | :sl:`Get the value for an OpenGL flag for the current display`
   | :sg:`gl_get_attribute(flag) -> value`

   After calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   it is a good idea to check the value of any requested OpenGL attributes. See
   ``pygame.display.gl_set_attribute()`` for a list of valid flags.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.gl_get_attribute ##

.. function:: gl_set_attribute

   | :sl:`Request an OpenGL display attribute for the display mode`
   | :sg:`gl_set_attribute(flag, value) -> None`

   When calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   Pygame automatically handles setting the OpenGL attributes like color and
   double-buffering. OpenGL offers several other attributes you may want control
   over. Pass one of these attributes as the flag, and its appropriate value.
   This must be called before ``pygame.display.set_mode()``.

   Many settings are the requested minimum. Creating a window with an OpenGL context
   will fail if OpenGL cannot provide the requested attribute, but it may for example
   give you a stencil buffer even if you request none, or it may give you a larger
   one than requested.

   The ``OPENGL`` flags are:

   ::

     GL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,
     GL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,
     GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO

   :const:`GL_MULTISAMPLEBUFFERS`

     Whether to enable multisampling anti-aliasing.
     Defaults to 0 (disabled).

     Set ``GL_MULTISAMPLESAMPLES`` to a value
     above 0 to control the amount of anti-aliasing.
     A typical value is 2 or 3.

   :const:`GL_STENCIL_SIZE`

     Minimum bit size of the stencil buffer. Defaults to 0.

   :const:`GL_DEPTH_SIZE`

     Minimum bit size of the depth buffer. Defaults to 16.

   :const:`GL_STEREO`

     1 enables stereo 3D. Defaults to 0.

   :const:`GL_BUFFER_SIZE`

     Minimum bit size of the frame buffer. Defaults to 0.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. versionadded:: 2.0.0 Additional attributes:

   ::

     GL_ACCELERATED_VISUAL,
     GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,
     GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,
     GL_SHARE_WITH_CURRENT_CONTEXT,
     GL_CONTEXT_RELEASE_BEHAVIOR,
     GL_FRAMEBUFFER_SRGB_CAPABLE

   :const:`GL_CONTEXT_PROFILE_MASK`

     Sets the OpenGL profile to one of these values:

     ::

       GL_CONTEXT_PROFILE_CORE             disable deprecated features
       GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features
       GL_CONTEXT_PROFILE_ES               allow only the ES feature
                                           subset of OpenGL

   :const:`GL_ACCELERATED_VISUAL`

     Set to 1 to require hardware acceleration, or 0 to force software render.
     By default, both are allowed.

   .. ## pygame.display.gl_set_attribute ##

.. function:: get_active

   | :sl:`Returns True when the display is active on the screen`
   | :sg:`get_active() -> bool`

   Returns True when the display Surface is considered actively
   renderable on the screen and may be visible to the user.  This is
   the default state immediately after ``pygame.display.set_mode()``.
   This method may return True even if the application is fully hidden
   behind another application window.

   This will return False if the display Surface has been iconified or
   minimized (either via ``pygame.display.iconify()`` or via an OS
   specific method such as the minimize-icon available on most
   desktops).

   The method can also return False for other reasons without the
   application being explicitly iconified or minimized by the user.  A
   notable example being if the user has multiple virtual desktops and
   the display Surface is not on the active virtual desktop.

   .. note:: This function returning True is unrelated to whether the
       application has input focus.  Please see
       ``pygame.key.get_focused()`` and ``pygame.mouse.get_focused()``
       for APIs related to input focus.

   .. ## pygame.display.get_active ##

.. function:: iconify

   | :sl:`Iconify the display surface`
   | :sg:`iconify() -> bool`

   Request the window for the display surface be iconified or hidden. Not all
   systems and displays support an iconified display. The function will return
   True if successful.

   When the display is iconified ``pygame.display.get_active()`` will return
   ``False``. The event queue should receive an ``ACTIVEEVENT`` event when the
   window has been iconified. Additionally, the event queue also receives a
   ``WINDOWEVENT_MINIMIZED`` event when the window has been iconified on pygame 2.

   .. ## pygame.display.iconify ##

.. function:: toggle_fullscreen

   | :sl:`Switch between fullscreen and windowed displays`
   | :sg:`toggle_fullscreen() -> int`

   Switches the display window between windowed and fullscreen modes.
   Display driver support is not great when using pygame 1, but with
   pygame 2 it is the most reliable method to switch to and from fullscreen.

   Supported display drivers in pygame 1:

    * x11 (Linux/Unix)
    * wayland (Linux/Unix)

   Supported display drivers in pygame 2:

    * windows (Windows)
    * x11 (Linux/Unix)
    * wayland (Linux/Unix)
    * cocoa (OSX/Mac)

   .. Note:: :func:`toggle_fullscreen` doesn't work on Windows
             unless the window size is in :func:`pygame.display.list_modes()` or
             the window is created with the flag ``pygame.SCALED``.
             See `issue #2380 <https://github.com/pygame/pygame/issues/2380>`_.

   .. ## pygame.display.toggle_fullscreen ##

.. function:: set_gamma

   | :sl:`Change the hardware gamma ramps`
   | :sg:`set_gamma(red, green=None, blue=None) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma values on the display hardware. If the
   green and blue arguments are not passed, they will both be the same as red.
   Not all systems and hardware support gamma ramps, if the function succeeds
   it will return ``True``.

   A gamma value of ``1.0`` creates a linear color table. Lower values will
   darken the display and higher values will brighten.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma ##

.. function:: set_gamma_ramp

   | :sl:`Change the hardware gamma ramps with a custom lookup`
   | :sg:`set_gamma_ramp(red, green, blue) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma ramps with an explicit lookup table. Each
   argument should be sequence of 256 integers. The integers should range
   between ``0`` and ``0xffff``. Not all systems and hardware support gamma
   ramps, if the function succeeds it will return ``True``.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma_ramp ##

.. function:: set_icon

   | :sl:`Change the system image for the display window`
   | :sg:`set_icon(Surface) -> None`

   Sets the runtime icon the system will use to represent the display window.
   All windows default to a simple pygame logo for the window icon.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   You can pass any surface, but most systems want a smaller image around
   32x32. The image can have colorkey transparency which will be passed to the
   system.

   Some systems do not allow the window icon to change after it has been shown.
   This function can be called before ``pygame.display.set_mode()`` to create
   the icon before the display mode is set.

   .. ## pygame.display.set_icon ##

.. function:: set_caption

   | :sl:`Set the current window caption`
   | :sg:`set_caption(title, icontitle=None) -> None`

   If the display has a window title, this function will change the name on the
   window. In pygame 1.x, some systems supported an alternate shorter title to
   be used for minimized displays, but in pygame 2 ``icontitle`` does nothing.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   
   .. ## pygame.display.set_caption ##

.. function:: get_caption

   | :sl:`Get the current window caption`
   | :sg:`get_caption() -> (title, icontitle)`

   Returns the title and icontitle for the display window. In pygame 2.x
   these will always be the same value.

   .. ## pygame.display.get_caption ##

.. function:: set_palette

   | :sl:`Set the display color palette for indexed displays`
   | :sg:`set_palette(palette=None) -> None`

   This will change the video display color palette for 8-bit displays. This
   does not change the palette for the actual display Surface, only the palette
   that is used to display the Surface. If no palette argument is passed, the
   system default palette will be restored. The palette is a sequence of
   ``RGB`` triplets.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.set_palette ##

.. function:: get_num_displays

   | :sl:`Return the number of displays`
   | :sg:`get_num_displays() -> int`

   Returns the number of available displays. This is always 1 if
   :func:`pygame.get_sdl_version()` returns a major version number below 2.

   .. versionadded:: 1.9.5

   .. ## pygame.display.get_num_displays ##

.. function:: get_window_size

   | :sl:`Return the size of the window or screen`
   | :sg:`get_window_size() -> tuple`

   Returns the size of the window initialized with :func:`pygame.display.set_mode()`.
   This may differ from the size of the display surface if ``SCALED`` is used.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_window_size ##

.. function:: get_allow_screensaver

   | :sl:`Return whether the screensaver is allowed to run.`
   | :sg:`get_allow_screensaver() -> bool`

   Return whether screensaver is allowed to run whilst the app is running.
   Default is ``False``.
   By default pygame does not allow the screensaver during game play.

   .. note:: Some platforms do not have a screensaver or support
             disabling the screensaver.  Please see
             :func:`pygame.display.set_allow_screensaver()` for
             caveats with screensaver support.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_allow_screensaver ##

.. function:: set_allow_screensaver

   | :sl:`Set whether the screensaver may run`
   | :sg:`set_allow_screensaver(bool) -> None`

   Change whether screensavers should be allowed whilst the app is running.
   The default value of the argument to the function is True.
   By default pygame does not allow the screensaver during game play.

   If the screensaver has been disallowed due to this function, it will automatically
   be allowed to run when :func:`pygame.quit()` is called.

   It is possible to influence the default value via the environment variable
   ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER``, which can be set to either ``0`` (disable)
   or ``1`` (enable).

   .. note:: Disabling screensaver is subject to platform support.
             When platform support is absent, this function will
             silently appear to work even though the screensaver state
             is unchanged.  The lack of feedback is due to SDL not
             providing any supported method for determining whether
             it supports changing the screensaver state.
             ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER`` is available in SDL 2.0.2 or later.
             SDL1.2 does not implement this.

   .. versionadded:: 2.0.0


   .. ## pygame.display.set_allow_screensaver ##

.. ## pygame.display ##


--- Contenu du fichier : event.rst.txt ---
.. include:: common.txt

:mod:`pygame.event`
===================

.. module:: pygame.event
   :synopsis: pygame module for interacting with events and queues

| :sl:`pygame module for interacting with events and queues`

Pygame handles all its event messaging through an event queue. The routines in
this module help you manage that event queue. The input queue is heavily
dependent on the :mod:`pygame.display` module. If the display has not been
initialized and a video mode not set, the event queue may not work properly.

The event queue has an upper limit on the number of events it can hold. When
the queue becomes full new events are quietly dropped. To prevent lost events,
especially input events which signal a quit command, your program must handle
events every frame (with ``pygame.event.get()``, ``pygame.event.pump()``,
``pygame.event.wait()``, ``pygame.event.peek()`` or ``pygame.event.clear()``)
and process them. Not handling events may cause your system to decide your
program has locked up. To speed up queue processing use
:func:`pygame.event.set_blocked()` to limit which events get queued.

To get the state of various input devices, you can forego the event queue and
access the input devices directly with their appropriate modules:
:mod:`pygame.mouse`, :mod:`pygame.key`, and :mod:`pygame.joystick`. If you use
this method, remember that pygame requires some form of communication with the
system window manager and other parts of the platform. To keep pygame in sync
with the system, you will need to call :func:`pygame.event.pump()` to keep
everything current. Usually, this should be called once per game loop.
Note: Joysticks will not send any events until the device has been initialized.

The event queue contains :class:`pygame.event.Event` event objects.
There are a variety of ways to access the queued events, from simply
checking for the existence of events, to grabbing them directly off the stack.
The event queue also offers some simple filtering which can slightly help
performance by blocking certain event types from the queue. Use
:func:`pygame.event.set_allowed()` and :func:`pygame.event.set_blocked()` to
change this filtering. By default, all event types can be placed on the queue.

All :class:`pygame.event.Event` instances contain an event type identifier
and attributes specific to that event type. The event type identifier is
accessible as the :attr:`pygame.event.Event.type` property. Any of the
event specific attributes can be accessed through the
:attr:`pygame.event.Event.__dict__` attribute or directly as an attribute
of the event object (as member lookups are passed through to the object's
dictionary values). The event object has no method functions. Users can create
their own new events with the :func:`pygame.event.Event()` function.

The event type identifier is in between the values of ``NOEVENT`` and
``NUMEVENTS``. User defined events should have a value in the inclusive range
of ``USEREVENT`` to ``NUMEVENTS - 1``. User defined events can get a custom
event number with :func:`pygame.event.custom_type()`. 
It is recommended all user events follow this system.

Events support equality and inequality comparisons. Two events are equal if
they are the same type and have identical attribute values.

While debugging and experimenting, you can print an event object for a quick
display of its type and members. The function :func:`pygame.event.event_name()`
can be used to get a string representing the name of the event type.

Events that come from the system will have a guaranteed set of member
attributes based on the type. The following is a list of event types with their
specific attributes.

::

    QUIT              none
    ACTIVEEVENT       gain, state
    KEYDOWN           key, mod, unicode, scancode
    KEYUP             key, mod, unicode, scancode
    MOUSEMOTION       pos, rel, buttons, touch
    MOUSEBUTTONUP     pos, button, touch
    MOUSEBUTTONDOWN   pos, button, touch
    JOYAXISMOTION     joy (deprecated), instance_id, axis, value
    JOYBALLMOTION     joy (deprecated), instance_id, ball, rel
    JOYHATMOTION      joy (deprecated), instance_id, hat, value
    JOYBUTTONUP       joy (deprecated), instance_id, button
    JOYBUTTONDOWN     joy (deprecated), instance_id, button
    VIDEORESIZE       size, w, h
    VIDEOEXPOSE       none
    USEREVENT         code

.. versionchanged:: 2.0.0 The ``joy`` attribute was deprecated, ``instance_id`` was added.

.. versionchanged:: 2.0.1 The ``unicode`` attribute was added to ``KEYUP`` event.

Note that ``ACTIVEEVENT``, ``VIDEORESIZE`` and ``VIDEOEXPOSE`` are considered
as "legacy" events, the use of pygame2 ``WINDOWEVENT`` API is recommended over
the use of this older API.

You can also find a list of constants for keyboard keys
:ref:`here <key-constants-label>`.

A keyboard event occurs when a key is pressed (``KEYDOWN``) and when a key is released (``KEYUP``) 
The ``key`` attribute of keyboard events contains the value of what key was pressed or released.
The ``mod`` attribute contains information about the state of keyboard modifiers (SHIFT, CTRL, ALT, etc.).
The ``unicode`` attribute stores the 16-bit unicode value of the key that was pressed or released.
The ``scancode`` attribute represents the physical location of a key on the keyboard.

The ``ACTIVEEVENT`` contains information about the application gaining or losing focus. The ``gain`` attribute
will be 1 if the mouse enters the window, otherwise ``gain`` will be 0.  The ``state`` attribute will have a 
value of ``SDL_APPMOUSEFOCUS`` if mouse focus was gained/lost, ``SDL_APPINPUTFOCUS`` if the application loses
or gains keyboard focus, or ``SDL_APPACTIVE`` if the application is minimized (``gain`` will be 0) or restored.

|

When compiled with SDL2, pygame has these additional events and their
attributes.

::

    AUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)
    AUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)
    FINGERMOTION       touch_id, finger_id, x, y, dx, dy
    FINGERDOWN         touch_id, finger_id, x, y, dx, dy
    FINGERUP           touch_id, finger_id, x, y, dx, dy
    MOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y
    MULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers
    TEXTEDITING        text, start, length
    TEXTINPUT          text

.. versionadded:: 1.9.5

.. versionchanged:: 2.0.2 Fixed amount horizontal scroll (x, positive to the right and negative to the left).

.. versionchanged:: 2.0.2 The ``touch`` attribute was added to all the ``MOUSE`` events.

The ``touch`` attribute of ``MOUSE`` events indicates whether or not the events were generated
by a touch input device, and not a real mouse. You might want to ignore such events, if your application
already handles ``FINGERMOTION``, ``FINGERDOWN`` and ``FINGERUP`` events.

.. versionadded:: 2.1.3 Added ``precise_x`` and ``precise_y`` to ``MOUSEWHEEL`` events

``MOUSEWHEEL`` event occurs whenever the mouse wheel is moved. 
The ``which`` attribute determines if the event was generated from a touch input device vs an actual 
mousewheel. 
The ``preciseX`` attribute contains a float with the amount scrolled horizontally (positive to the right,
negative to the left).
The ``preciseY`` attribute contains a float with the amount scrolled vertically (positive away from user,
negative towards user).
The ``flipped`` attribute determines if the values in x and y will be opposite or not. If ``SDL_MOUSEWHEEL_FLIPPED``
is defined, the direction of x and y will be opposite.

``TEXTEDITING`` event is triggered when a user activates an input method via hotkey or selecting an 
input method in a GUI and starts typing

The ``which`` attribute for ``AUDIODEVICE*`` events is an integer representing the index for new audio 
devices that are added. ``AUDIODEVICE*`` events are used to update audio settings or device list. 

|

Many new events were introduced in pygame 2.

pygame can recognize text or files dropped in its window. If a file
is dropped, ``DROPFILE`` event will be sent, ``file`` will be its path.
The ``DROPTEXT`` event is only supported on X11.

``MIDIIN`` and ``MIDIOUT`` are events reserved for :mod:`pygame.midi` use.
``MIDI*`` events differ from ``AUDIODEVICE*`` events in that AUDIODEVICE 
events are triggered when there is a state change related to an audio 
input/output device. 

pygame 2 also supports controller hot-plugging

::

   Event name               Attributes and notes

   DROPFILE                 file
   DROPBEGIN                (SDL backend >= 2.0.5)
   DROPCOMPLETE             (SDL backend >= 2.0.5)
   DROPTEXT                 text (SDL backend >= 2.0.5)
   MIDIIN
   MIDIOUT
   CONTROLLERDEVICEADDED    device_index
   JOYDEVICEADDED           device_index
   CONTROLLERDEVICEREMOVED  instance_id
   JOYDEVICEREMOVED         instance_id
   CONTROLLERDEVICEREMAPPED instance_id
   KEYMAPCHANGED            (SDL backend >= 2.0.4)
   CLIPBOARDUPDATE
   RENDER_TARGETS_RESET     (SDL backend >= 2.0.2)
   RENDER_DEVICE_RESET      (SDL backend >= 2.0.4)
   LOCALECHANGED            (SDL backend >= 2.0.14)

Also in this version, ``instance_id`` attributes were added to joystick events,
and the ``joy`` attribute was deprecated.

``KEYMAPCHANGED`` is a type of an event sent when keymap changes due to a 
system event such as an input language or keyboard layout change.

``CLIPBOARDUPDATE`` is an event sent when clipboard changes. This can still
be considered as an experimental feature, some kinds of clipboard changes might
not trigger this event.

``LOCALECHANGED`` is an event sent when user locale changes

.. versionadded:: 2.0.0

.. versionadded:: 2.1.3 ``KEYMAPCHANGED``, ``CLIPBOARDUPDATE``, 
   ``RENDER_TARGETS_RESET``, ``RENDER_DEVICE_RESET`` and ``LOCALECHANGED``

|

Since pygame 2.0.1, there are a new set of events, called window events.
Here is a list of all window events, along with a short description

::

   Event type                Short description

   WINDOWSHOWN            Window became shown
   WINDOWHIDDEN           Window became hidden
   WINDOWEXPOSED          Window got updated by some external event
   WINDOWMOVED            Window got moved
   WINDOWRESIZED          Window got resized
   WINDOWSIZECHANGED      Window changed its size
   WINDOWMINIMIZED        Window was minimized
   WINDOWMAXIMIZED        Window was maximized
   WINDOWRESTORED         Window was restored
   WINDOWENTER            Mouse entered the window
   WINDOWLEAVE            Mouse left the window
   WINDOWFOCUSGAINED      Window gained focus
   WINDOWFOCUSLOST        Window lost focus
   WINDOWCLOSE            Window was closed
   WINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)
   WINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)
   WINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)
   WINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)


``WINDOWMOVED``, ``WINDOWRESIZED`` and ``WINDOWSIZECHANGED`` have ``x`` and
``y`` attributes, ``WINDOWDISPLAYCHANGED`` has a ``display_index`` attribute.
All windowevents have a ``window`` attribute.

.. versionadded:: 2.0.1

.. versionadded:: 2.1.3 ``WINDOWICCPROFCHANGED`` and ``WINDOWDISPLAYCHANGED``

|

On Android, the following events can be generated

::

   Event type                 Short description

   APP_TERMINATING           OS is terminating the application
   APP_LOWMEMORY             OS is low on memory, try to free memory if possible
   APP_WILLENTERBACKGROUND   Application is entering background
   APP_DIDENTERBACKGROUND    Application entered background
   APP_WILLENTERFOREGROUND   Application is entering foreground
   APP_DIDENTERFOREGROUND    Application entered foreground

.. versionadded:: 2.1.3

|

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system. If you are not using other event functions in your
   game, you should call ``pygame.event.pump()`` to allow pygame to handle
   internal actions.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.event` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.pump ##

.. function:: get

   | :sl:`get events from the queue`
   | :sg:`get(eventtype=None) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True, exclude=None) -> Eventlist`

   This will get all the messages and remove them from the queue. If a type or
   sequence of types is given only those messages will be removed from the
   queue and returned.

   If a type or sequence of types is passed in the ``exclude`` argument
   instead, then all only *other* messages will be removed from the queue. If
   an ``exclude`` parameter is passed, the ``eventtype`` parameter *must* be
   None.

   If you are only taking specific events from the queue, be aware that the
   queue could eventually fill up with the events you are not interested.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument
   .. versionchanged:: 2.0.2 Added ``exclude`` argument

   .. ## pygame.event.get ##

.. function:: poll

   | :sl:`get a single event from the queue`
   | :sg:`poll() -> Event instance`

   Returns a single event from the queue. If the event queue is empty an event
   of type ``pygame.NOEVENT`` will be returned immediately. The returned event
   is removed from the queue.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.poll ##

.. function:: wait

   | :sl:`wait for a single event from the queue`
   | :sg:`wait() -> Event instance`
   | :sg:`wait(timeout) -> Event instance`

   Returns a single event from the queue. If the queue is empty this function
   will wait until one is created. From pygame 2.0.0, if a ``timeout`` argument
   is given, the function will return an event of type ``pygame.NOEVENT`` 
   if no events enter the queue in ``timeout`` milliseconds. The event is removed
   from the queue once it has been returned. While the program is waiting it will
   sleep in an idle state. This is important for programs that want to share the
   system with other applications.

   .. versionchanged:: 2.0.0.dev13 Added ``timeout`` argument

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.wait ##

.. function:: peek

   | :sl:`test if event types are waiting on the queue`
   | :sg:`peek(eventtype=None) -> bool`
   | :sg:`peek(eventtype=None, pump=True) -> bool`

   Returns ``True`` if there are any events of the given type waiting on the
   queue. If a sequence of event types is passed, this will return ``True`` if
   any of those events are on the queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.peek ##

.. function:: clear

   | :sl:`remove all events from the queue`
   | :sg:`clear(eventtype=None) -> None`
   | :sg:`clear(eventtype=None, pump=True) -> None`

   Removes all events from the queue. If ``eventtype`` is given, removes the given event
   or sequence of events. This has the same effect as :func:`pygame.event.get()` except ``None``
   is returned. It can be slightly more efficient when clearing a full event queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.clear ##

.. function:: event_name

   | :sl:`get the string name from an event id`
   | :sg:`event_name(type) -> string`

   Returns a string representing the name (in CapWords style) of the given
   event type.

   "UserEvent" is returned for all values in the user event id range.
   "Unknown" is returned when the event type does not exist.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   .. ## pygame.event.event_name ##


.. function:: set_blocked

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_blocked(type) -> None`
   | :sg:`set_blocked(typelist) -> None`
   | :sg:`set_blocked(None) -> None`

   The given event types are not allowed to appear on the event queue. By
   default all events can be placed on the queue. It is safe to disable an
   event type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are blocked
   from being placed on the queue.

   .. ## pygame.event.set_blocked ##

.. function:: set_allowed

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_allowed(type) -> None`
   | :sg:`set_allowed(typelist) -> None`
   | :sg:`set_allowed(None) -> None`

   The given event types are allowed to appear on the event queue. By default,
   all event types can be placed on the queue. It is safe to enable an event
   type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are allowed
   to be placed on the queue.

   .. ## pygame.event.set_allowed ##

.. function:: get_blocked

   | :sl:`test if a type of event is blocked from the queue`
   | :sg:`get_blocked(type) -> bool`
   | :sg:`get_blocked(typelist) -> bool`

   Returns ``True`` if the given event type is blocked from the queue. If a
   sequence of event types is passed, this will return ``True`` if any of those
   event types are blocked.

   .. ## pygame.event.get_blocked ##

.. function:: set_grab

   | :sl:`control the sharing of input devices with other applications`
   | :sg:`set_grab(bool) -> None`

   When your program runs in a windowed environment, it will share the mouse
   and keyboard devices with other applications that have focus. If your
   program sets the event grab to ``True``, it will lock all input into your
   program.

   It is best to not always grab the input, since it prevents the user from
   doing other things on their system.

   .. ## pygame.event.set_grab ##

.. function:: get_grab

   | :sl:`test if the program is sharing input devices`
   | :sg:`get_grab() -> bool`

   Returns ``True`` when the input events are grabbed for this application.

   .. ## pygame.event.get_grab ##

.. function:: set_keyboard_grab

   | :sl:`grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.`
   | :sg:`set_keyboard_grab(bool) -> None`

   Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.
   Note that not all system keyboard shortcuts can be captured by applications (one example is Ctrl+Alt+Del on Windows).
   This is primarily intended for specialized applications such as VNC clients or VM frontends. Normal games should not use keyboard grab.

   .. versionadded:: 2.5.0

   .. ## pygame.event.set_keyboard_grab ##

.. function:: get_keyboard_grab

   | :sl:`get the current keyboard grab state`
   | :sg:`get_keyboard_grab() -> bool`

   Returns ``True`` when keyboard grab is enabled.

   .. versionadded:: 2.5.0

   .. ## pygame.event.get_keyboard_grab ##

.. function:: post

   | :sl:`place a new event on the queue`
   | :sg:`post(Event) -> bool`

   Places the given event at the end of the event queue.

   This is usually used for placing custom events on the event queue.
   Any type of event can be posted, and the events posted can have any attributes.

   This returns a boolean on whether the event was posted or not. Blocked events
   cannot be posted, and this function returns ``False`` if you try to post them.

   .. versionchanged:: 2.0.1 returns a boolean, previously returned ``None``

   .. ## pygame.event.post ##

.. function:: custom_type

   | :sl:`make custom user event type`
   | :sg:`custom_type() -> int`

   Reserves a ``pygame.USEREVENT`` for a custom use.

   If too many events are made a :exc:`pygame.error` is raised.

   .. versionadded:: 2.0.0.dev3

   .. ## pygame.event.custom_type ##

.. class:: Event

   | :sl:`pygame object for representing events`
   | :sg:`Event(type, dict) -> Event`
   | :sg:`Event(type, \**attributes) -> Event`

   A pygame object used for representing an event. ``Event`` instances
   support attribute assignment and deletion.

   When creating the object, the attributes may come from a dictionary
   argument with string keys or from keyword arguments.

   .. note::
      From version 2.1.3 ``EventType`` is an alias for ``Event``. Beforehand,
      ``Event`` was a function that returned ``EventType`` instances. Use of
      ``Event`` is preferred over ``EventType`` wherever it is possible, as
      the latter could be deprecated in a future version.

   .. attribute:: type

      | :sl:`event type identifier.`
      | :sg:`type -> int`

      Read-only. The event type identifier. For user created event
      objects, this is the ``type`` argument passed to
      :func:`pygame.event.Event()`.

      For example, some predefined event identifiers are ``QUIT`` and
      ``MOUSEMOTION``.

      .. ## pygame.event.Event.type ##

   .. attribute:: __dict__

      | :sl:`event attribute dictionary`
      | :sg:`__dict__ -> dict`

      Read-only. The event type specific attributes of an event. The
      ``dict`` attribute is a synonym for backward compatibility.

      For example, the attributes of a ``KEYDOWN`` event would be ``unicode``,
      ``key``, and ``mod``

      .. ## pygame.event.Event.__dict__ ##

   .. versionadded:: 1.9.2 Mutable attributes.

   .. ## pygame.event.Event ##

.. ## pygame.event ##


--- Contenu du fichier : mask.rst.txt ---
.. include:: common.txt

:mod:`pygame.mask`
==================

.. module:: pygame.mask
   :synopsis: pygame module for image masks.

| :sl:`pygame module for image masks.`

Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
to store which parts collide.

.. versionadded:: 1.8

.. versionchanged:: 2.0.2 Mask functions now support keyword arguments.

.. versionchanged:: 2.0.2 Mask functions that take positions or offsets now
                    support :class:`pygame.math.Vector2` arguments.


.. function:: from_surface

   | :sl:`Creates a Mask from the given surface`
   | :sg:`from_surface(surface) -> Mask`
   | :sg:`from_surface(surface, threshold=127) -> Mask`

   Creates a :class:`Mask` object from the given surface by setting all the
   opaque pixels and not setting the transparent pixels.

   If the surface uses a color-key, then it is used to decide which bits in
   the resulting mask are set. All the pixels that are **not** equal to the
   color-key are **set** and the pixels equal to the color-key are not set.

   If a color-key is not used, then the alpha value of each pixel is used to
   decide which bits in the resulting mask are set. All the pixels that have an
   alpha value **greater than** the ``threshold`` parameter are **set** and the
   pixels with an alpha value less than or equal to the ``threshold`` are
   not set.

   :param Surface surface: the surface to create the mask from
   :param int threshold: (optional) the alpha threshold (default is 127) to
      compare with each surface pixel's alpha value, if the ``surface`` is
      color-keyed this parameter is ignored

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. note::
      This function is used to create the masks for
      :func:`pygame.sprite.collide_mask`.

   .. ## pygame.mask.from_surface ##

.. function:: from_threshold

   | :sl:`Creates a mask by thresholding Surfaces`
   | :sg:`from_threshold(surface, color) -> Mask`
   | :sg:`from_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -> Mask`

   This is a more featureful method of getting a :class:`Mask` from a surface.

   If the optional ``othersurface`` is not used, all the pixels **within** the
   ``threshold`` of the ``color`` parameter are **set** in the resulting mask.

   If the optional ``othersurface`` is used, every pixel in the first surface
   that is **within** the ``threshold`` of the corresponding pixel in
   ``othersurface`` is **set** in the resulting mask.

   :param Surface surface: the surface to create the mask from
   :param color: color used to check if the surface's pixels are within the
      given ``threshold`` range, this parameter is ignored if the optional
      ``othersurface`` parameter is supplied
   :type color: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param threshold: (optional) the threshold range used to check the difference
      between two colors (default is ``(0, 0, 0, 255)``)
   :type threshold: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param Surface othersurface: (optional) used to check whether the pixels of
      the first surface are within the given ``threshold`` range of the pixels
      from this surface (default is ``None``)
   :param int palette_colors: (optional) indicates whether to use the palette
      colors or not, a nonzero value causes the palette colors to be used and a
      0 causes them not to be used (default is 1)

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. ## pygame.mask.from_threshold ##

.. class:: Mask

   | :sl:`pygame object for representing 2D bitmasks`
   | :sg:`Mask(size=(width, height)) -> Mask`
   | :sg:`Mask(size=(width, height), fill=False) -> Mask`

   A ``Mask`` object is used to represent a 2D bitmask. Each bit in
   the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
   to indicate an unset bit. Set bits in a mask can be used to detect collisions
   with other masks and their set bits.

   A filled mask has all of its bits set to 1, conversely an
   unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
   created unfilled (default) or filled by using the ``fill`` parameter. Masks
   can also be cleared or filled using the :func:`pygame.mask.Mask.clear()` and
   :func:`pygame.mask.Mask.fill()` methods respectively.

   A mask's coordinates start in the top left corner at ``(0, 0)`` just like
   :mod:`pygame.Surface`. Individual bits can be accessed using the
   :func:`pygame.mask.Mask.get_at()` and :func:`pygame.mask.Mask.set_at()`
   methods.

   .. _mask-offset-label:

   The methods :meth:`overlap`, :meth:`overlap_area`, :meth:`overlap_mask`,
   :meth:`draw`, :meth:`erase`, and :meth:`convolve` use an offset parameter
   to indicate the offset of another mask's top left corner from the calling
   mask's top left corner. The calling mask's top left corner is considered to
   be the origin ``(0, 0)``. Offsets are a sequence of two values
   ``(x_offset, y_offset)``. Positive and negative offset values are supported.

   ::

                 0 to x (x_offset)
                 :    :
         0 ..... +----:---------+
         to      |    :         |
         y .......... +-----------+
      (y_offset) |    | othermask |
                 |    +-----------+
                 | calling_mask |
                 +--------------+

   :param size: the dimensions of the mask (width and height)
   :param bool fill: (optional) create an unfilled mask (default: ``False``) or
      filled mask (``True``)

   :returns: a newly created :class:`Mask` object
   :rtype: Mask

   .. versionchanged:: 2.0.0
      Shallow copy support added. The :class:`Mask` class supports the special
      method ``__copy__()`` and shallow copying via ``copy.copy(mask)``.
   .. versionchanged:: 2.0.0 Subclassing support added. The :class:`Mask` class
      can be used as a base class.
   .. versionchanged:: 1.9.5 Added support for keyword arguments.
   .. versionchanged:: 1.9.5 Added the optional keyword parameter ``fill``.
   .. versionchanged:: 1.9.5 Added support for masks with a width and/or a
      height of 0.

   .. method:: copy

      | :sl:`Returns a new copy of the mask`
      | :sg:`copy() -> Mask`

      :returns: a new copy of this mask, the new mask will have the same width,
         height, and set/unset bits as the original
      :rtype: Mask

      .. note::
         If a mask subclass needs to copy any instance specific attributes
         then it should override the ``__copy__()`` method. The overridden
         ``__copy__()`` method needs to call ``super().__copy__()`` and then
         copy the required data as in the following example code.

         ::

            class SubMask(pygame.mask.Mask):
                def __copy__(self):
                    new_mask = super().__copy__()
                    # Do any SubMask attribute copying here.
                    return new_mask

      .. versionadded:: 2.0.0

      .. ## Mask.copy ##

   .. method:: get_size

      | :sl:`Returns the size of the mask`
      | :sg:`get_size() -> (width, height)`

      :returns: the size of the mask, (width, height)
      :rtype: tuple(int, int)

      .. ## Mask.get_size ##

   .. method:: get_rect

      | :sl:`Returns a Rect based on the size of the mask`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new :func:`pygame.Rect` object based on the size of this mask.
      The rect's default position will be ``(0, 0)`` and its default width and
      height will be the same as this mask's. The rect's attributes can be
      altered via :func:`pygame.Rect` attribute keyword arguments/values passed
      into this method. As an example, ``a_mask.get_rect(center=(10, 5))`` would
      create a :func:`pygame.Rect` based on the mask's size centered at the
      given position.

      :param dict kwargs: :func:`pygame.Rect` attribute keyword arguments/values
         that will be applied to the rect

      :returns: a new :func:`pygame.Rect` object based on the size of this mask
         with any :func:`pygame.Rect` attribute keyword arguments/values applied
         to it
      :rtype: Rect

      .. versionadded:: 2.0.0

      .. ## Mask.get_rect ##

   .. method:: get_at

      | :sl:`Gets the bit at the given position`
      | :sg:`get_at(pos) -> int`

      :param pos: the position of the bit to get (x, y)

      :returns: 1 if the bit is set, 0 if the bit is not set
      :rtype: int

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.get_at ##

   .. method:: set_at

      | :sl:`Sets the bit at the given position`
      | :sg:`set_at(pos) -> None`
      | :sg:`set_at(pos, value=1) -> None`

      :param pos: the position of the bit to set (x, y)
      :param int value: any nonzero int will set the bit to 1, 0 will set the
         bit to 0 (default is 1)

      :returns: ``None``
      :rtype: NoneType

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.set_at ##

   .. method:: overlap

      | :sl:`Returns the point of intersection`
      | :sg:`overlap(other, offset) -> (x, y)`
      | :sg:`overlap(other, offset) -> None`

      Returns the first point of intersection encountered between this mask and
      ``other``. A point of intersection is 2 overlapping set bits.

      The current algorithm searches the overlapping area in
      ``sizeof(unsigned long int) * CHAR_BIT`` bit wide column blocks (the value
      of ``sizeof(unsigned long int) * CHAR_BIT`` is platform dependent, for
      clarity it will be referred to as ``W``). Starting at the top left corner
      it checks bits 0 to ``W - 1`` of the first row (``(0, 0)`` to
      ``(W - 1, 0)``) then continues to the next row (``(0, 1)`` to
      ``(W - 1, 1)``). Once this entire column block is checked, it continues to
      the next one (``W`` to ``2 * W - 1``). This is repeated until it finds a
      point of intersection or the entire overlapping area is checked.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: point of intersection or ``None`` if no intersection
      :rtype: tuple(int, int) or NoneType

      .. ## Mask.overlap ##

   .. method:: overlap_area

      | :sl:`Returns the number of overlapping set bits`
      | :sg:`overlap_area(other, offset) -> numbits`

      Returns the number of overlapping set bits between between this mask and
      ``other``.

      This can be useful for collision detection. An approximate collision
      normal can be found by calculating the gradient of the overlapping area
      through the finite difference.

      ::

         dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
         dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: the number of overlapping set bits
      :rtype: int

      .. ## Mask.overlap_area ##

   .. method:: overlap_mask

      | :sl:`Returns a mask of the overlapping set bits`
      | :sg:`overlap_mask(other, offset) -> Mask`

      Returns a :class:`Mask`, the same size as this mask, containing the
      overlapping set bits between this mask and ``other``.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: a newly created :class:`Mask` with the overlapping bits set
      :rtype: Mask

      .. ## Mask.overlap_mask ##

   .. method:: fill

      | :sl:`Sets all bits to 1`
      | :sg:`fill() -> None`

      Sets all bits in the mask to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.fill ##

   .. method:: clear

      | :sl:`Sets all bits to 0`
      | :sg:`clear() -> None`

      Sets all bits in the mask to 0.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.clear ##

   .. method:: invert

      | :sl:`Flips all the bits`
      | :sg:`invert() -> None`

      Flips all of the bits in the mask. All the set bits are cleared to 0 and
      all the unset bits are set to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.invert ##

   .. method:: scale

      | :sl:`Resizes a mask`
      | :sg:`scale((width, height)) -> Mask`

      Creates a new :class:`Mask` of the requested size with its bits scaled
      from this mask.

      :param size: the width and height (size) of the mask to create

      :returns: a new :class:`Mask` object with its bits scaled from this mask
      :rtype: Mask

      :raises ValueError: if ``width < 0`` or ``height < 0``

      .. ## Mask.scale ##

   .. method:: draw

      | :sl:`Draws a mask onto another`
      | :sg:`draw(other, offset) -> None`

      Performs a bitwise OR, drawing ``othermask`` onto this mask.

      :param Mask other: the mask to draw onto this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.draw ##

   .. method:: erase

      | :sl:`Erases a mask from another`
      | :sg:`erase(other, offset) -> None`

      Erases (clears) all bits set in ``other`` from this mask.

      :param Mask other: the mask to erase from this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.erase ##

   .. method:: count

      | :sl:`Returns the number of set bits`
      | :sg:`count() -> bits`

      :returns: the number of set bits in the mask
      :rtype: int

      .. ## Mask.count ##

   .. method:: centroid

      | :sl:`Returns the centroid of the set bits`
      | :sg:`centroid() -> (x, y)`

      Finds the centroid (the center mass of the set bits) for this mask.

      :returns: a coordinate tuple indicating the centroid of the mask, it will
         return ``(0, 0)`` if the mask has no bits set
      :rtype: tuple(int, int)

      .. ## Mask.centroid ##

   .. method:: angle

      | :sl:`Returns the orientation of the set bits`
      | :sg:`angle() -> theta`

      Finds the approximate orientation (from -90 to 90 degrees) of the set bits
      in the mask. This works best if performed on a mask with only one
      connected component.

      :returns: the orientation of the set bits in the mask, it will return
         ``0.0`` if the mask has no bits set
      :rtype: float

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.angle ##

   .. method:: outline

      | :sl:`Returns a list of points outlining an object`
      | :sg:`outline() -> [(x, y), ...]`
      | :sg:`outline(every=1) -> [(x, y), ...]`

      Returns a list of points of the outline of the first connected component
      encountered in the mask. To find a connected component, the mask is
      searched per row (left to right) starting in the top left corner.

      The ``every`` optional parameter skips set bits in the outline. For
      example, setting it to 10 would return a list of every 10th set bit in the
      outline.

      :param int every: (optional) indicates the number of bits to skip over in
         the outline (default is 1)

      :returns: a list of points outlining the first connected component
         encountered, an empty list is returned if the mask has no bits set
      :rtype: list[tuple(int, int)]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.outline ##

   .. method:: convolve

      | :sl:`Returns the convolution of this mask with another mask`
      | :sg:`convolve(other) -> Mask`
      | :sg:`convolve(other, output=None, offset=(0, 0)) -> Mask`

      Convolve this mask with the given ``other`` Mask.

      :param Mask other: mask to convolve this mask with
      :param output: (optional) mask for output (default is ``None``)
      :type output: Mask or NoneType
      :param offset: the offset of ``other`` from this mask, (default is
         ``(0, 0)``)

      :returns: a :class:`Mask` with the ``(i - offset[0], j - offset[1])`` bit
         set, if shifting ``other`` (such that its bottom right corner is at
         ``(i, j)``) causes it to overlap with this mask

         If an ``output`` Mask is specified, the output is drawn onto it and
         it is returned. Otherwise a mask of size ``(MAX(0, width + other mask's
         width - 1), MAX(0, height + other mask's height - 1))`` is created and
         returned.
      :rtype: Mask

      .. ## Mask.convolve ##

   .. method:: connected_component

      | :sl:`Returns a mask containing a connected component`
      | :sg:`connected_component() -> Mask`
      | :sg:`connected_component(pos) -> Mask`

      A connected component is a group (1 or more) of connected set bits
      (orthogonally and diagonally). The SAUF algorithm, which checks 8 point
      connectivity, is used to find a connected component in the mask.

      By default this method will return a :class:`Mask` containing the largest
      connected component in the mask. Optionally, a bit coordinate can be
      specified and the connected component containing it will be returned. If
      the bit at the given location is not set, the returned :class:`Mask` will
      be empty (no bits set).

      :param pos: (optional) selects the connected component that contains the
         bit at this position

      :returns: a :class:`Mask` object (same size as this mask) with the largest
         connected component from this mask, if this mask has no bits set then
         an empty mask will be returned

         If the ``pos`` parameter is provided then the mask returned will have
         the connected component that contains this position. An empty mask will
         be returned if the ``pos`` parameter selects an unset bit.
      :rtype: Mask

      :raises IndexError: if the optional ``pos`` parameter is outside of the
         mask's bounds

      .. ## Mask.connected_component ##

   .. method:: connected_components

      | :sl:`Returns a list of masks of connected components`
      | :sg:`connected_components() -> [Mask, ...]`
      | :sg:`connected_components(minimum=0) -> [Mask, ...]`

      Provides a list containing a :class:`Mask` object for each connected
      component.

      :param int minimum: (optional) indicates the minimum number of bits (to
	 filter out noise) per connected component (default is 0, which equates
 	 to no minimum and is equivalent to setting it to 1, as a connected
         component must have at least 1 bit set)

      :returns: a list containing a :class:`Mask` object for each connected
         component, an empty list is returned if the mask has no bits set
      :rtype: list[Mask]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.connected_components ##

   .. method:: get_bounding_rects

      | :sl:`Returns a list of bounding rects of connected components`
      | :sg:`get_bounding_rects() -> [Rect, ...]`

      Provides a list containing a bounding rect for each connected component.

      :returns: a list containing a bounding rect for each connected component,
         an empty list is returned if the mask has no bits set
      :rtype: list[Rect]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.get_bounding_rects ##

   .. method:: to_surface

      | :sl:`Returns a surface with the mask drawn on it`
      | :sg:`to_surface() -> Surface`
      | :sg:`to_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface`

      Draws this mask on the given surface. Set bits (bits set to 1) and unset
      bits (bits set to 0) can be drawn onto a surface.

      :param surface: (optional) Surface to draw mask onto, if no surface is
         provided one will be created (default is ``None``, which will cause a
         surface with the parameters
         ``Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)`` to be
         created, drawn on, and returned)
      :type surface: Surface or None
      :param setsurface: (optional) use this surface's color values to draw
         set bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``setcolor`` value
      :type setsurface: Surface or None
      :param unsetsurface: (optional) use this surface's color values to draw
         unset bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``unsetcolor`` value
      :type unsetsurface: Surface or None
      :param setcolor: (optional) color to draw set bits (default is
         ``(255, 255, 255, 255)``, white), use ``None`` to skip drawing the set
         bits, the ``setsurface`` parameter (if set) will takes precedence over
         this parameter
      :type setcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param unsetcolor: (optional) color to draw unset bits (default is
         ``(0, 0, 0, 255)``, black), use ``None`` to skip drawing the unset
         bits, the ``unsetsurface`` parameter (if set) will takes precedence
         over this parameter
      :type unsetcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param dest: (optional) surface destination of where to position the
         topleft corner of the mask being drawn (default is ``(0, 0)``), if a
         Rect is used as the ``dest`` parameter, its ``x`` and ``y`` attributes
         will be used as the destination, **NOTE1:** rects with a negative width
         or height value will not be normalized before using their ``x`` and
         ``y`` values, **NOTE2:** this destination value is only used to
         position the mask on the surface, it does not offset the ``setsurface``
         and ``unsetsurface`` from the mask, they are always aligned with the
         mask (i.e. position ``(0, 0)`` on the mask always corresponds to
         position ``(0, 0)`` on the ``setsurface`` and ``unsetsurface``)
      :type dest: Rect or tuple(int, int) or list(int, int) or Vector2(int, int)

      :returns: the ``surface`` parameter (or a newly created surface if no
         ``surface`` parameter was provided) with this mask drawn on it
      :rtype: Surface

      :raises ValueError: if the ``setsurface`` parameter or ``unsetsurface``
         parameter does not have the same format (bytesize/bitsize/alpha) as
         the ``surface`` parameter

      .. note ::
         To skip drawing the set bits, both ``setsurface`` and ``setcolor`` must
         be ``None``. The ``setsurface`` parameter defaults to ``None``, but
         ``setcolor`` defaults to a color value and therefore must be set to
         ``None``.

      .. note ::
         To skip drawing the unset bits, both ``unsetsurface`` and
         ``unsetcolor`` must be ``None``. The ``unsetsurface`` parameter
         defaults to ``None``, but ``unsetcolor`` defaults to a color value and
         therefore must be set to ``None``.

      .. versionadded:: 2.0.0

      .. ## Mask.to_surface ##

   .. ## pygame.mask.Mask ##

.. ## pygame.mask ##


--- Contenu du fichier : context.rst.txt ---
.. include:: common.txt

:mod:`pygame.context`
======================

.. module:: pygame.context
    :synopsis: pygame module to provide additional context about the system

| :sl:`pygame module to provide additional context about the system`

**EXPERIMENTAL!** This API may change or disappear in later pygame releases. 
If you use this, your code may break with the next pygame release.
This is a new module, so we are marking it experimental for now.
We probably won't have to change API, but we're keeping the possibility
open just in case something obvious comes up.

.. versionadded:: 2.1.3

.. function:: get_pref_path

   | :sl:`get a writeable folder for your app`
   | :sg:`get_pref_path(org, app) -> path`

   When distributing apps, it's helpful to have a way to get a writeable path,
   because it's what apps are expected to do, and because sometimes the local
   space around the app isn't writeable to the app.

   This function returns a platform specific path for your app to store
   savegames, settings, and the like. This path is unique per user and
   per app name.

   It takes two strings, ``org`` and ``app``, referring to the "organization"
   and "application name." For example, the organization could be "Valve," 
   and the application name could be "Half Life 2." It then will figure out the
   preferred path, **creating the folders referenced by the path if necessary**,
   and return a string containing the absolute path.

   For example::

        On Windows, it would resemble
        C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\

        On macOS, it would resemble
        /Users/bob/Library/Application Support/My Program Name/

        And on Linux it would resemble
        /home/bob/.local/share/My Program Name/
    
   .. versionadded:: 2.1.3

.. function:: get_pref_locales

   | :sl:`get preferred locales set on the system`
   | :sg:`get_pref_locales() -> list[locale]`

   Returns a list of "locale" dicts, sorted in descending order of preference
   set on the host OS (the most preferred locale is the first element). May
   also be an empty list if pygame could not find this information.

   Each "locale" dict contains the language code which can be accessed by the
   key ``"language"``. This language code is an ISO-639 language specifier 
   (such as "en" for English, "de" for German, etc).
   A "locale" dict may also optionally contain a ``"country"`` field, whose
   value is an ISO-3166 country code (such as "US" for the United States, 
   "CA" for Canada, etc). If this field is not set or undetermined, it is 
   ``None``.
   A "locale" dict which looks like ``{'language': 'en', 'country': 'US'}``
   indicates the user prefers American English, while
   ``{'language': 'en', 'country': None}`` indicates that the user prefers
   English, generically.

   This might be a bit of an expensive call because it has to query the OS. So
   this function must not be called in a game loop, instead it's best to ask 
   for this once and save the results. However, this list can change when the
   user changes a system preference outside of your program. pygame will send
   a ``LOCALECHANGED`` event in this case, if possible, and you can call this
   function again to get an updated copy of preferred locales.

   .. note::
        Since the organization and app names can potentially be used as
        a folder name, it is highly encouraged to avoid punctuation.
        Instead stick to letters, numbers, and spaces.

   .. note::
        The ``appdirs`` library has similar functionality for this use case,
        but has more "folder types" to choose from.

   .. versionadded:: 2.1.3


--- Contenu du fichier : locals.rst.txt ---
.. include:: common.txt

:mod:`pygame.locals`
====================

.. module:: pygame.locals
   :synopsis: pygame constants

| :sl:`pygame constants`

This module contains various constants used by pygame. Its contents are
automatically placed in the pygame module namespace. However, an application
can use ``pygame.locals`` to include only the pygame constants with a ``from
pygame.locals import *``.

Detailed descriptions of the various constants can be found throughout the
pygame documentation. Here are the locations of some of them.

   - The :mod:`pygame.display` module contains flags like ``FULLSCREEN`` used
     by :func:`pygame.display.set_mode`.
   - The :mod:`pygame.event` module contains the various event types.
   - The :mod:`pygame.key` module lists the keyboard constants and modifiers
     (``K_``\* and ``MOD_``\*) relating to the ``key`` and ``mod`` attributes of
     the ``KEYDOWN`` and ``KEYUP`` events.
   - The :mod:`pygame.time` module defines ``TIMER_RESOLUTION``.

.. ## pygame.locals ##


--- Contenu du fichier : cursors.rst.txt ---
.. include:: common.txt

:mod:`pygame.cursors`
=====================

.. module:: pygame.cursors
   :synopsis: pygame module for cursor resources

| :sl:`pygame module for cursor resources`

Pygame offers control over the system hardware cursor. Pygame supports
black and white cursors (bitmap cursors), as well as system variant cursors and color cursors.
You control the cursor with functions inside :mod:`pygame.mouse`.

This cursors module contains functions for loading and decoding various
cursor formats. These allow you to easily store your cursors in external files
or directly as encoded python strings.

The module includes several standard cursors. The :func:`pygame.mouse.set_cursor()`
function takes several arguments. All those arguments have been stored in a
single tuple you can call like this:

::

   >>> pygame.mouse.set_cursor(*pygame.cursors.arrow)
   
The following variables can be passed to ``pygame.mouse.set_cursor`` function:

   * ``pygame.cursors.arrow``

   * ``pygame.cursors.diamond``

   * ``pygame.cursors.broken_x``

   * ``pygame.cursors.tri_left``

   * ``pygame.cursors.tri_right``

This module also contains a few cursors as formatted strings. You'll need to
pass these to ``pygame.cursors.compile()`` function before you can use them.
The example call would look like this:

::

   >>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)
   >>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)

The following strings can be converted into cursor bitmaps with
``pygame.cursors.compile()`` :

   * ``pygame.cursors.thickarrow_strings``

   * ``pygame.cursors.sizer_x_strings``

   * ``pygame.cursors.sizer_y_strings``

   * ``pygame.cursors.sizer_xy_strings``
   
   * ``pygame.cursor.textmarker_strings``

.. function:: compile

   | :sl:`create binary cursor data from simple strings`
   | :sg:`compile(strings, black='X', white='.', xor='o') -> data, mask`

   A sequence of strings can be used to create binary cursor data for the
   system cursor. This returns the binary data in the form of two tuples.
   Those can be passed as the third and fourth arguments respectively of the 
   :func:`pygame.mouse.set_cursor()` function.

   If you are creating your own cursor strings, you can use any value represent
   the black and white pixels. Some system allow you to set a special toggle
   color for the system color, this is also called the xor color. If the system
   does not support xor cursors, that color will simply be black.
   
   The height must be divisible by 8. The width of the strings must all be equal 
   and be divisible by 8. If these two conditions are not met, ``ValueError`` is
   raised.
   An example set of cursor strings looks like this

   ::

       thickarrow_strings = (               #sized 24x24
         "XX                      ",
         "XXX                     ",
         "XXXX                    ",
         "XX.XX                   ",
         "XX..XX                  ",
         "XX...XX                 ",
         "XX....XX                ",
         "XX.....XX               ",
         "XX......XX              ",
         "XX.......XX             ",
         "XX........XX            ",
         "XX........XXX           ",
         "XX......XXXXX           ",
         "XX.XXX..XX              ",
         "XXXX XX..XX             ",
         "XX   XX..XX             ",
         "     XX..XX             ",
         "      XX..XX            ",
         "      XX..XX            ",
         "       XXXX             ",
         "       XX               ",
         "                        ",
         "                        ",
         "                        ")

   .. ## pygame.cursors.compile ##

.. function:: load_xbm

   | :sl:`load cursor data from an XBM file`
   | :sg:`load_xbm(cursorfile) -> cursor_args`
   | :sg:`load_xbm(cursorfile, maskfile) -> cursor_args`

   This loads cursors for a simple subset of ``XBM`` files. ``XBM`` files are
   traditionally used to store cursors on UNIX systems, they are an ASCII
   format used to represent simple images.

   Sometimes the black and white color values will be split into two separate
   ``XBM`` files. You can pass a second maskfile argument to load the two
   images into a single cursor.

   The cursorfile and maskfile arguments can either be filenames or file-like
   object with the readlines method.

   The return value cursor_args can be passed directly to the
   ``pygame.mouse.set_cursor()`` function.

   .. ## pygame.cursors.load_xbm ##



.. class:: Cursor

   | :sl:`pygame object representing a cursor`
   | :sg:`Cursor(size, hotspot, xormasks, andmasks) -> Cursor`
   | :sg:`Cursor(hotspot, surface) -> Cursor`
   | :sg:`Cursor(constant) -> Cursor`
   | :sg:`Cursor(Cursor) -> Cursor`
   | :sg:`Cursor() -> Cursor`

   In pygame 2, there are 3 types of cursors you can create to give your
   game that little bit of extra polish. There's **bitmap** type cursors,
   which existed in pygame 1.x, and are compiled from a string or load from an xbm file.
   Then there are **system** type cursors, where you choose a preset that will 
   convey the same meaning but look native across different operating systems. 
   Finally you can create a **color** cursor, which displays a pygame surface as the cursor.

   **Creating a system cursor**

   Choose a constant from this list, pass it into ``pygame.cursors.Cursor(constant)``, 
   and you're good to go. Be advised that not all systems support every system
   cursor, and you may get a substitution instead. For example, on MacOS,
   WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL
   should show up as a closed hand. And on Wayland, every SIZE cursor should 
   show up as a hand.

   ::

      Pygame Cursor Constant           Description
      --------------------------------------------
      pygame.SYSTEM_CURSOR_ARROW       arrow
      pygame.SYSTEM_CURSOR_IBEAM       i-beam
      pygame.SYSTEM_CURSOR_WAIT        wait
      pygame.SYSTEM_CURSOR_CROSSHAIR   crosshair
      pygame.SYSTEM_CURSOR_WAITARROW   small wait cursor 
                                       (or wait if not available)
      pygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing 
                                       northwest and southeast
      pygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing
                                       northeast and southwest
      pygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing
                                       west and east
      pygame.SYSTEM_CURSOR_SIZENS      double arrow pointing 
                                       north and south
      pygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing
                                       north, south, east, and west
      pygame.SYSTEM_CURSOR_NO          slashed circle or crossbones
      pygame.SYSTEM_CURSOR_HAND        hand

   **Creating a cursor without passing arguments**
   
   In addition to the cursor constants available and described above,
   you can also call ``pygame.cursors.Cursor()``, and your cursor is ready (doing that is the same as
   calling ``pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)``.
   Doing one of those calls actually creates a system cursor using the default native image.

   **Creating a color cursor**

   To create a color cursor, create a ``Cursor`` from a ``hotspot`` and a ``surface``.
   ``hotspot`` is an (x,y) coordinate that determines where in the cursor the exact point is.
   The hotspot position must be within the bounds of the ``surface``.

   **Creating a bitmap cursor**

   When the mouse cursor is visible, it will be displayed as a black and white
   bitmap using the given bitmask arrays. The ``size`` is a sequence containing 
   the cursor width and height. ``hotspot`` is a sequence containing the cursor 
   hotspot position. 
   
   A cursor has a width and height, but a mouse position is represented by a 
   set of point coordinates. So the value passed into the cursor ``hotspot`` 
   variable helps pygame to actually determine at what exact point the cursor 
   is at.
   
   ``xormasks`` is a sequence of bytes containing the cursor xor data masks. 
   Lastly ``andmasks``, a sequence of bytes containing the cursor bitmask data.
   To create these variables, we can make use of the 
   :func:`pygame.cursors.compile()` function.

   Width and height must be a multiple of 8, and the mask arrays must be the 
   correct size for the given width and height. Otherwise an exception is raised.
   
   .. method:: copy

      | :sl:`copy the current cursor`
      | :sg:`copy() -> Cursor`
      
      Returns a new Cursor object with the same data and hotspot as the original.
   .. ## pygame.cursors.Cursor.copy ##
   

   .. attribute:: type
   
      | :sl:`Gets the cursor type`
      | :sg:`type -> string`

      The type will be ``"system"``, ``"bitmap"``, or ``"color"``.

   .. ## pygame.cursors.Cursor.type ##

   .. attribute:: data

      | :sl:`Gets the cursor data`
      | :sg:`data -> tuple`

      Returns the data that was used to create this cursor object, wrapped up in a tuple.

   .. ## pygame.cursors.Cursor.data ##

   .. versionadded:: 2.0.1

   .. ## pygame.cursors.Cursor ##
   
.. ## pygame.cursors ##

Example code for creating and settings cursors. (Click the mouse to switch cursor)

.. literalinclude:: code_examples/cursors_module_example.py


--- Contenu du fichier : touch.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.touch`
=========================

.. module:: pygame._sdl2.touch
   :synopsis: pygame module to work with touch input

| :sl:`pygame module to work with touch input`

.. versionadded:: 2 This module requires SDL2.

.. function:: get_num_devices

   | :sl:`get the number of touch devices`
   | :sg:`get_num_devices() -> int`

   Return the number of available touch devices.

   .. ## pygame._sdl2.touch.get_num_devices ##

.. function:: get_device

   | :sl:`get the a touch device id for a given index`
   | :sg:`get_device(index) -> touchid`

   :param int index: This number is at least 0 and less than the
                     :func:`number of devices <pygame._sdl2.touch.get_num_devices()>`.

   Return an integer id associated with the given ``index``.

   .. ## pygame._sdl2.touch.get_device ##

.. function:: get_num_fingers

   | :sl:`the number of active fingers for a given touch device`
   | :sg:`get_num_fingers(touchid) -> int`

   Return the number of fingers active for the touch device
   whose id is `touchid`.

   .. ## pygame._sdl2.touch.get_num_fingers ##

.. function:: get_finger

   | :sl:`get information about an active finger`
   | :sg:`get_finger(touchid, index) -> int`

   :param int touchid: The touch device id.
   :param int index: The index of the finger to return
                     information about, between 0 and the
                     :func:`number of active fingers <pygame._sdl2.touch.get_num_fingers()>`.

   Return a dict for the finger ``index`` active on ``touchid``.
   The dict contains these keys:

   ::

      id         the id of the finger (an integer).
      x          the normalized x position of the finger, between 0 and 1.
      y          the normalized y position of the finger, between 0 and 1.
      pressure   the amount of pressure applied by the finger, between 0 and 1.

   .. ## pygame._sdl2.touch.get_finger ##

.. ## pygame._sdl2.touch ##


--- Contenu du fichier : joystick.rst.txt ---
.. include:: common.txt

:mod:`pygame.joystick`
======================

.. module:: pygame.joystick
   :synopsis: Pygame module for interacting with joysticks, gamepads, and trackballs.

| :sl:`Pygame module for interacting with joysticks, gamepads, and trackballs.`

The joystick module manages the joystick devices on a computer.
Joystick devices include trackballs and video-game-style
gamepads, and the module allows the use of multiple buttons and "hats".
Computers may manage multiple joysticks at a time.

Each instance of the Joystick class represents one gaming device plugged
into the computer. If a gaming pad has multiple joysticks on it, then the
joystick object can actually represent multiple joysticks on that single
game device.

For a quick way to initialise the joystick module and get a list of Joystick instances
use the following code::

    pygame.joystick.init()
    joysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]

The following event types will be generated by the joysticks ::

    JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION

And in pygame 2, which supports hotplugging::

   JOYDEVICEADDED JOYDEVICEREMOVED

Note that in pygame 2, joysticks events use a unique "instance ID". The device index
passed in the constructor to a Joystick object is not unique after devices have
been added and removed. You must call :meth:`Joystick.get_instance_id()` to find
the instance ID that was assigned to a Joystick on opening.

The event queue needs to be pumped frequently for some of the methods to work.
So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.

To be able to get joystick events and update the joystick objects while the window
is not in focus, you may set the ``SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS`` environment
variable. See :ref:`environment variables <environment-variables>` for more details.


.. function:: init

   | :sl:`Initialize the joystick module.`
   | :sg:`init() -> None`

   This function is called automatically by ``pygame.init()``.

   It initializes the joystick module. The module must be initialized before any
   other functions will work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.init ##

.. function:: quit

   | :sl:`Uninitialize the joystick module.`
   | :sg:`quit() -> None`

   Uninitialize the joystick module. After you call this any existing joystick
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.quit ##

.. function:: get_init

   | :sl:`Returns True if the joystick module is initialized.`
   | :sg:`get_init() -> bool`

   Test if the ``pygame.joystick.init()`` function has been called.

   .. ## pygame.joystick.get_init ##

.. function:: get_count

   | :sl:`Returns the number of joysticks.`
   | :sg:`get_count() -> count`

   Return the number of joystick devices on the system. The count will be ``0`` 
   if there are no joysticks on the system.

   When you create Joystick objects using ``Joystick(id)``, you pass an integer
   that must be lower than this count.

   .. ## pygame.joystick.get_count ##

.. class:: Joystick

   | :sl:`Create a new Joystick object.`
   | :sg:`Joystick(id) -> Joystick`

   Create a new joystick to access a physical device. The id argument must be a
   value from ``0`` to ``pygame.joystick.get_count() - 1``.

   Joysticks are initialised on creation and are shut down when deallocated.
   Once the device is initialized the pygame event queue will start receiving
   events about its input.

   .. versionchanged:: 2.0.0 Joystick objects are now opened immediately on creation.

   .. method:: init

      | :sl:`initialize the Joystick`
      | :sg:`init() -> None`

      Initialize the joystick, if it has been closed. It is safe to call this
      even if the joystick is already initialized.

      .. deprecated:: 2.0.0

         In future it will not be possible to reinitialise a closed Joystick
         object. Will be removed in Pygame 2.1.

      .. ## Joystick.init ##

   .. method:: quit

      | :sl:`uninitialize the Joystick`
      | :sg:`quit() -> None`

      Close a Joystick object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Joystick.quit ##

   .. method:: get_init

      | :sl:`check if the Joystick is initialized`
      | :sg:`get_init() -> bool`

      Return True if the Joystick object is currently initialised.

      .. ## Joystick.get_init ##

   .. method:: get_id

      | :sl:`get the device index (deprecated)`
      | :sg:`get_id() -> int`

      Returns the original device index for this device. This is the same
      value that was passed to the ``Joystick()`` constructor. This method can
      safely be called while the Joystick is not initialized.

      .. deprecated:: 2.0.0

         The original device index is not useful in pygame 2. Use
         :meth:`.get_instance_id` instead. Will be removed in Pygame 2.1.

   .. method:: get_instance_id() -> int

      | :sl:`get the joystick instance id`
      | :sg:`get_instance_id() -> int`

      Get the joystick instance ID. This matches the ``instance_id`` field
      that is given in joystick events.

      .. versionadded:: 2.0.0dev11

   .. method:: get_guid() -> str

      | :sl:`get the joystick GUID`
      | :sg:`get_guid() -> str`

      Get the GUID string. This identifies the exact hardware of the joystick
      device.

      .. versionadded:: 2.0.0dev11

   .. method:: get_power_level() -> str

      | :sl:`get the approximate power status of the device`
      | :sg:`get_power_level() -> str`

      Get a string giving the power status of the device.

      One of: ``empty``, ``low``, ``medium``, ``full``, ``wired``, ``max``, or
      ``unknown``.

      .. versionadded:: 2.0.0dev11

      .. ## Joystick.get_id ##

   .. method:: get_name

      | :sl:`get the Joystick system name`
      | :sg:`get_name() -> string`

      Returns the system name for this joystick device. It is unknown what name
      the system will give to the Joystick, but it should be a unique name that
      identifies the device. This method can safely be called while the
      Joystick is not initialized.

      .. ## Joystick.get_name ##

   .. method:: get_numaxes

      | :sl:`get the number of axes on a Joystick`
      | :sg:`get_numaxes() -> int`

      Returns the number of input axes are on a Joystick. There will usually be
      two for the position. Controls like rudders and throttles are treated as
      additional axes.

      The ``pygame.JOYAXISMOTION`` events will be in the range from ``-1.0`` 
      to ``1.0``. A value of ``0.0`` means the axis is centered. Gamepad devices 
      will usually be ``-1``, ``0``, or ``1`` with no values in between. Older 
      analog joystick axes will not always use the full ``-1`` to ``1`` range, 
      and the centered value will be some area around ``0``. 
      
      Analog joysticks usually have a bit of noise in their axis, which will 
      generate a lot of rapid small motion events.

      .. ## Joystick.get_numaxes ##

   .. method:: get_axis

      | :sl:`get the current position of an axis`
      | :sg:`get_axis(axis_number) -> float`

      Returns the current position of a joystick axis. The value will range
      from ``-1`` to ``1`` with a value of ``0`` being centered. You may want 
      to take into account some tolerance to handle jitter, and joystick drift 
      may keep the joystick from centering at ``0`` or using the full range of 
      position values.

      The axis number must be an integer from ``0`` to ``get_numaxes() - 1``.

      When using gamepads both the control sticks and the analog triggers are
      usually reported as axes.

      .. ## Joystick.get_axis ##

   .. method:: get_numballs

      | :sl:`get the number of trackballs on a Joystick`
      | :sg:`get_numballs() -> int`

      Returns the number of trackball devices on a Joystick. These devices work
      similar to a mouse but they have no absolute position; they only have
      relative amounts of movement.

      The ``pygame.JOYBALLMOTION`` event will be sent when the trackball is
      rolled. It will report the amount of movement on the trackball.

      .. ## Joystick.get_numballs ##

   .. method:: get_ball

      | :sl:`get the relative position of a trackball`
      | :sg:`get_ball(ball_number) -> x, y`

      Returns the relative movement of a joystick button. The value is a ``x, y``
      pair holding the relative movement since the last call to get_ball.

      The ball number must be an integer from ``0`` to ``get_numballs() - 1``.

      .. ## Joystick.get_ball ##

   .. method:: get_numbuttons

      | :sl:`get the number of buttons on a Joystick`
      | :sg:`get_numbuttons() -> int`

      Returns the number of pushable buttons on the joystick. These buttons
      have a boolean (on or off) state.

      Buttons generate a ``pygame.JOYBUTTONDOWN`` and ``pygame.JOYBUTTONUP``
      event when they are pressed and released.

      .. ## Joystick.get_numbuttons ##

   .. method:: get_button

      | :sl:`get the current button state`
      | :sg:`get_button(button) -> bool`

      Returns the current state of a joystick button.

      .. ## Joystick.get_button ##

   .. method:: get_numhats

      | :sl:`get the number of hat controls on a Joystick`
      | :sg:`get_numhats() -> int`

      Returns the number of joystick hats on a Joystick. Hat devices are like
      miniature digital joysticks on a joystick. Each hat has two axes of
      input.

      The ``pygame.JOYHATMOTION`` event is generated when the hat changes
      position. The ``position`` attribute for the event contains a pair of 
      values that are either ``-1``, ``0``, or ``1``. A position of ``(0, 0)`` 
      means the hat is centered.

      .. ## Joystick.get_numhats ##

   .. method:: get_hat

      | :sl:`get the position of a joystick hat`
      | :sg:`get_hat(hat_number) -> x, y`

      Returns the current position of a position hat. The position is given as
      two values representing the ``x`` and ``y`` position for the hat. ``(0, 0)``
      means centered. A value of ``-1`` means left/down and a value of ``1`` means
      right/up: so ``(-1, 0)`` means left; ``(1, 0)`` means right; ``(0, 1)`` means 
      up; ``(1, 1)`` means upper-right; etc.

      This value is digital, ``i.e.``, each coordinate can be ``-1``, ``0`` or ``1`` 
      but never in-between.

      The hat number must be between ``0`` and ``get_numhats() - 1``.

      .. ## Joystick.get_hat ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the joystick, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Joystick.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      joystick does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Joystick.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the joystick. See
      :meth:`Joystick.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Joystick.stop_rumble ##

   .. ## pygame.joystick.Joystick ##

.. ## pygame.joystick ##

.. figure:: code_examples/joystick_calls.png
   :scale: 100 %
   :alt: joystick module example

   Example code for joystick module.

.. literalinclude:: ../../../examples/joystick.py

.. _controller-mappings:


Common Controller Axis Mappings
===============================

Controller mappings are drawn from the underlying SDL library which pygame uses and they differ
between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.

Axis and hat mappings are listed from -1 to +1.


Nintendo Switch Left Joy-Con (pygame 2.x)
*****************************************

The Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    D-pad Up        - Button 0
    D-pad Down      - Button 1
    D-pad Left      - Button 2
    D-pad Right     - Button 3
    SL              - Button 4
    SR              - Button 5
    -               - Button 8
    Stick In        - Button 10
    Capture         - Button 13
    L               - Button 14
    ZL              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Right Joy-Con (pygame 2.x)
******************************************

The Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    SL              - Button 4
    SR              - Button 5
    +               - Button 9
    Stick In        - Button 11
    Home            - Button 12
    R               - Button 14
    ZR              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Pro Controller (pygame 2.x)
*******************************************

The Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats.
The controller is recognized as "Nintendo Switch Pro Controller".


* **Left Stick**::

    Left -> Right   - Axis 0
    Up -> Down      - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up -> Down      - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    - Button        - Button 4
    Home Button     - Button 5
    + Button        - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Capture Button  - Button 15


XBox 360 Controller (pygame 2.x)
********************************

The Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat.
The controller is recognized as "Xbox 360 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9
    Guide Button    - Button 10

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 2.x)
*************************************

The PlayStation 4 controller mapping has 6 axes and 16 buttons.
The controller is recognized as "PS4 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Share Button    - Button 4
    PS Button       - Button 5
    Options Button  - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Touch Pad Click - Button 15

Playstation 5 Controller (pygame 2.x)
*************************************

The PlayStation 5 controller mapping has 6 axes, 13 buttons, and 1 hat.
The controller is recognized as "Sony Interactive Entertainment Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Left Trigger    - Button 6
    Right Trigger   - Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    PS Button       - Button 10
    Left Stick in   - Button 11
    Right Stick in  - Button 12

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



XBox 360 Controller (pygame 1.x)
********************************

The Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat.
The controller is recognized as "Controller (XBOX 360 For Windows)".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 4
    Up   -> Down    - Axis 3

* **Left Trigger & Right Trigger**::

    RT -> LT        - Axis 2

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 1.x)
*************************************

The PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat.
The controller is recognized as "Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 5

* **Right Trigger**::

    Out -> In       - Axis 4

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    L. Trigger(Full)- Button 6
    R. Trigger(Full)- Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    L. Stick In     - Button 10
    R. Stick In     - Button 11
    PS Button       - Button 12
    Touch Pad Click - Button 13

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



--- Contenu du fichier : math.rst.txt ---
.. include:: common.txt

:mod:`pygame.math`
==================

.. module:: pygame.math
   :synopsis: pygame module for vector classes

| :sl:`pygame module for vector classes`

The pygame math module currently provides Vector classes in two and three
dimensions, ``Vector2`` and ``Vector3`` respectively.

They support the following numerical operations: ``vec + vec``, ``vec - vec``, 
``vec * number``, ``number * vec``, ``vec / number``, ``vec // number``, ``vec += vec``, 
``vec -= vec``, ``vec *= number``, ``vec /= number``, ``vec //= number``, ``round(vec, ndigits=0)``. 

All these operations will be performed elementwise.
In addition ``vec * vec`` will perform a scalar-product (a.k.a. dot-product). 
If you want to multiply every element from vector v with every element from 
vector w you can use the elementwise method: ``v.elementwise() * w``

The coordinates of a vector can be retrieved or set using attributes or
subscripts

::

   v = pygame.Vector3()

   v.x = 5
   v[1] = 2 * v.x
   print(v[1]) # 10

   v.x == v[0]
   v.y == v[1]
   v.z == v[2]

Multiple coordinates can be set using slices or swizzling

::

   v = pygame.Vector2()
   v.xy = 1, 2
   v[:] = 1, 2

.. versionadded:: 1.9.2pre
.. versionchanged:: 1.9.4 Removed experimental notice.
.. versionchanged:: 1.9.4 Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)
.. versionchanged:: 1.9.4 :mod:`pygame.math` import not required. More convenient ``pygame.Vector2`` and ``pygame.Vector3``.
.. versionchanged:: 2.2.0 `round` returns a new vector with components rounded to the specified digits.

.. function:: clamp

   | :sl:`returns value clamped to min and max.`
   | :sg:`clamp(value, min, max) -> float`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave clamp feedback with authors <https://github.com/pygame/pygame/pull/3326>`_

   Clamps a numeric ``value`` so that it's no lower than ``min``, and no higher
   than ``max``.

   .. versionadded:: 2.1.3

   .. ## math.clamp ##

.. function:: lerp

   | :sl:`interpolates between two values by a weight.`
   | :sg:`lerp(a, b, weight) -> float`

   Linearly interpolates between ``a`` and ``b`` by ``weight`` using the formula ``a + (b-a) * weight``.
   
   If ``weight`` is ``0.5``, ``lerp`` will return the value half-way between ``a``
   and ``b``. When ``a = 10`` and ``b = 20``, ``lerp(a, b, 0.5)`` will return ``15``. You
   can think of weight as the percentage of interpolation from ``a`` to ``b``, ``0.0``
   being 0% and ``1.0`` being 100%.

   ``lerp`` can be used for many things. You could rotate a sprite by a weight with
   ``angle = lerp(0, 360, weight)``. You could even scale an enemy's attack value
   based on the level you're playing:

   ::

      FINAL_LEVEL = 10
      current_level = 2

      attack = lerp(10, 50, current_level/MAX_LEVEL) # 18

   If you're on level 0, ``attack`` will be ``10``, if you're on level 10,
   ``attack`` will be ``50``. If you're on level 5, the
   result of ``current_level/MAX_LEVEL`` will be ``0.5``
   which represents 50%, therefore ``attack`` will be ``30``, which is the midpoint of ``10`` and ``50``.

   Raises a ValueError if ``weight`` is outside the range of ``[0, 1]``.

   .. versionadded:: 2.1.3

   .. ## math.lerp ##

.. class:: Vector2

   | :sl:`a 2-Dimensional Vector`
   | :sg:`Vector2() -> Vector2(0, 0)`
   | :sg:`Vector2(int) -> Vector2`
   | :sg:`Vector2(float) -> Vector2`
   | :sg:`Vector2(Vector2) -> Vector2`
   | :sg:`Vector2(x, y) -> Vector2`
   | :sg:`Vector2((x, y)) -> Vector2`

   Some general information about the ``Vector2`` class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector2) -> float`

      .. ## Vector2.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector2) -> float`

      calculates the third component of the cross-product.

      .. ## Vector2.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude_squared() == vec.x**2 + vec.y**2``. This
      is faster than ``vec.magnitude()`` because it avoids the square root.

      .. ## Vector2.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length_squared() == vec.x**2 + vec.y**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector2.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector2`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector2.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. 
      The direction of the vector is not changed.

      .. ## Vector2.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise 
      it returns ``False``.

      .. ## Vector2.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector2.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector2) -> Vector2`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector2.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector2) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector2.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector2) -> float`

      .. ## Vector2.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector2) -> float`

      .. ## Vector2.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector2, float) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector2, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector2, float) -> Vector2`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self and
      other the result is going to be. It must be a value between ``0`` and ``1`` 
      where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector2.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector2, float) -> Vector2`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector2.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector2.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector2.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in degrees. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in radians. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector2) -> float`

      Returns the angle from self to the passed ``Vector2`` that would rotate self
      to be aligned with the passed ``Vector2`` without crossing over the negative 
      x-axis.

      .. figure:: code_examples/angle_to.png
         :alt: angle_to image

         Example demonstrating the angle returned

      .. ## Vector2.angle_to ##

   .. method:: as_polar

      | :sl:`returns a tuple with radial distance and azimuthal angle.`
      | :sg:`as_polar() -> (r, phi)`

      Returns a tuple ``(r, phi)`` where r is the radial distance, and phi 
      is the azimuthal angle.

      .. ## Vector2.as_polar ##

   .. method:: from_polar

      | :sl:`Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple.`
      | :sg:`Vector2.from_polar((r, phi)) -> Vector2`
      | :sg:`Vector2().from_polar((r, phi)) -> None`

      If used from the class creates a Vector2(x,y), else sets x and y.
      The values of x and y are defined from a tuple ``(r, phi)`` where r
      is the radial distance, and phi is the azimuthal angle.

      .. ## Vector2.from_polar ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector2) -> Vector2`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector2.project ##

   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector2`

      Returns a new Vector2 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector2.copy ##
   

   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector2`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude_ip ##


   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector2) -> None`
      | :sg:`update(x, y) -> None`
      | :sg:`update((x, y)) -> None`

      Sets coordinates x and y in place.

      .. versionadded:: 1.9.5

      .. ## Vector2.update ##

   
   .. attribute:: epsilon
      
      | :sl:`Determines the tolerance of vector calculations.`
      
      Both Vector classes have a value named ``epsilon`` that defaults to ``1e-6``.
      This value acts as a numerical margin in various methods to account for floating point
      arithmetic errors. Specifically, ``epsilon`` is used in the following places:

         * comparing Vectors (``==`` and ``!=``)
         * the ``is_normalized`` method (if the square of the length is within ``epsilon`` of 1, it's normalized)
         * slerping (a Vector with a length of ``<epsilon`` is considered a zero vector, and can't slerp with that)
         * reflection (can't reflect over the zero vector)
         * projection (can't project onto the zero vector)
         * rotation (only used when rotating by a multiple of 90 degrees)

      While it's possible to change ``epsilon`` for a specific instance of a Vector, all the other Vectors
      will retain the default value. Changing ``epsilon`` on a specific instance however could lead to some
      asymmetric behavior where symmetry would be expected, such as

      ::

         u = pygame.Vector2(0, 1)
         v = pygame.Vector2(0, 1.2)
         u.epsilon = 0.5 # don't set it nearly this large

         print(u == v) # >> True
         print(v == u) # >> False

      You'll probably never have to change ``epsilon`` from the default value, but in rare situations you might
      find that either the margin is too large or too small, in which case changing ``epsilon`` slightly 
      might help you out.


   .. ## pygame.math.Vector2 ##

.. class:: Vector3

   | :sl:`a 3-Dimensional Vector`
   | :sg:`Vector3() -> Vector3(0, 0, 0)`
   | :sg:`Vector3(int) -> Vector3`
   | :sg:`Vector3(float) -> Vector3`
   | :sg:`Vector3(Vector3) -> Vector3`
   | :sg:`Vector3(x, y, z) -> Vector3`
   | :sg:`Vector3((x, y, z)) -> Vector3`

   Some general information about the Vector3 class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector3) -> float`

      .. ## Vector3.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector3) -> Vector3`

      calculates the cross-product.

      .. ## Vector3.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared Euclidean magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: 
      ``vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2``.
      This is faster than ``vec.magnitude()`` because it avoids the
      square root.

      .. ## Vector3.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector3.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector3`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector3.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. The 
      direction of the vector is not changed.

      .. ## Vector3.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise it 
      returns ``False``.

      .. ## Vector3.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector3.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector3) -> Vector3`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector3.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector3) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector3.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector3) -> float`

      .. ## Vector3.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector3) -> float`

      .. ## Vector3.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector3, float) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector3, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector3, float) -> Vector3`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self an
      other the result is going to be. It must be a value between ``0`` and 
      ``1``, where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector3.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector3, float) -> Vector3`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector3.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector3.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle, Vector3) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_ip_rad ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_rad_ip ##

   .. method:: rotate_x

      | :sl:`rotates a vector around the x-axis by the angle in degrees.`
      | :sg:`rotate_x(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x ##

   .. method:: rotate_x_rad

      | :sl:`rotates a vector around the x-axis by the angle in radians.`
      | :sg:`rotate_x_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_x_rad ##

   .. method:: rotate_x_ip

      | :sl:`rotates the vector around the x-axis by the angle in degrees in place.`
      | :sg:`rotate_x_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x_ip ##

   .. method:: rotate_x_ip_rad

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_x_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_x_ip_rad ##

   .. method:: rotate_x_rad_ip

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_x_rad_ip ##

   .. method:: rotate_y

      | :sl:`rotates a vector around the y-axis by the angle in degrees.`
      | :sg:`rotate_y(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y ##

   .. method:: rotate_y_rad

      | :sl:`rotates a vector around the y-axis by the angle in radians.`
      | :sg:`rotate_y_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_y_rad ##

   .. method:: rotate_y_ip

      | :sl:`rotates the vector around the y-axis by the angle in degrees in place.`
      | :sg:`rotate_y_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y_ip ##

   .. method:: rotate_y_ip_rad

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_y_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_y_ip_rad ##

   .. method:: rotate_y_rad_ip

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_y_rad_ip ##

   .. method:: rotate_z

      | :sl:`rotates a vector around the z-axis by the angle in degrees.`
      | :sg:`rotate_z(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z ##

   .. method:: rotate_z_rad

      | :sl:`rotates a vector around the z-axis by the angle in radians.`
      | :sg:`rotate_z_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_z_rad ##

   .. method:: rotate_z_ip

      | :sl:`rotates the vector around the z-axis by the angle in degrees in place.`
      | :sg:`rotate_z_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z_ip ##

   .. method:: rotate_z_ip_rad

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_z_rad_ip() instead.
      
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_z_ip_rad ##

   .. method:: rotate_z_rad_ip

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_z_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector3) -> float`

      Returns the angle between self and the given vector.

      .. ## Vector3.angle_to ##

   .. method:: as_spherical

      | :sl:`returns a tuple with radial distance, inclination and azimuthal angle.`
      | :sg:`as_spherical() -> (r, theta, phi)`

      Returns a tuple ``(r, theta, phi)`` where r is the radial distance, theta is
      the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.as_spherical ##

   .. method:: from_spherical

      | :sl:`Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.`
      | :sg:`Vector3.from_spherical((r, theta, phi)) -> Vector3`
      | :sg:`Vector3().from_spherical((r, theta, phi)) -> None`

      If used from the class creates a Vector3(x, y, z), else sets x, y, and z.
      The values of x, y, and z are from a tuple ``(r, theta, phi)`` where r is the radial
      distance, theta is the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.from_spherical ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector3) -> Vector3`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector3.project ##
   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector3`

      Returns a new Vector3 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector3.copy ##


   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector3`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude_ip ##

   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector3) -> None`
      | :sg:`update(x, y, z) -> None`
      | :sg:`update((x, y, z)) -> None`

      Sets coordinates x, y, and z in place.

      .. versionadded:: 1.9.5

      .. ## Vector3.update ##

   .. attribute:: epsilon

      | :sl:`Determines the tolerance of vector calculations.`
      
      With lengths within this number, vectors are considered equal. For more information see :attr:`pygame.math.Vector2.epsilon`
            
   .. ##  ##

   .. ## pygame.math.Vector3 ##

.. ## pygame.math ##


--- Contenu du fichier : bufferproxy.rst.txt ---
.. include:: common.txt

.. default-domain:: py

:class:`pygame.BufferProxy`
===========================

.. currentmodule:: pygame

.. class:: BufferProxy

   | :sl:`pygame object to export a surface buffer through an array protocol`
   | :sg:`BufferProxy(<parent>) -> BufferProxy`

   :class:`BufferProxy` is a pygame support type, designed as the return value
   of the :meth:`Surface.get_buffer` and :meth:`Surface.get_view` methods.
   For all Python versions a :class:`BufferProxy` object exports a C struct
   and Python level array interface on behalf of its parent object's buffer.
   A new buffer interface is also exported.
   In pygame, :class:`BufferProxy` is key to implementing the
   :mod:`pygame.surfarray` module.

   :class:`BufferProxy` instances can be created directly from Python code,
   either for a parent that exports an interface, or from a Python ``dict``
   describing an object's buffer layout. The dict entries are based on the
   Python level array interface mapping. The following keys are recognized:

      ``"shape"`` : tuple
         The length of each array dimension as a tuple of integers. The
         length of the tuple is the number of dimensions in the array.

      ``"typestr"`` : string
         The array element type as a length 3 string. The first character
         gives byteorder, '<' for little-endian, '>' for big-endian, and
         '\|' for not applicable. The second character is the element type,
         'i' for signed integer, 'u' for unsigned integer, 'f' for floating
         point, and 'V' for an chunk of bytes. The third character gives the
         bytesize of the element, from '1' to '9' bytes. So, for example,
         "<u4" is an unsigned 4 byte little-endian integer, such as a
         32 bit pixel on a PC, while "\|V3" would represent a 24 bit pixel,
         which has no integer equivalent.

      ``"data"`` : tuple
         The physical buffer start address and a read-only flag as a length
         2 tuple. The address is an integer value, while the read-only flag
         is a bool—``False`` for writable, ``True`` for read-only.

      ``"strides"`` : tuple : (optional)
         Array stride information as a tuple of integers. It is required
	 only of non C-contiguous arrays. The tuple length must match
	 that of ``"shape"``.

      ``"parent"`` : object : (optional)
         The exporting object. It can be used to keep the parent object
         alive while its buffer is visible.

      ``"before"`` : callable : (optional)
         Callback invoked when the :class:`BufferProxy` instance
         exports the buffer. The callback is given one argument, the
	 ``"parent"`` object if given, otherwise ``None``.
         The callback is useful for setting a lock on the parent.

      ``"after"`` : callable : (optional)
         Callback invoked when an exported buffer is released.
         The callback is passed on argument, the ``"parent"`` object if given,
         otherwise None. The callback is useful for releasing a lock on the
         parent.
      
   The BufferProxy class supports subclassing, instance variables, and weak
   references.

   .. versionadded:: 1.8.0
   .. versionextended:: 1.9.2

   .. attribute:: parent

      | :sl:`Return wrapped exporting object.`
      | :sg:`parent -> Surface`
      | :sg:`parent -> <parent>`

      The :class:`Surface` which returned the :class:`BufferProxy` object or
      the object passed to a :class:`BufferProxy` call.

   .. attribute:: length

      | :sl:`The size, in bytes, of the exported buffer.`
      | :sg:`length -> int`

      The number of valid bytes of data exported. For discontinuous data,
      that is data which is not a single block of memory, the bytes within
      the gaps are excluded from the count. This property is equivalent to
      the ``Py_buffer`` C struct ``len`` field.

   .. attribute:: raw

      | :sl:`A copy of the exported buffer as a single block of bytes.`
      | :sg:`raw -> bytes`

      The buffer data as a ``str``/``bytes`` object.
      Any gaps in the exported data are removed.

   .. method:: write

      | :sl:`Write raw bytes to object buffer.`
      | :sg:`write(buffer, offset=0)`

      Overwrite bytes in the parent object's data. The data must be C or F
      contiguous, otherwise a ValueError is raised. Argument `buffer` is a
      ``str``/``bytes`` object. An optional offset gives a
      start position, in bytes, within the buffer where overwriting begins.
      If the offset is negative or greater that or equal to the buffer proxy's
      :attr:`length` value, an ``IndexException`` is raised.
      If ``len(buffer) > proxy.length + offset``, a ``ValueError`` is raised.


--- Contenu du fichier : color_list.rst.txt ---
.. include:: common.txt

Named Colors
============

.. raw:: html

    <style>
    .aliceblue {background-color: #f0f8ff; color: #f0f8ff;}
    .antiquewhite {background-color: #faebd7; color: #faebd7;}
    .antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}
    .antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}
    .antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}
    .antiquewhite4 {background-color: #8b8378; color: #8b8378;}
    .aqua {background-color: #00ffff; color: #00ffff;}
    .aquamarine {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine1 {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine2 {background-color: #76eec6; color: #76eec6;}
    .aquamarine3 {background-color: #66cdaa; color: #66cdaa;}
    .aquamarine4 {background-color: #458b74; color: #458b74;}
    .azure {background-color: #f0ffff; color: #f0ffff;}
    .azure1 {background-color: #f0ffff; color: #f0ffff;}
    .azure3 {background-color: #c1cdcd; color: #c1cdcd;}
    .azure2 {background-color: #e0eeee; color: #e0eeee;}
    .azure4 {background-color: #838b8b; color: #838b8b;}
    .beige {background-color: #f5f5dc; color: #f5f5dc;}
    .bisque {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque1 {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque2 {background-color: #eed5b7; color: #eed5b7;}
    .bisque3 {background-color: #cdb79e; color: #cdb79e;}
    .bisque4 {background-color: #8b7d6b; color: #8b7d6b;}
    .black {background-color: #000000; color: #000000;}
    .blanchedalmond {background-color: #ffebcd; color: #ffebcd;}
    .blue {background-color: #0000ff; color: #0000ff;}
    .blue1 {background-color: #0000ff; color: #0000ff;}
    .blue2 {background-color: #0000ee; color: #0000ee;}
    .blue3 {background-color: #0000cd; color: #0000cd;}
    .blue4 {background-color: #00008b; color: #00008b;}
    .blueviolet {background-color: #8a2be2; color: #8a2be2;}
    .brown {background-color: #a52a2a; color: #a52a2a;}
    .brown1 {background-color: #ff4040; color: #ff4040;}
    .brown2 {background-color: #ee3b3b; color: #ee3b3b;}
    .brown3 {background-color: #cd3333; color: #cd3333;}
    .brown4 {background-color: #8b2323; color: #8b2323;}
    .burlywood {background-color: #deb887; color: #deb887;}
    .burlywood1 {background-color: #ffd39b; color: #ffd39b;}
    .burlywood2 {background-color: #eec591; color: #eec591;}
    .burlywood3 {background-color: #cdaa7d; color: #cdaa7d;}
    .burlywood4 {background-color: #8b7355; color: #8b7355;}
    .cadetblue {background-color: #5f9ea0; color: #5f9ea0;}
    .cadetblue1 {background-color: #98f5ff; color: #98f5ff;}
    .cadetblue2 {background-color: #8ee5ee; color: #8ee5ee;}
    .cadetblue3 {background-color: #7ac5cd; color: #7ac5cd;}
    .cadetblue4 {background-color: #53868b; color: #53868b;}
    .chartreuse {background-color: #7fff00; color: #7fff00;}
    .chartreuse1 {background-color: #7fff00; color: #7fff00;}
    .chartreuse2 {background-color: #76ee00; color: #76ee00;}
    .chartreuse3 {background-color: #66cd00; color: #66cd00;}
    .chartreuse4 {background-color: #458b00; color: #458b00;}
    .chocolate {background-color: #d2691e; color: #d2691e;}
    .chocolate1 {background-color: #ff7f24; color: #ff7f24;}
    .chocolate2 {background-color: #ee7621; color: #ee7621;}
    .chocolate3 {background-color: #cd661d; color: #cd661d;}
    .chocolate4 {background-color: #8b4513; color: #8b4513;}
    .coral {background-color: #ff7f50; color: #ff7f50;}
    .coral1 {background-color: #ff7256; color: #ff7256;}
    .coral2 {background-color: #ee6a50; color: #ee6a50;}
    .coral3 {background-color: #cd5b45; color: #cd5b45;}
    .coral4 {background-color: #8b3e2f; color: #8b3e2f;}
    .cornflowerblue {background-color: #6495ed; color: #6495ed;}
    .cornsilk {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk1 {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk2 {background-color: #eee8cd; color: #eee8cd;}
    .cornsilk3 {background-color: #cdc8b1; color: #cdc8b1;}
    .cornsilk4 {background-color: #8b8878; color: #8b8878;}
    .crimson {background-color: #dc143c; color: #dc143c;}
    .cyan {background-color: #00ffff; color: #00ffff;}
    .cyan1 {background-color: #00ffff; color: #00ffff;}
    .cyan2 {background-color: #00eeee; color: #00eeee;}
    .cyan3 {background-color: #00cdcd; color: #00cdcd;}
    .cyan4 {background-color: #008b8b; color: #008b8b;}
    .darkblue {background-color: #00008b; color: #00008b;}
    .darkcyan {background-color: #008b8b; color: #008b8b;}
    .darkgoldenrod {background-color: #b8860b; color: #b8860b;}
    .darkgoldenrod1 {background-color: #ffb90f; color: #ffb90f;}
    .darkgoldenrod2 {background-color: #eead0e; color: #eead0e;}
    .darkgoldenrod3 {background-color: #cd950c; color: #cd950c;}
    .darkgoldenrod4 {background-color: #8b6508; color: #8b6508;}
    .darkgray {background-color: #a9a9a9; color: #a9a9a9;}
    .darkgreen {background-color: #006400; color: #006400;}
    .darkgrey {background-color: #a9a9a9; color: #a9a9a9;}
    .darkkhaki {background-color: #bdb76b; color: #bdb76b;}
    .darkmagenta {background-color: #8b008b; color: #8b008b;}
    .darkolivegreen {background-color: #556b2f; color: #556b2f;}
    .darkolivegreen1 {background-color: #caff70; color: #caff70;}
    .darkolivegreen2 {background-color: #bcee68; color: #bcee68;}
    .darkolivegreen3 {background-color: #a2cd5a; color: #a2cd5a;}
    .darkolivegreen4 {background-color: #6e8b3d; color: #6e8b3d;}
    .darkorange {background-color: #ff8c00; color: #ff8c00;}
    .darkorange1 {background-color: #ff7f00; color: #ff7f00;}
    .darkorange2 {background-color: #ee7600; color: #ee7600;}
    .darkorange3 {background-color: #cd6600; color: #cd6600;}
    .darkorange4 {background-color: #8b4500; color: #8b4500;}
    .darkorchid {background-color: #9932cc; color: #9932cc;}
    .darkorchid1 {background-color: #bf3eff; color: #bf3eff;}
    .darkorchid2 {background-color: #b23aee; color: #b23aee;}
    .darkorchid3 {background-color: #9a32cd; color: #9a32cd;}
    .darkorchid4 {background-color: #68228b; color: #68228b;}
    .darkred {background-color: #8b0000; color: #8b0000;}
    .darksalmon {background-color: #e9967a; color: #e9967a;}
    .darkseagreen {background-color: #8fbc8f; color: #8fbc8f;}
    .darkseagreen1 {background-color: #c1ffc1; color: #c1ffc1;}
    .darkseagreen2 {background-color: #b4eeb4; color: #b4eeb4;}
    .darkseagreen3 {background-color: #9bcd9b; color: #9bcd9b;}
    .darkseagreen4 {background-color: #698b69; color: #698b69;}
    .darkslateblue {background-color: #483d8b; color: #483d8b;}
    .darkslategray {background-color: #2f4f4f; color: #2f4f4f;}
    .darkslategray1 {background-color: #97ffff; color: #97ffff;}
    .darkslategray2 {background-color: #8deeee; color: #8deeee;}
    .darkslategray3 {background-color: #79cdcd; color: #79cdcd;}
    .darkslategray4 {background-color: #528b8b; color: #528b8b;}
    .darkslategrey {background-color: #2f4f4f; color: #2f4f4f;}
    .darkturquoise {background-color: #00ced1; color: #00ced1;}
    .darkviolet {background-color: #9400d3; color: #9400d3;}
    .deeppink {background-color: #ff1493; color: #ff1493;}
    .deeppink1 {background-color: #ff1493; color: #ff1493;}
    .deeppink2 {background-color: #ee1289; color: #ee1289;}
    .deeppink3 {background-color: #cd1076; color: #cd1076;}
    .deeppink4 {background-color: #8b0a50; color: #8b0a50;}
    .deepskyblue {background-color: #00bfff; color: #00bfff;}
    .deepskyblue1 {background-color: #00bfff; color: #00bfff;}
    .deepskyblue2 {background-color: #00b2ee; color: #00b2ee;}
    .deepskyblue3 {background-color: #009acd; color: #009acd;}
    .deepskyblue4 {background-color: #00688b; color: #00688b;}
    .dimgray {background-color: #696969; color: #696969;}
    .dimgrey {background-color: #696969; color: #696969;}
    .dodgerblue {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue1 {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue2 {background-color: #1c86ee; color: #1c86ee;}
    .dodgerblue3 {background-color: #1874cd; color: #1874cd;}
    .dodgerblue4 {background-color: #104e8b; color: #104e8b;}
    .firebrick {background-color: #b22222; color: #b22222;}
    .firebrick1 {background-color: #ff3030; color: #ff3030;}
    .firebrick2 {background-color: #ee2c2c; color: #ee2c2c;}
    .firebrick3 {background-color: #cd2626; color: #cd2626;}
    .firebrick4 {background-color: #8b1a1a; color: #8b1a1a;}
    .floralwhite {background-color: #fffaf0; color: #fffaf0;}
    .forestgreen {background-color: #228b22; color: #228b22;}
    .fuchsia {background-color: #ff00ff; color: #ff00ff;}
    .gainsboro {background-color: #dcdcdc; color: #dcdcdc;}
    .ghostwhite {background-color: #f8f8ff; color: #f8f8ff;}
    .gold {background-color: #ffd700; color: #ffd700;}
    .gold1 {background-color: #ffd700; color: #ffd700;}
    .gold2 {background-color: #eec900; color: #eec900;}
    .gold3 {background-color: #cdad00; color: #cdad00;}
    .gold4 {background-color: #8b7500; color: #8b7500;}
    .goldenrod {background-color: #daa520; color: #daa520;}
    .goldenrod1 {background-color: #ffc125; color: #ffc125;}
    .goldenrod2 {background-color: #eeb422; color: #eeb422;}
    .goldenrod3 {background-color: #cd9b1d; color: #cd9b1d;}
    .goldenrod4 {background-color: #8b6914; color: #8b6914;}
    .gray {background-color: #bebebe; color: #bebebe;}
    .gray0 {background-color: #000000; color: #000000;}
    .gray1 {background-color: #030303; color: #030303;}
    .gray2 {background-color: #050505; color: #050505;}
    .gray3 {background-color: #080808; color: #080808;}
    .gray4 {background-color: #0a0a0a; color: #0a0a0a;}
    .gray5 {background-color: #0d0d0d; color: #0d0d0d;}
    .gray6 {background-color: #0f0f0f; color: #0f0f0f;}
    .gray7 {background-color: #121212; color: #121212;}
    .gray8 {background-color: #141414; color: #141414;}
    .gray9 {background-color: #171717; color: #171717;}
    .gray10 {background-color: #1a1a1a; color: #1a1a1a;}
    .gray11 {background-color: #1c1c1c; color: #1c1c1c;}
    .gray12 {background-color: #1f1f1f; color: #1f1f1f;}
    .gray13 {background-color: #212121; color: #212121;}
    .gray14 {background-color: #242424; color: #242424;}
    .gray15 {background-color: #262626; color: #262626;}
    .gray16 {background-color: #292929; color: #292929;}
    .gray17 {background-color: #2b2b2b; color: #2b2b2b;}
    .gray18 {background-color: #2e2e2e; color: #2e2e2e;}
    .gray19 {background-color: #303030; color: #303030;}
    .gray20 {background-color: #333333; color: #333333;}
    .gray21 {background-color: #363636; color: #363636;}
    .gray22 {background-color: #383838; color: #383838;}
    .gray23 {background-color: #3b3b3b; color: #3b3b3b;}
    .gray24 {background-color: #3d3d3d; color: #3d3d3d;}
    .gray25 {background-color: #404040; color: #404040;}
    .gray26 {background-color: #424242; color: #424242;}
    .gray27 {background-color: #454545; color: #454545;}
    .gray28 {background-color: #474747; color: #474747;}
    .gray29 {background-color: #4a4a4a; color: #4a4a4a;}
    .gray30 {background-color: #4d4d4d; color: #4d4d4d;}
    .gray31 {background-color: #4f4f4f; color: #4f4f4f;}
    .gray32 {background-color: #525252; color: #525252;}
    .gray33 {background-color: #545454; color: #545454;}
    .gray34 {background-color: #575757; color: #575757;}
    .gray35 {background-color: #595959; color: #595959;}
    .gray36 {background-color: #5c5c5c; color: #5c5c5c;}
    .gray37 {background-color: #5e5e5e; color: #5e5e5e;}
    .gray38 {background-color: #616161; color: #616161;}
    .gray39 {background-color: #636363; color: #636363;}
    .gray40 {background-color: #666666; color: #666666;}
    .gray41 {background-color: #696969; color: #696969;}
    .gray42 {background-color: #6b6b6b; color: #6b6b6b;}
    .gray43 {background-color: #6e6e6e; color: #6e6e6e;}
    .gray44 {background-color: #707070; color: #707070;}
    .gray45 {background-color: #737373; color: #737373;}
    .gray46 {background-color: #757575; color: #757575;}
    .gray47 {background-color: #787878; color: #787878;}
    .gray48 {background-color: #7a7a7a; color: #7a7a7a;}
    .gray49 {background-color: #7d7d7d; color: #7d7d7d;}
    .gray50 {background-color: #7f7f7f; color: #7f7f7f;}
    .gray51 {background-color: #828282; color: #828282;}
    .gray52 {background-color: #858585; color: #858585;}
    .gray53 {background-color: #878787; color: #878787;}
    .gray54 {background-color: #8a8a8a; color: #8a8a8a;}
    .gray55 {background-color: #8c8c8c; color: #8c8c8c;}
    .gray56 {background-color: #8f8f8f; color: #8f8f8f;}
    .gray57 {background-color: #919191; color: #919191;}
    .gray58 {background-color: #949494; color: #949494;}
    .gray59 {background-color: #969696; color: #969696;}
    .gray60 {background-color: #999999; color: #999999;}
    .gray61 {background-color: #9c9c9c; color: #9c9c9c;}
    .gray62 {background-color: #9e9e9e; color: #9e9e9e;}
    .gray63 {background-color: #a1a1a1; color: #a1a1a1;}
    .gray64 {background-color: #a3a3a3; color: #a3a3a3;}
    .gray65 {background-color: #a6a6a6; color: #a6a6a6;}
    .gray66 {background-color: #a8a8a8; color: #a8a8a8;}
    .gray67 {background-color: #ababab; color: #ababab;}
    .gray68 {background-color: #adadad; color: #adadad;}
    .gray69 {background-color: #b0b0b0; color: #b0b0b0;}
    .gray70 {background-color: #b3b3b3; color: #b3b3b3;}
    .gray71 {background-color: #b5b5b5; color: #b5b5b5;}
    .gray72 {background-color: #b8b8b8; color: #b8b8b8;}
    .gray73 {background-color: #bababa; color: #bababa;}
    .gray74 {background-color: #bdbdbd; color: #bdbdbd;}
    .gray75 {background-color: #bfbfbf; color: #bfbfbf;}
    .gray76 {background-color: #c2c2c2; color: #c2c2c2;}
    .gray77 {background-color: #c4c4c4; color: #c4c4c4;}
    .gray78 {background-color: #c7c7c7; color: #c7c7c7;}
    .gray79 {background-color: #c9c9c9; color: #c9c9c9;}
    .gray80 {background-color: #cccccc; color: #cccccc;}
    .gray81 {background-color: #cfcfcf; color: #cfcfcf;}
    .gray82 {background-color: #d1d1d1; color: #d1d1d1;}
    .gray83 {background-color: #d4d4d4; color: #d4d4d4;}
    .gray84 {background-color: #d6d6d6; color: #d6d6d6;}
    .gray85 {background-color: #d9d9d9; color: #d9d9d9;}
    .gray86 {background-color: #dbdbdb; color: #dbdbdb;}
    .gray87 {background-color: #dedede; color: #dedede;}
    .gray88 {background-color: #e0e0e0; color: #e0e0e0;}
    .gray89 {background-color: #e3e3e3; color: #e3e3e3;}
    .gray90 {background-color: #e5e5e5; color: #e5e5e5;}
    .gray91 {background-color: #e8e8e8; color: #e8e8e8;}
    .gray92 {background-color: #ebebeb; color: #ebebeb;}
    .gray93 {background-color: #ededed; color: #ededed;}
    .gray94 {background-color: #f0f0f0; color: #f0f0f0;}
    .gray95 {background-color: #f2f2f2; color: #f2f2f2;}
    .gray96 {background-color: #f5f5f5; color: #f5f5f5;}
    .gray97 {background-color: #f7f7f7; color: #f7f7f7;}
    .gray98 {background-color: #fafafa; color: #fafafa;}
    .gray99 {background-color: #fcfcfc; color: #fcfcfc;}
    .gray100 {background-color: #ffffff; color: #ffffff;}
    .green {background-color: #00ff00; color: #00ff00;}
    .green1 {background-color: #00ff00; color: #00ff00;}
    .green2 {background-color: #00ee00; color: #00ee00;}
    .green3 {background-color: #00cd00; color: #00cd00;}
    .green4 {background-color: #008b00; color: #008b00;}
    .greenyellow {background-color: #adff2f; color: #adff2f;}
    .grey {background-color: #bebebe; color: #bebebe;}
    .grey0 {background-color: #000000; color: #000000;}
    .grey1 {background-color: #030303; color: #030303;}
    .grey2 {background-color: #050505; color: #050505;}
    .grey3 {background-color: #080808; color: #080808;}
    .grey4 {background-color: #0a0a0a; color: #0a0a0a;}
    .grey5 {background-color: #0d0d0d; color: #0d0d0d;}
    .grey6 {background-color: #0f0f0f; color: #0f0f0f;}
    .grey7 {background-color: #121212; color: #121212;}
    .grey8 {background-color: #141414; color: #141414;}
    .grey9 {background-color: #171717; color: #171717;}
    .grey10 {background-color: #1a1a1a; color: #1a1a1a;}
    .grey11 {background-color: #1c1c1c; color: #1c1c1c;}
    .grey12 {background-color: #1f1f1f; color: #1f1f1f;}
    .grey13 {background-color: #212121; color: #212121;}
    .grey14 {background-color: #242424; color: #242424;}
    .grey15 {background-color: #262626; color: #262626;}
    .grey16 {background-color: #292929; color: #292929;}
    .grey17 {background-color: #2b2b2b; color: #2b2b2b;}
    .grey18 {background-color: #2e2e2e; color: #2e2e2e;}
    .grey19 {background-color: #303030; color: #303030;}
    .grey20 {background-color: #333333; color: #333333;}
    .grey21 {background-color: #363636; color: #363636;}
    .grey22 {background-color: #383838; color: #383838;}
    .grey23 {background-color: #3b3b3b; color: #3b3b3b;}
    .grey24 {background-color: #3d3d3d; color: #3d3d3d;}
    .grey25 {background-color: #404040; color: #404040;}
    .grey26 {background-color: #424242; color: #424242;}
    .grey27 {background-color: #454545; color: #454545;}
    .grey28 {background-color: #474747; color: #474747;}
    .grey29 {background-color: #4a4a4a; color: #4a4a4a;}
    .grey30 {background-color: #4d4d4d; color: #4d4d4d;}
    .grey31 {background-color: #4f4f4f; color: #4f4f4f;}
    .grey32 {background-color: #525252; color: #525252;}
    .grey33 {background-color: #545454; color: #545454;}
    .grey34 {background-color: #575757; color: #575757;}
    .grey35 {background-color: #595959; color: #595959;}
    .grey36 {background-color: #5c5c5c; color: #5c5c5c;}
    .grey37 {background-color: #5e5e5e; color: #5e5e5e;}
    .grey38 {background-color: #616161; color: #616161;}
    .grey39 {background-color: #636363; color: #636363;}
    .grey40 {background-color: #666666; color: #666666;}
    .grey41 {background-color: #696969; color: #696969;}
    .grey42 {background-color: #6b6b6b; color: #6b6b6b;}
    .grey43 {background-color: #6e6e6e; color: #6e6e6e;}
    .grey44 {background-color: #707070; color: #707070;}
    .grey45 {background-color: #737373; color: #737373;}
    .grey46 {background-color: #757575; color: #757575;}
    .grey47 {background-color: #787878; color: #787878;}
    .grey48 {background-color: #7a7a7a; color: #7a7a7a;}
    .grey49 {background-color: #7d7d7d; color: #7d7d7d;}
    .grey50 {background-color: #7f7f7f; color: #7f7f7f;}
    .grey51 {background-color: #828282; color: #828282;}
    .grey52 {background-color: #858585; color: #858585;}
    .grey53 {background-color: #878787; color: #878787;}
    .grey54 {background-color: #8a8a8a; color: #8a8a8a;}
    .grey55 {background-color: #8c8c8c; color: #8c8c8c;}
    .grey56 {background-color: #8f8f8f; color: #8f8f8f;}
    .grey57 {background-color: #919191; color: #919191;}
    .grey58 {background-color: #949494; color: #949494;}
    .grey59 {background-color: #969696; color: #969696;}
    .grey60 {background-color: #999999; color: #999999;}
    .grey61 {background-color: #9c9c9c; color: #9c9c9c;}
    .grey62 {background-color: #9e9e9e; color: #9e9e9e;}
    .grey63 {background-color: #a1a1a1; color: #a1a1a1;}
    .grey64 {background-color: #a3a3a3; color: #a3a3a3;}
    .grey65 {background-color: #a6a6a6; color: #a6a6a6;}
    .grey66 {background-color: #a8a8a8; color: #a8a8a8;}
    .grey67 {background-color: #ababab; color: #ababab;}
    .grey68 {background-color: #adadad; color: #adadad;}
    .grey69 {background-color: #b0b0b0; color: #b0b0b0;}
    .grey70 {background-color: #b3b3b3; color: #b3b3b3;}
    .grey71 {background-color: #b5b5b5; color: #b5b5b5;}
    .grey72 {background-color: #b8b8b8; color: #b8b8b8;}
    .grey73 {background-color: #bababa; color: #bababa;}
    .grey74 {background-color: #bdbdbd; color: #bdbdbd;}
    .grey75 {background-color: #bfbfbf; color: #bfbfbf;}
    .grey76 {background-color: #c2c2c2; color: #c2c2c2;}
    .grey77 {background-color: #c4c4c4; color: #c4c4c4;}
    .grey78 {background-color: #c7c7c7; color: #c7c7c7;}
    .grey79 {background-color: #c9c9c9; color: #c9c9c9;}
    .grey80 {background-color: #cccccc; color: #cccccc;}
    .grey81 {background-color: #cfcfcf; color: #cfcfcf;}
    .grey82 {background-color: #d1d1d1; color: #d1d1d1;}
    .grey83 {background-color: #d4d4d4; color: #d4d4d4;}
    .grey84 {background-color: #d6d6d6; color: #d6d6d6;}
    .grey85 {background-color: #d9d9d9; color: #d9d9d9;}
    .grey86 {background-color: #dbdbdb; color: #dbdbdb;}
    .grey87 {background-color: #dedede; color: #dedede;}
    .grey88 {background-color: #e0e0e0; color: #e0e0e0;}
    .grey89 {background-color: #e3e3e3; color: #e3e3e3;}
    .grey90 {background-color: #e5e5e5; color: #e5e5e5;}
    .grey91 {background-color: #e8e8e8; color: #e8e8e8;}
    .grey92 {background-color: #ebebeb; color: #ebebeb;}
    .grey93 {background-color: #ededed; color: #ededed;}
    .grey94 {background-color: #f0f0f0; color: #f0f0f0;}
    .grey95 {background-color: #f2f2f2; color: #f2f2f2;}
    .grey96 {background-color: #f5f5f5; color: #f5f5f5;}
    .grey97 {background-color: #f7f7f7; color: #f7f7f7;}
    .grey98 {background-color: #fafafa; color: #fafafa;}
    .grey99 {background-color: #fcfcfc; color: #fcfcfc;}
    .grey100 {background-color: #ffffff; color: #ffffff;}
    .honeydew {background-color: #f0fff0; color: #f0fff0;}
    .honeydew1 {background-color: #f0fff0; color: #f0fff0;}
    .honeydew2 {background-color: #e0eee0; color: #e0eee0;}
    .honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}
    .honeydew4 {background-color: #838b83; color: #838b83;}
    .hotpink {background-color: #ff69b4; color: #ff69b4;}
    .hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}
    .hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}
    .hotpink3 {background-color: #cd6090; color: #cd6090;}
    .hotpink4 {background-color: #8b3a62; color: #8b3a62;}
    .indianred {background-color: #cd5c5c; color: #cd5c5c;}
    .indianred1 {background-color: #ff6a6a; color: #ff6a6a;}
    .indianred2 {background-color: #ee6363; color: #ee6363;}
    .indianred3 {background-color: #cd5555; color: #cd5555;}
    .indianred4 {background-color: #8b3a3a; color: #8b3a3a;}
    .indigo {background-color: #4b0082; color: #4b0082;}
    .ivory {background-color: #fffff0; color: #fffff0;}
    .ivory1 {background-color: #fffff0; color: #fffff0;}
    .ivory2 {background-color: #eeeee0; color: #eeeee0;}
    .ivory3 {background-color: #cdcdc1; color: #cdcdc1;}
    .ivory4 {background-color: #8b8b83; color: #8b8b83;}
    .khaki {background-color: #f0e68c; color: #f0e68c;}
    .khaki1 {background-color: #fff68f; color: #fff68f;}
    .khaki2 {background-color: #eee685; color: #eee685;}
    .khaki3 {background-color: #cdc673; color: #cdc673;}
    .khaki4 {background-color: #8b864e; color: #8b864e;}
    .lavender {background-color: #e6e6fa; color: #e6e6fa;}
    .lavenderblush {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}
    .lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}
    .lavenderblush4 {background-color: #8b8386; color: #8b8386;}
    .lawngreen {background-color: #7cfc00; color: #7cfc00;}
    .lemonchiffon {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon1 {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}
    .lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}
    .lemonchiffon4 {background-color: #8b8970; color: #8b8970;}
    .lightblue {background-color: #add8e6; color: #add8e6;}
    .lightblue1 {background-color: #bfefff; color: #bfefff;}
    .lightblue2 {background-color: #b2dfee; color: #b2dfee;}
    .lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}
    .lightblue4 {background-color: #68838b; color: #68838b;}
    .lightcoral {background-color: #f08080; color: #f08080;}
    .lightcyan {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan1 {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan2 {background-color: #d1eeee; color: #d1eeee;}
    .lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}
    .lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}
    .lightgoldenrod {background-color: #eedd82; color: #eedd82;}
    .lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}
    .lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}
    .lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}
    .lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}
    .lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}
    .lightgray {background-color: #d3d3d3; color: #d3d3d3;}
    .lightgreen {background-color: #90ee90; color: #90ee90;}
    .lightgrey {background-color: #d3d3d3; color: #d3d3d3;}
    .lightpink {background-color: #ffb6c1; color: #ffb6c1;}
    .lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}
    .lightpink2 {background-color: #eea2ad; color: #eea2ad;}
    .lightpink3 {background-color: #cd8c95; color: #cd8c95;}
    .lightpink4 {background-color: #8b5f65; color: #8b5f65;}
    .lightsalmon {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon2 {background-color: #ee9572; color: #ee9572;}
    .lightsalmon3 {background-color: #cd8162; color: #cd8162;}
    .lightsalmon4 {background-color: #8b5742; color: #8b5742;}
    .lightseagreen {background-color: #20b2aa; color: #20b2aa;}
    .lightskyblue {background-color: #87cefa; color: #87cefa;}
    .lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}
    .lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}
    .lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}
    .lightskyblue4 {background-color: #607b8b; color: #607b8b;}
    .lightslateblue {background-color: #8470ff; color: #8470ff;}
    .lightslategray {background-color: #778899; color: #778899;}
    .lightslategrey {background-color: #778899; color: #778899;}
    .lightsteelblue {background-color: #b0c4de; color: #b0c4de;}
    .lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}
    .lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}
    .lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}
    .lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}
    .lightyellow {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow1 {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow2 {background-color: #eeeed1; color: #eeeed1;}
    .lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}
    .lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}
    .linen {background-color: #faf0e6; color: #faf0e6;}
    .limegreen {background-color: #32cd32; color: #32cd32;}
    .lime {background-color: #00ff00; color: #00ff00;}
    .magenta {background-color: #ff00ff; color: #ff00ff;}
    .magenta1 {background-color: #ff00ff; color: #ff00ff;}
    .magenta2 {background-color: #ee00ee; color: #ee00ee;}
    .magenta3 {background-color: #cd00cd; color: #cd00cd;}
    .magenta4 {background-color: #8b008b; color: #8b008b;}
    .maroon {background-color: #b03060; color: #b03060;}
    .maroon1 {background-color: #ff34b3; color: #ff34b3;}
    .maroon2 {background-color: #ee30a7; color: #ee30a7;}
    .maroon3 {background-color: #cd2990; color: #cd2990;}
    .maroon4 {background-color: #8b1c62; color: #8b1c62;}
    .mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}
    .mediumblue {background-color: #0000cd; color: #0000cd;}
    .mediumorchid {background-color: #ba55d3; color: #ba55d3;}
    .mediumorchid1 {background-color: #e066ff; color: #e066ff;}
    .mediumorchid2 {background-color: #d15fee; color: #d15fee;}
    .mediumorchid3 {background-color: #b452cd; color: #b452cd;}
    .mediumorchid4 {background-color: #7a378b; color: #7a378b;}
    .mediumpurple {background-color: #9370db; color: #9370db;}
    .mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}
    .mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}
    .mediumpurple3 {background-color: #8968cd; color: #8968cd;}
    .mediumpurple4 {background-color: #5d478b; color: #5d478b;}
    .mediumseagreen {background-color: #3cb371; color: #3cb371;}
    .mediumslateblue {background-color: #7b68ee; color: #7b68ee;}
    .mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}
    .mediumturquoise {background-color: #48d1cc; color: #48d1cc;}
    .mediumvioletred {background-color: #c71585; color: #c71585;}
    .midnightblue {background-color: #191970; color: #191970;}
    .mintcream {background-color: #f5fffa; color: #f5fffa;}
    .mistyrose {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose2 {background-color: #eed5d2; color: #eed5d2;}
    .mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}
    .mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}
    .moccasin {background-color: #ffe4b5; color: #ffe4b5;}
    .navajowhite {background-color: #ffdead; color: #ffdead;}
    .navajowhite1 {background-color: #ffdead; color: #ffdead;}
    .navajowhite2 {background-color: #eecfa1; color: #eecfa1;}
    .navajowhite3 {background-color: #cdb38b; color: #cdb38b;}
    .navajowhite4 {background-color: #8b795e; color: #8b795e;}
    .navy {background-color: #000080; color: #000080;}
    .navyblue {background-color: #000080; color: #000080;}
    .oldlace {background-color: #fdf5e6; color: #fdf5e6;}
    .olive {background-color: #808000; color: #808000;}
    .olivedrab {background-color: #6b8e23; color: #6b8e23;}
    .olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}
    .olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}
    .olivedrab3 {background-color: #9acd32; color: #9acd32;}
    .olivedrab4 {background-color: #698b22; color: #698b22;}
    .orange {background-color: #ffa500; color: #ffa500;}
    .orange1 {background-color: #ffa500; color: #ffa500;}
    .orange2 {background-color: #ee9a00; color: #ee9a00;}
    .orange3 {background-color: #cd8500; color: #cd8500;}
    .orange4 {background-color: #8b5a00; color: #8b5a00;}
    .orangered {background-color: #ff4500; color: #ff4500;}
    .orangered1 {background-color: #ff4500; color: #ff4500;}
    .orangered2 {background-color: #ee4000; color: #ee4000;}
    .orangered3 {background-color: #cd3700; color: #cd3700;}
    .orangered4 {background-color: #8b2500; color: #8b2500;}
    .orchid {background-color: #da70d6; color: #da70d6;}
    .orchid1 {background-color: #ff83fa; color: #ff83fa;}
    .orchid2 {background-color: #ee7ae9; color: #ee7ae9;}
    .orchid3 {background-color: #cd69c9; color: #cd69c9;}
    .orchid4 {background-color: #8b4789; color: #8b4789;}
    .palegreen {background-color: #98fb98; color: #98fb98;}
    .palegreen1 {background-color: #9aff9a; color: #9aff9a;}
    .palegreen2 {background-color: #90ee90; color: #90ee90;}
    .palegreen3 {background-color: #7ccd7c; color: #7ccd7c;}
    .palegreen4 {background-color: #548b54; color: #548b54;}
    .palegoldenrod {background-color: #eee8aa; color: #eee8aa;}
    .paleturquoise {background-color: #afeeee; color: #afeeee;}
    .paleturquoise1 {background-color: #bbffff; color: #bbffff;}
    .paleturquoise2 {background-color: #aeeeee; color: #aeeeee;}
    .paleturquoise3 {background-color: #96cdcd; color: #96cdcd;}
    .paleturquoise4 {background-color: #668b8b; color: #668b8b;}
    .palevioletred {background-color: #db7093; color: #db7093;}
    .palevioletred1 {background-color: #ff82ab; color: #ff82ab;}
    .palevioletred2 {background-color: #ee799f; color: #ee799f;}
    .palevioletred3 {background-color: #cd6889; color: #cd6889;}
    .palevioletred4 {background-color: #8b475d; color: #8b475d;}
    .papayawhip {background-color: #ffefd5; color: #ffefd5;}
    .peachpuff {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff1 {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff2 {background-color: #eecbad; color: #eecbad;}
    .peachpuff3 {background-color: #cdaf95; color: #cdaf95;}
    .peachpuff4 {background-color: #8b7765; color: #8b7765;}
    .peru {background-color: #cd853f; color: #cd853f;}
    .pink {background-color: #ffc0cb; color: #ffc0cb;}
    .pink1 {background-color: #ffb5c5; color: #ffb5c5;}
    .pink2 {background-color: #eea9b8; color: #eea9b8;}
    .pink3 {background-color: #cd919e; color: #cd919e;}
    .pink4 {background-color: #8b636c; color: #8b636c;}
    .plum {background-color: #dda0dd; color: #dda0dd;}
    .plum1 {background-color: #ffbbff; color: #ffbbff;}
    .plum2 {background-color: #eeaeee; color: #eeaeee;}
    .plum3 {background-color: #cd96cd; color: #cd96cd;}
    .plum4 {background-color: #8b668b; color: #8b668b;}
    .powderblue {background-color: #b0e0e6; color: #b0e0e6;}
    .purple {background-color: #a020f0; color: #a020f0;}
    .purple1 {background-color: #9b30ff; color: #9b30ff;}
    .purple2 {background-color: #912cee; color: #912cee;}
    .purple3 {background-color: #7d26cd; color: #7d26cd;}
    .purple4 {background-color: #551a8b; color: #551a8b;}
    .red {background-color: #ff0000; color: #ff0000;}
    .red1 {background-color: #ff0000; color: #ff0000;}
    .red2 {background-color: #ee0000; color: #ee0000;}
    .red3 {background-color: #cd0000; color: #cd0000;}
    .red4 {background-color: #8b0000; color: #8b0000;}
    .rosybrown {background-color: #bc8f8f; color: #bc8f8f;}
    .rosybrown1 {background-color: #ffc1c1; color: #ffc1c1;}
    .rosybrown2 {background-color: #eeb4b4; color: #eeb4b4;}
    .rosybrown3 {background-color: #cd9b9b; color: #cd9b9b;}
    .rosybrown4 {background-color: #8b6969; color: #8b6969;}
    .royalblue {background-color: #4169e1; color: #4169e1;}
    .royalblue1 {background-color: #4876ff; color: #4876ff;}
    .royalblue2 {background-color: #436eee; color: #436eee;}
    .royalblue3 {background-color: #3a5fcd; color: #3a5fcd;}
    .royalblue4 {background-color: #27408b; color: #27408b;}
    .salmon {background-color: #fa8072; color: #fa8072;}
    .salmon1 {background-color: #ff8c69; color: #ff8c69;}
    .salmon2 {background-color: #ee8262; color: #ee8262;}
    .salmon3 {background-color: #cd7054; color: #cd7054;}
    .salmon4 {background-color: #8b4c39; color: #8b4c39;}
    .saddlebrown {background-color: #8b4513; color: #8b4513;}
    .sandybrown {background-color: #f4a460; color: #f4a460;}
    .seagreen {background-color: #2e8b57; color: #2e8b57;}
    .seagreen1 {background-color: #54ff9f; color: #54ff9f;}
    .seagreen2 {background-color: #4eee94; color: #4eee94;}
    .seagreen3 {background-color: #43cd80; color: #43cd80;}
    .seagreen4 {background-color: #2e8b57; color: #2e8b57;}
    .seashell {background-color: #fff5ee; color: #fff5ee;}
    .seashell1 {background-color: #fff5ee; color: #fff5ee;}
    .seashell2 {background-color: #eee5de; color: #eee5de;}
    .seashell3 {background-color: #cdc5bf; color: #cdc5bf;}
    .seashell4 {background-color: #8b8682; color: #8b8682;}
    .sienna {background-color: #a0522d; color: #a0522d;}
    .sienna1 {background-color: #ff8247; color: #ff8247;}
    .sienna2 {background-color: #ee7942; color: #ee7942;}
    .sienna3 {background-color: #cd6839; color: #cd6839;}
    .sienna4 {background-color: #8b4726; color: #8b4726;}
    .silver {background-color: #c0c0c0; color: #c0c0c0;}
    .skyblue {background-color: #87ceeb; color: #87ceeb;}
    .skyblue1 {background-color: #87ceff; color: #87ceff;}
    .skyblue2 {background-color: #7ec0ee; color: #7ec0ee;}
    .skyblue3 {background-color: #6ca6cd; color: #6ca6cd;}
    .skyblue4 {background-color: #4a708b; color: #4a708b;}
    .slateblue {background-color: #6a5acd; color: #6a5acd;}
    .slateblue1 {background-color: #836fff; color: #836fff;}
    .slateblue2 {background-color: #7a67ee; color: #7a67ee;}
    .slateblue3 {background-color: #6959cd; color: #6959cd;}
    .slateblue4 {background-color: #473c8b; color: #473c8b;}
    .slategray {background-color: #708090; color: #708090;}
    .slategray1 {background-color: #c6e2ff; color: #c6e2ff;}
    .slategray2 {background-color: #b9d3ee; color: #b9d3ee;}
    .slategray3 {background-color: #9fb6cd; color: #9fb6cd;}
    .slategray4 {background-color: #6c7b8b; color: #6c7b8b;}
    .slategrey {background-color: #708090; color: #708090;}
    .snow {background-color: #fffafa; color: #fffafa;}
    .snow1 {background-color: #fffafa; color: #fffafa;}
    .snow2 {background-color: #eee9e9; color: #eee9e9;}
    .snow3 {background-color: #cdc9c9; color: #cdc9c9;}
    .snow4 {background-color: #8b8989; color: #8b8989;}
    .springgreen {background-color: #00ff7f; color: #00ff7f;}
    .springgreen1 {background-color: #00ff7f; color: #00ff7f;}
    .springgreen2 {background-color: #00ee76; color: #00ee76;}
    .springgreen3 {background-color: #00cd66; color: #00cd66;}
    .springgreen4 {background-color: #008b45; color: #008b45;}
    .steelblue {background-color: #4682b4; color: #4682b4;}
    .steelblue1 {background-color: #63b8ff; color: #63b8ff;}
    .steelblue2 {background-color: #5cacee; color: #5cacee;}
    .steelblue3 {background-color: #4f94cd; color: #4f94cd;}
    .steelblue4 {background-color: #36648b; color: #36648b;}
    .tan {background-color: #d2b48c; color: #d2b48c;}
    .tan1 {background-color: #ffa54f; color: #ffa54f;}
    .tan2 {background-color: #ee9a49; color: #ee9a49;}
    .tan3 {background-color: #cd853f; color: #cd853f;}
    .tan4 {background-color: #8b5a2b; color: #8b5a2b;}
    .teal {background-color: #008080; color: #008080;}
    .thistle {background-color: #d8bfd8; color: #d8bfd8;}
    .thistle1 {background-color: #ffe1ff; color: #ffe1ff;}
    .thistle2 {background-color: #eed2ee; color: #eed2ee;}
    .thistle3 {background-color: #cdb5cd; color: #cdb5cd;}
    .thistle4 {background-color: #8b7b8b; color: #8b7b8b;}
    .tomato {background-color: #ff6347; color: #ff6347;}
    .tomato1 {background-color: #ff6347; color: #ff6347;}
    .tomato2 {background-color: #ee5c42; color: #ee5c42;}
    .tomato3 {background-color: #cd4f39; color: #cd4f39;}
    .tomato4 {background-color: #8b3626; color: #8b3626;}
    .turquoise {background-color: #40e0d0; color: #40e0d0;}
    .turquoise1 {background-color: #00f5ff; color: #00f5ff;}
    .turquoise2 {background-color: #00e5ee; color: #00e5ee;}
    .turquoise3 {background-color: #00c5cd; color: #00c5cd;}
    .turquoise4 {background-color: #00868b; color: #00868b;}
    .violet {background-color: #ee82ee; color: #ee82ee;}
    .violetred {background-color: #d02090; color: #d02090;}
    .violetred1 {background-color: #ff3e96; color: #ff3e96;}
    .violetred2 {background-color: #ee3a8c; color: #ee3a8c;}
    .violetred3 {background-color: #cd3278; color: #cd3278;}
    .violetred4 {background-color: #8b2252; color: #8b2252;}
    .wheat {background-color: #f5deb3; color: #f5deb3;}
    .wheat1 {background-color: #ffe7ba; color: #ffe7ba;}
    .wheat2 {background-color: #eed8ae; color: #eed8ae;}
    .wheat3 {background-color: #cdba96; color: #cdba96;}
    .wheat4 {background-color: #8b7e66; color: #8b7e66;}
    .white {background-color: #ffffff; color: #ffffff;}
    .whitesmoke {background-color: #f5f5f5; color: #f5f5f5;}
    .yellow {background-color: #ffff00; color: #ffff00;}
    .yellow1 {background-color: #ffff00; color: #ffff00;}
    .yellow2 {background-color: #eeee00; color: #eeee00;}
    .yellow3 {background-color: #cdcd00; color: #cdcd00;}
    .yellow4 {background-color: #8b8b00; color: #8b8b00;}
    .yellowgreen {background-color: #9acd32; color: #9acd32;}
    </style>

:doc:`color` lets you specify any of these named colors when creating a new
``pygame.Color`` (taken from the
`colordict module <https://github.com/pygame/pygame/blob/main/src_py/colordict.py>`_).

.. role:: aliceblue
.. role:: antiquewhite
.. role:: antiquewhite1
.. role:: antiquewhite2
.. role:: antiquewhite3
.. role:: antiquewhite4
.. role:: aqua
.. role:: aquamarine
.. role:: aquamarine1
.. role:: aquamarine2
.. role:: aquamarine3
.. role:: aquamarine4
.. role:: azure
.. role:: azure1
.. role:: azure2
.. role:: azure3
.. role:: azure4
.. role:: beige
.. role:: bisque
.. role:: bisque1
.. role:: bisque2
.. role:: bisque3
.. role:: bisque4
.. role:: black
.. role:: blanchedalmond
.. role:: blue
.. role:: blue1
.. role:: blue2
.. role:: blue3
.. role:: blue4
.. role:: blueviolet
.. role:: brown
.. role:: brown1
.. role:: brown2
.. role:: brown3
.. role:: brown4
.. role:: burlywood
.. role:: burlywood1
.. role:: burlywood2
.. role:: burlywood3
.. role:: burlywood4
.. role:: cadetblue
.. role:: cadetblue1
.. role:: cadetblue2
.. role:: cadetblue3
.. role:: cadetblue4
.. role:: chartreuse
.. role:: chartreuse1
.. role:: chartreuse2
.. role:: chartreuse3
.. role:: chartreuse4
.. role:: chocolate
.. role:: chocolate1
.. role:: chocolate2
.. role:: chocolate3
.. role:: chocolate4
.. role:: coral
.. role:: coral1
.. role:: coral2
.. role:: coral3
.. role:: coral4
.. role:: cornflowerblue
.. role:: cornsilk
.. role:: cornsilk1
.. role:: cornsilk2
.. role:: cornsilk3
.. role:: cornsilk4
.. role:: crimson
.. role:: cyan
.. role:: cyan1
.. role:: cyan2
.. role:: cyan3
.. role:: cyan4
.. role:: darkblue
.. role:: darkcyan
.. role:: darkgoldenrod
.. role:: darkgoldenrod1
.. role:: darkgoldenrod2
.. role:: darkgoldenrod3
.. role:: darkgoldenrod4
.. role:: darkgray
.. role:: darkgreen
.. role:: darkgrey
.. role:: darkkhaki
.. role:: darkmagenta
.. role:: darkolivegreen
.. role:: darkolivegreen1
.. role:: darkolivegreen2
.. role:: darkolivegreen3
.. role:: darkolivegreen4
.. role:: darkorange
.. role:: darkorange1
.. role:: darkorange2
.. role:: darkorange3
.. role:: darkorange4
.. role:: darkorchid
.. role:: darkorchid1
.. role:: darkorchid2
.. role:: darkorchid3
.. role:: darkorchid4
.. role:: darkred
.. role:: darksalmon
.. role:: darkseagreen
.. role:: darkseagreen1
.. role:: darkseagreen2
.. role:: darkseagreen3
.. role:: darkseagreen4
.. role:: darkslateblue
.. role:: darkslategray
.. role:: darkslategray1
.. role:: darkslategray2
.. role:: darkslategray3
.. role:: darkslategray4
.. role:: darkslategrey
.. role:: darkturquoise
.. role:: darkviolet
.. role:: deeppink
.. role:: deeppink1
.. role:: deeppink2
.. role:: deeppink3
.. role:: deeppink4
.. role:: deepskyblue
.. role:: deepskyblue1
.. role:: deepskyblue2
.. role:: deepskyblue3
.. role:: deepskyblue4
.. role:: dimgray
.. role:: dimgrey
.. role:: dodgerblue
.. role:: dodgerblue1
.. role:: dodgerblue2
.. role:: dodgerblue3
.. role:: dodgerblue4
.. role:: firebrick
.. role:: firebrick1
.. role:: firebrick2
.. role:: firebrick3
.. role:: firebrick4
.. role:: floralwhite
.. role:: forestgreen
.. role:: fuchsia
.. role:: gainsboro
.. role:: ghostwhite
.. role:: gold
.. role:: gold1
.. role:: gold2
.. role:: gold3
.. role:: gold4
.. role:: goldenrod
.. role:: goldenrod1
.. role:: goldenrod2
.. role:: goldenrod3
.. role:: goldenrod4
.. role:: gray
.. role:: gray0
.. role:: gray1
.. role:: gray2
.. role:: gray3
.. role:: gray4
.. role:: gray5
.. role:: gray6
.. role:: gray7
.. role:: gray8
.. role:: gray9
.. role:: gray10
.. role:: gray11
.. role:: gray12
.. role:: gray13
.. role:: gray14
.. role:: gray15
.. role:: gray16
.. role:: gray17
.. role:: gray18
.. role:: gray19
.. role:: gray20
.. role:: gray21
.. role:: gray22
.. role:: gray23
.. role:: gray24
.. role:: gray25
.. role:: gray26
.. role:: gray27
.. role:: gray28
.. role:: gray29
.. role:: gray30
.. role:: gray31
.. role:: gray32
.. role:: gray33
.. role:: gray34
.. role:: gray35
.. role:: gray36
.. role:: gray37
.. role:: gray38
.. role:: gray39
.. role:: gray40
.. role:: gray41
.. role:: gray42
.. role:: gray43
.. role:: gray44
.. role:: gray45
.. role:: gray46
.. role:: gray47
.. role:: gray48
.. role:: gray49
.. role:: gray50
.. role:: gray51
.. role:: gray52
.. role:: gray53
.. role:: gray54
.. role:: gray55
.. role:: gray56
.. role:: gray57
.. role:: gray58
.. role:: gray59
.. role:: gray60
.. role:: gray61
.. role:: gray62
.. role:: gray63
.. role:: gray64
.. role:: gray65
.. role:: gray66
.. role:: gray67
.. role:: gray68
.. role:: gray69
.. role:: gray70
.. role:: gray71
.. role:: gray72
.. role:: gray73
.. role:: gray74
.. role:: gray75
.. role:: gray76
.. role:: gray77
.. role:: gray78
.. role:: gray79
.. role:: gray80
.. role:: gray81
.. role:: gray82
.. role:: gray83
.. role:: gray84
.. role:: gray85
.. role:: gray86
.. role:: gray87
.. role:: gray88
.. role:: gray89
.. role:: gray90
.. role:: gray91
.. role:: gray92
.. role:: gray93
.. role:: gray94
.. role:: gray95
.. role:: gray96
.. role:: gray97
.. role:: gray98
.. role:: gray99
.. role:: gray100
.. role:: green
.. role:: green1
.. role:: green2
.. role:: green3
.. role:: green4
.. role:: greenyellow
.. role:: grey
.. role:: grey0
.. role:: grey1
.. role:: grey2
.. role:: grey3
.. role:: grey4
.. role:: grey5
.. role:: grey6
.. role:: grey7
.. role:: grey8
.. role:: grey9
.. role:: grey10
.. role:: grey11
.. role:: grey12
.. role:: grey13
.. role:: grey14
.. role:: grey15
.. role:: grey16
.. role:: grey17
.. role:: grey18
.. role:: grey19
.. role:: grey20
.. role:: grey21
.. role:: grey22
.. role:: grey23
.. role:: grey24
.. role:: grey25
.. role:: grey26
.. role:: grey27
.. role:: grey28
.. role:: grey29
.. role:: grey30
.. role:: grey31
.. role:: grey32
.. role:: grey33
.. role:: grey34
.. role:: grey35
.. role:: grey36
.. role:: grey37
.. role:: grey38
.. role:: grey39
.. role:: grey40
.. role:: grey41
.. role:: grey42
.. role:: grey43
.. role:: grey44
.. role:: grey45
.. role:: grey46
.. role:: grey47
.. role:: grey48
.. role:: grey49
.. role:: grey50
.. role:: grey51
.. role:: grey52
.. role:: grey53
.. role:: grey54
.. role:: grey55
.. role:: grey56
.. role:: grey57
.. role:: grey58
.. role:: grey59
.. role:: grey60
.. role:: grey61
.. role:: grey62
.. role:: grey63
.. role:: grey64
.. role:: grey65
.. role:: grey66
.. role:: grey67
.. role:: grey68
.. role:: grey69
.. role:: grey70
.. role:: grey71
.. role:: grey72
.. role:: grey73
.. role:: grey74
.. role:: grey75
.. role:: grey76
.. role:: grey77
.. role:: grey78
.. role:: grey79
.. role:: grey80
.. role:: grey81
.. role:: grey82
.. role:: grey83
.. role:: grey84
.. role:: grey85
.. role:: grey86
.. role:: grey87
.. role:: grey88
.. role:: grey89
.. role:: grey90
.. role:: grey91
.. role:: grey92
.. role:: grey93
.. role:: grey94
.. role:: grey95
.. role:: grey96
.. role:: grey97
.. role:: grey98
.. role:: grey99
.. role:: grey100
.. role:: honeydew
.. role:: honeydew1
.. role:: honeydew2
.. role:: honeydew3
.. role:: honeydew4
.. role:: hotpink
.. role:: hotpink1
.. role:: hotpink2
.. role:: hotpink3
.. role:: hotpink4
.. role:: indianred
.. role:: indianred1
.. role:: indianred2
.. role:: indianred3
.. role:: indianred4
.. role:: indigo
.. role:: ivory
.. role:: ivory1
.. role:: ivory2
.. role:: ivory3
.. role:: ivory4
.. role:: khaki
.. role:: khaki1
.. role:: khaki2
.. role:: khaki3
.. role:: khaki4
.. role:: lavender
.. role:: lavenderblush
.. role:: lavenderblush1
.. role:: lavenderblush2
.. role:: lavenderblush3
.. role:: lavenderblush4
.. role:: lawngreen
.. role:: lemonchiffon
.. role:: lemonchiffon1
.. role:: lemonchiffon2
.. role:: lemonchiffon3
.. role:: lemonchiffon4
.. role:: lightblue
.. role:: lightblue1
.. role:: lightblue2
.. role:: lightblue3
.. role:: lightblue4
.. role:: lightcoral
.. role:: lightcyan
.. role:: lightcyan1
.. role:: lightcyan2
.. role:: lightcyan3
.. role:: lightcyan4
.. role:: lightgoldenrod
.. role:: lightgoldenrod1
.. role:: lightgoldenrod2
.. role:: lightgoldenrod3
.. role:: lightgoldenrod4
.. role:: lightgoldenrodyellow
.. role:: lightgray
.. role:: lightgreen
.. role:: lightgrey
.. role:: lightpink
.. role:: lightpink1
.. role:: lightpink2
.. role:: lightpink3
.. role:: lightpink4
.. role:: lightsalmon
.. role:: lightsalmon1
.. role:: lightsalmon2
.. role:: lightsalmon3
.. role:: lightsalmon4
.. role:: lightseagreen
.. role:: lightskyblue
.. role:: lightskyblue1
.. role:: lightskyblue2
.. role:: lightskyblue3
.. role:: lightskyblue4
.. role:: lightslateblue
.. role:: lightslategray
.. role:: lightslategrey
.. role:: lightsteelblue
.. role:: lightsteelblue1
.. role:: lightsteelblue2
.. role:: lightsteelblue3
.. role:: lightsteelblue4
.. role:: lightyellow
.. role:: lightyellow1
.. role:: lightyellow2
.. role:: lightyellow3
.. role:: lightyellow4
.. role:: limegreen
.. role:: lime
.. role:: linen
.. role:: magenta
.. role:: magenta1
.. role:: magenta2
.. role:: magenta3
.. role:: magenta4
.. role:: maroon
.. role:: maroon1
.. role:: maroon2
.. role:: maroon3
.. role:: maroon4
.. role:: mediumaquamarine
.. role:: mediumblue
.. role:: mediumorchid
.. role:: mediumorchid1
.. role:: mediumorchid2
.. role:: mediumorchid3
.. role:: mediumorchid4
.. role:: mediumpurple
.. role:: mediumpurple1
.. role:: mediumpurple2
.. role:: mediumpurple3
.. role:: mediumpurple4
.. role:: mediumseagreen
.. role:: mediumslateblue
.. role:: mediumspringgreen
.. role:: mediumturquoise
.. role:: mediumvioletred
.. role:: midnightblue
.. role:: mintcream
.. role:: mistyrose
.. role:: mistyrose1
.. role:: mistyrose2
.. role:: mistyrose3
.. role:: mistyrose4
.. role:: moccasin
.. role:: navajowhite
.. role:: navajowhite1
.. role:: navajowhite2
.. role:: navajowhite3
.. role:: navajowhite4
.. role:: navy
.. role:: navyblue
.. role:: oldlace
.. role:: olive
.. role:: olivedrab
.. role:: olivedrab1
.. role:: olivedrab2
.. role:: olivedrab3
.. role:: olivedrab4
.. role:: orange
.. role:: orange1
.. role:: orange2
.. role:: orange3
.. role:: orange4
.. role:: orangered
.. role:: orangered1
.. role:: orangered2
.. role:: orangered3
.. role:: orangered4
.. role:: orchid
.. role:: orchid1
.. role:: orchid2
.. role:: orchid3
.. role:: orchid4
.. role:: palegoldenrod
.. role:: palegreen
.. role:: palegreen1
.. role:: palegreen2
.. role:: palegreen3
.. role:: palegreen4
.. role:: paleturquoise
.. role:: paleturquoise1
.. role:: paleturquoise2
.. role:: paleturquoise3
.. role:: paleturquoise4
.. role:: palevioletred
.. role:: palevioletred1
.. role:: palevioletred2
.. role:: palevioletred3
.. role:: palevioletred4
.. role:: papayawhip
.. role:: peachpuff
.. role:: peachpuff1
.. role:: peachpuff2
.. role:: peachpuff3
.. role:: peachpuff4
.. role:: peru
.. role:: pink
.. role:: pink1
.. role:: pink2
.. role:: pink3
.. role:: pink4
.. role:: plum
.. role:: plum1
.. role:: plum2
.. role:: plum3
.. role:: plum4
.. role:: powderblue
.. role:: purple
.. role:: purple1
.. role:: purple2
.. role:: purple3
.. role:: purple4
.. role:: red
.. role:: red1
.. role:: red2
.. role:: red3
.. role:: red4
.. role:: rosybrown
.. role:: rosybrown1
.. role:: rosybrown2
.. role:: rosybrown3
.. role:: rosybrown4
.. role:: royalblue
.. role:: royalblue1
.. role:: royalblue2
.. role:: royalblue3
.. role:: royalblue4
.. role:: saddlebrown
.. role:: salmon
.. role:: salmon1
.. role:: salmon2
.. role:: salmon3
.. role:: salmon4
.. role:: sandybrown
.. role:: seagreen
.. role:: seagreen1
.. role:: seagreen2
.. role:: seagreen3
.. role:: seagreen4
.. role:: seashell
.. role:: seashell1
.. role:: seashell2
.. role:: seashell3
.. role:: seashell4
.. role:: sienna
.. role:: sienna1
.. role:: sienna2
.. role:: sienna3
.. role:: sienna4
.. role:: silver
.. role:: skyblue
.. role:: skyblue1
.. role:: skyblue2
.. role:: skyblue3
.. role:: skyblue4
.. role:: slateblue
.. role:: slateblue1
.. role:: slateblue2
.. role:: slateblue3
.. role:: slateblue4
.. role:: slategray
.. role:: slategray1
.. role:: slategray2
.. role:: slategray3
.. role:: slategray4
.. role:: slategrey
.. role:: snow
.. role:: snow1
.. role:: snow2
.. role:: snow3
.. role:: snow4
.. role:: springgreen
.. role:: springgreen1
.. role:: springgreen2
.. role:: springgreen3
.. role:: springgreen4
.. role:: steelblue
.. role:: steelblue1
.. role:: steelblue2
.. role:: steelblue3
.. role:: steelblue4
.. role:: tan
.. role:: tan1
.. role:: tan2
.. role:: tan3
.. role:: tan4
.. role:: teal
.. role:: thistle
.. role:: thistle1
.. role:: thistle2
.. role:: thistle3
.. role:: thistle4
.. role:: tomato
.. role:: tomato1
.. role:: tomato2
.. role:: tomato3
.. role:: tomato4
.. role:: turquoise
.. role:: turquoise1
.. role:: turquoise2
.. role:: turquoise3
.. role:: turquoise4
.. role:: violet
.. role:: violetred
.. role:: violetred1
.. role:: violetred2
.. role:: violetred3
.. role:: violetred4
.. role:: wheat
.. role:: wheat1
.. role:: wheat2
.. role:: wheat3
.. role:: wheat4
.. role:: white
.. role:: whitesmoke
.. role:: yellow
.. role:: yellow1
.. role:: yellow2
.. role:: yellow3
.. role:: yellow4
.. role:: yellowgreen

==========================  ======================================================================================================
Name                        Color
==========================  ======================================================================================================
``aliceblue``               :aliceblue:`████████`
``antiquewhite``            :antiquewhite:`████████`
``antiquewhite1``           :antiquewhite1:`████████`
``antiquewhite2``           :antiquewhite2:`████████`
``antiquewhite3``           :antiquewhite3:`████████`
``antiquewhite4``           :antiquewhite4:`████████`
``aqua``                    :aqua:`████████`
``aquamarine``              :aquamarine:`████████`
``aquamarine1``             :aquamarine1:`████████`
``aquamarine2``             :aquamarine2:`████████`
``aquamarine3``             :aquamarine3:`████████`
``aquamarine4``             :aquamarine4:`████████`
``azure``                   :azure:`████████`
``azure1``                  :azure1:`████████`
``azure2``                  :azure2:`████████`
``azure3``                  :azure3:`████████`
``azure4``                  :azure4:`████████`
``beige``                   :beige:`████████`
``bisque``                  :bisque:`████████`
``bisque1``                 :bisque1:`████████`
``bisque2``                 :bisque2:`████████`
``bisque3``                 :bisque3:`████████`
``bisque4``                 :bisque4:`████████`
``black``                   :black:`████████`
``blanchedalmond``          :blanchedalmond:`████████`
``blue``                    :blue:`████████`
``blue1``                   :blue1:`████████`
``blue2``                   :blue2:`████████`
``blue3``                   :blue3:`████████`
``blue4``                   :blue4:`████████`
``blueviolet``              :blueviolet:`████████`
``brown``                   :brown:`████████`
``brown1``                  :brown1:`████████`
``brown2``                  :brown2:`████████`
``brown3``                  :brown3:`████████`
``brown4``                  :brown4:`████████`
``burlywood``               :burlywood:`████████`
``burlywood1``              :burlywood1:`████████`
``burlywood2``              :burlywood2:`████████`
``burlywood3``              :burlywood3:`████████`
``burlywood4``              :burlywood4:`████████`
``cadetblue``               :cadetblue:`████████`
``cadetblue1``              :cadetblue1:`████████`
``cadetblue2``              :cadetblue2:`████████`
``cadetblue3``              :cadetblue3:`████████`
``cadetblue4``              :cadetblue4:`████████`
``chartreuse``              :chartreuse:`████████`
``chartreuse1``             :chartreuse1:`████████`
``chartreuse2``             :chartreuse2:`████████`
``chartreuse3``             :chartreuse3:`████████`
``chartreuse4``             :chartreuse4:`████████`
``chocolate``               :chocolate:`████████`
``chocolate1``              :chocolate1:`████████`
``chocolate2``              :chocolate2:`████████`
``chocolate3``              :chocolate3:`████████`
``chocolate4``              :chocolate4:`████████`
``coral``                   :coral:`████████`
``coral1``                  :coral1:`████████`
``coral2``                  :coral2:`████████`
``coral3``                  :coral3:`████████`
``coral4``                  :coral4:`████████`
``cornflowerblue``          :cornflowerblue:`████████`
``cornsilk``                :cornsilk:`████████`
``cornsilk1``               :cornsilk1:`████████`
``cornsilk2``               :cornsilk2:`████████`
``cornsilk3``               :cornsilk3:`████████`
``cornsilk4``               :cornsilk4:`████████`
``crimson``                 :crimson:`████████`
``cyan``                    :cyan:`████████`
``cyan1``                   :cyan1:`████████`
``cyan2``                   :cyan2:`████████`
``cyan3``                   :cyan3:`████████`
``cyan4``                   :cyan4:`████████`
``darkblue``                :darkblue:`████████`
``darkcyan``                :darkcyan:`████████`
``darkgoldenrod``           :darkgoldenrod:`████████`
``darkgoldenrod1``          :darkgoldenrod1:`████████`
``darkgoldenrod2``          :darkgoldenrod2:`████████`
``darkgoldenrod3``          :darkgoldenrod3:`████████`
``darkgoldenrod4``          :darkgoldenrod4:`████████`
``darkgray``                :darkgray:`████████`
``darkgreen``               :darkgreen:`████████`
``darkgrey``                :darkgrey:`████████`
``darkkhaki``               :darkkhaki:`████████`
``darkmagenta``             :darkmagenta:`████████`
``darkolivegreen``          :darkolivegreen:`████████`
``darkolivegreen1``         :darkolivegreen1:`████████`
``darkolivegreen2``         :darkolivegreen2:`████████`
``darkolivegreen3``         :darkolivegreen3:`████████`
``darkolivegreen4``         :darkolivegreen4:`████████`
``darkorange``              :darkorange:`████████`
``darkorange1``             :darkorange1:`████████`
``darkorange2``             :darkorange2:`████████`
``darkorange3``             :darkorange3:`████████`
``darkorange4``             :darkorange4:`████████`
``darkorchid``              :darkorchid:`████████`
``darkorchid1``             :darkorchid1:`████████`
``darkorchid2``             :darkorchid2:`████████`
``darkorchid3``             :darkorchid3:`████████`
``darkorchid4``             :darkorchid4:`████████`
``darkred``                 :darkred:`████████`
``darksalmon``              :darksalmon:`████████`
``darkseagreen``            :darkseagreen:`████████`
``darkseagreen1``           :darkseagreen1:`████████`
``darkseagreen2``           :darkseagreen2:`████████`
``darkseagreen3``           :darkseagreen3:`████████`
``darkseagreen4``           :darkseagreen4:`████████`
``darkslateblue``           :darkslateblue:`████████`
``darkslategray``           :darkslategray:`████████`
``darkslategray1``          :darkslategray1:`████████`
``darkslategray2``          :darkslategray2:`████████`
``darkslategray3``          :darkslategray3:`████████`
``darkslategray4``          :darkslategray4:`████████`
``darkslategrey``           :darkslategrey:`████████`
``darkturquoise``           :darkturquoise:`████████`
``darkviolet``              :darkviolet:`████████`
``deeppink``                :deeppink:`████████`
``deeppink1``               :deeppink1:`████████`
``deeppink2``               :deeppink2:`████████`
``deeppink3``               :deeppink3:`████████`
``deeppink4``               :deeppink4:`████████`
``deepskyblue``             :deepskyblue:`████████`
``deepskyblue1``            :deepskyblue1:`████████`
``deepskyblue2``            :deepskyblue2:`████████`
``deepskyblue3``            :deepskyblue3:`████████`
``deepskyblue4``            :deepskyblue4:`████████`
``dimgray``                 :dimgray:`████████`
``dimgrey``                 :dimgrey:`████████`
``dodgerblue``              :dodgerblue:`████████`
``dodgerblue1``             :dodgerblue1:`████████`
``dodgerblue2``             :dodgerblue2:`████████`
``dodgerblue3``             :dodgerblue3:`████████`
``dodgerblue4``             :dodgerblue4:`████████`
``firebrick``               :firebrick:`████████`
``firebrick1``              :firebrick1:`████████`
``firebrick2``              :firebrick2:`████████`
``firebrick3``              :firebrick3:`████████`
``firebrick4``              :firebrick4:`████████`
``floralwhite``             :floralwhite:`████████`
``forestgreen``             :forestgreen:`████████`
``fuchsia``                 :fuchsia:`████████`
``gainsboro``               :gainsboro:`████████`
``ghostwhite``              :ghostwhite:`████████`
``gold``                    :gold:`████████`
``gold1``                   :gold1:`████████`
``gold2``                   :gold2:`████████`
``gold3``                   :gold3:`████████`
``gold4``                   :gold4:`████████`
``goldenrod``               :goldenrod:`████████`
``goldenrod1``              :goldenrod1:`████████`
``goldenrod2``              :goldenrod2:`████████`
``goldenrod3``              :goldenrod3:`████████`
``goldenrod4``              :goldenrod4:`████████`
``gray``                    :gray:`████████`
``gray0``                   :gray0:`████████`
``gray1``                   :gray1:`████████`
``gray2``                   :gray2:`████████`
``gray3``                   :gray3:`████████`
``gray4``                   :gray4:`████████`
``gray5``                   :gray5:`████████`
``gray6``                   :gray6:`████████`
``gray7``                   :gray7:`████████`
``gray8``                   :gray8:`████████`
``gray9``                   :gray9:`████████`
``gray10``                  :gray10:`████████`
``gray11``                  :gray11:`████████`
``gray12``                  :gray12:`████████`
``gray13``                  :gray13:`████████`
``gray14``                  :gray14:`████████`
``gray15``                  :gray15:`████████`
``gray16``                  :gray16:`████████`
``gray17``                  :gray17:`████████`
``gray18``                  :gray18:`████████`
``gray19``                  :gray19:`████████`
``gray20``                  :gray20:`████████`
``gray21``                  :gray21:`████████`
``gray22``                  :gray22:`████████`
``gray23``                  :gray23:`████████`
``gray24``                  :gray24:`████████`
``gray25``                  :gray25:`████████`
``gray26``                  :gray26:`████████`
``gray27``                  :gray27:`████████`
``gray28``                  :gray28:`████████`
``gray29``                  :gray29:`████████`
``gray30``                  :gray30:`████████`
``gray31``                  :gray31:`████████`
``gray32``                  :gray32:`████████`
``gray33``                  :gray33:`████████`
``gray34``                  :gray34:`████████`
``gray35``                  :gray35:`████████`
``gray36``                  :gray36:`████████`
``gray37``                  :gray37:`████████`
``gray38``                  :gray38:`████████`
``gray39``                  :gray39:`████████`
``gray40``                  :gray40:`████████`
``gray41``                  :gray41:`████████`
``gray42``                  :gray42:`████████`
``gray43``                  :gray43:`████████`
``gray44``                  :gray44:`████████`
``gray45``                  :gray45:`████████`
``gray46``                  :gray46:`████████`
``gray47``                  :gray47:`████████`
``gray48``                  :gray48:`████████`
``gray49``                  :gray49:`████████`
``gray50``                  :gray50:`████████`
``gray51``                  :gray51:`████████`
``gray52``                  :gray52:`████████`
``gray53``                  :gray53:`████████`
``gray54``                  :gray54:`████████`
``gray55``                  :gray55:`████████`
``gray56``                  :gray56:`████████`
``gray57``                  :gray57:`████████`
``gray58``                  :gray58:`████████`
``gray59``                  :gray59:`████████`
``gray60``                  :gray60:`████████`
``gray61``                  :gray61:`████████`
``gray62``                  :gray62:`████████`
``gray63``                  :gray63:`████████`
``gray64``                  :gray64:`████████`
``gray65``                  :gray65:`████████`
``gray66``                  :gray66:`████████`
``gray67``                  :gray67:`████████`
``gray68``                  :gray68:`████████`
``gray69``                  :gray69:`████████`
``gray70``                  :gray70:`████████`
``gray71``                  :gray71:`████████`
``gray72``                  :gray72:`████████`
``gray73``                  :gray73:`████████`
``gray74``                  :gray74:`████████`
``gray75``                  :gray75:`████████`
``gray76``                  :gray76:`████████`
``gray77``                  :gray77:`████████`
``gray78``                  :gray78:`████████`
``gray79``                  :gray79:`████████`
``gray80``                  :gray80:`████████`
``gray81``                  :gray81:`████████`
``gray82``                  :gray82:`████████`
``gray83``                  :gray83:`████████`
``gray84``                  :gray84:`████████`
``gray85``                  :gray85:`████████`
``gray86``                  :gray86:`████████`
``gray87``                  :gray87:`████████`
``gray88``                  :gray88:`████████`
``gray89``                  :gray89:`████████`
``gray90``                  :gray90:`████████`
``gray91``                  :gray91:`████████`
``gray92``                  :gray92:`████████`
``gray93``                  :gray93:`████████`
``gray94``                  :gray94:`████████`
``gray95``                  :gray95:`████████`
``gray96``                  :gray96:`████████`
``gray97``                  :gray97:`████████`
``gray98``                  :gray98:`████████`
``gray99``                  :gray99:`████████`
``gray100``                 :gray100:`████████`
``green``                   :green:`████████`
``green1``                  :green1:`████████`
``green2``                  :green2:`████████`
``green3``                  :green3:`████████`
``green4``                  :green4:`████████`
``greenyellow``             :greenyellow:`████████`
``grey``                    :grey:`████████`
``grey0``                   :grey0:`████████`
``grey1``                   :grey1:`████████`
``grey2``                   :grey2:`████████`
``grey3``                   :grey3:`████████`
``grey4``                   :grey4:`████████`
``grey5``                   :grey5:`████████`
``grey6``                   :grey6:`████████`
``grey7``                   :grey7:`████████`
``grey8``                   :grey8:`████████`
``grey9``                   :grey9:`████████`
``grey10``                  :grey10:`████████`
``grey11``                  :grey11:`████████`
``grey12``                  :grey12:`████████`
``grey13``                  :grey13:`████████`
``grey14``                  :grey14:`████████`
``grey15``                  :grey15:`████████`
``grey16``                  :grey16:`████████`
``grey17``                  :grey17:`████████`
``grey18``                  :grey18:`████████`
``grey19``                  :grey19:`████████`
``grey20``                  :grey20:`████████`
``grey21``                  :grey21:`████████`
``grey22``                  :grey22:`████████`
``grey23``                  :grey23:`████████`
``grey24``                  :grey24:`████████`
``grey25``                  :grey25:`████████`
``grey26``                  :grey26:`████████`
``grey27``                  :grey27:`████████`
``grey28``                  :grey28:`████████`
``grey29``                  :grey29:`████████`
``grey30``                  :grey30:`████████`
``grey31``                  :grey31:`████████`
``grey32``                  :grey32:`████████`
``grey33``                  :grey33:`████████`
``grey34``                  :grey34:`████████`
``grey35``                  :grey35:`████████`
``grey36``                  :grey36:`████████`
``grey37``                  :grey37:`████████`
``grey38``                  :grey38:`████████`
``grey39``                  :grey39:`████████`
``grey40``                  :grey40:`████████`
``grey41``                  :grey41:`████████`
``grey42``                  :grey42:`████████`
``grey43``                  :grey43:`████████`
``grey44``                  :grey44:`████████`
``grey45``                  :grey45:`████████`
``grey46``                  :grey46:`████████`
``grey47``                  :grey47:`████████`
``grey48``                  :grey48:`████████`
``grey49``                  :grey49:`████████`
``grey50``                  :grey50:`████████`
``grey51``                  :grey51:`████████`
``grey52``                  :grey52:`████████`
``grey53``                  :grey53:`████████`
``grey54``                  :grey54:`████████`
``grey55``                  :grey55:`████████`
``grey56``                  :grey56:`████████`
``grey57``                  :grey57:`████████`
``grey58``                  :grey58:`████████`
``grey59``                  :grey59:`████████`
``grey60``                  :grey60:`████████`
``grey61``                  :grey61:`████████`
``grey62``                  :grey62:`████████`
``grey63``                  :grey63:`████████`
``grey64``                  :grey64:`████████`
``grey65``                  :grey65:`████████`
``grey66``                  :grey66:`████████`
``grey67``                  :grey67:`████████`
``grey68``                  :grey68:`████████`
``grey69``                  :grey69:`████████`
``grey70``                  :grey70:`████████`
``grey71``                  :grey71:`████████`
``grey72``                  :grey72:`████████`
``grey73``                  :grey73:`████████`
``grey74``                  :grey74:`████████`
``grey75``                  :grey75:`████████`
``grey76``                  :grey76:`████████`
``grey77``                  :grey77:`████████`
``grey78``                  :grey78:`████████`
``grey79``                  :grey79:`████████`
``grey80``                  :grey80:`████████`
``grey81``                  :grey81:`████████`
``grey82``                  :grey82:`████████`
``grey83``                  :grey83:`████████`
``grey84``                  :grey84:`████████`
``grey85``                  :grey85:`████████`
``grey86``                  :grey86:`████████`
``grey87``                  :grey87:`████████`
``grey88``                  :grey88:`████████`
``grey89``                  :grey89:`████████`
``grey90``                  :grey90:`████████`
``grey91``                  :grey91:`████████`
``grey92``                  :grey92:`████████`
``grey93``                  :grey93:`████████`
``grey94``                  :grey94:`████████`
``grey95``                  :grey95:`████████`
``grey96``                  :grey96:`████████`
``grey97``                  :grey97:`████████`
``grey98``                  :grey98:`████████`
``grey99``                  :grey99:`████████`
``grey100``                 :grey100:`████████`
``honeydew``                :honeydew:`████████`
``honeydew1``               :honeydew1:`████████`
``honeydew2``               :honeydew2:`████████`
``honeydew3``               :honeydew3:`████████`
``honeydew4``               :honeydew4:`████████`
``hotpink``                 :hotpink:`████████`
``hotpink1``                :hotpink1:`████████`
``hotpink2``                :hotpink2:`████████`
``hotpink3``                :hotpink3:`████████`
``hotpink4``                :hotpink4:`████████`
``indianred``               :indianred:`████████`
``indianred1``              :indianred1:`████████`
``indianred2``              :indianred2:`████████`
``indianred3``              :indianred3:`████████`
``indianred4``              :indianred4:`████████`
``indigo``                  :indigo:`████████`
``ivory``                   :ivory:`████████`
``ivory1``                  :ivory1:`████████`
``ivory2``                  :ivory2:`████████`
``ivory3``                  :ivory3:`████████`
``ivory4``                  :ivory4:`████████`
``khaki``                   :khaki:`████████`
``khaki1``                  :khaki1:`████████`
``khaki2``                  :khaki2:`████████`
``khaki3``                  :khaki3:`████████`
``khaki4``                  :khaki4:`████████`
``lavender``                :lavender:`████████`
``lavenderblush``           :lavenderblush:`████████`
``lavenderblush1``          :lavenderblush1:`████████`
``lavenderblush2``          :lavenderblush2:`████████`
``lavenderblush3``          :lavenderblush3:`████████`
``lavenderblush4``          :lavenderblush4:`████████`
``lawngreen``               :lawngreen:`████████`
``lemonchiffon``            :lemonchiffon:`████████`
``lemonchiffon1``           :lemonchiffon1:`████████`
``lemonchiffon2``           :lemonchiffon2:`████████`
``lemonchiffon3``           :lemonchiffon3:`████████`
``lemonchiffon4``           :lemonchiffon4:`████████`
``lightblue``               :lightblue:`████████`
``lightblue1``              :lightblue1:`████████`
``lightblue2``              :lightblue2:`████████`
``lightblue3``              :lightblue3:`████████`
``lightblue4``              :lightblue4:`████████`
``lightcoral``              :lightcoral:`████████`
``lightcyan``               :lightcyan:`████████`
``lightcyan1``              :lightcyan1:`████████`
``lightcyan2``              :lightcyan2:`████████`
``lightcyan3``              :lightcyan3:`████████`
``lightcyan4``              :lightcyan4:`████████`
``lightgoldenrod``          :lightgoldenrod:`████████`
``lightgoldenrod1``         :lightgoldenrod1:`████████`
``lightgoldenrod2``         :lightgoldenrod2:`████████`
``lightgoldenrod3``         :lightgoldenrod3:`████████`
``lightgoldenrod4``         :lightgoldenrod4:`████████`
``lightgoldenrodyellow``    :lightgoldenrodyellow:`████████`
``lightgray``               :lightgray:`████████`
``lightgreen``              :lightgreen:`████████`
``lightgrey``               :lightgrey:`████████`
``lightpink``               :lightpink:`████████`
``lightpink1``              :lightpink1:`████████`
``lightpink2``              :lightpink2:`████████`
``lightpink3``              :lightpink3:`████████`
``lightpink4``              :lightpink4:`████████`
``lightsalmon``             :lightsalmon:`████████`
``lightsalmon1``            :lightsalmon1:`████████`
``lightsalmon2``            :lightsalmon2:`████████`
``lightsalmon3``            :lightsalmon3:`████████`
``lightsalmon4``            :lightsalmon4:`████████`
``lightseagreen``           :lightseagreen:`████████`
``lightskyblue``            :lightskyblue:`████████`
``lightskyblue1``           :lightskyblue1:`████████`
``lightskyblue2``           :lightskyblue2:`████████`
``lightskyblue3``           :lightskyblue3:`████████`
``lightskyblue4``           :lightskyblue4:`████████`
``lightslateblue``          :lightslateblue:`████████`
``lightslategray``          :lightslategray:`████████`
``lightslategrey``          :lightslategrey:`████████`
``lightsteelblue``          :lightsteelblue:`████████`
``lightsteelblue1``         :lightsteelblue1:`████████`
``lightsteelblue2``         :lightsteelblue2:`████████`
``lightsteelblue3``         :lightsteelblue3:`████████`
``lightsteelblue4``         :lightsteelblue4:`████████`
``lightyellow``             :lightyellow:`████████`
``lightyellow1``            :lightyellow1:`████████`
``lightyellow2``            :lightyellow2:`████████`
``lightyellow3``            :lightyellow3:`████████`
``lightyellow4``            :lightyellow4:`████████`
``lime``                    :lime:`████████`
``limegreen``               :limegreen:`████████`
``linen``                   :linen:`████████`
``magenta``                 :magenta:`████████`
``magenta1``                :magenta1:`████████`
``magenta2``                :magenta2:`████████`
``magenta3``                :magenta3:`████████`
``magenta4``                :magenta4:`████████`
``maroon``                  :maroon:`████████`
``maroon1``                 :maroon1:`████████`
``maroon2``                 :maroon2:`████████`
``maroon3``                 :maroon3:`████████`
``maroon4``                 :maroon4:`████████`
``mediumaquamarine``        :mediumaquamarine:`████████`
``mediumblue``              :mediumblue:`████████`
``mediumorchid``            :mediumorchid:`████████`
``mediumorchid1``           :mediumorchid1:`████████`
``mediumorchid2``           :mediumorchid2:`████████`
``mediumorchid3``           :mediumorchid3:`████████`
``mediumorchid4``           :mediumorchid4:`████████`
``mediumpurple``            :mediumpurple:`████████`
``mediumpurple1``           :mediumpurple1:`████████`
``mediumpurple2``           :mediumpurple2:`████████`
``mediumpurple3``           :mediumpurple3:`████████`
``mediumpurple4``           :mediumpurple4:`████████`
``mediumseagreen``          :mediumseagreen:`████████`
``mediumslateblue``         :mediumslateblue:`████████`
``mediumspringgreen``       :mediumspringgreen:`████████`
``mediumturquoise``         :mediumturquoise:`████████`
``mediumvioletred``         :mediumvioletred:`████████`
``midnightblue``            :midnightblue:`████████`
``mintcream``               :mintcream:`████████`
``mistyrose``               :mistyrose:`████████`
``mistyrose1``              :mistyrose1:`████████`
``mistyrose2``              :mistyrose2:`████████`
``mistyrose3``              :mistyrose3:`████████`
``mistyrose4``              :mistyrose4:`████████`
``moccasin``                :moccasin:`████████`
``navajowhite``             :navajowhite:`████████`
``navajowhite1``            :navajowhite1:`████████`
``navajowhite2``            :navajowhite2:`████████`
``navajowhite3``            :navajowhite3:`████████`
``navajowhite4``            :navajowhite4:`████████`
``navy``                    :navy:`████████`
``navyblue``                :navyblue:`████████`
``oldlace``                 :oldlace:`████████`
``olive``                   :olive:`████████`
``olivedrab``               :olivedrab:`████████`
``olivedrab1``              :olivedrab1:`████████`
``olivedrab2``              :olivedrab2:`████████`
``olivedrab3``              :olivedrab3:`████████`
``olivedrab4``              :olivedrab4:`████████`
``orange``                  :orange:`████████`
``orange1``                 :orange1:`████████`
``orange2``                 :orange2:`████████`
``orange3``                 :orange3:`████████`
``orange4``                 :orange4:`████████`
``orangered``               :orangered:`████████`
``orangered1``              :orangered1:`████████`
``orangered2``              :orangered2:`████████`
``orangered3``              :orangered3:`████████`
``orangered4``              :orangered4:`████████`
``orchid``                  :orchid:`████████`
``orchid1``                 :orchid1:`████████`
``orchid2``                 :orchid2:`████████`
``orchid3``                 :orchid3:`████████`
``orchid4``                 :orchid4:`████████`
``palegoldenrod``           :palegoldenrod:`████████`
``palegreen``               :palegreen:`████████`
``palegreen1``              :palegreen1:`████████`
``palegreen2``              :palegreen2:`████████`
``palegreen3``              :palegreen3:`████████`
``palegreen4``              :palegreen4:`████████`
``paleturquoise``           :paleturquoise:`████████`
``paleturquoise1``          :paleturquoise1:`████████`
``paleturquoise2``          :paleturquoise2:`████████`
``paleturquoise3``          :paleturquoise3:`████████`
``paleturquoise4``          :paleturquoise4:`████████`
``palevioletred``           :palevioletred:`████████`
``palevioletred1``          :palevioletred1:`████████`
``palevioletred2``          :palevioletred2:`████████`
``palevioletred3``          :palevioletred3:`████████`
``palevioletred4``          :palevioletred4:`████████`
``papayawhip``              :papayawhip:`████████`
``peachpuff``               :peachpuff:`████████`
``peachpuff1``              :peachpuff1:`████████`
``peachpuff2``              :peachpuff2:`████████`
``peachpuff3``              :peachpuff3:`████████`
``peachpuff4``              :peachpuff4:`████████`
``peru``                    :peru:`████████`
``pink``                    :pink:`████████`
``pink1``                   :pink1:`████████`
``pink2``                   :pink2:`████████`
``pink3``                   :pink3:`████████`
``pink4``                   :pink4:`████████`
``plum``                    :plum:`████████`
``plum1``                   :plum1:`████████`
``plum2``                   :plum2:`████████`
``plum3``                   :plum3:`████████`
``plum4``                   :plum4:`████████`
``powderblue``              :powderblue:`████████`
``purple``                  :purple:`████████`
``purple1``                 :purple1:`████████`
``purple2``                 :purple2:`████████`
``purple3``                 :purple3:`████████`
``purple4``                 :purple4:`████████`
``red``                     :red:`████████`
``red1``                    :red1:`████████`
``red2``                    :red2:`████████`
``red3``                    :red3:`████████`
``red4``                    :red4:`████████`
``rosybrown``               :rosybrown:`████████`
``rosybrown1``              :rosybrown1:`████████`
``rosybrown2``              :rosybrown2:`████████`
``rosybrown3``              :rosybrown3:`████████`
``rosybrown4``              :rosybrown4:`████████`
``royalblue``               :royalblue:`████████`
``royalblue1``              :royalblue1:`████████`
``royalblue2``              :royalblue2:`████████`
``royalblue3``              :royalblue3:`████████`
``royalblue4``              :royalblue4:`████████`
``saddlebrown``             :saddlebrown:`████████`
``salmon``                  :salmon:`████████`
``salmon1``                 :salmon1:`████████`
``salmon2``                 :salmon2:`████████`
``salmon3``                 :salmon3:`████████`
``salmon4``                 :salmon4:`████████`
``sandybrown``              :sandybrown:`████████`
``seagreen``                :seagreen:`████████`
``seagreen1``               :seagreen1:`████████`
``seagreen2``               :seagreen2:`████████`
``seagreen3``               :seagreen3:`████████`
``seagreen4``               :seagreen4:`████████`
``seashell``                :seashell:`████████`
``seashell1``               :seashell1:`████████`
``seashell2``               :seashell2:`████████`
``seashell3``               :seashell3:`████████`
``seashell4``               :seashell4:`████████`
``sienna``                  :sienna:`████████`
``sienna1``                 :sienna1:`████████`
``sienna2``                 :sienna2:`████████`
``sienna3``                 :sienna3:`████████`
``sienna4``                 :sienna4:`████████`
``silver``                  :silver:`████████`
``skyblue``                 :skyblue:`████████`
``skyblue1``                :skyblue1:`████████`
``skyblue2``                :skyblue2:`████████`
``skyblue3``                :skyblue3:`████████`
``skyblue4``                :skyblue4:`████████`
``slateblue``               :slateblue:`████████`
``slateblue1``              :slateblue1:`████████`
``slateblue2``              :slateblue2:`████████`
``slateblue3``              :slateblue3:`████████`
``slateblue4``              :slateblue4:`████████`
``slategray``               :slategray:`████████`
``slategray1``              :slategray1:`████████`
``slategray2``              :slategray2:`████████`
``slategray3``              :slategray3:`████████`
``slategray4``              :slategray4:`████████`
``slategrey``               :slategrey:`████████`
``snow``                    :snow:`████████`
``snow1``                   :snow1:`████████`
``snow2``                   :snow2:`████████`
``snow3``                   :snow3:`████████`
``snow4``                   :snow4:`████████`
``springgreen``             :springgreen:`████████`
``springgreen1``            :springgreen1:`████████`
``springgreen2``            :springgreen2:`████████`
``springgreen3``            :springgreen3:`████████`
``springgreen4``            :springgreen4:`████████`
``steelblue``               :steelblue:`████████`
``steelblue1``              :steelblue1:`████████`
``steelblue2``              :steelblue2:`████████`
``steelblue3``              :steelblue3:`████████`
``steelblue4``              :steelblue4:`████████`
``tan``                     :tan:`████████`
``tan1``                    :tan1:`████████`
``tan2``                    :tan2:`████████`
``tan3``                    :tan3:`████████`
``tan4``                    :tan4:`████████`
``teal``                    :teal:`████████`
``thistle``                 :thistle:`████████`
``thistle1``                :thistle1:`████████`
``thistle2``                :thistle2:`████████`
``thistle3``                :thistle3:`████████`
``thistle4``                :thistle4:`████████`
``tomato``                  :tomato:`████████`
``tomato1``                 :tomato1:`████████`
``tomato2``                 :tomato2:`████████`
``tomato3``                 :tomato3:`████████`
``tomato4``                 :tomato4:`████████`
``turquoise``               :turquoise:`████████`
``turquoise1``              :turquoise1:`████████`
``turquoise2``              :turquoise2:`████████`
``turquoise3``              :turquoise3:`████████`
``turquoise4``              :turquoise4:`████████`
``violet``                  :violet:`████████`
``violetred``               :violetred:`████████`
``violetred1``              :violetred1:`████████`
``violetred2``              :violetred2:`████████`
``violetred3``              :violetred3:`████████`
``violetred4``              :violetred4:`████████`
``wheat``                   :wheat:`████████`
``wheat1``                  :wheat1:`████████`
``wheat2``                  :wheat2:`████████`
``wheat3``                  :wheat3:`████████`
``wheat4``                  :wheat4:`████████`
``white``                   :white:`████████`
``whitesmoke``              :whitesmoke:`████████`
``yellow``                  :yellow:`████████`
``yellow1``                 :yellow1:`████████`
``yellow2``                 :yellow2:`████████`
``yellow3``                 :yellow3:`████████`
``yellow4``                 :yellow4:`████████`
``yellowgreen``             :yellowgreen:`████████`
==========================  ======================================================================================================


--- Contenu du fichier : pixelcopy.rst.txt ---
.. include:: common.txt

:mod:`pygame.pixelcopy`
=======================

.. module:: pygame.pixelcopy
   :synopsis: pygame module for general pixel array copying

| :sl:`pygame module for general pixel array copying`

The ``pygame.pixelcopy`` module contains functions for copying between
surfaces and objects exporting an array structure interface. It is a backend
for :mod:`pygame.surfarray`, adding NumPy support. But pixelcopy is more
general, and intended for direct use.

The array struct interface exposes an array's data in a standard way.
It was introduced in NumPy. In Python 2.7 and above it is replaced by the
new buffer protocol, though the buffer protocol is still a work in progress.
The array struct interface, on the other hand, is stable and works with earlier
Python versions. So for now the array struct interface is the predominate way
pygame handles array introspection.

For 2d arrays of integer pixel values, the values are mapped to the
pixel format of the related surface. To get the actual color of a pixel
value use :meth:`pygame.Surface.unmap_rgb`. 2d arrays can only be used
directly between surfaces having the same pixel layout.

New in pygame 1.9.2.

.. function:: surface_to_array

   | :sl:`copy surface pixels to an array object`
   | :sg:`surface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None`

   The surface_to_array function copies pixels from a Surface object
   to a 2D or 3D array. Depending on argument ``kind`` and the target array
   dimension, a copy may be raw pixel value, RGB, a color component slice,
   or colorkey alpha transparency value. Recognized ``kind`` values are the
   single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case
   insensitive, so 'p' is equivalent to 'P'. The first two dimensions
   of the target must be the surface size (w, h).

   The default 'P' kind code does a direct raw integer pixel (mapped) value
   copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array
   having shape (w, h, 3). For an 8 bit colormap surface this means the
   table index is copied to a 2D array, not the table value itself. A 2D
   array's item size must be at least as large as the surface's pixel
   byte size. The item size of a 3D array must be at least one byte.

   For the 'R', 'G', 'B', and 'A' copy kinds a single color component
   of the unmapped surface pixels are copied to the target 2D array.
   For kind 'A' and surfaces with source alpha (the surface was created with
   the SRCALPHA flag), has a colorkey
   (set with :meth:`Surface.set_colorkey() <pygame.Surface.set_colorkey>`),
   or has a blanket alpha
   (set with :meth:`Surface.set_alpha() <pygame.Surface.set_alpha>`)
   then the alpha values are those expected for a SDL surface.
   If a surface has no explicit alpha value, then the target array
   is filled with the value of the optional ``opaque`` surface_to_array
   argument (default 255: not transparent).

   Copy kind 'C' is a special case for alpha copy of a source surface
   with colorkey. Unlike the 'A' color component copy, the ``clear``
   argument value is used for colorkey matches, ``opaque`` otherwise.
   By default, a match has alpha 0 (totally transparent), while everything
   else is alpha 255 (totally opaque). It is a more general implementation
   of :meth:`pygame.surfarray.array_colorkey`.

   Specific to surface_to_array, a ValueError is raised for target arrays
   with incorrect shape or item size. A TypeError is raised for an incorrect
   kind code. Surface specific problems, such as locking, raise a pygame.error.

   .. ## pygame.pixelcopy.surface_to_array ##

.. function:: array_to_surface

   | :sl:`copy an array object to a surface`
   | :sg:`array_to_surface(<surface>, <array>) -> None`

   See :func:`pygame.surfarray.blit_array`.

   .. ## pygame.pixelcopy.array_to_surface ##

.. function:: map_array

   | :sl:`copy an array to another array, using surface format`
   | :sg:`map_array(<array>, <array>, <surface>) -> None`

   Map an array of color element values - (w, h, ..., 3) - to an array of
   pixels - (w, h) according to the format of <surface>.

   .. ## pygame.pixelcopy.map_array ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`pygame.pixelcopy.make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format of the array.
   The array can be 2D or 3D with any sized integer values.

   .. ## pygame.pixelcopy.make_surface ##

.. ## pygame.pixelcopy ##


--- Contenu du fichier : midi.rst.txt ---
.. include:: common.txt

:mod:`pygame.midi`
==================

.. module:: pygame.midi
   :synopsis: pygame module for interacting with midi input and output.

| :sl:`pygame module for interacting with midi input and output.`

.. versionadded:: 1.9.0

The midi module can send output to midi devices and get input from midi
devices. It can also list midi devices on the system.

The midi module supports real and virtual midi devices.

It uses the portmidi library. Is portable to which ever platforms portmidi
supports (currently Windows, Mac OS X, and Linux).

This uses pyportmidi for now, but may use its own bindings at some point in the
future. The pyportmidi bindings are included with pygame.

|

.. versionadded:: 2.0.0

These are pygame events (:mod:`pygame.event`) reserved for midi use. The
``MIDIIN`` event is used by :func:`pygame.midi.midis2events` when converting
midi events to pygame events.

::

   MIDIIN
   MIDIOUT

|

.. function:: init

   | :sl:`initialize the midi module`
   | :sg:`init() -> None`

   Initializes the :mod:`pygame.midi` module. Must be called before using the
   :mod:`pygame.midi` module.

   It is safe to call this more than once.

   .. ## pygame.midi.init ##

.. function:: quit

   | :sl:`uninitialize the midi module`
   | :sg:`quit() -> None`

   Uninitializes the :mod:`pygame.midi` module. If :func:`pygame.midi.init` was
   called to initialize the :mod:`pygame.midi` module, then this function will
   be called automatically when your program exits.

   It is safe to call this function more than once.

   .. ## pygame.midi.quit ##

.. function:: get_init

   | :sl:`returns True if the midi module is currently initialized`
   | :sg:`get_init() -> bool`

   Gets the initialization state of the :mod:`pygame.midi` module.

   :returns: ``True`` if the :mod:`pygame.midi` module is currently initialized.
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.midi.get_init ##

.. class:: Input

   | :sl:`Input is used to get midi input from midi devices.`
   | :sg:`Input(device_id) -> None`
   | :sg:`Input(device_id, buffer_size) -> None`

   :param int device_id: midi device id
   :param int buffer_size: (optional) the number of input events to be buffered

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Input.close ##

   .. method:: poll

      | :sl:`returns True if there's data, or False if not.`
      | :sg:`poll() -> bool`

      Used to indicate if any data exists.

      :returns: ``True`` if there is data, ``False`` otherwise
      :rtype: bool

      :raises MidiException: on error

      .. ## Input.poll ##

   .. method:: read

      | :sl:`reads num_events midi events from the buffer.`
      | :sg:`read(num_events) -> midi_event_list`

      Reads from the input buffer and gives back midi events.

      :param int num_events: number of input events to read

      :returns: the format for midi_event_list is
         ``[[[status, data1, data2, data3], timestamp], ...]``
      :rtype: list

      .. ## Input.read ##

   .. ## pygame.midi.Input ##

.. class:: Output

   | :sl:`Output is used to send midi to an output device`
   | :sg:`Output(device_id) -> None`
   | :sg:`Output(device_id, latency=0) -> None`
   | :sg:`Output(device_id, buffer_size=256) -> None`
   | :sg:`Output(device_id, latency, buffer_size) -> None`

   The ``buffer_size`` specifies the number of output events to be buffered
   waiting for output. In some cases (see below) PortMidi does not buffer
   output at all and merely passes data to a lower-level API, in which case
   buffersize is ignored.

   ``latency`` is the delay in milliseconds applied to timestamps to determine
   when the output should actually occur. If ``latency`` is <<0, 0 is assumed.

   If ``latency`` is zero, timestamps are ignored and all output is delivered
   immediately. If ``latency`` is greater than zero, output is delayed until the
   message timestamp plus the ``latency``. In some cases, PortMidi can obtain
   better timing than your application by passing timestamps along to the
   device driver or hardware. Latency may also help you to synchronize midi
   data to audio data by matching midi latency to the audio buffer latency.

   .. note::
      Time is measured relative to the time source indicated by time_proc.
      Timestamps are absolute, not relative delays or offsets.

   .. method:: abort

      | :sl:`terminates outgoing messages immediately`
      | :sg:`abort() -> None`

      The caller should immediately close the output port; this call may result
      in transmission of a partial midi message. There is no abort for Midi
      input because the user can simply ignore messages in the buffer and close
      an input device at any time.

      .. ## Output.abort ##

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Output.close ##

   .. method:: note_off

      | :sl:`turns a midi note off (note must be on)`
      | :sg:`note_off(note, velocity=None, channel=0) -> None`

      Turn a note off in the output stream. The note must already be on for
      this to work correctly.

      .. ## Output.note_off ##

   .. method:: note_on

      | :sl:`turns a midi note on (note must be off)`
      | :sg:`note_on(note, velocity=None, channel=0) -> None`

      Turn a note on in the output stream. The note must already be off for
      this to work correctly.

      .. ## Output.note_on ##

   .. method:: set_instrument

      | :sl:`select an instrument, with a value between 0 and 127`
      | :sg:`set_instrument(instrument_id, channel=0) -> None`

      Select an instrument.

      .. ## Output.set_instrument ##

   .. method:: pitch_bend

      | :sl:`modify the pitch of a channel.`
      | :sg:`set_instrument(value=0, channel=0) -> None`

      Adjust the pitch of a channel. The value is a signed integer
      from -8192 to +8191. For example, 0 means "no change", +4096 is
      typically a semitone higher, and -8192 is 1 whole tone lower (though
      the musical range corresponding to the pitch bend range can also be
      changed in some synthesizers).

      If no value is given, the pitch bend is returned to "no change".

      .. versionadded:: 1.9.4

   .. method:: write

      | :sl:`writes a list of midi data to the Output`
      | :sg:`write(data) -> None`

      Writes series of MIDI information in the form of a list.

      :param list data: data to write, the expected format is
         ``[[[status, data1=0, data2=0, ...], timestamp], ...]``
         with the ``data#`` fields being optional

      :raises IndexError: if more than 1024 elements in the data list

      Example:
      ::

         # Program change at time 20000 and 500ms later send note 65 with
         # velocity 100.
         write([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])

      .. note::
         - Timestamps will be ignored if latency = 0
         - To get a note to play immediately, send MIDI info with timestamp
           read from function Time
         - Optional data fields: ``write([[[0xc0, 0, 0], 20000]])`` is
           equivalent to ``write([[[0xc0], 20000]])``

      .. ## Output.write ##

   .. method:: write_short

      | :sl:`writes up to 3 bytes of midi data to the Output`
      | :sg:`write_short(status) -> None`
      | :sg:`write_short(status, data1=0, data2=0) -> None`

      Output MIDI information of 3 bytes or less. The ``data`` fields are
      optional and assumed to be 0 if omitted.

      Examples of status byte values:
      ::

         0xc0  # program change
         0x90  # note on
         # etc.

      Example:
      ::

         # note 65 on with velocity 100
         write_short(0x90, 65, 100)

      .. ## Output.write_short ##

   .. method:: write_sys_ex

      | :sl:`writes a timestamped system-exclusive midi message.`
      | :sg:`write_sys_ex(when, msg) -> None`

      Writes a timestamped system-exclusive midi message.

      :param msg: midi message
      :type msg: list[int] or str
      :param when: timestamp in milliseconds

      Example:
      ::

         midi_output.write_sys_ex(0, '\xF0\x7D\x10\x11\x12\x13\xF7')

         # is equivalent to

         midi_output.write_sys_ex(pygame.midi.time(),
                                  [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])

      .. ## Output.write_sys_ex ##

   .. ## pygame.midi.Output ##

.. function:: get_count

   | :sl:`gets the number of devices.`
   | :sg:`get_count() -> num_devices`

   Device ids range from 0 to ``get_count() - 1``

   .. ## pygame.midi.get_count ##

.. function:: get_default_input_id

   | :sl:`gets default input device number`
   | :sg:`get_default_input_id() -> default_id`

   The following describes the usage details for this function and the
   :func:`get_default_output_id` function.

   Return the default device ID or ``-1`` if there are no devices. The result
   can be passed to the :class:`Input`/:class:`Output` class.

   On a PC the user can specify a default device by setting an environment
   variable. To use device #1, for example:
   ::

      set PM_RECOMMENDED_INPUT_DEVICE=1
      or
      set PM_RECOMMENDED_OUTPUT_DEVICE=1

   The user should first determine the available device ID by using the
   supplied application "testin" or "testout".

   In general, the registry is a better place for this kind of info. With
   USB devices that can come and go, using integers is not very reliable
   for device identification. Under Windows, if ``PM_RECOMMENDED_INPUT_DEVICE``
   (or ``PM_RECOMMENDED_OUTPUT_DEVICE``) is NOT found in the environment,
   then the default device is obtained by looking for a string in the registry
   under:
   ::

      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
      or
      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device


   The number of the first device with a substring that matches the
   string exactly is returned. For example, if the string in the registry is
   "USB" and device 1 is named "In USB MidiSport 1x1", then that will be
   the default input because it contains the string "USB".

   In addition to the name, :func:`get_device_info()` returns "interf", which is
   the interface name. The "interface" is the underlying software system or
   API used by PortMidi to access devices. Supported interfaces:
   ::

      MMSystem   # the only Win32 interface currently supported
      ALSA       # the only Linux interface currently supported
      CoreMIDI   # the only Mac OS X interface currently supported
      # DirectX - not implemented
      # OSS     - not implemented

   To specify both the interface and the device name in the registry, separate
   the two with a comma and a space. The string before the comma must be a
   substring of the "interf" string and the string after the space must be a
   substring of the "name" name string in order to match the device. e.g.:
   ::

      MMSystem, In USB MidiSport 1x1

   .. note::
      In the current release, the default is simply the first device (the
      input or output device with the lowest PmDeviceID).

   .. ## pygame.midi.get_default_input_id ##

.. function:: get_default_output_id

   | :sl:`gets default output device number`
   | :sg:`get_default_output_id() -> default_id`

   See :func:`get_default_input_id` for usage details.

   .. ## pygame.midi.get_default_output_id ##

.. function:: get_device_info

   | :sl:`returns information about a midi device`
   | :sg:`get_device_info(an_id) -> (interf, name, input, output, opened)`
   | :sg:`get_device_info(an_id) -> None`

   Gets the device info for a given id.

   :param int an_id: id of the midi device being queried

   :returns: if the id is out of range ``None`` is returned, otherwise
      a tuple of (interf, name, input, output, opened) is returned.

         - interf: string describing the device interface (e.g. 'ALSA')
         - name: string name of the device (e.g. 'Midi Through Port-0')
         - input: 1 if the device is an input device, otherwise 0
         - output: 1 if the device is an output device, otherwise 0
         - opened: 1 if the device is opened, otherwise 0
   :rtype: tuple or None

   .. ## pygame.midi.get_device_info ##

.. function:: midis2events

   | :sl:`converts midi events to pygame events`
   | :sg:`midis2events(midi_events, device_id) -> [Event, ...]`

   Takes a sequence of midi events and returns list of pygame events.

   The ``midi_events`` data is expected to be a sequence of
   ``((status, data1, data2, data3), timestamp)`` midi events (all values
   required).

   :returns: a list of pygame events of event type ``MIDIIN``
   :rtype: list

   .. ## pygame.midi.midis2events ##

.. function:: time

   | :sl:`returns the current time in ms of the PortMidi timer`
   | :sg:`time() -> time`

   The time is reset to 0 when the :mod:`pygame.midi` module is initialized.

   .. ## pygame.midi.time ##


.. function:: frequency_to_midi

   | :sl:`Converts a frequency into a MIDI note. Rounds to the closest midi note.`
   | :sg:`frequency_to_midi(midi_note) -> midi_note`

   example:
   ::

       frequency_to_midi(27.5) == 21

   .. versionadded:: 1.9.5

   .. ## pygame.midi.frequency_to_midi ##


.. function:: midi_to_frequency

   | :sl:`Converts a midi note to a frequency.`
   | :sg:`midi_to_frequency(midi_note) -> frequency`

   example:
   ::

       midi_to_frequency(21) == 27.5

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_frequency ##


.. function:: midi_to_ansi_note

   | :sl:`Returns the Ansi Note name for a midi number.`
   | :sg:`midi_to_ansi_note(midi_note) -> ansi_note`

   example:
   ::

       midi_to_ansi_note(21) == 'A0'

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_ansi_note ##

.. exception:: MidiException

   | :sl:`exception that pygame.midi functions and classes can raise`
   | :sg:`MidiException(errno) -> None`

   .. ## pygame.midi.MidiException ##


.. ## pygame.midi ##


--- Contenu du fichier : overlay.rst.txt ---
.. include:: common.txt

:mod:`pygame.Overlay`
=====================

.. currentmodule:: pygame

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.

.. class:: Overlay

   | :sl:`pygame object for video overlay graphics`
   | :sg:`Overlay(format, (width, height)) -> Overlay`

   The Overlay objects provide support for accessing hardware video overlays.
   Video overlays do not use standard ``RGB`` pixel formats, and can use
   multiple resolutions of data to create a single image.

   The Overlay objects represent lower level access to the display hardware. To
   use the object you must understand the technical details of video overlays.

   The Overlay format determines the type of pixel data used. Not all hardware
   will support all types of overlay formats. Here is a list of available
   format types:

   ::

     YV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY

   The width and height arguments control the size for the overlay image data.
   The overlay image can be displayed at any size, not just the resolution of
   the overlay.

   The overlay objects are always visible, and always show above the regular
   display contents.

   .. method:: display

      | :sl:`set the overlay pixel data`
      | :sg:`display((y, u, v)) -> None`
      | :sg:`display() -> None`

      Display the YUV data in SDL's overlay planes. The y, u, and v arguments
      are strings of binary data. The data must be in the correct format used
      to create the Overlay.

      If no argument is passed in, the Overlay will simply be redrawn with the
      current data. This can be useful when the Overlay is not really hardware
      accelerated.

      The strings are not validated, and improperly sized strings could crash
      the program.

      .. ## Overlay.display ##

   .. method:: set_location

      | :sl:`control where the overlay is displayed`
      | :sg:`set_location(rect) -> None`

      Set the location for the overlay. The overlay will always be shown
      relative to the main display Surface. This does not actually redraw the
      overlay, it will be updated on the next call to ``Overlay.display()``.

      .. ## Overlay.set_location ##

   .. method:: get_hardware

      | :sl:`test if the Overlay is hardware accelerated`
      | :sg:`get_hardware(rect) -> int`

      Returns a True value when the Overlay is hardware accelerated. If the
      platform does not support acceleration, software rendering is used.

      .. ## Overlay.get_hardware ##

   .. ## pygame.Overlay ##


--- Contenu du fichier : gfxdraw.rst.txt ---
.. include:: common.txt

:mod:`pygame.gfxdraw`
=====================

.. module:: pygame.gfxdraw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The pygame package does not import gfxdraw automatically when loaded, so it
must imported explicitly to be used.

::

    import pygame
    import pygame.gfxdraw

For all functions the arguments are strictly positional and integers are
accepted for coordinates and radii. The ``color`` argument can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)

The functions :meth:`rectangle` and :meth:`box` will accept any ``(x, y, w, h)``
sequence for their ``rect`` argument, though :mod:`pygame.Rect` instances are
preferred.

To draw a filled antialiased shape, first use the antialiased (aa*) version
of the function, and then use the filled (filled_*) version.
For example:

::

   col = (255, 0, 0)
   surf.fill((255, 255, 255))
   pygame.gfxdraw.aacircle(surf, x, y, 30, col)
   pygame.gfxdraw.filled_circle(surf, x, y, 30, col)


.. note::
   For threading, each of the functions releases the GIL during the C part of
   the call.

.. note::
   See the :mod:`pygame.draw` module for alternative draw methods.
   The ``pygame.gfxdraw`` module differs from the :mod:`pygame.draw` module in
   the API it uses and the different draw functions available.
   ``pygame.gfxdraw`` wraps the primitives from the library called SDL_gfx,
   rather than using modified versions.

.. versionadded:: 1.9.0


.. function:: pixel

   | :sl:`draw a pixel`
   | :sg:`pixel(surface, x, y, color) -> None`

   Draws a single pixel, at position (x ,y), on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the pixel
   :param int y: y coordinate of the pixel
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pixel ##

.. function:: hline

   | :sl:`draw a horizontal line`
   | :sg:`hline(surface, x1, x2, y, color) -> None`

   Draws a straight horizontal line (``(x1, y)`` to ``(x2, y)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y: y coordinate of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.hline ##

.. function:: vline

   | :sl:`draw a vertical line`
   | :sg:`vline(surface, x, y1, y2, color) -> None`

   Draws a straight vertical line (``(x, y1)`` to ``(x, y2)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the line
   :param int y1: y coordinate of one end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.vline ##

.. function:: line

   | :sl:`draw a line`
   | :sg:`line(surface, x1, y1, x2, y2, color) -> None`

   Draws a straight line (``(x1, y1)`` to ``(x2, y2)``) on the given surface.
   There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int y1: y coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.line ##

.. function:: rectangle

   | :sl:`draw a rectangle`
   | :sg:`rectangle(surface, rect, color) -> None`

   Draws an unfilled rectangle on the given surface. For a filled rectangle use
   :meth:`box`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. ## pygame.gfxdraw.rectangle ##

.. function:: box

   | :sl:`draw a filled rectangle`
   | :sg:`box(surface, rect, color) -> None`

   Draws a filled rectangle on the given surface. For an unfilled rectangle use
   :meth:`rectangle`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. note::
      The :func:`pygame.Surface.fill` method works just as well for drawing
      filled rectangles. In fact :func:`pygame.Surface.fill` can be hardware
      accelerated on some platforms with both software and hardware display
      modes.

   .. ## pygame.gfxdraw.box ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, x, y, r, color) -> None`

   Draws an unfilled circle on the given surface. For a filled circle use
   :meth:`filled_circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.circle ##

.. function:: aacircle

   | :sl:`draw an antialiased circle`
   | :sg:`aacircle(surface, x, y, r, color) -> None`

   Draws an unfilled antialiased circle on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aacircle ##

.. function:: filled_circle

   | :sl:`draw a filled circle`
   | :sg:`filled_circle(surface, x, y, r, color) -> None`

   Draws a filled circle on the given surface. For an unfilled circle use
   :meth:`circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled ellipse on the given surface. For a filled ellipse use
   :meth:`filled_ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.ellipse ##

.. function:: aaellipse

   | :sl:`draw an antialiased ellipse`
   | :sg:`aaellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled antialiased ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aaellipse ##

.. function:: filled_ellipse

   | :sl:`draw a filled ellipse`
   | :sg:`filled_ellipse(surface, x, y, rx, ry, color) -> None`

   Draws a filled ellipse on the given surface. For an unfilled ellipse use
   :meth:`ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_ellipse ##

.. function:: arc

   | :sl:`draw an arc`
   | :sg:`arc(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an arc on the given surface. For an arc with its endpoints connected
   to its center use :meth:`pie`.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the arc. The arc is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   nothing will be drawn

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the arc
   :param int y: y coordinate of the center of the arc
   :param int r: radius of the arc
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      This function uses *degrees* while the :func:`pygame.draw.arc` function
      uses *radians*.

   .. ## pygame.gfxdraw.arc ##

.. function:: pie

   | :sl:`draw a pie`
   | :sg:`pie(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an unfilled pie on the given surface. A pie is an :meth:`arc` with its
   endpoints connected to its center.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the pie. The pie is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   a straight line will be drawn from the center position at the given angle,
   to a length of the radius.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the pie
   :param int y: y coordinate of the center of the pie
   :param int r: radius of the pie
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pie ##

.. function:: trigon

   | :sl:`draw a trigon/triangle`
   | :sg:`trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled trigon (triangle) on the given surface. For a filled
   trigon use :meth:`filled_trigon`.

   A trigon can also be drawn using :meth:`polygon` e.g.
   ``polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.trigon ##

.. function:: aatrigon

   | :sl:`draw an antialiased trigon/triangle`
   | :sg:`aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled antialiased trigon (triangle) on the given surface.

   An aatrigon can also be drawn using :meth:`aapolygon` e.g.
   ``aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aatrigon ##

.. function:: filled_trigon

   | :sl:`draw a filled trigon/triangle`
   | :sg:`filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws a filled trigon (triangle) on the given surface. For an unfilled
   trigon use :meth:`trigon`.

   A filled_trigon can also be drawn using :meth:`filled_polygon` e.g.
   ``filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_trigon ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, points, color) -> None`

   Draws an unfilled polygon on the given surface. For a filled polygon use
   :meth:`filled_polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.polygon ##

.. function:: aapolygon

   | :sl:`draw an antialiased polygon`
   | :sg:`aapolygon(surface, points, color) -> None`

   Draws an unfilled antialiased polygon on the given surface.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.aapolygon ##

.. function:: filled_polygon

   | :sl:`draw a filled polygon`
   | :sg:`filled_polygon(surface, points, color) -> None`

   Draws a filled polygon on the given surface. For an unfilled polygon use
   :meth:`polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)`
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.filled_polygon ##

.. function:: textured_polygon

   | :sl:`draw a textured polygon`
   | :sg:`textured_polygon(surface, points, texture, tx, ty) -> None`

   Draws a textured polygon on the given surface. For better performance, the
   surface and the texture should have the same format.

   A per-pixel alpha texture blit to a per-pixel alpha surface will differ from
   a :func:`pygame.Surface.blit` blit. Also, a per-pixel alpha texture cannot be
   used with an 8-bit per pixel destination.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param Surface texture: texture to draw on the polygon
   :param int tx: x offset of the texture
   :param int ty: y offset of the texture

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.textured_polygon ##

.. function:: bezier

   | :sl:`draw a Bezier curve`
   | :sg:`bezier(surface, points, steps, color) -> None`

   Draws a Bézier curve on the given surface.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates used to form a
      curve, where each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param int steps: number of steps for the interpolation, the minimum is 2
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``steps < 2``
   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.bezier ##

.. ## pygame.gfxdraw ##


--- Contenu du fichier : fastevent.rst.txt ---
.. include:: common.txt

:mod:`pygame.fastevent`
=======================

.. module:: pygame.fastevent
   :synopsis: pygame module for interacting with events and queues from multiple
              threads.

| :sl:`pygame module for interacting with events and queues`

IMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2

In older pygame versions before pygame 2, :mod:`pygame.event` was not well
suited for posting events from different threads. This module served as a
replacement (with less features) for multithreaded use. Now, the usage of this
module is highly discouraged in favour of use of the main :mod:`pygame.event`
module. This module will be removed in a future pygame version.

Below, the legacy docs of the module is provided

.. function:: init

   | :sl:`initialize pygame.fastevent`
   | :sg:`init() -> None`

   Initialize the pygame.fastevent module.

   .. ## pygame.fastevent.init ##

.. function:: get_init

   | :sl:`returns True if the fastevent module is currently initialized`
   | :sg:`get_init() -> bool`

   Returns True if the pygame.fastevent module is currently initialized.

   .. ## pygame.fastevent.get_init ##

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.fastevent` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. ## pygame.fastevent.pump ##

.. function:: wait

   | :sl:`wait for an event`
   | :sg:`wait() -> Event`

   Returns the current event on the queue. If there are no messages
   waiting on the queue, this will not return until one is available.
   Sometimes it is important to use this wait to get events from the queue,
   it will allow your application to idle when the user isn't doing anything
   with it.

   .. ## pygame.fastevent.wait ##

.. function:: poll

   | :sl:`get an available event`
   | :sg:`poll() -> Event`

   Returns next event on queue. If there is no event waiting on the queue,
   this will return an event with type NOEVENT.

   .. ## pygame.fastevent.poll ##

.. function:: get

   | :sl:`get all events from the queue`
   | :sg:`get() -> list of Events`

   This will get all the messages and remove them from the queue.

   .. ## pygame.fastevent.get ##

.. function:: post

   | :sl:`place an event on the queue`
   | :sg:`post(Event) -> None`

   This will post your own event objects onto the event queue. You can post
   any event type you want, but some care must be taken. For example, if you
   post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving
   the event will expect the standard MOUSEBUTTONDOWN attributes to be
   available, like 'pos' and 'button'.

   Because pygame.fastevent.post() may have to wait for the queue to empty,
   you can get into a dead lock if you try to append an event on to a full
   queue from the thread that processes events. For that reason I do not
   recommend using this function in the main thread of an SDL program.

   .. ## pygame.fastevent.post ##

.. ## pygame.fastevent ##

--- Contenu du fichier : sdl2_controller.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.controller`
==============================

.. module:: pygame._sdl2.controller
   :synopsis: pygame module to work with controllers

| :sl:`Pygame module to work with controllers.`

.. note::
   Use import pygame._sdl2.controller before using this module.

This module offers control over common controller types like the dualshock 4 or
the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons,
a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.

Pygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but
they always refer to the same buttons. For example ``CONTROLLER_BUTTON_X`` is
always the leftmost button of the 4 buttons on the right.

Controllers can generate the following events::

   CONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,
   CONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED

Additionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated
(to get the version of sdl pygame is built with use :meth:`pygame.version.SDL`)::

   CONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP

These events can be enabled/disabled by :meth:`pygame._sdl2.controller.set_eventstate`
Note that controllers can generate joystick events as well. This function only toggles
events related to controllers.

.. note::
   See the :mod:`pygame.joystick` for a more versatile but more advanced api.

.. versionadded:: 2 This module requires SDL2.

.. function:: init

   | :sl:`initialize the controller module`
   | :sg:`init() -> None`

   Initialize the controller module.

   .. ## pygame._sdl2.controller.init ##

.. function:: quit

   | :sl:`Uninitialize the controller module.`
   | :sg:`quit() -> None`

   Uninitialize the controller module.

   .. ## pygame._sdl2.controller.quit ##

.. function:: get_init

   | :sl:`Returns True if the controller module is initialized.`
   | :sg:`get_init() -> bool`

   Test if ``pygame._sdl2.controller.init()`` was called.

    .. ## pygame._sdl2.controller.get_init ##

.. function:: set_eventstate

    | :sl:`Sets the current state of events related to controllers`
    | :sg:`set_eventstate(state) -> None`

    Enable or disable events connected to controllers.

    .. note::
        Controllers can still generate joystick events, which will not be toggled by this function.

    .. versionchanged:: 2.0.2: Changed return type from int to None

    .. ## pygame._sdl2.controller.set_eventstate ##

.. function:: get_eventstate

    | :sl:`Gets the current state of events related to controllers`
    | :sg:`get_eventstate() -> bool`

    Returns the current state of events related to controllers, True meaning
    events will be posted.

    .. versionadded:: 2.0.2

    .. ## pygame._sdl2.controller.get_eventstate ##

.. function:: get_count

    | :sl:`Get the number of joysticks connected`
    | :sg:`get_count() -> int`

    Get the number of joysticks connected.

    .. ## pygame._sdl2.controller.get_count ##

.. function:: is_controller

    | :sl:`Check if the given joystick is supported by the game controller interface`
    | :sg:`is_controller(index) -> bool`

    Returns True if the index given can be used to create a controller object.

    .. ## pygame._sdl2.controller.is_controller ##

.. function:: name_forindex

    | :sl:`Get the name of the controller`
    | :sg:`name_forindex(index) -> name or None`

    Returns the name of controller, or None if there's no name or the
    index is invalid.

    .. ## pygame._sdl2.controller.name_forindex ##

.. class:: Controller

    | :sl:`Create a new Controller object.`
    | :sg:`Controller(index) -> Controller`

    Create a new Controller object. Index should be integer between
    0 and ``pygame._sdl2.controller.get_count()``. Controllers also
    can be created from a ``pygame.joystick.Joystick`` using
    ``pygame._sdl2.controller.from_joystick``. Controllers are
    initialized on creation.

   .. method:: quit

      | :sl:`uninitialize the Controller`
      | :sg:`quit() -> None`

      Close a Controller object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Controller.quit ##

   .. method:: get_init

      | :sl:`check if the Controller is initialized`
      | :sg:`get_init() -> bool`

      Returns True if the Controller object is currently initialised.

      .. ## Controller.get_init ##

   .. staticmethod:: from_joystick

       | :sl:`Create a Controller from a pygame.joystick.Joystick object`
       | :sg:`from_joystick(joystick) -> Controller`

       Create a Controller object from a ``pygame.joystick.Joystick`` object

       .. ## Controller.from_joystick ##

   .. method:: attached

      | :sl:`Check if the Controller has been opened and is currently connected.`
      | :sg:`attached() -> bool`

      Returns True if the Controller object is opened and connected.

      .. ## Controller.attached ##

   .. method:: as_joystick

      | :sl:`Returns a pygame.joystick.Joystick() object`
      | :sg:`as_joystick() -> Joystick object`

      Returns a pygame.joystick.Joystick() object created from this controller's index

      .. ## Controller.as_joystick ##

   .. method:: get_axis

      | :sl:`Get the current state of a joystick axis`
      | :sg:`get_axis(axis) -> int`

      Get the current state of a trigger or joystick axis.
      The axis argument must be one of the following constants::

         CONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,
         CONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,
         CONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT

      Joysticks can return a value between -32768 and 32767. Triggers however
      can only return a value between 0 and 32768.

      .. ## Controller.get_axis ##

   .. method:: get_button

      | :sl:`Get the current state of a button`
      | :sg:`get_button(button) -> bool`

      Get the current state of a button, True meaning it is pressed down.
      The button argument must be one of the following constants::

         CONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,
         CONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y
         CONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,
         CONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,
         CONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,
         CONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,
         CONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,
         CONTROLLER_BUTTON_START


      .. ## Controller.get_button ##

   .. method:: get_mapping

      | :sl:`Get the mapping assigned to the controller`
      | :sg:`get_mapping() -> mapping`

      Returns a dict containing the mapping of the Controller. For more
      information see :meth:`Controller.set_mapping()`

      .. versionchanged:: 2.0.2: Return type changed from ``str`` to ``dict``

      .. ## Controller.get_mapping ##

   .. method:: set_mapping

      | :sl:`Assign a mapping to the controller`
      | :sg:`set_mapping(mapping) -> int`

      Rebind buttons, axes, triggers and dpads. The mapping should be a 
      dict containing all buttons, hats and axes. The easiest way to get this
      is to use the dict returned by :meth:`Controller.get_mapping`. To edit
      this mapping assign a value to the original button. The value of the
      dictionary must be a button, hat or axis represented in the following way:

      * For a button use: bX where X is the index of the button.
      * For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).
      * For an axis use: aX where x is the index of the axis.

      An example of mapping::

         mapping = controller.get_mapping() # Get current mapping
         mapping["a"] = "b3" # Remap button a to y
         mapping["y"] = "b0" # Remap button y to a
         controller.set_mapping(mapping) # Set the mapping


      The function will return 1 if a new mapping is added or 0 if an existing one is updated.

      .. versionchanged:: 2.0.2: Renamed from ``add_mapping`` to ``set_mapping``
      .. versionchanged:: 2.0.2: Argument type changed from ``str`` to ``dict``

      .. ## Controller.set_mapping ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the controller, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Controller.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      controller does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Controller.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the controller. See
      :meth:`Controller.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Controller.stop_rumble ##

.. ## pygame._sdl2.controller ##


--- Contenu du fichier : tests.rst.txt ---
.. include:: common.txt

:mod:`pygame.tests`
===================

.. module:: pygame.tests
   :synopsis: Pygame unit test suite package

| :sl:`Pygame unit test suite package`

A quick way to run the test suite package from the command line is to import
the go submodule with the Python -m option:

::

  python -m pygame.tests [<test options>]

Command line option --help displays a usage message. Available options
correspond to the :func:`pygame.tests.run` arguments.

The xxxx_test submodules of the tests package are unit test suites for
individual parts of pygame. Each can also be run as a main program. This is
useful if the test, such as cdrom_test, is interactive.

For pygame development the test suite can be run from a pygame distribution
root directory. Program ``run_tests.py`` is provided for convenience, though
test/go.py can be run directly.

Module level tags control which modules are included in a unit test run. Tags
are assigned to a unit test module with a corresponding <name>_tags.py module.
The tags module has the global __tags__, a list of tag names. For example,
``cdrom_test.py`` has a tag file ``cdrom_tags.py`` containing a tags list that
has the 'interactive' string. The 'interactive' tag indicates ``cdrom_test.py``
expects user input. It is excluded from a ``run_tests.py`` or
``pygame.tests.go`` run. 

Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These
two tags indicate unit tests that will not run on a particular platform, or
for which no corresponding pygame module is available.

The test runner will list each excluded module along with the tag responsible.

.. function:: run

   | :sl:`Run the pygame unit test suite`
   | :sg:`run(*args, **kwds) -> tuple`

   Positional arguments (optional):

   ::

       The names of tests to include. If omitted then all tests are run. Test names
       need not include the trailing '_test'.

   Keyword arguments:

   ::

       incomplete - fail incomplete tests (default False)
       nosubprocess - run all test suites in the current process
                      (default False, use separate subprocesses)
       dump - dump failures/errors as dict ready to eval (default False)
       file - if provided, the name of a file into which to dump failures/errors
       timings - if provided, the number of times to run each individual test to
                 get an average run time (default is run each test once)
       exclude - A list of TAG names to exclude from the run
       show_output - show silenced stderr/stdout on errors (default False)
       all - dump all results, not just errors (default False)
       randomize - randomize order of tests (default False)
       seed - if provided, a seed randomizer integer
       multi_thread - if provided, the number of THREADS in which to run
                      subprocessed tests
       time_out - if subprocess is True then the time limit in seconds before
                  killing a test (default 30)
       fake - if provided, the name of the fake tests package in the
              run_tests__tests subpackage to run instead of the normal
              pygame tests
       python - the path to a python executable to run subprocessed tests
                (default sys.executable)

   Return value:

   ::

       A tuple of total number of tests run, dictionary of error information.
       The dictionary is empty if no errors were recorded.

   By default individual test modules are run in separate subprocesses. This
   recreates normal pygame usage where ``pygame.init()`` and ``pygame.quit()``
   are called only once per program execution, and avoids unfortunate
   interactions between test modules. 
   
   A time limit is placed on test execution ensuring that any frozen tests
   processes are killed when their time allotment is expired. Use the single
   process option if threading is not working properly or if tests are taking
   too long. It is not guaranteed that all tests will pass in single process
   mode.

   Tests are run in a randomized order if the randomize argument is True or a
   seed argument is provided. If no seed integer is provided then the system
   time is used for the randomization seed value.

   Individual test modules may have a __tags__ attribute, a list of tag strings
   used to selectively omit modules from a run. By default only 'interactive'
   modules such as cdrom_test are ignored. An interactive module must be run
   from the console as a Python program.

   This function can only be called once per Python session. It is not
   reentrant.

   .. ## pygame.tests.run ##

.. ## pygame.tests ##


--- Contenu du fichier : cdrom.rst.txt ---
.. include:: common.txt

:mod:`pygame.cdrom`
===================

.. module:: pygame.cdrom
   :synopsis: pygame module for audio cdrom control

| :sl:`pygame module for audio cdrom control`

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.
	One alternative for python cdrom functionality is `pycdio <https://pypi.org/project/pycdio/>`_.
	
The cdrom module manages the ``CD`` and ``DVD`` drives on a computer. It can
also control the playback of audio CDs. This module needs to be initialized
before it can do anything. Each ``CD`` object you create represents a cdrom
drive and must also be initialized individually before it can do most things.

.. function:: init

   | :sl:`initialize the cdrom module`
   | :sg:`init() -> None`

   Initialize the cdrom module. This will scan the system for all ``CD``
   devices. The module must be initialized before any other functions will
   work. This automatically happens when you call ``pygame.init()``.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.init ##

.. function:: quit

   | :sl:`uninitialize the cdrom module`
   | :sg:`quit() -> None`

   Uninitialize the cdrom module. After you call this any existing ``CD``
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.quit ##

.. function:: get_init

   | :sl:`true if the cdrom module is initialized`
   | :sg:`get_init() -> bool`

   Test if the cdrom module is initialized or not. This is different than the
   ``CD.init()`` since each drive must also be initialized individually.

   .. ## pygame.cdrom.get_init ##

.. function:: get_count

   | :sl:`number of cd drives on the system`
   | :sg:`get_count() -> count`

   Return the number of cd drives on the system. When you create ``CD`` objects
   you need to pass an integer id that must be lower than this count. The count
   will be 0 if there are no drives on the system.

   .. ## pygame.cdrom.get_count ##

.. class:: CD

   | :sl:`class to manage a cdrom drive`
   | :sg:`CD(id) -> CD`

   You can create a ``CD`` object for each cdrom on the system. Use
   ``pygame.cdrom.get_count()`` to determine how many drives actually exist.
   The id argument is an integer of the drive, starting at zero.

   The ``CD`` object is not initialized, you can only call ``CD.get_id()`` and
   ``CD.get_name()`` on an uninitialized drive.

   It is safe to create multiple ``CD`` objects for the same drive, they will
   all cooperate normally.

   .. method:: init

      | :sl:`initialize a cdrom drive for use`
      | :sg:`init() -> None`

      Initialize the cdrom drive for use. The drive must be initialized for
      most ``CD`` methods to work. Even if the rest of pygame has been
      initialized.

      There may be a brief pause while the drive is initialized. Avoid
      ``CD.init()`` if the program should not stop for a second or two.

      .. ## CD.init ##

   .. method:: quit

      | :sl:`uninitialize a cdrom drive for use`
      | :sg:`quit() -> None`

      Uninitialize a drive for use. Call this when your program will not be
      accessing the drive for awhile.

      .. ## CD.quit ##

   .. method:: get_init

      | :sl:`true if this cd device initialized`
      | :sg:`get_init() -> bool`

      Test if this ``CDROM`` device is initialized. This is different than the
      ``pygame.cdrom.init()`` since each drive must also be initialized
      individually.

      .. ## CD.get_init ##

   .. method:: play

      | :sl:`start playing audio`
      | :sg:`play(track, start=None, end=None) -> None`

      Playback audio from an audio cdrom in the drive. Besides the track number
      argument, you can also pass a starting and ending time for playback. The
      start and end time are in seconds, and can limit the section of an audio
      track played.

      If you pass a start time but no end, the audio will play to the end of
      the track. If you pass a start time and 'None' for the end time, the
      audio will play to the end of the entire disc.

      See the ``CD.get_numtracks()`` and ``CD.get_track_audio()`` to find
      tracks to playback.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.play ##

   .. method:: stop

      | :sl:`stop audio playback`
      | :sg:`stop() -> None`

      Stops playback of audio from the cdrom. This will also lose the current
      playback position. This method does nothing if the drive isn't already
      playing audio.

      .. ## CD.stop ##

   .. method:: pause

      | :sl:`temporarily stop audio playback`
      | :sg:`pause() -> None`

      Temporarily stop audio playback on the ``CD``. The playback can be
      resumed at the same point with the ``CD.resume()`` method. If the ``CD``
      is not playing this method does nothing.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.pause ##

   .. method:: resume

      | :sl:`unpause audio playback`
      | :sg:`resume() -> None`

      Unpause a paused ``CD``. If the ``CD`` is not paused or already playing,
      this method does nothing.

      .. ## CD.resume ##

   .. method:: eject

      | :sl:`eject or open the cdrom drive`
      | :sg:`eject() -> None`

      This will open the cdrom drive and eject the cdrom. If the drive is
      playing or paused it will be stopped.

      .. ## CD.eject ##

   .. method:: get_id

      | :sl:`the index of the cdrom drive`
      | :sg:`get_id() -> id`

      Returns the integer id that was used to create the ``CD`` instance. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_id ##

   .. method:: get_name

      | :sl:`the system name of the cdrom drive`
      | :sg:`get_name() -> name`

      Return the string name of the drive. This is the system name used to
      represent the drive. It is often the drive letter or device name. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_name ##

   .. method:: get_busy

      | :sl:`true if the drive is playing audio`
      | :sg:`get_busy() -> bool`

      Returns True if the drive busy playing back audio.

      .. ## CD.get_busy ##

   .. method:: get_paused

      | :sl:`true if the drive is paused`
      | :sg:`get_paused() -> bool`

      Returns True if the drive is currently paused.

      .. ## CD.get_paused ##

   .. method:: get_current

      | :sl:`the current audio playback position`
      | :sg:`get_current() -> track, seconds`

      Returns both the current track and time of that track. This method works
      when the drive is either playing or paused.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_current ##

   .. method:: get_empty

      | :sl:`False if a cdrom is in the drive`
      | :sg:`get_empty() -> bool`

      Return False if there is a cdrom currently in the drive. If the drive is
      empty this will return True.

      .. ## CD.get_empty ##

   .. method:: get_numtracks

      | :sl:`the number of tracks on the cdrom`
      | :sg:`get_numtracks() -> count`

      Return the number of tracks on the cdrom in the drive. This will return
      zero of the drive is empty or has no tracks.

      .. ## CD.get_numtracks ##

   .. method:: get_track_audio

      | :sl:`true if the cdrom track has audio data`
      | :sg:`get_track_audio(track) -> bool`

      Determine if a track on a cdrom contains audio data. You can also call
      ``CD.num_tracks()`` and ``CD.get_all()`` to determine more information
      about the cdrom.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_audio ##

   .. method:: get_all

      | :sl:`get all track information`
      | :sg:`get_all() -> [(audio, start, end, length), ...]`

      Return a list with information for every track on the cdrom. The
      information consists of a tuple with four values. The audio value is True
      if the track contains audio data. The start, end, and length values are
      floating point numbers in seconds. Start and end represent absolute times
      on the entire disc.

      .. ## CD.get_all ##

   .. method:: get_track_start

      | :sl:`start time of a cdrom track`
      | :sg:`get_track_start(track) -> seconds`

      Return the absolute time in seconds where at start of the cdrom track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_start ##

   .. method:: get_track_length

      | :sl:`length of a cdrom track`
      | :sg:`get_track_length(track) -> seconds`

      Return a floating point value in seconds of the length of the cdrom
      track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_length ##

   .. ## pygame.cdrom.CD ##

.. ## pygame.cdrom ##


--- Contenu du fichier : pygame.rst.txt ---
.. include:: common.txt

:mod:`pygame`
=============

.. module:: pygame
   :synopsis: the top level pygame package

| :sl:`the top level pygame package`

The pygame package represents the top-level package for others to use. Pygame
itself is broken into many submodules, but this does not affect programs that
use pygame.

As a convenience, most of the top-level variables in pygame have been placed
inside a module named :mod:`pygame.locals`. This is meant to be used with
``from pygame.locals import *``, in addition to ``import pygame``.

When you ``import pygame`` all available pygame submodules are automatically
imported. Be aware that some of the pygame modules are considered *optional*,
and may not be available. In that case, pygame will provide a placeholder
object instead of the module, which can be used to test for availability.

.. function:: init

   | :sl:`initialize all imported pygame modules`
   | :sg:`init() -> (numpass, numfail)`

   Initialize all imported pygame modules. No exceptions will be raised if a
   module fails, but the total number if successful and failed inits will be
   returned as a tuple. You can always initialize individual modules manually,
   but :func:`pygame.init` is a convenient way to get everything started. The
   ``init()`` functions for individual modules will raise exceptions when they
   fail.

   You may want to initialize the different modules separately to speed up your
   program or to not use modules your game does not require.

   It is safe to call this ``init()`` more than once as repeated calls will have
   no effect. This is true even if you have ``pygame.quit()`` all the modules.

   .. ## pygame.init ##

.. function:: quit

   | :sl:`uninitialize all pygame modules`
   | :sg:`quit() -> None`

   Uninitialize all pygame modules that have previously been initialized. When
   the Python interpreter shuts down, this method is called regardless, so your
   program should not need it, except when it wants to terminate its pygame
   resources and continue. It is safe to call this function more than once as
   repeated calls have no effect.

   .. note::
      Calling :func:`pygame.quit` will not exit your program. Consider letting
      your program end in the same way a normal Python program will end.

   .. ## pygame.quit ##

.. function:: get_init

   | :sl:`returns True if pygame is currently initialized`
   | :sg:`get_init() -> bool`

   Returns ``True`` if pygame is currently initialized.

   .. versionadded:: 1.9.5

   .. ## pygame.get_init ##

.. exception:: error

   | :sl:`standard pygame exception`
   | :sg:`raise pygame.error(message)`

   This exception is raised whenever a pygame or SDL operation fails. You
   can catch any anticipated problems and deal with the error. The exception is
   always raised with a descriptive message about the problem.

   Derived from the ``RuntimeError`` exception, which can also be used to catch
   these raised errors.

   .. ## pygame.error ##

.. function:: get_error

   | :sl:`get the current error message`
   | :sg:`get_error() -> errorstr`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.get_error ##

.. function:: set_error

   | :sl:`set the current error message`
   | :sg:`set_error(error_msg) -> None`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.set_error ##

.. function:: get_sdl_version

   | :sl:`get the version number of SDL`
   | :sg:`get_sdl_version(linked=True) -> major, minor, patch`

   Returns the three version numbers of the SDL library. ``linked=True``
   will cause the function to return the version of the library that pygame
   is linked against while ``linked=False`` will cause the function to return
   the version of the library that pygame is compiled against.
   It can be used to detect which features may or may not be
   available through pygame.

   .. versionadded:: 1.7.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added

   .. ## pygame.get_sdl_version ##

.. function:: get_sdl_byteorder

   | :sl:`get the byte order of SDL`
   | :sg:`get_sdl_byteorder() -> int`

   Returns the byte order of the SDL library. It returns ``1234`` for little
   endian byte order and ``4321`` for big endian byte order.

   .. versionadded:: 1.8

   .. ## pygame.get_sdl_byteorder ##

.. function:: register_quit

   | :sl:`register a function to be called when pygame quits`
   | :sg:`register_quit(callable) -> None`

   When :func:`pygame.quit` is called, all registered quit functions are
   called. Pygame modules do this automatically when they are initializing, so
   this function will rarely be needed.

   .. ## pygame.register_quit ##

.. function:: encode_string

   | :sl:`Encode a Unicode or bytes object`
   | :sg:`encode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   encoding (string): If present, encoding to use. The default is
   ``'unicode_escape'``.

   errors (string): If given, how to handle unencodable characters. The default
   is ``'backslashreplace'``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``. For the default encoding and errors values
   there should be no encoding errors.

   This function is used in encoding file paths. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_string ##

.. function:: encode_file_path

   | :sl:`Encode a Unicode or bytes object as a file system path`
   | :sg:`encode_file_path([obj [, etype]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``.

   This function is used to encode file paths in pygame. Encoding is to the
   codec as returned by ``sys.getfilesystemencoding()``. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_file_path ##


:mod:`pygame.version`
=====================

.. module:: pygame.version
   :synopsis: small module containing version information

| :sl:`small module containing version information`

This module is automatically imported into the pygame package and can be used to
check which version of pygame has been imported.

.. data:: ver

   | :sl:`version number as a string`
   | :sg:`ver = '1.2'`

   This is the version represented as a string. It can contain a micro release
   number as well, e.g. ``'1.5.2'``

   .. ## pygame.version.ver ##

.. data:: vernum

   | :sl:`tupled integers of the version`
   | :sg:`vernum = (1, 5, 3)`

   This version information can easily be compared with other version
   numbers of the same format. An example of checking pygame version numbers
   would look like this:

   ::

       if pygame.version.vernum < (1, 5):
           print('Warning, older version of pygame (%s)' %  pygame.version.ver)
           disable_advanced_features = True

   .. versionadded:: 1.9.6 Attributes ``major``, ``minor``, and ``patch``.

   ::

      vernum.major == vernum[0]
      vernum.minor == vernum[1]
      vernum.patch == vernum[2]

   .. versionchanged:: 1.9.6
      ``str(pygame.version.vernum)`` returns a string like ``"2.0.0"`` instead
      of ``"(2, 0, 0)"``.

   .. versionchanged:: 1.9.6
      ``repr(pygame.version.vernum)`` returns a string like
      ``"PygameVersion(major=2, minor=0, patch=0)"`` instead of ``"(2, 0, 0)"``.

   .. ## pygame.version.vernum ##

.. data:: rev

   | :sl:`repository revision of the build`
   | :sg:`rev = 'a6f89747b551+'`

   The Mercurial node identifier of the repository checkout from which this
   package was built. If the identifier ends with a plus sign '+' then the
   package contains uncommitted changes. Please include this revision number
   in bug reports, especially for non-release pygame builds.
   
   Important note: pygame development has moved to github, this variable is 
   obsolete now. As soon as development shifted to github, this variable started
   returning an empty string ``""``. 
   It has always been returning an empty string since ``v1.9.5``.
   
   .. versionchanged:: 1.9.5
      Always returns an empty string ``""``.

   .. ## pygame.version.rev ##

.. data:: SDL

   | :sl:`tupled integers of the SDL library version`
   | :sg:`SDL = '(2, 0, 12)'`

   This is the SDL library version represented as an extended tuple. It also has
   attributes 'major', 'minor' & 'patch' that can be accessed like this:

   ::

     >>> pygame.version.SDL.major
     2

   printing the whole thing returns a string like this:

   ::

    >>> pygame.version.SDL
    SDLVersion(major=2, minor=0, patch=12)

   .. versionadded:: 2.0.0

   .. ## pygame.version.SDL ##

.. ## pygame.version ##

.. ## pygame ##

.. _environment-variables:

**Setting Environment Variables**

Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide
range of the library's functionality. Some of the variables are from pygame itself, while others come from
the underlying C SDL library that pygame uses.

In python, environment variables are usually set in code like this::

     import os
     os.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'

Or to preserve users ability to override the variable::

     import os
     os.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')

If the variable is more useful for users of an app to set than the developer then they can set it like this:

**Windows**::

    set NAME_OF_ENVIRONMENT_VARIABLE=value_to_set
    python my_application.py

**Linux/Mac**::

    ENV_VAR=value python my_application.py

For some variables they need to be set before initialising pygame, some must be set before even importing pygame,
and others can simply be set right before the area of code they control is run.

Below is a list of environment variables, their settable values, and a brief description of what they do.

|

**Pygame Environment Variables**

These variables are defined by pygame itself.

|

::

 PYGAME_DISPLAY - Experimental (subject to change)
 Set index of the display to use, "0" is the default.

This sets the display where pygame will open its window
or screen. The value set here will be used if set before
calling :func:`pygame.display.set_mode()`, and as long as no
'display' parameter is passed into :func:`pygame.display.set_mode()`.

|

::

 PYGAME_FORCE_SCALE -
 Set to "photo" or "default".

This forces set_mode() to use the SCALED display mode and,
if "photo" is set, makes the scaling use the slowest, but
highest quality anisotropic scaling algorithm, if it is
available. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 PYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0
 Set to "1" to enable the SDL2 blitter.

This makes pygame use the SDL2 blitter for all alpha
blending. The SDL2 blitter is sometimes faster than
the default blitter but uses a different formula so
the final colours may differ. Must be set before
:func:`pygame.init()` is called.

|

::

 PYGAME_HIDE_SUPPORT_PROMPT -
 Set to "1" to hide the prompt.

This stops the welcome message popping up in the
console that tells you which version of python,
pygame & SDL you are using. Must be set before
importing pygame.

|

::

 PYGAME_FREETYPE -
 Set to "1" to enable.

This switches the pygame.font module to a pure
freetype implementation that bypasses SDL_ttf.
See the font module for why you might want to
do this. Must be set before importing pygame.

|

::

 PYGAME_CAMERA -
 Set to "opencv" or "vidcapture"

Forces the library backend used in the camera
module, overriding the platform defaults. Must
be set before calling :func:`pygame.camera.init()`.

In pygame 2.0.3, backends can be set programmatically instead, and the old
OpenCV backend has been replaced with one on top of "opencv-python," rather
than the old "highgui" OpenCV port. Also, there is a new native Windows
backend available.

|
|

**SDL Environment Variables**

These variables are defined by SDL.

For documentation on the environment variables available in
pygame 1 try `here
<https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html>`__.
For Pygame 2, some selected environment variables are listed below.

|

::

 SDL_VIDEO_CENTERED -
 Set to "1" to enable centering the window.

This will make the pygame window open in the centre of the display.
Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEO_WINDOW_POS -
 Set to "x,y" to position the top left corner of the window.

This allows control over the placement of the pygame window within
the display. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEODRIVER -
 Set to "drivername" to change the video driver used.

On some platforms there are multiple video drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.display.init()`.

|

::

 SDL_AUDIODRIVER -
 Set to "drivername" to change the audio driver used.

On some platforms there are multiple audio drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.mixer.init()`.

|

::

 SDL_VIDEO_ALLOW_SCREENSAVER
 Set to "1" to allow screensavers while pygame apps are running.

By default pygame apps disable screensavers while
they are running. Setting this environment variable allows users or
developers to change that and make screensavers run again.

|

::

 SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
 Set to "0" to re-enable the compositor.

By default SDL tries to disable the X11 compositor for all pygame
apps. This is usually a good thing as it's faster, however if you
have an app which *doesn't* update every frame and are using linux
you may want to disable this bypass. The bypass has reported problems
on KDE linux. This variable is only used on x11/linux platforms.

|

::

 SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 Set to "1" to allow joysticks to be updated even when the window is out of focus

By default, when the window is not in focus, input devices do not get
updated. However, using this environment variable it is possible to get
joystick updates even when the window is in the background. Must be set
before calling :func:`pygame.init()` or :func:`pygame.joystick.init()`.


--- Contenu du fichier : camera.rst.txt ---
.. include:: common.txt

:mod:`pygame.camera`
====================

.. module:: pygame.camera
   :synopsis: pygame module for camera use

| :sl:`pygame module for camera use`

.. note::
   Use import pygame.camera before using this module.

Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively,
with wider platform support available via an integrated OpenCV backend.

.. versionadded:: 2.0.2 Windows native camera support
.. versionadded:: 2.0.3 New OpenCV backends

EXPERIMENTAL!: This API may change or disappear in later pygame releases. If
you use this, your code will very likely break with the next pygame release.

The Bayer to ``RGB`` function is based on:

::

 Sonix SN9C101 based webcam basic I/F routines
 Copyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

New in pygame 1.9.0.

.. function:: init

   | :sl:`Module init`
   | :sg:`init(backend = None) -> None`

   This function starts up the camera module, choosing the best webcam backend
   it can find for your system. This is not guaranteed to succeed, and may even
   attempt to import third party modules, like `OpenCV`. If you want to
   override its backend choice, you can call pass the name of the backend you
   want into this function. More about backends in
   :func:`get_backends()`.

   .. versionchanged:: 2.0.3 Option to explicitly select backend

   .. ## pygame.camera.init ##

.. function:: get_backends

   | :sl:`Get the backends supported on this system`
   | :sg:`get_backends() -> [str]`

   This function returns every backend it thinks has a possibility of working
   on your system, in order of priority.

   pygame.camera Backends:
   ::

      Backend           OS        Description
      ---------------------------------------------------------------------------------
      _camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3
      _camera (V4L2)    Linux     Builtin
      OpenCV            Any       Uses `opencv-python` module, can't enumerate cameras
      OpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration
      VideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate
                                  cameras, may be removed in the future

   There are two main differences among backends.

   The _camera backends are built in to pygame itself, and require no third
   party imports. All the other backends do. For the OpenCV and VideoCapture
   backends, those modules need to be installed on your system.

   The other big difference is "camera enumeration." Some backends don't have
   a way to list out camera names, or even the number of cameras on the
   system. In these cases, :func:`list_cameras()` will return
   something like ``[0]``. If you know you have multiple cameras on the 
   system, these backend ports will pass through a "camera index number" 
   through if you use that as the ``device`` parameter.

   .. versionadded:: 2.0.3

   .. ## pygame.camera.get_backends ##

.. function:: colorspace

   | :sl:`Surface colorspace conversion`
   | :sg:`colorspace(Surface, format, DestSurface = None) -> Surface`

   Allows for conversion from "RGB" to a destination colorspace of "HSV" or
   "YUV". The source and destination surfaces must be the same size and pixel
   depth. This is useful for computer vision on devices with limited processing
   power. Capture as small of an image as possible, ``transform.scale()`` it
   even smaller, and then convert the colorspace to ``YUV`` or ``HSV`` before
   doing any processing on it.

   .. ## pygame.camera.colorspace ##

.. function:: list_cameras

   | :sl:`returns a list of available cameras`
   | :sg:`list_cameras() -> [cameras]`

   Checks the computer for available cameras and returns a list of strings of
   camera names, ready to be fed into :class:`pygame.camera.Camera`.

   If the camera backend doesn't support webcam enumeration, this will return
   something like ``[0]``. See :func:`get_backends()` for much more
   information.

   .. ## pygame.camera.list_cameras ##

.. class:: Camera

   | :sl:`load a camera`
   | :sg:`Camera(device, (width, height), format) -> Camera`

   Loads a camera. On Linux, the device is typically something like
   "/dev/video0". Default width and height are 640 by 480. 
   Format is the desired colorspace of the output. 
   This is useful for computer vision purposes. The default is
   ``RGB``. The following are supported:

      * ``RGB`` - Red, Green, Blue

      * ``YUV`` - Luma, Blue Chrominance, Red Chrominance

      * ``HSV`` - Hue, Saturation, Value

   .. method:: start

      | :sl:`opens, initializes, and starts capturing`
      | :sg:`start() -> None`

      Opens the camera device, attempts to initialize it, and begins recording
      images to a buffer. The camera must be started before any of the below
      functions can be used.

      .. ## Camera.start ##

   .. method:: stop

      | :sl:`stops, uninitializes, and closes the camera`
      | :sg:`stop() -> None`

      Stops recording, uninitializes the camera, and closes it. Once a camera
      is stopped, the below functions cannot be used until it is started again.

      .. ## Camera.stop ##

   .. method:: get_controls

      | :sl:`gets current values of user controls`
      | :sg:`get_controls() -> (hflip = bool, vflip = bool, brightness)`

      If the camera supports it, get_controls will return the current settings
      for horizontal and vertical image flip as bools and brightness as an int.
      If unsupported, it will return the default values of (0, 0, 0). Note that
      the return values here may be different than those returned by
      set_controls, though these are more likely to be correct.

      .. ## Camera.get_controls ##

   .. method:: set_controls

      | :sl:`changes camera settings if supported by the camera`
      | :sg:`set_controls(hflip = bool, vflip = bool, brightness) -> (hflip = bool, vflip = bool, brightness)`

      Allows you to change camera settings if the camera supports it. The
      return values will be the input values if the camera claims it succeeded
      or the values previously in use if not. Each argument is optional, and
      the desired one can be chosen by supplying the keyword, like hflip. Note
      that the actual settings being used by the camera may not be the same as
      those returned by set_controls. On Windows, :code:`hflip` and :code:`vflip` are
      implemented by pygame, not by the Camera, so they should always work, but
      :code:`brightness` is unsupported.

      .. ## Camera.set_controls ##

   .. method:: get_size

      | :sl:`returns the dimensions of the images being recorded`
      | :sg:`get_size() -> (width, height)`

      Returns the current dimensions of the images being captured by the
      camera. This will return the actual size, which may be different than the
      one specified during initialization if the camera did not support that
      size.

      .. ## Camera.get_size ##

   .. method:: query_image

      | :sl:`checks if a frame is ready`
      | :sg:`query_image() -> bool`

      If an image is ready to get, it returns true. Otherwise it returns false.
      Note that some webcams will always return False and will only queue a
      frame when called with a blocking function like :func:`get_image()`.
      On Windows (MSMF), and the  OpenCV backends, :func:`query_image()`
      should be reliable, though. This is useful to separate the framerate of
      the game from that of the camera without having to use threading. 

      .. ## Camera.query_image ##

   .. method:: get_image

      | :sl:`captures an image as a Surface`
      | :sg:`get_image(Surface = None) -> Surface`

      Pulls an image off of the buffer as an ``RGB`` Surface. It can optionally
      reuse an existing Surface to save time. The bit-depth of the surface is
      24 bits on Linux, 32 bits on Windows, or the same as the optionally
      supplied Surface.

      .. ## Camera.get_image ##

   .. method:: get_raw

      | :sl:`returns an unmodified image as bytes`
      | :sg:`get_raw() -> bytes`

      Gets an image from a camera as a string in the native pixelformat of the
      camera. Useful for integration with other libraries. This returns a
      bytes object

      .. ## Camera.get_raw ##

   .. ## pygame.camera.Camera ##

.. ## pygame.camera ##


--- Contenu du fichier : mouse.rst.txt ---
.. include:: common.txt

:mod:`pygame.mouse`
===================

.. module:: pygame.mouse
   :synopsis: pygame module to work with the mouse

| :sl:`pygame module to work with the mouse`

The mouse functions can be used to get the current state of the mouse device.
These functions can also alter the system cursor for the mouse.

When the display mode is set, the event queue will start receiving mouse
events. The mouse buttons generate ``pygame.MOUSEBUTTONDOWN`` and
``pygame.MOUSEBUTTONUP`` events when they are pressed and released. These
events contain a button attribute representing which button was pressed. The
mouse wheel will generate ``pygame.MOUSEBUTTONDOWN`` and 
``pygame.MOUSEBUTTONUP`` events when rolled. The button will be set to 4 
when the wheel is rolled up, and to button 5 when the wheel is rolled down. 
Whenever the mouse is moved it generates a ``pygame.MOUSEMOTION`` event. The 
mouse movement is broken into small and accurate motion events. As the mouse 
is moving many motion events will be placed on the queue. Mouse motion events 
that are not properly cleaned from the event queue are the primary reason the 
event queue fills up.

If the mouse cursor is hidden, and input is grabbed to the current display the
mouse will enter a virtual input mode, where the relative movements of the
mouse will never be stopped by the borders of the screen. See the functions
``pygame.mouse.set_visible()`` and ``pygame.event.set_grab()`` to get this
configured.


**Mouse Wheel Behavior in pygame 2**

There is proper functionality for mouse wheel behaviour with pygame 2 supporting
``pygame.MOUSEWHEEL`` events.  The new events support horizontal and vertical 
scroll movements, with signed integer values representing the amount scrolled 
(``x`` and ``y``), as well as ``flipped`` direction (the set positive and 
negative values for each axis is flipped). Read more about SDL2 
input-related changes here `<https://wiki.libsdl.org/MigrationGuide#input>`_

In pygame 2, the mouse wheel functionality can be used by listening for the 
``pygame.MOUSEWHEEL`` type of an event (Bear in mind they still emit 
``pygame.MOUSEBUTTONDOWN`` events like in pygame 1.x, as well).
When this event is triggered, a developer can access the appropriate ``Event`` object 
with ``pygame.event.get()``. The object can be used to access data about the mouse 
scroll, such as ``which`` (it will tell you what exact mouse device trigger the event).

.. code-block:: python
   :caption: Code example of mouse scroll (tested on 2.0.0.dev7)
   :name: test.py

   # Taken from husano896's PR thread (slightly modified)
   import pygame
   from pygame.locals import *
   pygame.init()
   screen = pygame.display.set_mode((640, 480))
   clock = pygame.time.Clock()
   
   def main():
      while True:
         for event in pygame.event.get():
               if event.type == QUIT:
                  pygame.quit()
                  return
               elif event.type == MOUSEWHEEL:
                  print(event) 
                  print(event.x, event.y)
                  print(event.flipped)
                  print(event.which)
                  # can access properties with 
                  # proper notation(ex: event.y)
         clock.tick(60)

   # Execute game:
   main()

.. function:: get_pressed

   | :sl:`get the state of the mouse buttons`
   | :sg:`get_pressed(num_buttons=3) -> (button1, button2, button3)`
   | :sg:`get_pressed(num_buttons=5) -> (button1, button2, button3, button4, button5)`

   Returns a sequence of booleans representing the state of all the mouse
   buttons. A true value means the mouse is currently being pressed at the time
   of the call.

   Note, to get all of the mouse events it is better to use either 
   ``pygame.event.wait()`` or ``pygame.event.get()`` and check all of those 
   events to see if they are ``MOUSEBUTTONDOWN``, ``MOUSEBUTTONUP``, or
   ``MOUSEMOTION``.

   Note, that on ``X11`` some X servers use middle button emulation. When you
   click both buttons ``1`` and ``3`` at the same time a ``2`` button event 
   can be emitted.

   Note, remember to call ``pygame.event.get()`` before this function.
   Otherwise it will not work as expected.

   To support five button mice, an optional parameter ``num_buttons`` has been 
   added in pygame 2. When this is set to ``5``, ``button4`` and ``button5`` 
   are added to the returned tuple. Only ``3`` and ``5`` are valid values 
   for this parameter.
   
   .. versionchanged:: 2.0.0 ``num_buttons`` argument added

   .. ## pygame.mouse.get_pressed ##

.. function:: get_pos

   | :sl:`get the mouse cursor position`
   | :sg:`get_pos() -> (x, y)`

   Returns the ``x`` and ``y`` position of the mouse cursor. The position is
   relative to the top-left corner of the display. The cursor position can be
   located outside of the display window, but is always constrained to the
   screen.

   .. ## pygame.mouse.get_pos ##

.. function:: get_rel

   | :sl:`get the amount of mouse movement`
   | :sg:`get_rel() -> (x, y)`

   Returns the amount of movement in ``x`` and ``y`` since the previous call to
   this function. The relative movement of the mouse cursor is constrained to
   the edges of the screen, but see the virtual input mouse mode for a way
   around this. Virtual input mode is described at the top of the page.

   .. ## pygame.mouse.get_rel ##

.. function:: set_pos

   | :sl:`set the mouse cursor position`
   | :sg:`set_pos([x, y]) -> None`

   Set the current mouse position to arguments given. If the mouse cursor is
   visible it will jump to the new coordinates. Moving the mouse will generate
   a new ``pygame.MOUSEMOTION`` event.

   .. ## pygame.mouse.set_pos ##

.. function:: set_visible

   | :sl:`hide or show the mouse cursor`
   | :sg:`set_visible(bool) -> bool`

   If the bool argument is true, the mouse cursor will be visible. This will
   return the previous visible state of the cursor.

   .. ## pygame.mouse.set_visible ##

.. function:: get_visible

   | :sl:`get the current visibility state of the mouse cursor`
   | :sg:`get_visible() -> bool`

   Get the current visibility state of the mouse cursor. ``True`` if the mouse is
   visible, ``False`` otherwise.

   .. versionadded:: 2.0.0

   .. ## pygame.mouse.get_visible ##

.. function:: get_focused

   | :sl:`check if the display is receiving mouse input`
   | :sg:`get_focused() -> bool`

   Returns true when pygame is receiving mouse input events (or, in windowing
   terminology, is "active" or has the "focus").

   This method is most useful when working in a window. By contrast, in
   full-screen mode, this method always returns true.

   Note: under ``MS`` Windows, the window that has the mouse focus also has the
   keyboard focus. But under X-Windows, one window can receive mouse events and
   another receive keyboard events. ``pygame.mouse.get_focused()`` indicates
   whether the pygame window receives mouse events.

   .. ## pygame.mouse.get_focused ##

.. function:: set_cursor

   | :sl:`set the mouse cursor to a new cursor`
   | :sg:`set_cursor(pygame.cursors.Cursor) -> None`
   | :sg:`set_cursor(size, hotspot, xormasks, andmasks) -> None`
   | :sg:`set_cursor(hotspot, surface) -> None`
   | :sg:`set_cursor(constant) -> None`

   Set the mouse cursor to something new. This function accepts either an explicit
   ``Cursor`` object or arguments to create a ``Cursor`` object.

   See :class:`pygame.cursors.Cursor` for help creating cursors and for examples.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.set_cursor ##


.. function:: get_cursor

   | :sl:`get the current mouse cursor`
   | :sg:`get_cursor() -> pygame.cursors.Cursor`

   Get the information about the mouse system cursor. The return value contains
   the same data as the arguments passed into :func:`pygame.mouse.set_cursor()`.

   .. note:: Code that unpacked a get_cursor() call into 
             ``size, hotspot, xormasks, andmasks`` will still work,
	     assuming the call returns an old school type cursor.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.get_cursor ##

.. ## pygame.mouse ##


--- Contenu du fichier : mixer.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer`
===================

.. module:: pygame.mixer
   :synopsis: pygame module for loading and playing sounds

| :sl:`pygame module for loading and playing sounds`

This module contains classes for loading Sound objects and controlling
playback. The mixer module is optional and depends on SDL_mixer. Your program
should test that :mod:`pygame.mixer` is available and initialized before using
it.

The mixer module has a limited number of channels for playback of sounds.
Usually programs tell pygame to start playing audio and it selects an available
channel automatically. The default is 8 simultaneous channels, but complex
programs can get more precise control over the number of channels and their
use.

All sound playback is mixed in background threads. When you begin to play a
Sound object, it will return immediately while the sound continues to play. A
single Sound object can also be actively played back multiple times.

The mixer also has a special streaming channel. This is for music playback and
is accessed through the :mod:`pygame.mixer.music` module. Consider using this
module for playing long running music. Unlike mixer module, the music module
streams the music from the files without loading music at once into memory.

The mixer module must be initialized like other pygame modules, but it has some
extra conditions. The ``pygame.mixer.init()`` function takes several optional
arguments to control the playback rate and sample size. Pygame will default to
reasonable values, but pygame cannot perform Sound resampling, so the mixer
should be initialized to match the values of your audio resources.

``NOTE``: For less laggy sound use a smaller buffer size. The default
is set to reduce the chance of scratchy sounds on some computers. You can
change the default buffer by calling :func:`pygame.mixer.pre_init` before
:func:`pygame.mixer.init` or :func:`pygame.init` is called. For example:
``pygame.mixer.pre_init(44100,-16,2, 1024)``


.. function:: init

   | :sl:`initialize the mixer module`
   | :sg:`init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Initialize the mixer module for Sound loading and playback. The default
   arguments can be overridden to provide specific audio mixing. Keyword
   arguments are accepted. For backwards compatibility, argument values of 
   0 are replaced with the startup defaults, except for ``allowedchanges``,
   where -1 is used. (startup defaults may be changed by a :func:`pre_init` call).

   The size argument represents how many bits are used for each audio sample.
   If the value is negative then signed sample values will be used. Positive
   values mean unsigned audio samples will be used. An invalid value raises an
   exception.

   The channels argument is used to specify whether to use mono or stereo. 1
   for mono and 2 for stereo.

   The buffer argument controls the number of internal samples used in the
   sound mixer. The default value should work for most cases. It can be lowered
   to reduce latency, but sound dropout may occur. It can be raised to larger
   values to ensure playback never skips, but it will impose latency on sound
   playback. The buffer size must be a power of two (if not it is rounded up to
   the next nearest power of 2).

   Some platforms require the :mod:`pygame.mixer` module to be initialized
   after the display modules have initialized. The top level ``pygame.init()``
   takes care of this automatically, but cannot pass any arguments to the mixer
   init. To solve this, mixer has a function ``pygame.mixer.pre_init()`` to set
   the proper defaults before the toplevel init is used.

   When using allowedchanges=0 it will convert the samples at runtime to match
   what the hardware supports. For example a sound card may not
   support 16bit sound samples, so instead it will use 8bit samples internally.
   If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will
   change to the closest that SDL2 supports.

   Apart from 0, allowedchanged accepts the following constants ORed together:

      - AUDIO_ALLOW_FREQUENCY_CHANGE
      - AUDIO_ALLOW_FORMAT_CHANGE
      - AUDIO_ALLOW_CHANNELS_CHANGE
      - AUDIO_ALLOW_ANY_CHANGE

   It is safe to call this more than once, but after the mixer is initialized
   you cannot change the playback arguments without first calling
   ``pygame.mixer.quit()``.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionchanged:: 2.0.0 ``size`` can be 32 (32-bit floats).
   .. versionchanged:: 2.0.0 ``channels`` can also be 4 or 6.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.init ##

.. function:: pre_init

   | :sl:`preset the mixer init arguments`
   | :sg:`pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Call pre_init to change the defaults used when the real
   ``pygame.mixer.init()`` is called. Keyword arguments are accepted. The best
   way to set custom mixer playback values is to call
   ``pygame.mixer.pre_init()`` before calling the top level ``pygame.init()``.
   For backwards compatibility, argument values of 0 are replaced with the
   startup defaults, except for ``allowedchanges``, where -1 is used.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.pre_init ##

.. function:: quit

   | :sl:`uninitialize the mixer`
   | :sg:`quit() -> None`

   This will uninitialize :mod:`pygame.mixer`. All playback will stop and any
   loaded Sound objects may not be compatible with the mixer if it is
   reinitialized later.

   .. ## pygame.mixer.quit ##

.. function:: get_init

   | :sl:`test if the mixer is initialized`
   | :sg:`get_init() -> (frequency, format, channels)`

   If the mixer is initialized, this returns the playback arguments it is
   using. If the mixer has not been initialized this returns ``None``.

   .. ## pygame.mixer.get_init ##

.. function:: stop

   | :sl:`stop playback of all sound channels`
   | :sg:`stop() -> None`

   This will stop all playback of all active mixer channels.

   .. ## pygame.mixer.stop ##

.. function:: pause

   | :sl:`temporarily stop playback of all sound channels`
   | :sg:`pause() -> None`

   This will temporarily stop all playback on the active mixer channels. The
   playback can later be resumed with ``pygame.mixer.unpause()``

   .. ## pygame.mixer.pause ##

.. function:: unpause

   | :sl:`resume paused playback of sound channels`
   | :sg:`unpause() -> None`

   This will resume all active sound channels after they have been paused.

   .. ## pygame.mixer.unpause ##

.. function:: fadeout

   | :sl:`fade out the volume on all sounds before stopping`
   | :sg:`fadeout(time) -> None`

   This will fade out the volume on all active channels over the time argument
   in milliseconds. After the sound is muted the playback will stop.

   .. ## pygame.mixer.fadeout ##

.. function:: set_num_channels

   | :sl:`set the total number of playback channels`
   | :sg:`set_num_channels(count) -> None`

   Sets the number of available channels for the mixer. The default value is 8.
   The value can be increased or decreased. If the value is decreased, sounds
   playing on the truncated channels are stopped.

   .. ## pygame.mixer.set_num_channels ##

.. function:: get_num_channels

   | :sl:`get the total number of playback channels`
   | :sg:`get_num_channels() -> count`

   Returns the number of currently active playback channels.

   .. ## pygame.mixer.get_num_channels ##

.. function:: set_reserved

   | :sl:`reserve channels from being automatically used`
   | :sg:`set_reserved(count) -> count`

   The mixer can reserve any number of channels that will not be automatically
   selected for playback by Sounds. This means that whenever you play a Sound 
   without specifying a channel, a reserved channel will never be used. If sounds
   are currently playing on the reserved channels they will not be stopped.

   This allows the application to reserve a specific number of channels for
   important sounds that must not be dropped or have a guaranteed channel to
   play on.

   Will return number of channels actually reserved, this may be less than requested
   depending on the number of channels previously allocated.

   .. ## pygame.mixer.set_reserved ##

.. function:: find_channel

   | :sl:`find an unused channel`
   | :sg:`find_channel(force=False) -> Channel`

   This will find and return an inactive Channel object. If there are no
   inactive Channels this function will return ``None``. If there are no
   inactive channels and the force argument is ``True``, this will find the
   Channel with the longest running Sound and return it.

   .. ## pygame.mixer.find_channel ##

.. function:: get_busy

   | :sl:`test if any sound is being mixed`
   | :sg:`get_busy() -> bool`

   Returns ``True`` if the mixer is busy mixing any channels. If the mixer is
   idle then this return ``False``.

   .. ## pygame.mixer.get_busy ##

.. function:: get_sdl_mixer_version

   | :sl:`get the mixer's SDL version`
   | :sg:`get_sdl_mixer_version() -> (major, minor, patch)`
   | :sg:`get_sdl_mixer_version(linked=True) -> (major, minor, patch)`

   :param bool linked: if ``True`` (default) the linked version number is
      returned, otherwise the compiled version number is returned

   :returns: the mixer's SDL library version number (linked or compiled
      depending on the ``linked`` parameter) as a tuple of 3 integers
      ``(major, minor, patch)``
   :rtype: tuple

   .. note::
      The linked and compile version numbers should be the same.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.get_sdl_mixer_version ##

.. class:: Sound

   | :sl:`Create a new Sound object from a file or buffer object`
   | :sg:`Sound(filename) -> Sound`
   | :sg:`Sound(file=filename) -> Sound`
   | :sg:`Sound(file=pathlib_path) -> Sound`
   | :sg:`Sound(buffer) -> Sound`
   | :sg:`Sound(buffer=buffer) -> Sound`
   | :sg:`Sound(object) -> Sound`
   | :sg:`Sound(file=object) -> Sound`
   | :sg:`Sound(array=object) -> Sound`

   Load a new sound buffer from a filename, a python file object or a readable
   buffer object. Limited resampling will be performed to help the sample match
   the initialize arguments for the mixer. A Unicode string can only be a file
   pathname. A bytes object can be either a pathname or a buffer object.
   Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may
   guess wrong. If the array keyword is used, the object is expected to export 
   a new buffer interface (The object is checked for a buffer interface first.)

   The Sound object represents actual sound sample data. Methods that change
   the state of the Sound object will the all instances of the Sound playback.
   A Sound object also exports a new buffer interface.

   The Sound can be loaded from an ``OGG`` audio file or from an uncompressed
   ``WAV``.

   Note: The buffer will be copied internally, no data will be shared between
   it and the Sound object.

   For now buffer and array support is consistent with ``sndarray.make_sound``
   for NumPy arrays, in that sample sign and byte order are ignored. This
   will change, either by correctly handling sign and byte order, or by raising
   an exception when different. Also, source samples are truncated to fit the
   audio sample size. This will not change.

   .. versionadded:: 1.8 ``pygame.mixer.Sound(buffer)``
   .. versionadded:: 1.9.2
      :class:`pygame.mixer.Sound` keyword arguments and array interface support
   .. versionadded:: 2.0.1 pathlib.Path support on Python 3.

   .. method:: play

      | :sl:`begin sound playback`
      | :sg:`play(loops=0, maxtime=0, fade_ms=0) -> Channel`

      Begin playback of the Sound (i.e., on the computer's speakers) on an
      available Channel. This will forcibly select a Channel, so playback may
      cut off a currently playing sound if necessary.

      The loops argument controls how many times the sample will be repeated
      after being played the first time. A value of 5 means that the sound will
      be played once, then repeated five times, and so is played a total of six
      times. The default value (zero) means the Sound is not repeated, and so
      is only played once. If loops is set to -1 the Sound will loop
      indefinitely (though you can still call ``stop()`` to stop it).

      The maxtime argument can be used to stop playback after a given number of
      milliseconds.

      The fade_ms argument will make the sound start playing at 0 volume and
      fade up to full volume over the time given. The sample may end before the
      fade-in is complete.

      This returns the Channel object for the channel that was selected.

      .. ## Sound.play ##

   .. method:: stop

      | :sl:`stop sound playback`
      | :sg:`stop() -> None`

      This will stop the playback of this Sound on any active Channels.

      .. ## Sound.stop ##

   .. method:: fadeout

      | :sl:`stop sound playback after fading out`
      | :sg:`fadeout(time) -> None`

      This will stop playback of the sound after fading it out over the time
      argument in milliseconds. The Sound will fade and stop on all actively
      playing channels.

      .. ## Sound.fadeout ##

   .. method:: set_volume

      | :sl:`set the playback volume for this Sound`
      | :sg:`set_volume(value) -> None`

      This will set the playback volume (loudness) for this Sound. This will
      immediately affect the Sound if it is playing. It will also affect any
      future playback of this Sound.

      :param float value: volume in the range of 0.0 to 1.0 (inclusive)

         | If value < 0.0, the volume will not be changed
         | If value > 1.0, the volume will be set to 1.0

      .. ## Sound.set_volume ##

   .. method:: get_volume

      | :sl:`get the playback volume`
      | :sg:`get_volume() -> value`

      Return a value from 0.0 to 1.0 representing the volume for this Sound.

      .. ## Sound.get_volume ##

   .. method:: get_num_channels

      | :sl:`count how many times this Sound is playing`
      | :sg:`get_num_channels() -> count`

      Return the number of active channels this sound is playing on.

      .. ## Sound.get_num_channels ##

   .. method:: get_length

      | :sl:`get the length of the Sound`
      | :sg:`get_length() -> seconds`

      Return the length of this Sound in seconds.

      .. ## Sound.get_length ##

   .. method:: get_raw

      | :sl:`return a bytestring copy of the Sound samples.`
      | :sg:`get_raw() -> bytes`

      Return a copy of the Sound object buffer as a bytes.

      .. versionadded:: 1.9.2

      .. ## Sound.get_raw ##

   .. ## pygame.mixer.Sound ##

.. class:: Channel

   | :sl:`Create a Channel object for controlling playback`
   | :sg:`Channel(id) -> Channel`

   Return a Channel object for one of the current channels. The id must be a
   value from 0 to the value of ``pygame.mixer.get_num_channels()``.

   The Channel object can be used to get fine control over the playback of
   Sounds. A channel can only playback a single Sound at time. Using channels
   is entirely optional since pygame can manage them by default.

   .. method:: play

      | :sl:`play a Sound on a specific Channel`
      | :sg:`play(Sound, loops=0, maxtime=0, fade_ms=0) -> None`

      This will begin playback of a Sound on a specific Channel. If the Channel
      is currently playing any other Sound it will be stopped.

      The loops argument has the same meaning as in ``Sound.play()``: it is the
      number of times to repeat the sound after the first time. If it is 3, the
      sound will be played 4 times (the first time, then three more). If loops
      is -1 then the playback will repeat indefinitely.

      As in ``Sound.play()``, the maxtime argument can be used to stop playback
      of the Sound after a given number of milliseconds.

      As in ``Sound.play()``, the fade_ms argument can be used fade in the
      sound.

      .. ## Channel.play ##

   .. method:: stop

      | :sl:`stop playback on a Channel`
      | :sg:`stop() -> None`

      Stop sound playback on a channel. After playback is stopped the channel
      becomes available for new Sounds to play on it.

      .. ## Channel.stop ##

   .. method:: pause

      | :sl:`temporarily stop playback of a channel`
      | :sg:`pause() -> None`

      Temporarily stop the playback of sound on a channel. It can be resumed at
      a later time with ``Channel.unpause()``

      .. ## Channel.pause ##

   .. method:: unpause

      | :sl:`resume pause playback of a channel`
      | :sg:`unpause() -> None`

      Resume the playback on a paused channel.

      .. ## Channel.unpause ##

   .. method:: fadeout

      | :sl:`stop playback after fading channel out`
      | :sg:`fadeout(time) -> None`

      Stop playback of a channel after fading out the sound over the given time
      argument in milliseconds.

      .. ## Channel.fadeout ##

   .. method:: set_volume

      | :sl:`set the volume of a playing channel`
      | :sg:`set_volume(value) -> None`
      | :sg:`set_volume(left, right) -> None`

      Set the volume (loudness) of a playing sound. When a channel starts to
      play its volume value is reset. This only affects the current sound. The
      value argument is between 0.0 and 1.0.

      If one argument is passed, it will be the volume of both speakers. If two
      arguments are passed and the mixer is in stereo mode, the first argument
      will be the volume of the left speaker and the second will be the volume
      of the right speaker. (If the second argument is ``None``, the first
      argument will be the volume of both speakers.)

      If the channel is playing a Sound on which ``set_volume()`` has also been
      called, both calls are taken into account. For example:

      ::

          sound = pygame.mixer.Sound("s.wav")
          channel = s.play()      # Sound plays at full volume by default
          sound.set_volume(0.9)   # Now plays at 90% of full volume.
          sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
          channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).

      .. ## Channel.set_volume ##

   .. method:: get_volume

      | :sl:`get the volume of the playing channel`
      | :sg:`get_volume() -> value`

      Return the volume of the channel for the current playing sound. This does
      not take into account stereo separation used by
      :meth:`Channel.set_volume`. The Sound object also has its own volume
      which is mixed with the channel.

      .. ## Channel.get_volume ##

   .. method:: get_busy

      | :sl:`check if the channel is active`
      | :sg:`get_busy() -> bool`

      Returns ``True`` if the channel is actively mixing sound. If the channel
      is idle this returns ``False``.

      .. ## Channel.get_busy ##

   .. method:: get_sound

      | :sl:`get the currently playing Sound`
      | :sg:`get_sound() -> Sound`

      Return the actual Sound object currently playing on this channel. If the
      channel is idle ``None`` is returned.

      .. ## Channel.get_sound ##

   .. method:: queue

      | :sl:`queue a Sound object to follow the current`
      | :sg:`queue(Sound) -> None`

      When a Sound is queued on a Channel, it will begin playing immediately
      after the current Sound is finished. Each channel can only have a single
      Sound queued at a time. The queued Sound will only play if the current
      playback finished automatically. It is cleared on any other call to
      ``Channel.stop()`` or ``Channel.play()``.

      If there is no sound actively playing on the Channel then the Sound will
      begin playing immediately.

      .. ## Channel.queue ##

   .. method:: get_queue

      | :sl:`return any Sound that is queued`
      | :sg:`get_queue() -> Sound`

      If a Sound is already queued on this channel it will be returned. Once
      the queued sound begins playback it will no longer be on the queue.

      .. ## Channel.get_queue ##

   .. method:: set_endevent

      | :sl:`have the channel send an event when playback stops`
      | :sg:`set_endevent() -> None`
      | :sg:`set_endevent(type) -> None`

      When an endevent is set for a channel, it will send an event to the
      pygame queue every time a sound finishes playing on that channel (not
      just the first time). Use ``pygame.event.get()`` to retrieve the endevent
      once it's sent.

      Note that if you called ``Sound.play(n)`` or ``Channel.play(sound,n)``,
      the end event is sent only once: after the sound has been played "n+1"
      times (see the documentation of Sound.play).

      If ``Channel.stop()`` or ``Channel.play()`` is called while the sound was
      still playing, the event will be posted immediately.

      The type argument will be the event id sent to the queue. This can be any
      valid event type, but a good choice would be a value between
      ``pygame.locals.USEREVENT`` and ``pygame.locals.NUMEVENTS``. If no type
      argument is given then the Channel will stop sending endevents.

      .. ## Channel.set_endevent ##

   .. method:: get_endevent

      | :sl:`get the event a channel sends when playback stops`
      | :sg:`get_endevent() -> type`

      Returns the event type to be sent every time the Channel finishes
      playback of a Sound. If there is no endevent the function returns
      ``pygame.NOEVENT``.

      .. ## Channel.get_endevent ##

   .. ## pygame.mixer.Channel ##

.. ## pygame.mixer ##


--- Contenu du fichier : music.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer.music`
=========================

.. module:: pygame.mixer.music
   :synopsis: pygame module for controlling streamed audio

| :sl:`pygame module for controlling streamed audio`

The music module is closely tied to :mod:`pygame.mixer`. Use the music module
to control the playback of music in the sound mixer.

The difference between the music playback and regular Sound playback is that
the music is streamed, and never actually loaded all at once. The mixer system
only supports a single music stream at once.

On older pygame versions, ``MP3`` support was limited under Mac and Linux. This
changed in pygame ``v2.0.2`` which got improved MP3 support. Consider using
``OGG`` file format for music as that can give slightly better compression than
MP3 in most cases.

.. function:: load

   | :sl:`Load a music file for playback`
   | :sg:`load(filename) -> None`
   | :sg:`load(fileobj, namehint="") -> None`

   This will load a music filename/file object and prepare it for playback. If
   a music stream is already playing it will be stopped. This does not start
   the music playing.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`load(fileobj, "ogg")`.

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.load ##

.. function:: unload

   | :sl:`Unload the currently loaded music to free up resources`
   | :sg:`unload() -> None`

   This closes resources like files for any music that may be loaded.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.music.load ##


.. function:: play

   | :sl:`Start the playback of the music stream`
   | :sg:`play(loops=0, start=0.0, fade_ms=0) -> None`

   This will play the loaded music stream. If the music is already playing it
   will be restarted.
   
   ``loops`` is an optional integer argument, which is ``0`` by default, which 
   indicates how many times to repeat the music. The music repeats indefinitely if 
   this argument is set to ``-1``. 
   
   ``start`` is an optional float argument, which is ``0.0`` by default, which 
   denotes the position in time from which the music starts playing. The starting 
   position depends on the format of the music played. ``MP3`` and ``OGG`` use 
   the position as time in seconds. For ``MP3`` files the start time position
   selected may not be accurate as things like variable bit rate encoding and ID3
   tags can throw off the timing calculations. For ``MOD``  music it is the pattern 
   order number. Passing a start position will raise a NotImplementedError if 
   the start position cannot be set.

   ``fade_ms`` is an optional integer argument, which is ``0`` by default,
   which denotes the period of time (in milliseconds) over which the music
   will fade up from volume level ``0.0`` to full volume (or the volume level
   previously set by :func:`set_volume`). The sample may end before the fade-in
   is complete. If the music is already streaming ``fade_ms`` is ignored.
   
   .. versionchanged:: 2.0.0 Added optional ``fade_ms`` argument

   .. ## pygame.mixer.music.play ##

.. function:: rewind

   | :sl:`restart music`
   | :sg:`rewind() -> None`

   Resets playback of the current music to the beginning. If :func:`pause` has
   previously been used to pause the music, the music will remain paused.
   
   .. note:: :func:`rewind` supports a limited number of file types and notably
             ``WAV`` files are NOT supported. For unsupported file types use :func:`play`
             which will restart the music that's already playing (note that this
             will start the music playing again even if previously paused).

   .. ## pygame.mixer.music.rewind ##

.. function:: stop

   | :sl:`stop the music playback`
   | :sg:`stop() -> None`

   Stops the music playback if it is currently playing.
   endevent will be triggered, if set.
   It won't unload the music.

   .. ## pygame.mixer.music.stop ##

.. function:: pause

   | :sl:`temporarily stop music playback`
   | :sg:`pause() -> None`

   Temporarily stop playback of the music stream. It can be resumed with the
   :func:`unpause` function.

   .. ## pygame.mixer.music.pause ##

.. function:: unpause

   | :sl:`resume paused music`
   | :sg:`unpause() -> None`

   This will resume the playback of a music stream after it has been paused.

   .. ## pygame.mixer.music.unpause ##

.. function:: fadeout

   | :sl:`stop music playback after fading out`
   | :sg:`fadeout(time) -> None`

   Fade out and stop the currently playing music.

   The ``time`` argument denotes the integer milliseconds for which the 
   fading effect is generated.

   Note, that this function blocks until the music has faded out. Calls 
   to :func:`fadeout` and :func:`set_volume` will have no effect during 
   this time. If an event was set using :func:`set_endevent` it will be 
   called after the music has faded.

   .. ## pygame.mixer.music.fadeout ##

.. function:: set_volume

   | :sl:`set the music volume`
   | :sg:`set_volume(volume) -> None`

   Set the volume of the music playback.
   
   The ``volume`` argument is a float between ``0.0`` and ``1.0`` that sets 
   the volume level. When new music is loaded the volume is reset to full
   volume. If ``volume`` is a negative value it will be ignored and the
   volume will remain set at the current level. If the ``volume`` argument
   is greater than ``1.0``, the volume will be set to ``1.0``.

   .. ## pygame.mixer.music.set_volume ##

.. function:: get_volume

   | :sl:`get the music volume`
   | :sg:`get_volume() -> value`

   Returns the current volume for the mixer. The value will be between ``0.0`` 
   and ``1.0``.

   .. ## pygame.mixer.music.get_volume ##

.. function:: get_busy

   | :sl:`check if the music stream is playing`
   | :sg:`get_busy() -> bool`

   Returns True when the music stream is actively playing. When the music is
   idle this returns False. In pygame 2.0.1 and above this function returns
   False when the music is paused. In pygame 1 it returns True when the music
   is paused.

   .. versionchanged:: 2.0.1 Returns False when music paused.

   .. ## pygame.mixer.music.get_busy ##

.. function:: set_pos

   | :sl:`set position to play from`
   | :sg:`set_pos(pos) -> None`

   This sets the position in the music file where playback will start.
   The meaning of "pos", a float (or a number that can be converted to a float),
   depends on the music format.
   
   For ``MOD`` files, pos is the integer pattern number in the module.
   For ``OGG`` it is the absolute position, in seconds, from
   the beginning of the sound. For ``MP3`` files, it is the relative position,
   in seconds, from the current position. For absolute positioning in an ``MP3``
   file, first call :func:`rewind`.

   Other file formats are unsupported. Newer versions of SDL_mixer have
   better positioning support than earlier ones. An SDLError is raised if a
   particular format does not support positioning.

   Function :func:`set_pos` calls underlining SDL_mixer function
   ``Mix_SetMusicPosition``.

   .. versionadded:: 1.9.2

   .. ## pygame.mixer.music.set_pos ##

.. function:: get_pos

   | :sl:`get the music play time`
   | :sg:`get_pos() -> time`

   This gets the number of milliseconds that the music has been playing for.
   The returned time only represents how long the music has been playing; it
   does not take into account any starting position offsets.

   .. ## pygame.mixer.music.get_pos ##

.. function:: queue

   | :sl:`queue a sound file to follow the current`
   | :sg:`queue(filename) -> None`
   | :sg:`queue(fileobj, namehint="", loops=0) -> None`

   This will load a sound file and queue it. A queued sound file will begin as
   soon as the current sound naturally ends. Only one sound can be queued at a
   time. Queuing a new sound while another sound is queued will result in the
   new sound becoming the queued sound. Also, if the current sound is ever
   stopped or changed, the queued sound will be lost.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`queue(fileobj, "ogg")`.

   The following example will play music by Bach six times, then play music by
   Mozart once:

   ::

       pygame.mixer.music.load('bach.ogg')
       pygame.mixer.music.play(5)        # Plays six times, not five!
       pygame.mixer.music.queue('mozart.ogg')

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.queue ##

.. function:: set_endevent

   | :sl:`have the music send an event when playback stops`
   | :sg:`set_endevent() -> None`
   | :sg:`set_endevent(type) -> None`

   This causes pygame to signal (by means of the event queue) when the music is
   done playing. The argument determines the type of event that will be queued.

   The event will be queued every time the music finishes, not just the first
   time. To stop the event from being queued, call this method with no
   argument.

   .. ## pygame.mixer.music.set_endevent ##

.. function:: get_endevent

   | :sl:`get the event a channel sends when playback stops`
   | :sg:`get_endevent() -> type`

   Returns the event type to be sent every time the music finishes playback. If
   there is no endevent the function returns ``pygame.NOEVENT``.

   .. ## pygame.mixer.music.get_endevent ##

.. ## pygame.mixer.music ##


--- Contenu du fichier : sndarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.sndarray`
======================

.. module:: pygame.sndarray
   :synopsis: pygame module for accessing sound sample data

| :sl:`pygame module for accessing sound sample data`

Functions to convert between NumPy arrays and Sound objects. This
module will only be functional when pygame can use the external NumPy
package. If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule``
object.

Sound data is made of thousands of samples per second, and each sample is the
amplitude of the wave at a particular moment in time. For example, in 22-kHz
format, element number 5 of the array is the amplitude of the wave after
5/22000 seconds.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Each sample is an 8-bit or 16-bit integer, depending on the data format. A
stereo sound file has two values per sample, while a mono sound file only has
one.

.. function:: array

   | :sl:`copy Sound samples into an array`
   | :sg:`array(Sound) -> array`

   Creates a new array for the sound data and copies the samples. The array
   will always be in the format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.array ##

.. function:: samples

   | :sl:`reference Sound samples into an array`
   | :sg:`samples(Sound) -> array`

   Creates a new array that directly references the samples in a Sound object.
   Modifying the array will change the Sound. The array will always be in the
   format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.samples ##

.. function:: make_sound

   | :sl:`convert an array into a Sound object`
   | :sg:`make_sound(array) -> Sound`

   Create a new playable Sound object from an array. The mixer module must be
   initialized and the array format must be similar to the mixer audio format.

   .. ## pygame.sndarray.make_sound ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for sound arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions. The
   only supported arraytype is ``'numpy'``. Other values will raise ValueError.
   Using this function will raise a ``DeprecationWarning``.
   .. ## pygame.sndarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.sndarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytypes ##

.. ## pygame.sndarray ##


--- Contenu du fichier : time.rst.txt ---
.. include:: common.txt

:mod:`pygame.time`
==================

.. module:: pygame.time
   :synopsis: pygame module for monitoring time

| :sl:`pygame module for monitoring time`

Times in pygame are represented in milliseconds (1/1000 seconds). Most
platforms have a limited time resolution of around 10 milliseconds. This
resolution, in milliseconds, is given in the ``TIMER_RESOLUTION`` constant.

.. function:: get_ticks

   | :sl:`get the time in milliseconds`
   | :sg:`get_ticks() -> milliseconds`

   Return the number of milliseconds since ``pygame.init()`` was called. Before
   pygame is initialized this will always be 0.

   .. ## pygame.time.get_ticks ##

.. function:: wait

   | :sl:`pause the program for an amount of time`
   | :sg:`wait(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function sleeps the
   process to share the processor with other programs. A program that waits for
   even a few milliseconds will consume very little processor time. It is
   slightly less accurate than the ``pygame.time.delay()`` function.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.wait ##

.. function:: delay

   | :sl:`pause the program for an amount of time`
   | :sg:`delay(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function will use the
   processor (rather than sleeping) in order to make the delay more accurate
   than ``pygame.time.wait()``.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.delay ##

.. function:: set_timer

   | :sl:`repeatedly create an event on the event queue`
   | :sg:`set_timer(event, millis) -> None`
   | :sg:`set_timer(event, millis, loops=0) -> None`

   Set an event to appear on the event queue every given number of milliseconds.
   The first event will not appear until the amount of time has passed.

   The ``event`` attribute can be a ``pygame.event.Event`` object or an integer
   type that denotes an event.

   ``loops`` is an integer that denotes the number of events posted. If 0 (default)
   then the events will keep getting posted, unless explicitly stopped.

   To disable the timer for such an event, call the function again with the same
   event argument with ``millis`` argument set to 0.

   It is also worth mentioning that a particular event type can only be put on a
   timer once. In other words, there cannot be two timers for the same event type.
   Setting an event timer for a particular event discards the old one for that
   event type.

   ``loops`` replaces the ``once`` argument, and this does not break backward
   compatibility

   .. versionadded:: 2.0.0.dev3 once argument added.
   .. versionchanged:: 2.0.1 event argument supports ``pygame.event.Event`` object
   .. versionadded:: 2.0.1 added loops argument to replace once argument

   .. ## pygame.time.set_timer ##

.. class:: Clock

   | :sl:`create an object to help track time`
   | :sg:`Clock() -> Clock`

   Creates a new Clock object that can be used to track an amount of time. The
   clock also provides several functions to help control a game's framerate.

   .. method:: tick

      | :sl:`update the clock`
      | :sg:`tick(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick(40)`` once per frame, the program will never run at more
      than 40 frames per second.

      Note that this function uses SDL_Delay function which is not accurate on
      every platform, but does not use much CPU. Use tick_busy_loop if you want
      an accurate timer, and don't mind chewing CPU.

      .. ## Clock.tick ##

   .. method:: tick_busy_loop

      | :sl:`update the clock`
      | :sg:`tick_busy_loop(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick_busy_loop(40)`` once per frame, the program will never run at
      more than 40 frames per second.

      Note that this function uses :func:`pygame.time.delay`, which uses lots
      of CPU in a busy loop to make sure that timing is more accurate.

      .. versionadded:: 1.8

      .. ## Clock.tick_busy_loop ##

   .. method:: get_time

      | :sl:`time used in the previous tick`
      | :sg:`get_time() -> milliseconds`

      The number of milliseconds that passed between the previous two calls to
      ``Clock.tick()``.

      .. ## Clock.get_time ##

   .. method:: get_rawtime

      | :sl:`actual time used in the previous tick`
      | :sg:`get_rawtime() -> milliseconds`

      Similar to ``Clock.get_time()``, but does not include any time used
      while ``Clock.tick()`` was delaying to limit the framerate.

      .. ## Clock.get_rawtime ##

   .. method:: get_fps

      | :sl:`compute the clock framerate`
      | :sg:`get_fps() -> float`

      Compute your game's framerate (in frames per second). It is computed by
      averaging the last ten calls to ``Clock.tick()``.

      .. ## Clock.get_fps ##

   .. ## pygame.time.Clock ##

.. ## pygame.time ##


--- Contenu du fichier : surfarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.surfarray`
=======================

.. module:: pygame.surfarray
   :synopsis: pygame module for accessing surface pixel data using array interfaces

| :sl:`pygame module for accessing surface pixel data using array interfaces`

Functions to convert between NumPy arrays and Surface objects. This module
will only be functional when pygame can use the external NumPy package.
If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule`` object.

Every pixel is stored as a single integer value to represent the red, green,
and blue colors. The 8-bit images use a value that looks into a colormap. Pixels
with higher depth use a bit packing process to place three or four values into
a single number.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Arrays that treat the pixels as a single integer are referred to as 2D arrays.
This module can also separate the red, green, and blue color values into
separate indices. These types of arrays are referred to as 3D arrays, and the
last index is 0 for red, 1 for green, and 2 for blue.

The pixels of a 2D array as returned by :func:`array2d` and :func:`pixels2d`
are mapped to the specific surface. Use :meth:`pygame.Surface.unmap_rgb`
to convert to a color, and :meth:`pygame.Surface.map_rgb` to get the surface
specific pixel value of a color. Integer pixel values can only be used directly
between surfaces with matching pixel layouts (see :class:`pygame.Surface`).

All functions that refer to "array" will copy the surface information to a new
numpy array. All functions that refer to "pixels" will directly reference the
pixels from the surface and any changes performed to the array will make changes
in the surface. As this last functions share memory with the surface, this one
will be locked during the lifetime of the array.

.. function:: array2d

   | :sl:`Copy pixels into a 2d array`
   | :sg:`array2d(Surface) -> array`

   Copy the :meth:`mapped <pygame.Surface.map_rgb>` (raw) pixels from a Surface
   into a 2D array.
   The bit depth of the surface will control the size of the integer values,
   and will work for any type of pixel format.

   This function will temporarily lock the Surface as pixels are copied
   (see the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array2d ##

.. function:: pixels2d

   | :sl:`Reference pixels into a 2d array`
   | :sg:`pixels2d(Surface) -> array`

   Create a new 2D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit
   depths can.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels2d ##

.. function:: array3d

   | :sl:`Copy pixels into a 3d array`
   | :sg:`array3d(Surface) -> array`

   Copy the pixels from a Surface into a 3D array. The bit depth of the surface
   will control the size of the integer values, and will work for any type of
   pixel format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array3d ##

.. function:: pixels3d

   | :sl:`Reference pixels into a 3d array`
   | :sg:`pixels3d(Surface) -> array`

   Create a new 3D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This will only work on Surfaces that have 24-bit or 32-bit formats. Lower
   pixel formats cannot be referenced.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels3d ##

.. function:: array_alpha

   | :sl:`Copy pixel alphas into a 2d array`
   | :sg:`array_alpha(Surface) -> array`

   Copy the pixel alpha values (degree of transparency) from a Surface into a
   2D array. This will work for any type of Surface format. Surfaces without a
   pixel alpha will return an array with all opaque values.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array_alpha ##

.. function:: pixels_alpha

   | :sl:`Reference pixel alphas into a 2d array`
   | :sg:`pixels_alpha(Surface) -> array`

   Create a new 2D array that directly references the alpha values (degree of
   transparency) in a Surface. Any changes to the array will affect the pixels
   in the Surface. This is a fast operation since no data is copied.

   This can only work on 32-bit Surfaces with a per-pixel alpha value.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_alpha ##

.. function:: array_red

   | :sl:`Copy red pixels into a 2d array`
   | :sg:`array_red(Surface) -> array`

   Copy the pixel red values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_red ##

.. function:: pixels_red

   | :sl:`Reference pixel red into a 2d array.`
   | :sg:`pixels_red (Surface) -> array`

   Create a new 2D array that directly references the red values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_red ##

.. function:: array_green

   | :sl:`Copy green pixels into a 2d array`
   | :sg:`array_green(Surface) -> array`

   Copy the pixel green values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_green ##

.. function:: pixels_green

   | :sl:`Reference pixel green into a 2d array.`
   | :sg:`pixels_green (Surface) -> array`

   Create a new 2D array that directly references the green values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_green ##

.. function:: array_blue

   | :sl:`Copy blue pixels into a 2d array`
   | :sg:`array_blue(Surface) -> array`

   Copy the pixel blue values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_blue ##

.. function:: pixels_blue

   | :sl:`Reference pixel blue into a 2d array.`
   | :sg:`pixels_blue (Surface) -> array`

   Create a new 2D array that directly references the blue values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_blue ##

.. function:: array_colorkey

   | :sl:`Copy the colorkey values into a 2d array`
   | :sg:`array_colorkey(Surface) -> array`

   Create a new array with the colorkey transparency value from each pixel. If
   the pixel matches the colorkey it will be fully transparent; otherwise it
   will be fully opaque.

   This will work on any type of Surface format. If the image has no colorkey a
   solid opaque array will be returned.

   This function will temporarily lock the Surface as pixels are copied.

   .. ## pygame.surfarray.array_colorkey ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format on the array.
   The array can be 2D or 3D with any sized integer values. Function
   make_surface uses the array struct interface to acquire array properties,
   so is not limited to just NumPy arrays. See :mod:`pygame.pixelcopy`.

   New in pygame 1.9.2: array struct interface support.

   .. ## pygame.surfarray.make_surface ##

.. function:: blit_array

   | :sl:`Blit directly from a array values`
   | :sg:`blit_array(Surface, array) -> None`

   Directly copy values from an array into a Surface. This is faster than
   converting the array into a Surface and blitting. The array must be the same
   dimensions as the Surface and will completely replace all pixel values. Only
   integer, ASCII character and record arrays are accepted.

   This function will temporarily lock the Surface as the new values are
   copied.

   .. ## pygame.surfarray.blit_array ##

.. function:: map_array

   | :sl:`Map a 3d array into a 2d array`
   | :sg:`map_array(Surface, array3d) -> array2d`

   Convert a 3D array into a 2D array. This will use the given Surface format
   to control the conversion. Palette surface formats are supported for NumPy
   arrays.

   .. ## pygame.surfarray.map_array ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for surface arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions.
   The only supported arraytype is ``'numpy'``. Other values will raise
   ValueError. Using this function will raise a ``DeprecationWarning``.

   .. ## pygame.surfarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.surfarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytypes ##

.. ## pygame.surfarray ##


--- Contenu du fichier : sdl2_video.rst.txt ---
.. include:: common.txt

:mod:`pygame.sdl2_video`
========================

.. module:: pygame._sdl2.video
   :synopsis: Experimental pygame module for porting new SDL video systems

.. warning::
	This module isn't ready for prime time yet, it's still in development.
        These docs are primarily meant to help the pygame developers and super-early adopters
        who are in communication with the developers. This API will change.

| :sl:`Experimental pygame module for porting new SDL video systems`

.. class:: Window

   | :sl:`pygame object that represents a window`
   | :sg:`Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -> Window`

   .. classmethod:: from_display_module
   
      | :sl:`Creates window using window created by pygame.display.set_mode().`
      | :sg:`from_display_module() -> Window`

   .. classmethod:: from_window

      | :sl:`Create Window from another window. Could be from another UI toolkit.`
      | :sg:`from_window(other) -> Window`

   .. attribute:: grab

      | :sl:`Gets or sets whether the mouse is confined to the window.`
      | :sg:`grab -> bool`

   .. attribute:: relative_mouse

      | :sl:`Gets or sets the window's relative mouse motion state.`
      | :sg:`relative_mouse -> bool`

   .. method:: set_windowed

      | :sl:`Enable windowed mode (exit fullscreen).`
      | :sg:`set_windowed() -> None`

   .. method:: set_fullscreen

      | :sl:`Enter fullscreen.`
      | :sg:`set_fullscreen(desktop=False) -> None`

   .. attribute:: title

      | :sl:`Gets or sets whether the window title.`
      | :sg:`title -> string`

   .. method:: destroy

      | :sl:`Destroys the window.`
      | :sg:`destroy() -> None`

   .. method:: hide

      | :sl:`Hide the window.`
      | :sg:`hide() -> None`

   .. method:: show

      | :sl:`Show the window.`
      | :sg:`show() -> None`

   .. method:: focus

      | :sl:`Raise the window above other windows and set the input focus. The "input_only" argument is only supported on X11.`
      | :sg:`focus(input_only=False) -> None`

   .. method:: restore

      | :sl:`Restore the size and position of a minimized or maximized window.`
      | :sg:`restore() -> None`

   .. method:: maximize

      | :sl:`Maximize the window.`
      | :sg:`maximize() -> None`

   .. method:: minimize

      | :sl:`Minimize the window.`
      | :sg:`maximize() -> None`

   .. attribute:: resizable

      | :sl:`Gets and sets whether the window is resizable.`
      | :sg:`resizable -> bool`

   .. attribute:: borderless

      | :sl:`Add or remove the border from the window.`
      | :sg:`borderless -> bool`

   .. method:: set_icon

      | :sl:`Set the icon for the window.`
      | :sg:`set_icon(surface) -> None`

   .. attribute:: id

      | :sl:`Get the unique window ID. *Read-only*`
      | :sg:`id -> int`

   .. attribute:: size

      | :sl:`Gets and sets the window size.`
      | :sg:`size -> (int, int)`

   .. attribute:: position

      | :sl:`Gets and sets the window position.`
      | :sg:`position -> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED`	

   .. attribute:: opacity

      | :sl:`Gets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).`
      | :sg:`opacity -> float`

   .. attribute:: display_index

      | :sl:`Get the index of the display that owns the window. *Read-only*`
      | :sg:`display_index -> int`

   .. method:: set_modal_for

      | :sl:`Set the window as a modal for a parent window. This function is only supported on X11.`
      | :sg:`set_modal_for(Window) -> None`

.. class:: Texture	

   | :sl:`pygame object that representing a Texture.`
   | :sg:`Texture(renderer, size, depth=0, static=False, streaming=False, target=False) -> Texture`

   .. staticmethod:: from_surface

      | :sl:`Create a texture from an existing surface.`
      | :sg:`from_surface(renderer, surface) -> Texture`

   .. attribute:: renderer

      | :sl:`Gets the renderer associated with the Texture. *Read-only*`
      | :sg:`renderer -> Renderer`

   .. attribute:: width

      | :sl:`Gets the width of the Texture. *Read-only*`
      | :sg:`width -> int`

   .. attribute:: height

      | :sl:`Gets the height of the Texture. *Read-only*`
      | :sg:`height -> int`

   .. attribute:: alpha

      | :sl:`Gets and sets an additional alpha value multiplied into render copy operations.`
      | :sg:`alpha -> int`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Texture.`
      | :sg:`blend_mode -> int`

   .. attribute:: color

      | :sl:`Gets and sets an additional color value multiplied into render copy operations.`
      | :sg:`color -> color`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the texture.`
      | :sg:`get_rect(**kwargs) -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the texture to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None`

   .. method:: update

      | :sl:`Update the texture with a Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`update(surface, area=None) -> None`

.. class:: Image

   | :sl:`Easy way to use a portion of a Texture without worrying about srcrect all the time.`
   | :sg:`Image(textureOrImage, srcrect=None) -> Image`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the Image.`
      | :sg:`get_rect() -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the Image to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None) -> None`

   .. attribute:: angle

      | :sl:`Gets and sets the angle the Image draws itself with.`
      | :sg:`angle -> float`

   .. attribute:: origin

      | :sl:`Gets and sets the origin. Origin=None means the Image will be rotated around its center.`
      | :sg:`origin -> (float, float) or None.`

   .. attribute:: flip_x

      | :sl:`Gets and sets whether the Image is flipped on the x axis.`
      | :sg:`flip_x -> bool`

   .. attribute:: flip_y

      | :sl:`Gets and sets whether the Image is flipped on the y axis.`
      | :sg:`flip_y -> bool`

   .. attribute:: color

      | :sl:`Gets and sets the Image color modifier.`
      | :sg:`color -> Color`

   .. attribute:: alpha

      | :sl:`Gets and sets the Image alpha modifier.`
      | :sg:`alpha -> float`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Image.`
      | :sg:`blend_mode -> int`

   .. attribute:: texture

      | :sl:`Gets and sets the Texture the Image is based on.`
      | :sg:`texture -> Texture`

   .. attribute:: srcrect

      | :sl:`Gets and sets the Rect the Image is based on.`
      | :sg:`srcrect -> Rect`

.. class:: Renderer

   | :sl:`Create a 2D rendering context for a window.`
   | :sg:`Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer`

   .. classmethod:: from_window

      | :sl:`Easy way to create a Renderer.`
      | :sg:`from_window(window) -> Renderer`

   .. attribute:: draw_blend_mode

      | :sl:`Gets and sets the blend mode used by the drawing functions.`
      | :sg:`draw_blend_mode -> int`   

   .. attribute:: draw_color

      | :sl:`Gets and sets the color used by the drawing functions.`
      | :sg:`draw_color -> Color`

   .. method:: clear

      | :sl:`Clear the current rendering target with the drawing color.`
      | :sg:`clear() -> None`

   .. method:: present

      | :sl:`Updates the screen with any new rendering since previous call.`
      | :sg:`present() -> None`	

   .. method:: get_viewport

      | :sl:`Returns the drawing area on the target.`
      | :sg:`get_viewport() -> Rect`

   .. method:: set_viewport

      | :sl:`Set the drawing area on the target. If area is None, the entire target will be used.`
      | :sg:`set_viewport(area) -> None`

   .. attribute:: logical_size

      | :sl:`Gets and sets the logical size.`
      | :sg:`logical_size -> (int width, int height)`

   .. attribute:: scale

      | :sl:`Gets and sets the scale.`
      | :sg:`scale -> (float x_scale, float y_scale)`

   .. attribute:: target

      | :sl:`Gets and sets the render target. None represents the default target (the renderer).`
      | :sg:`target -> Texture or None`

   .. method:: blit

      | :sl:`For compatibility purposes. Textures created by different Renderers cannot be shared!`
      | :sg:`blit(source, dest, area=None, special_flags=0)-> Rect`

   .. method:: draw_line

      | :sl:`Draws a line.`
      | :sg:`draw_line(p1, p2) -> None`

   .. method:: draw_point

      | :sl:`Draws a point.`
      | :sg:`draw_point(point) -> None`

   .. method:: draw_rect

      | :sl:`Draws a rectangle.`
      | :sg:`draw_rect(rect)-> None`

   .. method:: fill_rect

      | :sl:`Fills a rectangle.`
      | :sg:`fill_rect(rect)-> None`

   .. method:: to_surface

      | :sl:`Read pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`to_surface(surface=None, area=None)-> Surface`

--- Contenu du fichier : font.rst.txt ---
.. include:: common.txt

:mod:`pygame.font`
==================

.. module:: pygame.font
   :synopsis: pygame module for loading and rendering fonts

| :sl:`pygame module for loading and rendering fonts`

The font module allows for rendering TrueType fonts into Surface objects.
This module is built on top of the SDL_ttf library, which comes with all
normal pygame installations.

Most of the work done with fonts are done by using the actual Font objects.
The module by itself only has routines to support the creation of Font objects
with :func:`pygame.font.Font`.

You can load fonts from the system by using the :func:`pygame.font.SysFont`
function. There are a few other functions to help look up the system fonts.

Pygame comes with a builtin default font, freesansbold. This can always be
accessed by passing ``None`` as the font name.

Before pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character
('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf
2.0.15 accepts any valid UCS-4 / UTF-32 character 
(like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')).
More about this in :func:`Font.render`.

Before pygame 2.0.3, this character space restriction can be avoided by
using the  :mod:`pygame.freetype` based ``pygame.ftfont`` to emulate the Font
module. This can be used by defining the environment variable PYGAME_FREETYPE
before the first import of :mod:`pygame`. Since the problem ``pygame.ftfont``
solves no longer exists, it will likely be removed in the future.

.. function:: init

   | :sl:`initialize the font module`
   | :sg:`init() -> None`

   This method is called automatically by ``pygame.init()``. It initializes the
   font module. The module must be initialized before any other functions will
   work.

   It is safe to call this function more than once.

   .. ## pygame.font.init ##

.. function:: quit

   | :sl:`uninitialize the font module`
   | :sg:`quit() -> None`

   Manually uninitialize SDL_ttf's font system. This is called automatically by
   ``pygame.quit()``.

   It is safe to call this function even if font is currently not initialized.

   .. ## pygame.font.quit ##

.. function:: get_init

   | :sl:`true if the font module is initialized`
   | :sg:`get_init() -> bool`

   Test if the font module is initialized or not.

   .. ## pygame.font.get_init ##

.. function:: get_default_font

   | :sl:`get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the system font. This is not the full path to the
   file. This file can usually be found in the same directory as the font
   module, but it can also be bundled in separate archives.

   .. ## pygame.font.get_default_font ##

.. function:: get_sdl_ttf_version

   | :sl:`gets SDL_ttf version`
   | :sg:`get_sdl_ttf_version(linked=True) -> (major, minor, patch)`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave get_sdl_ttf_version feedback with authors <https://github.com/pygame/pygame/pull/3095>`_

   Returns a tuple of integers that identify SDL_ttf's version.
   SDL_ttf is the underlying font rendering library, written in C,
   on which pygame's font module depends. If 'linked' is True (the default), 
   the function returns the version of the linked TTF library. 
   Otherwise this function returns the version of TTF pygame was compiled with

   .. versionadded:: 2.1.3

   .. ## pygame.font.get_sdl_ttf_version ##

.. function:: get_fonts

   | :sl:`get all available fonts`
   | :sg:`get_fonts() -> list of strings`

   Returns a list of all the fonts available on the system. The names of the
   fonts will be set to lowercase with all spaces and punctuation removed. This
   works on most systems, but some will return an empty list if they cannot
   find fonts.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.get_fonts ##

.. function:: match_font

   | :sl:`find a specific font on the system`
   | :sg:`match_font(name, bold=False, italic=False) -> path`

   Returns the full path to a font file on the system. If bold or italic are
   set to true, this will attempt to find the correct family of font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.
   If none of the given names are found, None is returned.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   Example:

   ::

       print pygame.font.match_font('bitstreamverasans')
       # output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf
       # (but only if you have Vera on your system)

   .. ## pygame.font.match_font ##

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested bold and italic flags. Pygame uses a small set of common
   font aliases. If the specific font you ask for is not available, a reasonable
   alternative may be used. If a suitable system font is not found this will
   fall back on loading the default pygame font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.SysFont ##

.. class:: Font

   | :sl:`create a new Font object from a file`
   | :sg:`Font(file_path=None, size=12) -> Font`
   | :sg:`Font(file_path, size) -> Font`
   | :sg:`Font(pathlib.Path, size) -> Font`
   | :sg:`Font(object, size) -> Font`

   Load a new font from a given filename or a python file object. The size is
   the height of the font in pixels. If the filename is ``None`` the pygame
   default font will be loaded. If a font cannot be loaded from the arguments
   given an exception will be raised. Once the font is created the size cannot
   be changed. If no arguments are given then the default font will be used and
   a font size of 12 is used.

   Font objects are mainly used to render text into new Surface objects. The
   render can emulate bold or italic features, but it is better to load from a
   font with actual italic or bold glyphs.

   .. attribute:: bold

      | :sl:`Gets or sets whether the font should be rendered in (faked) bold.`
      | :sg:`bold -> bool`

      Whether the font should be rendered in bold.

      When set to True, this enables the bold rendering of text. This
      is a fake stretching of the font that doesn't look good on many
      font types. If possible load the font from a real bold font
      file. While bold, the font will have a different width than when
      normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.bold ##

   .. attribute:: italic

      | :sl:`Gets or sets whether the font should be rendered in (faked) italics.`
      | :sg:`italic -> bool`

      Whether the font should be rendered in italic.

      When set to True, this enables fake rendering of italic
      text. This is a fake skewing of the font that doesn't look good
      on many font types. If possible load the font from a real italic
      font file. While italic the font will have a different width
      than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.italic ##

   .. attribute:: underline

      | :sl:`Gets or sets whether the font should be rendered with an underline.`
      | :sg:`underline -> bool`

      Whether the font should be rendered in underline.

      When set to True, all rendered fonts will include an
      underline. The underline is always one pixel thick, regardless
      of font size. This can be mixed with the bold, italic and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.underline ##
   
   .. attribute:: strikethrough

      | :sl:`Gets or sets whether the font should be rendered with a strikethrough.`
      | :sg:`strikethrough -> bool`

      Whether the font should be rendered with a strikethrough.

      When set to True, all rendered fonts will include an
      strikethrough. The strikethrough is always one pixel thick,
      regardless of font size. This can be mixed with the bold,
      italic and underline modes.

      .. versionadded:: 2.1.3

      .. ## Font.strikethrough ##

   .. method:: render

      | :sl:`draw text on a new Surface`
      | :sg:`render(text, antialias, color, background=None) -> Surface`

      This creates a new Surface with the specified text rendered on it. 
      :mod:`pygame.font` provides no way to directly draw text on an existing
      Surface: instead you must use :func:`Font.render` to create an image
      (Surface) of the text, then blit this image onto another Surface.

      The text can only be a single line: newline characters are not rendered.
      Null characters ('\x00') raise a TypeError. Both Unicode and char (byte)
      strings are accepted. For Unicode strings only UCS-2 characters
      ('\\u0001' to '\\uFFFF') were previously supported and any greater
      unicode codepoint would raise a UnicodeError. Now, characters in the
      UCS-4 range are supported. For char strings a ``LATIN1`` encoding is
      assumed. The antialias argument is a boolean: if True the characters
      will have smooth edges. The color argument is the color of the text
      [e.g.: (0,0,255) for blue]. The optional background argument is a color
      to use for the text background. If no background is passed the area
      outside the text will be transparent.

      The Surface returned will be of the dimensions required to hold the text.
      (the same as those returned by :func:`Font.size`). If an empty string is passed
      for the text, a blank surface will be returned that is zero pixel wide and
      the height of the font.

      Depending on the type of background and antialiasing used, this returns
      different types of Surfaces. For performance reasons, it is good to know
      what type of image will be used. If antialiasing is not used, the return
      image will always be an 8-bit image with a two-color palette. If the
      background is transparent a colorkey will be set. Antialiased images are
      rendered to 24-bit ``RGB`` images. If the background is transparent a
      pixel alpha will be included.

      Optimization: if you know that the final destination for the text (on the
      screen) will always have a solid background, and the text is antialiased,
      you can improve performance by specifying the background color. This will
      cause the resulting image to maintain transparency information by
      colorkey rather than (much less efficient) alpha values.

      If you render '\\n' an unknown char will be rendered. Usually a
      rectangle. Instead you need to handle newlines yourself.

      Font rendering is not thread safe: only a single thread can render text
      at any time.

      .. versionchanged:: 2.0.3 Rendering UCS4 unicode works and does not
        raise an exception. Use `if hasattr(pygame.font, "UCS4"):` to see if
        pygame supports rendering UCS4 unicode including more languages and
        emoji.

      .. ## Font.render ##

   .. method:: size

      | :sl:`determine the amount of space needed to render text`
      | :sg:`size(text) -> (width, height)`

      Returns the dimensions needed to render the text. This can be used to
      help determine the positioning needed for text before it is rendered. It
      can also be used for word wrapping and other layout effects.

      Be aware that most fonts use kerning which adjusts the widths for
      specific letter pairs. For example, the width for "ae" will not always
      match the width for "a" + "e".

      .. ## Font.size ##

   .. method:: set_underline

      | :sl:`control if text is rendered with an underline`
      | :sg:`set_underline(bool) -> None`

      When enabled, all rendered fonts will include an underline. The underline
      is always one pixel thick, regardless of font size. This can be mixed
      with the bold, italic and strikethrough modes.

      .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.set_underline ##

   .. method:: get_underline

      | :sl:`check if text will be rendered with an underline`
      | :sg:`get_underline() -> bool`

      Return True when the font underline is enabled.

       .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.get_underline ##
   
   .. method:: set_strikethrough

      | :sl:`control if text is rendered with a strikethrough`
      | :sg:`set_strikethrough(bool) -> None`

      When enabled, all rendered fonts will include a strikethrough. The
      strikethrough is always one pixel thick, regardless of font size.
      This can be mixed with the bold, italic and underline modes.

      .. note:: This is the same as the :attr:`strikethrough` attribute.
      
      .. versionadded:: 2.1.3

      .. ## Font.set_strikethrough ##

   .. method:: get_strikethrough

      | :sl:`check if text will be rendered with a strikethrough`
      | :sg:`get_strikethrough() -> bool`

      Return True when the font strikethrough is enabled.

       .. note:: This is the same as the :attr:`strikethrough` attribute.
       
       .. versionadded:: 2.1.3

      .. ## Font.get_strikethrough ##

   .. method:: set_bold

      | :sl:`enable fake rendering of bold text`
      | :sg:`set_bold(bool) -> None`

      Enables the bold rendering of text. This is a fake stretching of the font
      that doesn't look good on many font types. If possible load the font from
      a real bold font file. While bold, the font will have a different width
      than when normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.set_bold ##

   .. method:: get_bold

      | :sl:`check if text will be rendered bold`
      | :sg:`get_bold() -> bool`

      Return True when the font bold rendering mode is enabled.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.get_bold ##

   .. method:: set_italic

      | :sl:`enable fake rendering of italic text`
      | :sg:`set_italic(bool) -> None`

      Enables fake rendering of italic text. This is a fake skewing of the font
      that doesn't look good on many font types. If possible load the font from
      a real italic font file. While italic the font will have a different
      width than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.set_italic ##

   .. method:: metrics

      | :sl:`gets the metrics for each character in the passed string`
      | :sg:`metrics(text) -> list`

      The list contains tuples for each character, which contain the minimum
      ``X`` offset, the maximum ``X`` offset, the minimum ``Y`` offset, the
      maximum ``Y`` offset and the advance offset (bearing plus width) of the
      character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy,
      advance), ...]. None is entered in the list for each unrecognized
      character.

      .. ## Font.metrics ##

   .. method:: get_italic

      | :sl:`check if the text will be rendered italic`
      | :sg:`get_italic() -> bool`

      Return True when the font italic rendering mode is enabled.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.get_italic ##

   .. method:: get_linesize

      | :sl:`get the line space of the font text`
      | :sg:`get_linesize() -> int`

      Return the height in pixels for a line of text with the font. When
      rendering multiple lines of text this is the recommended amount of space
      between lines.

      .. ## Font.get_linesize ##

   .. method:: get_height

      | :sl:`get the height of the font`
      | :sg:`get_height() -> int`

      Return the height in pixels of the actual rendered text. This is the
      average size for each glyph in the font.

      .. ## Font.get_height ##

   .. method:: get_ascent

      | :sl:`get the ascent of the font`
      | :sg:`get_ascent() -> int`

      Return the height in pixels for the font ascent. The ascent is the number
      of pixels from the font baseline to the top of the font.

      .. ## Font.get_ascent ##

   .. method:: get_descent

      | :sl:`get the descent of the font`
      | :sg:`get_descent() -> int`

      Return the height in pixels for the font descent. The descent is the
      number of pixels from the font baseline to the bottom of the font.

      .. ## Font.get_descent ##

   .. method:: set_script

      | :sl:`set the script code for text shaping`
      | :sg:`set_script(str) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave feedback with authors <https://github.com/pygame/pygame/pull/3330>`_

      Sets the script used by harfbuzz text shaping, taking a 4 character
      script code as input. For example, Hindi is written in the Devanagari
      script, for which the script code is `"Deva"`. See the full list of
      script codes in `ISO 15924 <https://www.unicode.org/iso15924/iso15924-codes.html>`_.

      This method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the
      method will raise a pygame.error.

      .. versionadded:: 2.2.0

      .. ## Font.set_script ## 

   .. ## pygame.font.Font ##

.. ## pygame.font ##


--- Contenu du fichier : sprite.rst.txt ---
.. include:: common.txt

:mod:`pygame.sprite`
====================

.. module:: pygame.sprite
   :synopsis: pygame module with basic game object classes

| :sl:`pygame module with basic game object classes`

This module contains several simple classes to be used within games. There is
the main Sprite class and several Group classes that contain Sprites. The use
of these classes is entirely optional when using pygame. The classes are fairly
lightweight and only provide a starting place for the code that is common to
most games.

The Sprite class is intended to be used as a base class for the different types
of objects in the game. There is also a base Group class that simply stores
sprites. A game could create new types of Group classes that operate on
specially customized Sprite instances they contain.

The basic Group class can draw the Sprites it contains to a Surface. The
``Group.draw()`` method requires that each Sprite have a ``Surface.image``
attribute and a ``Surface.rect``. The ``Group.clear()`` method requires these
same attributes, and can be used to erase all the Sprites with background.
There are also more advanced Groups: ``pygame.sprite.RenderUpdates()`` and
``pygame.sprite.OrderedUpdates()``.

Lastly, this module contains several collision functions. These help find
sprites inside multiple groups that have intersecting bounding rectangles. To
find the collisions, the Sprites are required to have a ``Surface.rect``
attribute assigned.

The groups are designed for high efficiency in removing and adding Sprites to
them. They also allow cheap testing to see if a Sprite already exists in a
Group. A given Sprite can exist in any number of groups. A game could use some
groups to control object rendering, and a completely separate set of groups to
control interaction or player movement. Instead of adding type attributes or
bools to a derived Sprite class, consider keeping the Sprites inside organized
Groups. This will allow for easier lookup later in the game.

Sprites and Groups manage their relationships with the ``add()`` and
``remove()`` methods. These methods can accept a single or multiple targets for
membership. The default initializers for these classes also takes a single or
list of targets for initial membership. It is safe to repeatedly add and remove
the same Sprite from a Group.

While it is possible to design sprite and group classes that don't derive from
the Sprite and AbstractGroup classes below, it is strongly recommended that you
extend those when you add a Sprite or Group class.

Sprites are not thread safe. So lock them yourself if using threads.

.. class:: Sprite

   | :sl:`Simple base class for visible game objects.`
   | :sg:`Sprite(*groups) -> Sprite`

   The base class for visible game objects. Derived classes will want to
   override the ``Sprite.update()`` and assign a ``Sprite.image`` and
   ``Sprite.rect`` attributes. The initializer can accept any number of Group
   instances to be added to.

   When subclassing the Sprite, be sure to call the base initializer before
   adding the Sprite to Groups. For example:

   .. code-block:: python
   
       class Block(pygame.sprite.Sprite):
            
           # Constructor. Pass in the color of the block, 
           # and its x and y position
           def __init__(self, color, width, height):
              # Call the parent class (Sprite) constructor
              pygame.sprite.Sprite.__init__(self) 
        
              # Create an image of the block, and fill it with a color.
              # This could also be an image loaded from the disk.
              self.image = pygame.Surface([width, height])
              self.image.fill(color)
        
              # Fetch the rectangle object that has the dimensions of the image
              # Update the position of this object by setting the values of rect.x and rect.y
              self.rect = self.image.get_rect()   
      
   .. method:: update

      | :sl:`method to control sprite behavior`
      | :sg:`update(*args, **kwargs) -> None`

      The default implementation of this method does nothing; it's just a
      convenient "hook" that you can override. This method is called by
      ``Group.update()`` with whatever arguments you give it.

      There is no need to use this method if not using the convenience method
      by the same name in the Group class.

      .. ## Sprite.update ##

   .. method:: add

      | :sl:`add the sprite to groups`
      | :sg:`add(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be added to the Groups it is not already a member of.

      .. ## Sprite.add ##

   .. method:: remove

      | :sl:`remove the sprite from groups`
      | :sg:`remove(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be removed from the Groups it is currently a member of.

      .. ## Sprite.remove ##

   .. method:: kill

      | :sl:`remove the Sprite from all Groups`
      | :sg:`kill() -> None`

      The Sprite is removed from all the Groups that contain it. This won't
      change anything about the state of the Sprite. It is possible to continue
      to use the Sprite after this method has been called, including adding it
      to Groups.

      .. ## Sprite.kill ##

   .. method:: alive

      | :sl:`does the sprite belong to any groups`
      | :sg:`alive() -> bool`

      Returns True when the Sprite belongs to one or more Groups.

      .. ## Sprite.alive ##

   .. method:: groups

      | :sl:`list of Groups that contain this Sprite`
      | :sg:`groups() -> group_list`

      Return a list of all the Groups that contain this Sprite.

      .. ## Sprite.groups ##

   .. ## pygame.sprite.Sprite ##

.. class:: WeakSprite

   | :sl:`A subclass of Sprite that references its Groups weakly. This means that any group this belongs to that is not referenced anywhere else is garbage collected automatically.`
   | :sg:`WeakSprite(*groups) -> WeakSprite`

.. class:: DirtySprite

   | :sl:`A subclass of Sprite with more attributes and features.`
   | :sg:`DirtySprite(*groups) -> DirtySprite`

   Extra DirtySprite attributes with their default values:

   dirty = 1

   ::

       if set to 1, it is repainted and then set to 0 again
       if set to 2 then it is always dirty ( repainted each frame,
       flag is not reset)
       0 means that it is not dirty and therefore not repainted again

   blendmode = 0

   ::

       its the special_flags argument of blit, blendmodes

   source_rect = None

   ::

       source rect to use, remember that it is relative to
       topleft (0,0) of self.image

   visible = 1

   ::

       normally 1, if set to 0 it will not be repainted
       (you must set it dirty too to be erased from screen)

   layer = 0

   ::

       (READONLY value, it is read when adding it to the
       LayeredDirty, for details see doc of LayeredDirty)

   .. ##  ##

   .. ## pygame.sprite.DirtySprite ##

.. class:: Group

   | :sl:`A container class to hold and manage multiple Sprite objects.`
   | :sg:`Group(*sprites) -> Group`

   A simple container for Sprite objects. This class can be inherited to create
   containers with more specific behaviors. The constructor takes any number of
   Sprite arguments to add to the Group. The group supports the following
   standard Python operations:

   ::

       in      test if a Sprite is contained
       len     the number of Sprites contained
       bool    test if any Sprites are contained
       iter    iterate through all the Sprites

   The Sprites in the Group are ordered only on python 3.6 and higher.
   Below python 3.6 drawing and iterating over the Sprites is in no particular order.

   .. method:: sprites

      | :sl:`list of the Sprites this Group contains`
      | :sg:`sprites() -> sprite_list`

      Return a list of all the Sprites this group contains. You can also get an
      iterator from the group, but you cannot iterate over a Group while
      modifying it.

      .. ## Group.sprites ##

   .. method:: copy

      | :sl:`duplicate the Group`
      | :sg:`copy() -> Group`

      Creates a new Group with all the same Sprites as the original. If you
      have subclassed Group, the new object will have the same (sub-)class as
      the original. This only works if the derived class's constructor takes
      the same arguments as the Group class's.

      .. ## Group.copy ##

   .. method:: add

      | :sl:`add Sprites to this Group`
      | :sg:`add(*sprites) -> None`

      Add any number of Sprites to this Group. This will only add Sprites that
      are not already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.add ##

   .. method:: remove

      | :sl:`remove Sprites from the Group`
      | :sg:`remove(*sprites) -> None`

      Remove any number of Sprites from the Group. This will only remove
      Sprites that are already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.remove ##

   .. method:: has

      | :sl:`test if a Group contains Sprites`
      | :sg:`has(*sprites) -> bool`

      Return True if the Group contains all of the given sprites. This is
      similar to using the "in" operator on the Group ("if sprite in group:
      ..."), which tests if a single Sprite belongs to a Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.has ##

   .. method:: update

      | :sl:`call the update method on contained Sprites`
      | :sg:`update(*args, **kwargs) -> None`

      Calls the ``update()`` method on all Sprites in the Group. The base
      Sprite class has an update method that takes any number of arguments and
      does nothing. The arguments passed to ``Group.update()`` will be passed
      to each Sprite.

      There is no way to get the return value from the ``Sprite.update()``
      methods.

      .. ## Group.update ##

   .. method:: draw

      | :sl:`blit the Sprite images`
      | :sg:`draw(Surface, bgsurf=None, special_flags=0) -> List[Rect]`

      Draws the contained Sprites to the Surface argument. This uses the
      ``Sprite.image`` attribute for the source surface, and ``Sprite.rect``
      for the position. ``special_flags`` is passed to ``Surface.blit()``.
      ``bgsurf`` is unused in this method but ``LayeredDirty.draw()`` uses
      it.

      The Group does not keep sprites in any order, so the draw order is
      arbitrary.

      .. ## Group.draw ##

   .. method:: clear

      | :sl:`draw a background over the Sprites`
      | :sg:`clear(Surface_dest, background) -> None`

      Erases the Sprites used in the last ``Group.draw()`` call. The
      destination Surface is cleared by filling the drawn Sprite positions with
      the background.

      The background is usually a Surface image the same dimensions as the
      destination Surface. However, it can also be a callback function that
      takes two arguments; the destination Surface and an area to clear. The
      background callback function will be called several times each clear.

      Here is an example callback that will clear the Sprites with solid red:

      ::

          def clear_callback(surf, rect):
              color = 255, 0, 0
              surf.fill(color, rect)

      .. ## Group.clear ##

   .. method:: empty

      | :sl:`remove all Sprites`
      | :sg:`empty() -> None`

      Removes all Sprites from this Group.

      .. ## Group.empty ##

   .. ## pygame.sprite.Group ##

.. class:: WeakDirtySprite

   | :sl:`A subclass of WeakSprite and DirtySprite that combines the benefits of both classes.`
   | :sg:`WeakDirtySprite(*groups) -> WeakDirtySprite`

.. class:: RenderPlain

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderClear

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderUpdates

   | :sl:`Group sub-class that tracks dirty updates.`
   | :sg:`RenderUpdates(*sprites) -> RenderUpdates`

   This class is derived from ``pygame.sprite.Group()``. It has an extended
   ``draw()`` method that tracks the changed areas of the screen.

   .. method:: draw

      | :sl:`blit the Sprite images and track changed areas`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      Draws all the Sprites to the surface, the same as ``Group.draw()``. This
      method also returns a list of Rectangular areas on the screen that have
      been changed. The returned changes include areas of the screen that have
      been affected by previous ``Group.clear()`` calls. ``special_flags`` is
      passed to ``Surface.blit()``.

      The returned Rect list should be passed to ``pygame.display.update()``.
      This will help performance on software driven display modes. This type of
      updating is usually only helpful on destinations with non-animating
      backgrounds.

      .. ## RenderUpdates.draw ##

   .. ## pygame.sprite.RenderUpdates ##

.. function:: OrderedUpdates

   | :sl:`RenderUpdates sub-class that draws Sprites in order of addition.`
   | :sg:`OrderedUpdates(*sprites) -> OrderedUpdates`

   This class derives from ``pygame.sprite.RenderUpdates()``. It maintains the
   order in which the Sprites were added to the Group for rendering. This makes
   adding and removing Sprites from the Group a little slower than regular
   Groups.

   .. ## pygame.sprite.OrderedUpdates ##

.. class:: LayeredUpdates

   | :sl:`LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.`
   | :sg:`LayeredUpdates(*sprites, **kwargs) -> LayeredUpdates`

   This group is fully compatible with :class:`pygame.sprite.Sprite`.

   You can set the default layer through kwargs using 'default_layer' and an
   integer for the layer. The default layer is 0.

   If the sprite you add has an attribute _layer then that layer will be used.
   If the \**kwarg contains 'layer' then the sprites passed will be added to
   that layer (overriding the ``sprite.layer`` attribute). If neither sprite
   has attribute layer nor \**kwarg then the default layer is used to add the
   sprites.

   .. versionadded:: 1.8

   .. method:: add

      | :sl:`add a sprite or sequence of sprites to a group`
      | :sg:`add(*sprites, **kwargs) -> None`

      If the ``sprite(s)`` have an attribute layer then that is used for the
      layer. If \**kwargs contains 'layer' then the ``sprite(s)`` will be added
      to that argument (overriding the sprite layer attribute). If neither is
      passed then the ``sprite(s)`` will be added to the default layer.

      .. ## LayeredUpdates.add ##

   .. method:: sprites

      | :sl:`returns a ordered list of sprites (first back, last top).`
      | :sg:`sprites() -> sprites`

      .. ## LayeredUpdates.sprites ##

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      .. ## LayeredUpdates.draw ##

   .. method:: get_sprites_at

      | :sl:`returns a list with all sprites at that position.`
      | :sg:`get_sprites_at(pos) -> colliding_sprites`

      Bottom sprites first, top last.

      .. ## LayeredUpdates.get_sprites_at ##

   .. method:: get_sprite

      | :sl:`returns the sprite at the index idx from the groups sprites`
      | :sg:`get_sprite(idx) -> sprite`

      Raises IndexOutOfBounds if the idx is not within range.

      .. ## LayeredUpdates.get_sprite ##

   .. method:: remove_sprites_of_layer

      | :sl:`removes all sprites from a layer and returns them as a list.`
      | :sg:`remove_sprites_of_layer(layer_nr) -> sprites`

      .. ## LayeredUpdates.remove_sprites_of_layer ##

   .. method:: layers

      | :sl:`returns a list of layers defined (unique), sorted from bottom up.`
      | :sg:`layers() -> layers`

      .. ## LayeredUpdates.layers ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredUpdates.change_layer ##

   .. method:: get_layer_of_sprite

      | :sl:`returns the layer that sprite is currently in.`
      | :sg:`get_layer_of_sprite(sprite) -> layer`

      If the sprite is not found then it will return the default layer.

      .. ## LayeredUpdates.get_layer_of_sprite ##

   .. method:: get_top_layer

      | :sl:`returns the top layer`
      | :sg:`get_top_layer() -> layer`

      .. ## LayeredUpdates.get_top_layer ##

   .. method:: get_bottom_layer

      | :sl:`returns the bottom layer`
      | :sg:`get_bottom_layer() -> layer`

      .. ## LayeredUpdates.get_bottom_layer ##

   .. method:: move_to_front

      | :sl:`brings the sprite to front layer`
      | :sg:`move_to_front(sprite) -> None`

      Brings the sprite to front, changing sprite layer to topmost layer (added
      at the end of that layer).

      .. ## LayeredUpdates.move_to_front ##

   .. method:: move_to_back

      | :sl:`moves the sprite to the bottom layer`
      | :sg:`move_to_back(sprite) -> None`

      Moves the sprite to the bottom layer, moving it behind all other layers
      and adding one additional layer.

      .. ## LayeredUpdates.move_to_back ##

   .. method:: get_top_sprite

      | :sl:`returns the topmost sprite`
      | :sg:`get_top_sprite() -> Sprite`

      .. ## LayeredUpdates.get_top_sprite ##

   .. method:: get_sprites_from_layer

      | :sl:`returns all sprites from a layer, ordered by how they where added`
      | :sg:`get_sprites_from_layer(layer) -> sprites`

      Returns all sprites from a layer, ordered by how they where added. It
      uses linear search and the sprites are not removed from layer.

      .. ## LayeredUpdates.get_sprites_from_layer ##

   .. method:: switch_layer

      | :sl:`switches the sprites from layer1 to layer2`
      | :sg:`switch_layer(layer1_nr, layer2_nr) -> None`

      The layers number must exist, it is not checked.

      .. ## LayeredUpdates.switch_layer ##

   .. ## pygame.sprite.LayeredUpdates ##

.. class:: LayeredDirty

   | :sl:`LayeredDirty group is for DirtySprite objects.  Subclasses LayeredUpdates.`
   | :sg:`LayeredDirty(*sprites, **kwargs) -> LayeredDirty`

   This group requires :class:`pygame.sprite.DirtySprite` or any sprite that
   has the following attributes:

   ::

       image, rect, dirty, visible, blendmode (see doc of DirtySprite).

   It uses the dirty flag technique and is therefore faster than the
   :class:`pygame.sprite.RenderUpdates` if you have many static sprites. It
   also switches automatically between dirty rect update and full screen
   drawing, so you do not have to worry what would be faster.

   Same as for the :class:`pygame.sprite.Group`. You can specify some
   additional attributes through kwargs:

   ::

       _use_update: True/False   default is False
       _default_layer: default layer where sprites without a layer are added.
       _time_threshold: threshold time for switching between dirty rect mode
           and fullscreen mode, defaults to 1000./80  == 1000./fps

   .. versionadded:: 1.8

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=None) -> Rect_list`

      You can pass the background too. If a background is already set, then the
      bgsurf argument has no effect. If present, the ``special_flags`` argument is
      always passed to ``Surface.blit()``, overriding ``DirtySprite.blendmode``. 
      If ``special_flags`` is not present, ``DirtySprite.blendmode`` is passed
      to the ``Surface.blit()`` instead.

      .. ## LayeredDirty.draw ##

   .. method:: clear

      | :sl:`used to set background`
      | :sg:`clear(surface, bgd) -> None`

      .. ## LayeredDirty.clear ##

   .. method:: repaint_rect

      | :sl:`repaints the given area`
      | :sg:`repaint_rect(screen_rect) -> None`

      screen_rect is in screen coordinates.

      .. ## LayeredDirty.repaint_rect ##

   .. method:: set_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`set_clip(screen_rect=None) -> None`

      .. ## LayeredDirty.set_clip ##

   .. method:: get_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`get_clip() -> Rect`

      .. ## LayeredDirty.get_clip ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredDirty.change_layer ##

   .. method:: set_timing_treshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_treshold(time_ms) -> None`

      DEPRECATED: Use set_timing_threshold() instead.

      .. deprecated:: 2.1.1

      .. ## LayeredDirty.set_timing_treshold ##

   .. method:: set_timing_threshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_threshold(time_ms) -> None`

      Defaults to 1000.0 / 80.0. This means that the screen will be painted
      using the flip method rather than the update method if the update
      method is taking so long to update the screen that the frame rate falls
      below 80 frames per second.

      .. versionadded:: 2.1.1

      :raises TypeError: if ``time_ms`` is not int or float

      .. ## LayeredDirty.set_timing_threshold ##

   .. ## pygame.sprite.LayeredDirty ##

.. function:: GroupSingle

   | :sl:`Group container that holds a single sprite.`
   | :sg:`GroupSingle(sprite=None) -> GroupSingle`

   The GroupSingle container only holds a single Sprite. When a new Sprite is
   added, the old one is removed.

   There is a special property, ``GroupSingle.sprite``, that accesses the
   Sprite that this Group contains. It can be None when the Group is empty. The
   property can also be assigned to add a Sprite into the GroupSingle
   container.

   .. ## pygame.sprite.GroupSingle ##

.. function:: spritecollide

   | :sl:`Find sprites in a group that intersect another sprite.`
   | :sg:`spritecollide(sprite, group, dokill, collided = None) -> Sprite_list`

   Return a list containing all Sprites in a Group that intersect with another
   Sprite. Intersection is determined by comparing the ``Sprite.rect``
   attribute of each Sprite.

   The dokill argument is a bool. If set to True, all Sprites that collide will
   be removed from the Group.

   The collided argument is a callback function used to calculate if two
   sprites are colliding. it should take two sprites as values, and return a
   bool value indicating if they are colliding. If collided is not passed, all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   collided callables:

   ::

       collide_rect, collide_rect_ratio, collide_circle,
       collide_circle_ratio, collide_mask

   Example:
   
   .. code-block:: python

    # See if the Sprite block has collided with anything in the Group block_list
    # The True flag will remove the sprite in block_list
    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)  
     
    # Check the list of colliding sprites, and add one to the score for each one
    for block in blocks_hit_list:
        score +=1
       
   .. ## pygame.sprite.spritecollide ##

.. function:: collide_rect

   | :sl:`Collision detection between two sprites, using rects.`
   | :sg:`collide_rect(left, right) -> bool`

   Tests for collision between two sprites. Uses the pygame rect colliderect
   function to calculate the collision. Intended to be passed as a collided
   callback function to the \*collide functions. Sprites must have a "rect"
   attributes.

   .. versionadded:: 1.8

   .. ## pygame.sprite.collide_rect ##

.. function:: collide_rect_ratio

   | :sl:`Collision detection between two sprites, using rects scaled to a ratio.`
   | :sg:`collide_rect_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites rects.

   Is created with a ratio, the instance is then intended to be passed as a
   collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_rect_ratio ##

.. function:: collide_circle

   | :sl:`Collision detection between two sprites, using circles.`
   | :sg:`collide_circle(left, right) -> bool`

   Tests for collision between two sprites, by testing to see if two circles
   centered on the sprites overlap. If the sprites have a "radius" attribute,
   that is used to create the circle, otherwise a circle is created that is big
   enough to completely enclose the sprites rect as given by the "rect"
   attribute. Intended to be passed as a collided callback function to the
   \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle ##

.. function:: collide_circle_ratio

   | :sl:`Collision detection between two sprites, using circles scaled to a ratio.`
   | :sg:`collide_circle_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites radius.

   Is created with a floating point ratio, the instance is then intended to be
   passed as a collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   The created callable tests for collision between two sprites, by testing to
   see if two circles centered on the sprites overlap, after scaling the
   circles radius by the stored ratio. If the sprites have a "radius"
   attribute, that is used to create the circle, otherwise a circle is created
   that is big enough to completely enclose the sprites rect as given by the
   "rect" attribute. Intended to be passed as a collided callback function to
   the \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle_ratio ##

.. function:: collide_mask

   | :sl:`Collision detection between two sprites, using masks.`
   | :sg:`collide_mask(sprite1, sprite2) -> (int, int)`
   | :sg:`collide_mask(sprite1, sprite2) -> None`

   Tests for collision between two sprites, by testing if their bitmasks
   overlap (uses :func:`pygame.mask.Mask.overlap`). If the sprites have a
   ``mask`` attribute, it is used as the mask, otherwise a mask is created from
   the sprite's ``image`` (uses :func:`pygame.mask.from_surface`). Sprites must
   have a ``rect`` attribute; the ``mask`` attribute is optional.

   The first point of collision between the masks is returned. The collision
   point is offset from ``sprite1``'s mask's topleft corner (which is always
   (0, 0)). The collision point is a position within the mask and is not
   related to the actual screen position of ``sprite1``.

   This function is intended to be passed as a ``collided`` callback function
   to the group collide functions (see :meth:`spritecollide`,
   :meth:`groupcollide`, :meth:`spritecollideany`).

   .. note::
      To increase performance, create and set a ``mask`` attribute for all
      sprites that will use this function to check for collisions. Otherwise,
      each time this function is called it will create new masks.

   .. note::
      A new mask needs to be recreated each time a sprite's image is changed
      (e.g. if a new image is used or the existing image is rotated).

   ::

      # Example of mask creation for a sprite.
      sprite.mask = pygame.mask.from_surface(sprite.image)

   :returns: first point of collision between the masks or ``None`` if no
      collision
   :rtype: tuple(int, int) or NoneType

   .. versionadded:: 1.8.0

   .. ## pygame.sprite.collide_mask ##

.. function:: groupcollide

   | :sl:`Find all sprites that collide between two groups.`
   | :sg:`groupcollide(group1, group2, dokill1, dokill2, collided = None) -> Sprite_dict`

   This will find collisions between all the Sprites in two groups.
   Collision is determined by comparing the ``Sprite.rect`` attribute of
   each Sprite or by using the collided function if it is not None.

   Every Sprite inside group1 is added to the return dictionary. The value for
   each item is the list of Sprites in group2 that intersect.

   If either dokill argument is True, the colliding Sprites will be removed
   from their respective Group.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.groupcollide ##

.. function:: spritecollideany

   | :sl:`Simple test if a sprite intersects anything in a group.`
   | :sg:`spritecollideany(sprite, group, collided = None) -> Sprite` Collision with the returned sprite.
   | :sg:`spritecollideany(sprite, group, collided = None) -> None` No collision

   If the sprite collides with any single sprite in the group, a single
   sprite from the group is returned.  On no collision None is returned.

   If you don't need all the features of the ``pygame.sprite.spritecollide()`` function, this
   function will be a bit quicker.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.spritecollideany ##

.. ##  ##

.. ## pygame.sprite ##


--- Contenu du fichier : color.rst.txt ---
.. include:: common.txt

:mod:`pygame.Color`
===================

.. currentmodule:: pygame

.. class:: Color

   | :sl:`pygame object for color representations`
   | :sg:`Color(r, g, b) -> Color`
   | :sg:`Color(r, g, b, a=255) -> Color`
   | :sg:`Color(color_value) -> Color`

   The ``Color`` class represents ``RGBA`` color values using a value range of
   0 to 255 inclusive. It allows basic arithmetic operations — binary
   operations ``+``, ``-``, ``*``, ``//``, ``%``, and unary operation ``~`` — to
   create new colors, supports conversions to other color spaces such as ``HSV``
   or ``HSL`` and lets you adjust single color channels.
   Alpha defaults to 255 (fully opaque) when not given.
   The arithmetic operations and ``correct_gamma()`` method preserve subclasses.
   For the binary operators, the class of the returned color is that of the
   left hand color object of the operator.

   Color objects support equality comparison with other color objects and 3 or
   4 element tuples of integers. There was a bug in pygame 1.8.1
   where the default alpha was 0, not 255 like previously.

   Color objects export the C level array interface. The interface exports a
   read-only one dimensional unsigned byte array of the same assigned length
   as the color. The new buffer interface is also exported, with the same
   characteristics as the array interface.

   The floor division, ``//``, and modulus, ``%``, operators do not raise
   an exception for division by zero. Instead, if a color, or alpha, channel
   in the right hand color is 0, then the result is 0. For example: ::

       # These expressions are True
       Color(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)
       Color(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)

   Use ``int(color)`` to return the immutable integer value of the color,
   usable as a ``dict`` key. This integer value differs from the mapped
   pixel values of :meth:`pygame.Surface.get_at_mapped`,
   :meth:`pygame.Surface.map_rgb` and :meth:`pygame.Surface.unmap_rgb`.
   It can be passed as a ``color_value`` argument to :class:`Color`
   (useful with sets).

   See :doc:`color_list` for samples of the available named colors.

   :param int r: red value in the range of 0 to 255 inclusive
   :param int g: green value in the range of 0 to 255 inclusive
   :param int b: blue value in the range of 0 to 255 inclusive
   :param int a: (optional) alpha value in the range of 0 to 255 inclusive,
      default is 255
   :param color_value: color value (see note below for the supported formats)

      .. note::
         Supported ``color_value`` formats:
            | - **Color object:** clones the given :class:`Color` object
            | - **Color name: str:** name of the color to use, e.g. ``'red'``
              (all the supported name strings can be found in the
               :doc:`color_list`, with sample swatches)
            | - **HTML color format str:** ``'#rrggbbaa'`` or ``'#rrggbb'``,
              where rr, gg, bb, and aa are 2-digit hex numbers in the range
              of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF
              if not provided
            | - **hex number str:** ``'0xrrggbbaa'`` or ``'0xrrggbb'``, where
              rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00
              to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not
              provided
            | - **int:** int value of the color to use, using hex numbers can
              make this parameter more readable, e.g. ``0xrrggbbaa``, where rr,
              gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to
              0xFF inclusive, note that the aa (alpha) value is not optional for
              the int format and must be provided
            | - **tuple/list of int color values:** ``(R, G, B, A)`` or
              ``(R, G, B)``, where R, G, B, and A are int values in the range of
              0 to 255 inclusive, the A (alpha) value defaults to 255 if not
              provided

   :type color_value: Color or str or int or tuple(int, int, int, [int]) or
      list(int, int, int, [int])

   :returns: a newly created :class:`Color` object
   :rtype: Color

   .. versionchanged:: 2.0.0
      Support for tuples, lists, and :class:`Color` objects when creating
      :class:`Color` objects.
   .. versionchanged:: 1.9.2 Color objects export the C level array interface.
   .. versionchanged:: 1.9.0 Color objects support 4-element tuples of integers.
   .. versionchanged:: 1.8.1 New implementation of the class.

   .. attribute:: r

      | :sl:`Gets or sets the red value of the Color.`
      | :sg:`r -> int`

      The red value of the Color.

      .. ## Color.r ##

   .. attribute:: g

      | :sl:`Gets or sets the green value of the Color.`
      | :sg:`g -> int`

      The green value of the Color.

      .. ## Color.g ##

   .. attribute:: b

      | :sl:`Gets or sets the blue value of the Color.`
      | :sg:`b -> int`

      The blue value of the Color.

      .. ## Color.b ##

   .. attribute:: a

      | :sl:`Gets or sets the alpha value of the Color.`
      | :sg:`a -> int`

      The alpha value of the Color.

      .. ## Color.a ##

   .. attribute:: cmy

      | :sl:`Gets or sets the CMY representation of the Color.`
      | :sg:`cmy -> tuple`

      The ``CMY`` representation of the Color. The ``CMY`` components are in
      the ranges ``C`` = [0, 1], ``M`` = [0, 1], ``Y`` = [0, 1]. Note that this
      will not return the absolutely exact ``CMY`` values for the set ``RGB``
      values in all cases. Due to the ``RGB`` mapping from 0-255 and the
      ``CMY`` mapping from 0-1 rounding errors may cause the ``CMY`` values to
      differ slightly from what you might expect.

      .. ## Color.cmy ##

   .. attribute:: hsva

      | :sl:`Gets or sets the HSVA representation of the Color.`
      | :sg:`hsva -> tuple`

      The ``HSVA`` representation of the Color. The ``HSVA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``V`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSV`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSV`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSV`` values to differ slightly from what you might expect.

      .. ## Color.hsva ##

   .. attribute:: hsla

      | :sl:`Gets or sets the HSLA representation of the Color.`
      | :sg:`hsla -> tuple`

      The ``HSLA`` representation of the Color. The ``HSLA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``L`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSL`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSL`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSL`` values to differ slightly from what you might expect.

      .. ## Color.hsla ##

   .. attribute:: i1i2i3

      | :sl:`Gets or sets the I1I2I3 representation of the Color.`
      | :sg:`i1i2i3 -> tuple`

      The ``I1I2I3`` representation of the Color. The ``I1I2I3`` components are
      in the ranges ``I1`` = [0, 1], ``I2`` = [-0.5, 0.5], ``I3`` = [-0.5,
      0.5]. Note that this will not return the absolutely exact ``I1I2I3``
      values for the set ``RGB`` values in all cases. Due to the ``RGB``
      mapping from 0-255 and the ``I1I2I3`` mapping from 0-1 rounding errors
      may cause the ``I1I2I3`` values to differ slightly from what you might
      expect.

      .. ## Color.i1i2i3 ##

   .. method:: normalize

      | :sl:`Returns the normalized RGBA values of the Color.`
      | :sg:`normalize() -> tuple`

      Returns the normalized ``RGBA`` values of the Color as floating point
      values.

      .. ## Color.normalize ##

   .. method:: correct_gamma

      | :sl:`Applies a certain gamma value to the Color.`
      | :sg:`correct_gamma (gamma) -> Color`

      Applies a certain gamma value to the Color and returns a new Color with
      the adjusted ``RGBA`` values.

      .. ## Color.correct_gamma ##

   .. method:: set_length

      | :sl:`Set the number of elements in the Color to 1,2,3, or 4.`
      | :sg:`set_length(len) -> None`

      DEPRECATED: You may unpack the values you need like so, 
      ``r, g, b, _ = pygame.Color(100, 100, 100)``
      If you only want r, g and b
      Or 
      ``r, g, *_ = pygame.Color(100, 100, 100)`` 
      if you only want r and g

      The default Color length is 4. Colors can have lengths 1,2,3 or 4. This
      is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to
      get the length of a Color do ``len(acolor)``.

      .. deprecated:: 2.1.3
      .. versionadded:: 1.9.0

      .. ## Color.set_length ##

   .. method:: grayscale

      | :sl:`returns the grayscale of a Color`
      | :sg:`grayscale() -> Color`

      Returns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..

      .. ## Color.grayscale ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given Color.`
      | :sg:`lerp(Color, float) -> Color`

      Returns a Color which is a linear interpolation between self and the
      given Color in RGBA space. The second parameter determines how far
      between self and other the result is going to be.
      It must be a value between 0 and 1 where 0 means self and 1 means
      other will be returned.

      .. versionadded:: 2.0.1

      .. ## Color.lerp ##

   .. method:: premul_alpha

      | :sl:`returns a Color where the r,g,b components have been multiplied by the alpha.`
      | :sg:`premul_alpha() -> Color`

      Returns a new Color where each of the red, green and blue colour
      channels have been multiplied by the alpha channel of the original
      color. The alpha channel remains unchanged.

      This is useful when working with the ``BLEND_PREMULTIPLIED`` blending mode
      flag for :meth:`pygame.Surface.blit()`, which assumes that all surfaces using
      it are using pre-multiplied alpha colors.

      .. versionadded:: 2.0.0

      .. ## Color.premul_alpha ##

   .. method:: update

      | :sl:`Sets the elements of the color`
      | :sg:`update(r, g, b) -> None`
      | :sg:`update(r, g, b, a=255) -> None`
      | :sg:`update(color_value) -> None`

      Sets the elements of the color. See parameters for :meth:`pygame.Color` for the
      parameters of this function. If the alpha value was not set it will not change.

      .. versionadded:: 2.0.1

      .. ## Color.update ##
   .. ## pygame.Color ##


--- Contenu du fichier : transform.rst.txt ---
.. include:: common.txt

:mod:`pygame.transform`
=======================

.. module:: pygame.transform
   :synopsis: pygame module to transform surfaces

| :sl:`pygame module to transform surfaces`

A Surface transform is an operation that moves or resizes the pixels. All these
functions take a Surface to operate on and return a new Surface with the
results.

Some of the transforms are considered destructive. These means every time they
are performed they lose pixel data. Common examples of this are resizing and
rotating. For this reason, it is better to re-transform the original surface
than to keep transforming an image multiple times. (For example, suppose you
are animating a bouncing spring which expands and contracts. If you applied the
size changes incrementally to the previous images, you would lose detail.
Instead, always begin with the original image and scale to the desired size.)

.. versionchanged:: 2.0.2 transform functions now support keyword arguments.

.. function:: flip

   | :sl:`flip vertically and horizontally`
   | :sg:`flip(surface, flip_x, flip_y) -> Surface`

   This can flip a Surface either vertically, horizontally, or both.
   The arguments ``flip_x`` and ``flip_y`` are booleans that control whether
   to flip each axis. Flipping a Surface is non-destructive and returns a new
   Surface with the same dimensions.

   .. ## pygame.transform.flip ##

.. function:: scale

   | :sl:`resize to new resolution`
   | :sg:`scale(surface, size, dest_surface=None) -> Surface`

   Resizes the Surface to a new size, given as (width, height). 
   This is a fast scale operation that does not sample the results.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be the same size as the size (width, height) passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale ##

.. function:: scale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`scale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave scale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`scale()`, but scales by some factor, rather than taking
   the new size explicitly. For example, :code:`transform.scale_by(surf, 3)`
   will triple the size of the surface in both dimensions. Optionally, the
   scale factor can be a sequence of two numbers, controlling x and y scaling
   separately. For example, :code:`transform.scale_by(surf, (2, 1))` doubles
   the image width but keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.scale_by ##

.. function:: rotate

   | :sl:`rotate an image`
   | :sg:`rotate(surface, angle) -> Surface`

   Unfiltered counterclockwise rotation. The angle argument represents degrees
   and can be any floating point value. Negative angle amounts will rotate
   clockwise.

   Unless rotating by 90 degree increments, the image will be padded larger to
   hold the new size. If the image has pixel alphas, the padded area will be
   transparent. Otherwise pygame will pick a color that matches the Surface
   colorkey or the topleft pixel value.

   .. ## pygame.transform.rotate ##

.. function:: rotozoom

   | :sl:`filtered scale and rotation`
   | :sg:`rotozoom(surface, angle, scale) -> Surface`

   This is a combined scale and rotation transform. The resulting Surface will
   be a filtered 32-bit Surface. The scale argument is a floating point value
   that will be multiplied by the current resolution. The angle argument is a
   floating point value that represents the counterclockwise degrees to rotate.
   A negative rotation angle will rotate clockwise.

   .. ## pygame.transform.rotozoom ##

.. function:: scale2x

   | :sl:`specialized image doubler`
   | :sg:`scale2x(surface, dest_surface=None) -> Surface`

   This will return a new image that is double the size of the original. It
   uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of
   bitmap graphics.

   This really only has an effect on simple images with solid colors. On
   photographic and antialiased images it will look like a regular unfiltered
   scale.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be twice the size of the source surface passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale2x ##

.. function:: smoothscale

   | :sl:`scale a surface to an arbitrary size smoothly`
   | :sg:`smoothscale(surface, size, dest_surface=None) -> Surface`

   Uses one of two different algorithms for scaling each dimension of the input
   surface as required. For shrinkage, the output pixels are area averages of
   the colors they cover. For expansion, a bilinear filter is used. For the
   x86-64 and i686 architectures, optimized ``MMX`` routines are included and
   will run much faster than other machine types. The size is a 2 number
   sequence for (width, height). This function only works for 24-bit or 32-bit
   surfaces. An exception will be thrown if the input surface bit depth is less
   than 24.

   .. versionadded:: 1.8

   .. ## pygame.transform.smoothscale ##

.. function:: smoothscale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`smoothscale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave smoothscale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`smoothscale()`, but scales by some factor, rather than
   taking the new size explicitly. For example,
   :code:`transform.smoothscale_by(surf, 3)` will triple the size of the
   surface in both dimensions. Optionally, the scale factor can be a sequence
   of two numbers, controlling x and y scaling separately. For example,
   :code:`transform.smoothscale_by(surf, (2, 1))` doubles the image width but
   keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.smoothscale_by ##

.. function:: get_smoothscale_backend

   | :sl:`return smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`get_smoothscale_backend() -> string`

   Shows whether or not smoothscale is using ``MMX`` or ``SSE`` acceleration.
   If no acceleration is available then "GENERIC" is returned. For a x86
   processor the level of acceleration to use is determined at runtime.

   This function is provided for pygame testing and debugging.

   .. ## pygame.transform.get_smoothscale_backend ##

.. function:: set_smoothscale_backend

   | :sl:`set smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`set_smoothscale_backend(backend) -> None`

   Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'
   turns off acceleration. 'MMX' uses ``MMX`` instructions only. 'SSE' allows
   ``SSE`` extensions as well. A value error is raised if type is not
   recognized or not supported by the current processor.

   This function is provided for pygame testing and debugging. If smoothscale
   causes an invalid instruction error then it is a pygame/SDL bug that should
   be reported. Use this function as a temporary fix only.

   .. ## pygame.transform.set_smoothscale_backend ##

.. function:: chop

   | :sl:`gets a copy of an image with an interior area removed`
   | :sg:`chop(surface, rect) -> Surface`

   Extracts a portion of an image. All vertical and horizontal pixels
   surrounding the given rectangle area are removed. The corner areas (diagonal
   to the rect) are then brought together. (The original image is not altered
   by this operation.)

   ``NOTE``: If you want a "crop" that returns the part of an image within a
   rect, you can blit with a rect to a new surface or copy a subsurface.

   .. ## pygame.transform.chop ##

.. function:: laplacian

   | :sl:`find edges in a surface`
   | :sg:`laplacian(surface, dest_surface=None) -> Surface`

   Finds the edges in a surface using the laplacian algorithm.

   .. versionadded:: 1.8

   .. ## pygame.transform.laplacian ##

.. function:: average_surfaces

   | :sl:`find the average surface from many surfaces.`
   | :sg:`average_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface`

   Takes a sequence of surfaces and returns a surface with average colors from
   each of the surfaces.

   palette_colors - if true we average the colors in palette, otherwise we
   average the pixel values. This is useful if the surface is actually
   greyscale colors, and not palette colors.

   Note, this function currently does not handle palette using surfaces
   correctly.

   .. versionadded:: 1.8
   .. versionadded:: 1.9 ``palette_colors`` argument

   .. ## pygame.transform.average_surfaces ##

.. function:: average_color

   | :sl:`finds the average color of a surface`
   | :sg:`average_color(surface, rect=None, consider_alpha=False) -> Color`

   Finds the average color of a Surface or a region of a surface specified by a
   Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is
   taken into account (removing the black artifacts).

   .. versionadded:: 2.1.2 ``consider_alpha`` argument

   .. ## pygame.transform.average_color ##

.. function:: grayscale

   | :sl:`grayscale a surface`
   | :sg:`grayscale(surface, dest_surface=None) -> Surface`

   Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.

   An optional destination surface can be passed which is faster than creating a new Surface.
   This destination surface must have the same dimensions (width, height) and depth as the source Surface.

   .. ## pygame.transform.grayscale ##

.. function:: threshold

   | :sl:`finds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.`
   | :sg:`threshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -> num_threshold_pixels`

   This versatile function can be used for find colors in a 'surf' close to a 'search_color'
   or close to colors in a separate 'search_surf'.

   It can also be used to transfer pixels into a 'dest_surf' that match or don't match.

   By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the
   threshold are changed to set_color. If inverse_set is optionally set to True,
   the pixels that ARE within the threshold are changed to set_color.

   If the optional 'search_surf' surface is given, it is used to threshold against
   rather than the specified 'set_color'. That is, it will find each pixel in the
   'surf' that is within the 'threshold' of the pixel at the same coordinates
   of the 'search_surf'.

   :param dest_surf: Surface we are changing. See 'set_behavior'.
    Should be None if counting (set_behavior is 0).
   :type dest_surf: pygame.Surface or None

   :param pygame.Surface surf: Surface we are looking at.

   :param pygame.Color search_color: Color we are searching for.

   :param pygame.Color threshold: Within this distance from search_color (or search_surf).
     You can use a threshold of (r,g,b,a) where the r,g,b can have different
     thresholds. So you could use an r threshold of 40 and a blue threshold of 2
     if you like.

   :param set_color: Color we set in dest_surf.
   :type set_color: pygame.Color or None

   :param int set_behavior:
    - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.
    - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.
    - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.

   :param search_surf:
    - search_surf=None (default). Search against 'search_color' instead.
    - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.
   :type search_surf: pygame.Surface or None

   :param bool inverse_set:
     - False, default. Pixels outside of threshold are changed.
     - True, Pixels within threshold are changed.

   :rtype: int
   :returns: The number of pixels that are within the 'threshold' in 'surf'
     compared to either 'search_color' or `search_surf`.

   :Examples:

   See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/main/test/transform_test.py

   .. literalinclude:: ../../../test/transform_test.py
      :pyobject: TransformModuleTest.test_threshold_dest_surf_not_change


   .. versionadded:: 1.8
   .. versionchanged:: 1.9.4
      Fixed a lot of bugs and added keyword arguments. Test your code.

   .. ## pygame.transform.threshold ##

.. ## pygame.transform ##


--- Contenu du fichier : examples.rst.txt ---
.. include:: common.txt

:mod:`pygame.examples`
======================

.. module:: pygame.examples
   :synopsis: module of example programs

| :sl:`module of example programs`

These examples should help get you started with pygame. Here is a brief rundown
of what you get. The source code for these examples is in the public domain.
Feel free to use for your own projects.

There are several ways to run the examples. First they can be run as
stand-alone programs. Second they can be imported and their ``main()`` methods
called (see below). Finally, the easiest way is to use the python -m option:

::

   python -m pygame.examples.<example name> <example arguments>

eg:

::

   python -m pygame.examples.scaletest someimage.png

Resources such as images and sounds for the examples are found in the 
pygame/examples/data subdirectory.

You can find where the example files are installed by using the following
commands inside the python interpreter.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.__file__
   '/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'

On each OS and version of Python the location will be slightly different.
For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/'
On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'


You can also run the examples in the python interpreter by calling each modules main() function.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.main()


We're always on the lookout for more examples and/or example requests. Code
like this is probably the best way to start getting involved with python
gaming.

examples as a package is new to pygame 1.9.0. But most of the examples came with
pygame much earlier.

.. function:: aliens.main

   | :sl:`play the full aliens example`
   | :sg:`aliens.main() -> None`

   This started off as a port of the ``SDL`` demonstration, Aliens. Now it has
   evolved into something sort of resembling fun. This demonstrates a lot of
   different uses of sprites and optimized blitting. Also transparency,
   colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is
   117! goodluck)

   .. ## pygame.examples.aliens.main ##

.. function:: stars.main

   | :sl:`run a simple starfield example`
   | :sg:`stars.main() -> None`

   A simple starfield example. You can change the center of perspective by
   leftclicking the mouse on the screen.

   .. ## pygame.examples.stars.main ##

.. function:: chimp.main

   | :sl:`hit the moving chimp`
   | :sg:`chimp.main() -> None`

   This simple example is derived from the line-by-line tutorial that comes
   with pygame. It is based on a 'popular' web banner. Note there are comments
   here, but for the full explanation, follow along in the tutorial.

   .. ## pygame.examples.chimp.main ##

.. function:: moveit.main

   | :sl:`display animated objects on the screen`
   | :sg:`moveit.main() -> None`

   This is the full and final example from the Pygame Tutorial, "How Do I Make
   It Move". It creates 10 objects and animates them on the screen.

   Note it's a bit scant on error checking, but it's easy to read. :]
   Fortunately, this is python, and we needn't wrestle with a pile of error
   codes.

   .. ## pygame.examples.moveit.main ##

.. function:: fonty.main

   | :sl:`run a font rendering example`
   | :sg:`fonty.main() -> None`

   Super quick, super simple application demonstrating the different ways to
   render fonts with the font module

   .. ## pygame.examples.fonty.main ##

.. function:: freetype_misc.main

   | :sl:`run a FreeType rendering example`
   | :sg:`freetype_misc.main() -> None`

   A showcase of rendering features the :class:`pygame.freetype.Font`
   class provides in addition to those available with :class:`pygame.font.Font`.
   It is a demonstration of direct to surface rendering, with vertical text
   and rotated text, opaque text and semi transparent text, horizontally
   stretched text and vertically stretched text.

   .. ## pygame.examples.fonty.main ##

.. function:: vgrade.main

   | :sl:`display a vertical gradient`
   | :sg:`vgrade.main() -> None`

   Demonstrates creating a vertical gradient with pixelcopy and NumPy python.
   The app will create a new gradient every half second and report the time
   needed to create and display the image. If you're not prepared to start
   working with the NumPy arrays, don't worry about the source for this one :]

   .. ## pygame.examples.vgrade.main ##

.. function:: eventlist.main

   | :sl:`display pygame events`
   | :sg:`eventlist.main() -> None`

   Eventlist is a sloppy style of pygame, but is a handy tool for learning
   about pygame events and input. At the top of the screen are the state of
   several device values, and a scrolling list of events are displayed on the
   bottom.

   This is not quality 'ui' code at all, but you can see how to implement very
   non-interactive status displays, or even a crude text output control.

   .. ## pygame.examples.eventlist.main ##

.. function:: arraydemo.main

   | :sl:`show various surfarray effects`
   | :sg:`arraydemo.main(arraytype=None) -> None`

   Another example filled with various surfarray effects. It requires the
   surfarray and image modules to be installed. This little demo can also make
   a good starting point for any of your own tests with surfarray

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.arraydemo.main ##

.. function:: sound.main

   | :sl:`load and play a sound`
   | :sg:`sound.main(file_path=None) -> None`

   Extremely basic testing of the mixer module. Load a sound and play it. All
   from the command shell, no graphics.

   If provided, use the audio file 'file_path', otherwise use a default file.

   ``sound.py`` optional command line argument: an audio file

   .. ## pygame.examples.sound.main ##

.. function:: sound_array_demos.main

   | :sl:`play various sndarray effects`
   | :sg:`sound_array_demos.main(arraytype=None) -> None`


   Uses sndarray and NumPy to create offset faded copies of the
   original sound. Currently it just uses hardcoded values for the number of
   echoes and the delay. Easy for you to recreate as needed.

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.sound_array_demos.main ##

.. function:: liquid.main

   | :sl:`display an animated liquid effect`
   | :sg:`liquid.main() -> None`

   This example was created in a quick comparison with the BlitzBasic gaming
   language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).

   .. ## pygame.examples.liquid.main ##

.. function:: glcube.main

   | :sl:`display an animated 3D cube using OpenGL`
   | :sg:`glcube.main() -> None`

   Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.

   .. ## pygame.examples.glcube.main ##

.. function:: scrap_clipboard.main

   | :sl:`access the clipboard`
   | :sg:`scrap_clipboard.main() -> None`

   A simple demonstration example for the clipboard support.

   .. ## pygame.examples.scrap_clipboard.main ##

.. function:: mask.main

   | :sl:`display multiple images bounce off each other using collision detection`
   | :sg:`mask.main(*args) -> None`

   Positional arguments:

   ::

       one or more image file names.

   This ``pygame.masks`` demo will display multiple moving sprites bouncing off
   each other. More than one sprite image can be provided.

   If run as a program then ``mask.py`` takes one or more image files as
   command line arguments.

   .. ## pygame.examples.mask.main ##

.. function:: testsprite.main

   | :sl:`show lots of sprites moving around`
   | :sg:`testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = [640, 480], use_alpha = False, flags = 0) -> None`

   Optional keyword arguments:

   ::

       update_rects - use the RenderUpdate sprite group class
       use_static - include non-moving images
       use_FastRenderGroup - Use the FastRenderGroup sprite group
       screen_dims - pygame window dimensions
       use_alpha - use alpha blending
       flags - additional display mode flags

   Like the ``testsprite.c`` that comes with SDL, this pygame version shows
   lots of sprites moving around.

   If run as a stand-alone program then no command line arguments are taken.

   .. ## pygame.examples.testsprite.main ##

.. function:: headless_no_windows_needed.main

   | :sl:`write an image file that is smoothscaled copy of an input file`
   | :sg:`headless_no_windows_needed.main(fin, fout, w, h) -> None`

   arguments:

   ::

       fin - name of an input image file
       fout - name of the output file to create/overwrite
       w, h - size of the rescaled image, as integer width and height

   How to use pygame with no windowing system, like on headless servers.

   Thumbnail generation with scaling is an example of what you can do with
   pygame.

   ``NOTE``: the pygame scale function uses MMX/SSE if available, and can be
   run in multiple threads.

   If ``headless_no_windows_needed.py`` is run as a program it takes the
   following command line arguments:

   ::

       -scale inputimage outputimage new_width new_height
       eg. -scale in.png outpng 50 50

   .. ## pygame.examples.headless_no_windows_needed.main ##

.. function:: joystick.main

   | :sl:`demonstrate joystick functionality`
   | :sg:`joystick.main() -> None`

   A demo showing full joystick support.

   .. versionadded:: 2.0.2

   .. ## pygame.examples.joystick.main ##

.. function:: blend_fill.main

   | :sl:`demonstrate the various surface.fill method blend options`
   | :sg:`blend_fill.main() -> None`

   A interactive demo that lets one choose which BLEND_xxx option to apply to a
   surface.

   .. ## pygame.examples.blend_fill.main ##

.. function:: blit_blends.main

   | :sl:`uses alternative additive fill to that of surface.fill`
   | :sg:`blit_blends.main() -> None`

   Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat
   like blend_fill.

   .. ## pygame.examples.blit_blends.main ##

.. function:: cursors.main

   | :sl:`display two different custom cursors`
   | :sg:`cursors.main() -> None`

   Display an arrow or circle with crossbar cursor.

   .. ## pygame.examples.cursors.main ##

.. function:: pixelarray.main

   | :sl:`display various pixelarray generated effects`
   | :sg:`pixelarray.main() -> None`

   Display various pixelarray generated effects.

   .. ## pygame.examples.pixelarray.main ##

.. function:: scaletest.main

   | :sl:`interactively scale an image using smoothscale`
   | :sg:`scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -> None`

   arguments:

   ::

       imagefile - file name of source image (required)
       convert_alpha - use convert_alpha() on the surf (default False)
       run_speed_test - (default False)

   A smoothscale example that resized an image on the screen. Vertical and
   horizontal arrow keys are used to change the width and height of the
   displayed image. If the convert_alpha option is True then the source image
   is forced to have source alpha, whether or not the original images does. If
   run_speed_test is True then a background timing test is performed instead of
   the interactive scaler.

   If ``scaletest.py`` is run as a program then the command line options are:

   ::

       ImageFile [-t] [-convert_alpha]
       [-t] = Run Speed Test
       [-convert_alpha] = Use convert_alpha() on the surf.

   .. ## pygame.examples.scaletest.main ##

.. function:: midi.main

   | :sl:`run a midi example`
   | :sg:`midi.main(mode='output', device_id=None) -> None`

   Arguments:

   ::

       mode - if 'output' run a midi keyboard output example
                 'input' run a midi event logger input example
                 'list' list available midi devices
              (default 'output')
       device_id - midi device number; if None then use the default midi input or
                   output device for the system

   The output example shows how to translate mouse clicks or computer keyboard
   events into midi notes. It implements a rudimentary button widget and state
   machine.

   The input example shows how to translate midi input to pygame events.

   With the use of a virtual midi patch cord the output and input examples can
   be run as separate processes and connected so the keyboard output is
   displayed on a console.

   new to pygame 1.9.0

   .. ## pygame.examples.midi.main ##

.. function:: scroll.main

   | :sl:`run a Surface.scroll example that shows a magnified image`
   | :sg:`scroll.main(image_file=None) -> None`

   This example shows a scrollable image that has a zoom factor of eight. It
   uses the :meth:`Surface.scroll() <pygame.Surface.scroll>`
   function to shift the image on the display surface.
   A clip rectangle protects a margin area. If called as a function,
   the example accepts an optional image file path. If run as a program it
   takes an optional file path command line argument. If no file is provided a
   default image file is used.

   When running click on a black triangle to move one pixel in the direction
   the triangle points. Or use the arrow keys. Close the window or press
   ``ESC`` to quit.

   .. ## pygame.examples.scroll.main ##

.. function:: camera.main

   | :sl:`display video captured live from an attached camera`
   | :sg:`camera.main() -> None`

   A simple live video player, it uses the first available camera it finds on
   the system.

   .. ## pygame.examples.camera.main ##

.. function:: playmus.main

   | :sl:`play an audio file`
   | :sg:`playmus.main(file_path) -> None`

   A simple music player with window and keyboard playback control. Playback can
   be paused and rewound to the beginning.

   .. ## pygame.examples.playmus.main ##

.. ## pygame.examples ##


--- Contenu du fichier : testmail.txt ---
alice.johnson@example.com
bob.smith@example.net
carol.martin@example.org
david.lee@example.co
emma.white@example.edu
frank.taylor@example.biz
grace.wilson@example.info
hank.moore@example.tv
isabella.jones@example.museum
jackson.brown@example.asia

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEst-ce que tout fonctionne ? test [F test2

--- Contenu du fichier : data.txt ---
i'm trying open file in the another file 

--- Contenu du fichier : final.txt ---
jojo--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : writing.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSE

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TEST2

--- Contenu du fichier : final.txt ---
LICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtusage.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE-DOT.txtadvancedsnippet.txtsnippet.txtlicense.txtThirdPartyNoticeText.txtLICENSE.txtMIT-LICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtrobots.txtLICENSE-MIT.txtLICENSE-MIT.txtwriting.txtwrite.txtfinal.txttop_level.txtentry_points.txtvendor.txtAUTHORS.txttop_level.txtLICENSE.txtentry_points.txtLGPL.txtfilepaths.rst.txtc_api.rst.txtindex.rst.txtlogos.rst.txtkey.rst.txtpixelarray.rst.txtfreetype.rst.txtimage.rst.txtdraw.rst.txtrect.rst.txtsurface.rst.txtscrap.rst.txtdisplay.rst.txtevent.rst.txtmask.rst.txtcontext.rst.txtlocals.rst.txtcursors.rst.txttouch.rst.txtjoystick.rst.txtmath.rst.txtbufferproxy.rst.txtcolor_list.rst.txtpixelcopy.rst.txtmidi.rst.txtoverlay.rst.txtgfxdraw.rst.txtfastevent.rst.txtsdl2_controller.rst.txttests.rst.txtcdrom.rst.txtpygame.rst.txtcamera.rst.txtmouse.rst.txtmixer.rst.txtmusic.rst.txtsndarray.rst.txttime.rst.txtsurfarray.rst.txtsdl2_video.rst.txtfont.rst.txtsprite.rst.txtcolor.rst.txttransform.rst.txtexamples.rst.txttestmail.txtwrite.txtdata.txtfinal.txt--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : writing.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSE

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEST-CE QUE TOUT FONCTIONNE ? TEST [F TEST2

--- Contenu du fichier : final.txt ---
LICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtusage.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE-DOT.txtadvancedsnippet.txtsnippet.txtlicense.txtThirdPartyNoticeText.txtLICENSE.txtMIT-LICENSE.txtLICENSE.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtLICENSE-MIT.txtLICENSE.txtLICENSE-MIT.txtMIT-LICENSE.txtLICENSE-MIT.txtrobots.txtLICENSE-MIT.txtLICENSE-MIT.txtwriting.txtwrite.txtfinal.txttop_level.txtentry_points.txtvendor.txtAUTHORS.txttop_level.txtLICENSE.txtentry_points.txtLGPL.txtfilepaths.rst.txtc_api.rst.txtindex.rst.txtlogos.rst.txtkey.rst.txtpixelarray.rst.txtfreetype.rst.txtimage.rst.txtdraw.rst.txtrect.rst.txtsurface.rst.txtscrap.rst.txtdisplay.rst.txtevent.rst.txtmask.rst.txtcontext.rst.txtlocals.rst.txtcursors.rst.txttouch.rst.txtjoystick.rst.txtmath.rst.txtbufferproxy.rst.txtcolor_list.rst.txtpixelcopy.rst.txtmidi.rst.txtoverlay.rst.txtgfxdraw.rst.txtfastevent.rst.txtsdl2_controller.rst.txttests.rst.txtcdrom.rst.txtpygame.rst.txtcamera.rst.txtmouse.rst.txtmixer.rst.txtmusic.rst.txtsndarray.rst.txttime.rst.txtsurfarray.rst.txtsdl2_video.rst.txtfont.rst.txtsprite.rst.txtcolor.rst.txttransform.rst.txtexamples.rst.txttestmail.txtwrite.txtdata.txtfinal.txt--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : usage.txt ---
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.



--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
Copyright 2018 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Fonticons, Inc. (https://fontawesome.com)

--------------------------------------------------------------------------------

Font Awesome Free License

Font Awesome Free is free, open source, and GPL friendly. You can use it for
commercial projects, open source projects, or really almost whatever you want.
Full Font Awesome Free license: https://fontawesome.com/license/free.

--------------------------------------------------------------------------------

# Icons: CC BY 4.0 License (https://creativecommons.org/licenses/by/4.0/)

The Font Awesome Free download is licensed under a Creative Commons
Attribution 4.0 International License and applies to all icons packaged
as SVG and JS file types.

--------------------------------------------------------------------------------

# Fonts: SIL OFL 1.1 License

In the Font Awesome Free download, the SIL OFL license applies to all icons
packaged as web and desktop font files.

Copyright (c) 2024 Fonticons, Inc. (https://fontawesome.com)
with Reserved Font Name: "Font Awesome".

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

SIL OPEN FONT LICENSE
Version 1.1 - 26 February 2007

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded,
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting — in part or in whole — any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

--------------------------------------------------------------------------------

# Code: MIT License (https://opensource.org/licenses/MIT)

In the Font Awesome Free download, the MIT license applies to all non-font and
non-icon files.

Copyright 2024 Fonticons, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in the
Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
and to permit persons to whom the Software is furnished to do so, subject to the
following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

--------------------------------------------------------------------------------

# Attribution

Attribution is required by MIT, SIL OFL, and CC BY licenses. Downloaded Font
Awesome Free files already contain embedded comments with sufficient
attribution, so you shouldn't need to do anything additional when using these
files normally.

We've kept attribution comments terse, so we ask that you do not actively work
to remove them from files, especially code. They're a great way for folks to
learn about Font Awesome.

--------------------------------------------------------------------------------

# Brand Icons

All brand icons are trademarks of their respective owners. The use of these
trademarks does not indicate endorsement of the trademark holder by Font
Awesome, nor vice versa. **Please do not use brand logos for any purpose except
to represent the company, product, or service to which they refer.**


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) 2015–2016 Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-DOT.txt ---

Copyright (c) 2011 Laura Doktorova

Software includes portions from jQote2 Copyright (c) 2010 aefxx,
http://aefxx.com/ licensed under the MIT license.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : advancedsnippet.txt ---
Advanced templating: illustrates defines and includes.

Include external snippet defined in a variable:
{{#def.externalsnippet}}

Load external template from a file:
{{#def.loadfile('/snippet.txt')}}

Load external template from a file and cache in a variable:
{{#def['snippet.txt'] || (def['snippet.txt'] = def.loadfile('/snippet.txt'))}}

Use cached file again:
{{#def['snippet.txt']}}

Here is a def block that will be used later. This snippet can be referenced from external templates too:
{{##def.snippet1:
	Some snippet that will be included {{#def.a}} later {{=it.f1}}
#}}

First use of snippet1:
{{#def.snippet1}}

Second use of snippet1:
{{#def.snippet1}}

Include snippet1 if true:
{{# true && def.snippet1 }}

Runtime and Compile time evaluation used together:
{{= it.f3 + {{#def.a + def.b}} }}

Include xyz or insert 'not found':
{{#def.xyz || 'not found'}}

Set xyz to 1 and exclude result from output:
{{##def.xyz=1#}} is identical to {{#(def.xyz=1) && ""}}

Compare xyz to 1, show 'xyz is not 1' if false:
{{#def.xyz === 1 || 'xyz is not 1'}}

{{ if ({{#!def.abc}}) { }}
	{{#def.abc}} is falsy
{{ } }}

{{ if ({{#def.xyz === 1}}) { }}
	if(true) block
{{ } }}

{{##def.fntest = function() {
	return "Function test worked!";
}
#}}

{{#def.fntest()}}

Conditionals:
{{? !it.altEmail }}
	<p>
	second email: {{= it.altEmail }}
	</p>
{{?? true }}
	else case worked
{{?}}

Array iterators
{{~ it.farray :p }}
	<h1>{{=p.farray}}<h1>
	{{~ p.farray :value:i }}
		<h2>{{=i}}: {{=value}}</h2>
		{{~ value :w }}
			<h3>{{=w}}</h3>
		{{~}}
	{{~}}
{{~}}

{{~ ["apple", "banana", "orange"] :k}}
	{{=k}}
{{~}}

{{~ (function(){ return [1,2,3]})() :k}}
	{{=k}}
{{~}}

{{ function children(it) { }}

{{?it.Nodes.length}}
<ul>
    {{~ it.Nodes :p}}
    <li>
        {{=p.title}}
		{{children(p);}}
    </li>
    {{~}}
</ul>
{{?}}

{{ } }}

{{ children( {Nodes:[ {title:"1.1", Nodes:[ {title:"1.1.1", Nodes:[]}, {title:"1.1.2", Nodes:[]}] }, { title:"1.2", Nodes:[]}, { title:"1.3", Nodes:[]}], title:"1" } ); }}


{{##def.block:param:
	<div>{{=param}}</div>
#}}

{{##def.block1:param:
	<div>{{=param.a}}</div>
#}}


{{#(def.block:'text' || '') + def.block:5}}

{{#def.block:it.f3 || ''}}

{{#def.block:"lala tralala" || ''}}

{{#def.block1:{a:1, b:2} || ''}}

{{##def.testFunctionWithParam = function(str) {
		return "My name is: " + str;
	}
#}}

{{##def.mytestparam: {{=it.name}} #}}
{{#def.testFunctionWithParam(def.mytestparam)}}

{{#def.testFunctionWithParam("\{\{=it.name\}\}")}}

{{##def.testParamDef:myparam:
My name is: {{=myparam}}
#}}

{{#def.testParamDef:it.name}}

The end


--- Contenu du fichier : snippet.txt ---
Core templating

<h1>Just static text</h1>
<p>Interpolation {{=it.f1	+	it.f3}} </p>
<div> JavaScript block evaluation
{{ for(var i=0; i < it.f2; i++) {
	console.log("Pass\t" + i);
}}
<div>{{=it.f3}}</div>
{{ } }}
</div>
<div> Encoding {{!'<a 	href="http://github.com"></a>'}}</div>



--- Contenu du fichier : license.txt ---
Copyright (c) 2013, Joel Feenstra
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the ESQuery nor the names of its contributors may
      be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL JOEL FEENSTRA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : ThirdPartyNoticeText.txt ---
/*!----------------- TypeScript ThirdPartyNotices -------------------------------------------------------

The TypeScript software incorporates third party material from the projects listed below. The original copyright notice and the license under which Microsoft received such third party material are set forth below. Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.

---------------------------------------------
Third Party Code Components
--------------------------------------------

------------------- DefinitelyTyped --------------------
This file is based on or incorporates material from the projects listed below (collectively "Third Party Code"). Microsoft is not the original author of the Third Party Code. The original copyright notice and the license, under which Microsoft received such Third Party Code, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft, not the third party, licenses the Third Party Code to you under the terms set forth in the EULA for the Microsoft Product. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.
DefinitelyTyped
This project is licensed under the MIT license. Copyrights are respective of each contributor listed at the beginning of each definition file. Provided for Informational Purposes Only

MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------------

------------------- Unicode --------------------
UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE

Unicode Data Files include all data files under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

Unicode Data Files do not include PDF online code charts under the
directory http://www.unicode.org/Public/.

Software includes any source code published in the Unicode Standard
or under the directories
http://www.unicode.org/Public/, http://www.unicode.org/reports/,
http://www.unicode.org/cldr/data/, http://source.icu-project.org/repos/icu/, and
http://www.unicode.org/utility/trac/browser/.

NOTICE TO USER: Carefully read the following legal agreement.
BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S
DATA FILES ("DATA FILES"), AND/OR SOFTWARE ("SOFTWARE"),
YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE
TERMS AND CONDITIONS OF THIS AGREEMENT.
IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE
THE DATA FILES OR SOFTWARE.

COPYRIGHT AND PERMISSION NOTICE

Copyright (c) 1991-2017 Unicode, Inc. All rights reserved.
Distributed under the Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining
a copy of the Unicode data files and any associated documentation
(the "Data Files") or Unicode software and any associated documentation
(the "Software") to deal in the Data Files or Software
without restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, and/or sell copies of
the Data Files or Software, and to permit persons to whom the Data Files
or Software are furnished to do so, provided that either
(a) this copyright and permission notice appear with all copies
of the Data Files or Software, or
(b) this copyright and permission notice appear in associated
Documentation.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF
ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT OF THIRD PARTY RIGHTS.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THE DATA FILES OR SOFTWARE.

Except as contained in this notice, the name of a copyright holder
shall not be used in advertising or otherwise to promote the sale,
use or other dealings in these Data Files or Software without prior
written authorization of the copyright holder.
-------------------------------------------------------------------------------------

-------------------Document Object Model-----------------------------
DOM 

W3C License
This work is being provided by the copyright holders under the following license.
By obtaining and/or copying this work, you (the licensee) agree that you have read, understood, and will comply with the following terms and conditions.
Permission to copy, modify, and distribute this work, with or without modification, for any purpose and without fee or royalty is hereby granted, provided that you include the following 
on ALL copies of the work or portions thereof, including modifications:
* The full text of this NOTICE in a location viewable to users of the redistributed or derivative work.
* Any pre-existing intellectual property disclaimers, notices, or terms and conditions. If none exist, the W3C Software and Document Short Notice should be included.
* Notice of any changes or modifications, through a copyright statement on the new code or document such as "This software or document includes material copied from or derived 
from [title and URI of the W3C document]. Copyright © [YEAR] W3C® (MIT, ERCIM, Keio, Beihang)." 
Disclaimers
THIS WORK IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY OR 
FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.
The name and trademarks of copyright holders may NOT be used in advertising or publicity pertaining to the work without specific, written prior permission. 
Title to copyright in this work will at all times remain with copyright holders.

---------

DOM
Copyright © 2018 WHATWG (Apple, Google, Mozilla, Microsoft). This work is licensed under a Creative Commons Attribution 4.0 International License: Attribution 4.0 International 
======================================================================= 
Creative Commons Corporation ("Creative Commons") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an "as-is" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors:

wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= 
Creative Commons Attribution 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License ("Public License"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. d. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. e. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. f. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. g. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. h. Licensor means the individual(s) or entity(ies) granting rights under this Public License. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. 4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the "Licensor." Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark "Creative Commons" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.

--------------------------------------------------------------------------------

----------------------Web Background Synchronization------------------------------

Web Background Synchronization Specification
Portions of spec © by W3C

W3C Community Final Specification Agreement 
To secure commitments from participants for the full text of a Community or Business Group Report, the group may call for voluntary commitments to the following terms; a "summary" is 
available. See also the related "W3C Community Contributor License Agreement".
1. The Purpose of this Agreement.
This Agreement sets forth the terms under which I make certain copyright and patent rights available to you for your implementation of the Specification. 
Any other capitalized terms not specifically defined herein have the same meaning as those terms have in the "W3C Patent Policy", and if not defined there, in the "W3C Process Document".
2. Copyrights. 
2.1. Copyright Grant. I grant to you a perpetual (for the duration of the applicable copyright), worldwide, non-exclusive, no-charge, royalty-free, copyright license, without any obligation for accounting to me, to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, distribute, and implement the Specification to the full extent of my copyright interest in the Specification. 
2.2. Attribution. As a condition of the copyright grant, you must include an attribution to the Specification in any derivative work you make based on the Specification. That attribution must include, at minimum, the Specification name and version number.
3. Patents. 
3.1. Patent Licensing Commitment. I agree to license my Essential Claims under the W3C Community RF Licensing Requirements. This requirement includes Essential Claims that I own and any that I have the right to license without obligation of payment or other consideration to an unrelated third party. W3C Community RF Licensing Requirements obligations made concerning the Specification and described in this policy are binding on me for the life of the patents in question and encumber the patents containing Essential Claims, regardless of changes in participation status or W3C Membership. I also agree to license my Essential Claims under the W3C Community RF Licensing Requirements in derivative works of the Specification so long as all normative portions of the Specification are maintained and that this licensing commitment does not extend to any portion of the derivative work that was not included in the Specification.
3.2. Optional, Additional Patent Grant. In addition to the provisions of Section 3.1, I may also, at my option, make certain intellectual property rights infringed by implementations of the Specification, including Essential Claims, available by providing those terms via the W3C Web site.
4. No Other Rights. Except as specifically set forth in this Agreement, no other express or implied patent, trademark, copyright, or other property rights are granted under this Agreement, including by implication, waiver, or estoppel.
5. Antitrust Compliance. I acknowledge that I may compete with other participants, that I am under no obligation to implement the Specification, that each participant is free to develop competing technologies and standards, and that each party is free to license its patent rights to third parties, including for the purpose of enabling competing technologies and standards.
6. Non-Circumvention. I agree that I will not intentionally take or willfully assist any third party to take any action for the purpose of circumventing my obligations under this Agreement.
7. Transition to W3C Recommendation Track. The Specification developed by the Project may transition to the W3C Recommendation Track. The W3C Team is responsible for notifying me that a Corresponding Working Group has been chartered. I have no obligation to join the Corresponding Working Group. If the Specification developed by the Project transitions to the W3C Recommendation Track, the following terms apply: 
7.1. If I join the Corresponding Working Group. If I join the Corresponding Working Group, I will be subject to all W3C rules, obligations, licensing commitments, and policies that govern that Corresponding Working Group.
7.2. If I Do Not Join the Corresponding Working Group. 
7.2.1. Licensing Obligations to Resulting Specification. If I do not join the Corresponding Working Group, I agree to offer patent licenses according to the W3C Royalty-Free licensing requirements described in Section 5 of the W3C Patent Policy for the portions of the Specification included in the resulting Recommendation. This licensing commitment does not extend to any portion of an implementation of the Recommendation that was not included in the Specification. This licensing commitment may not be revoked but may be modified through the exclusion process defined in Section 4 of the W3C Patent Policy. I am not required to join the Corresponding Working Group to exclude patents from the W3C Royalty-Free licensing commitment, but must otherwise follow the normal exclusion procedures defined by the W3C Patent Policy. The W3C Team will notify me of any Call for Exclusion in the Corresponding Working Group as set forth in Section 4.5 of the W3C Patent Policy.
7.2.2. No Disclosure Obligation. If I do not join the Corresponding Working Group, I have no patent disclosure obligations outside of those set forth in Section 6 of the W3C Patent Policy.
8. Conflict of Interest. I will disclose significant relationships when those relationships might reasonably be perceived as creating a conflict of interest with my role. I will notify W3C of any change in my affiliation using W3C-provided mechanisms.
9. Representations, Warranties and Disclaimers. I represent and warrant that I am legally entitled to grant the rights and promises set forth in this Agreement. IN ALL OTHER RESPECTS THE SPECIFICATION IS PROVIDED “AS IS.” The entire risk as to implementing or otherwise using the Specification is assumed by the implementer and user. Except as stated herein, I expressly disclaim any warranties (express, implied, or otherwise), including implied warranties of merchantability, non-infringement, fitness for a particular purpose, or title, related to the Specification. IN NO EVENT WILL ANY PARTY BE LIABLE TO ANY OTHER PARTY FOR LOST PROFITS OR ANY FORM OF INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER FROM ANY CAUSES OF ACTION OF ANY KIND WITH RESPECT TO THIS AGREEMENT, WHETHER BASED ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), OR OTHERWISE, AND WHETHER OR NOT THE OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. All of my obligations under Section 3 regarding the transfer, successors in interest, or assignment of Granted Claims will be satisfied if I notify the transferee or assignee of any patent that I know contains Granted Claims of the obligations under Section 3. Nothing in this Agreement requires me to undertake a patent search.
10. Definitions. 
10.1. Agreement. “Agreement” means this W3C Community Final Specification Agreement.
10.2. Corresponding Working Group. “Corresponding Working Group” is a W3C Working Group that is chartered to develop a Recommendation, as defined in the W3C Process Document, that takes the Specification as an input.
10.3. Essential Claims. “Essential Claims” shall mean all claims in any patent or patent application in any jurisdiction in the world that would necessarily be infringed by implementation of the Specification. A claim is necessarily infringed hereunder only when it is not possible to avoid infringing it because there is no non-infringing alternative for implementing the normative portions of the Specification. Existence of a non-infringing alternative shall be judged based on the state of the art at the time of the publication of the Specification. The following are expressly excluded from and shall not be deemed to constitute Essential Claims: 
10.3.1. any claims other than as set forth above even if contained in the same patent as Essential Claims; and
10.3.2. claims which would be infringed only by: 
portions of an implementation that are not specified in the normative portions of the Specification, or
enabling technologies that may be necessary to make or use any product or portion thereof that complies with the Specification and are not themselves expressly set forth in the Specification (e.g., semiconductor manufacturing technology, compiler technology, object-oriented technology, basic operating system technology, and the like); or
the implementation of technology developed elsewhere and merely incorporated by reference in the body of the Specification.
10.3.3. design patents and design registrations.
For purposes of this definition, the normative portions of the Specification shall be deemed to include only architectural and interoperability requirements. Optional features in the RFC 2119 sense are considered normative unless they are specifically identified as informative. Implementation examples or any other material that merely illustrate the requirements of the Specification are informative, rather than normative.
10.4. I, Me, or My. “I,” “me,” or “my” refers to the signatory.
10.5 Project. “Project” means the W3C Community Group or Business Group for which I executed this Agreement.
10.6. Specification. “Specification” means the Specification identified by the Project as the target of this agreement in a call for Final Specification Commitments. W3C shall provide the authoritative mechanisms for the identification of this Specification.
10.7. W3C Community RF Licensing Requirements. “W3C Community RF Licensing Requirements” license shall mean a non-assignable, non-sublicensable license to make, have made, use, sell, have sold, offer to sell, import, and distribute and dispose of implementations of the Specification that: 
10.7.1. shall be available to all, worldwide, whether or not they are W3C Members;
10.7.2. shall extend to all Essential Claims owned or controlled by me;
10.7.3. may be limited to implementations of the Specification, and to what is required by the Specification;
10.7.4. may be conditioned on a grant of a reciprocal RF license (as defined in this policy) to all Essential Claims owned or controlled by the licensee. A reciprocal license may be required to be available to all, and a reciprocal license may itself be conditioned on a further reciprocal license from all.
10.7.5. may not be conditioned on payment of royalties, fees or other consideration;
10.7.6. may be suspended with respect to any licensee when licensor issued by licensee for infringement of claims essential to implement the Specification or any W3C Recommendation;
10.7.7. may not impose any further conditions or restrictions on the use of any technology, intellectual property rights, or other restrictions on behavior of the licensee, but may include reasonable, customary terms relating to operation or maintenance of the license relationship such as the following: choice of law and dispute resolution;
10.7.8. shall not be considered accepted by an implementer who manifests an intent not to accept the terms of the W3C Community RF Licensing Requirements license as offered by the licensor.
10.7.9. The RF license conforming to the requirements in this policy shall be made available by the licensor as long as the Specification is in effect. The term of such license shall be for the life of the patents in question.
I am encouraged to provide a contact from which licensing information can be obtained and other relevant licensing information. Any such information will be made publicly available. 
10.8. You or Your. “You,” “you,” or “your” means any person or entity who exercises copyright or patent rights granted under this Agreement, and any person that person or entity controls.

-------------------------------------------------------------------------------------

------------------- WebGL -----------------------------
Copyright (c) 2018 The Khronos Group Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and/or associated documentation files (the
"Materials"), to deal in the Materials without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Materials, and to
permit persons to whom the Materials are furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Materials.

THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
------------------------------------------------------

------------- End of ThirdPartyNotices ------------------------------------------- */



--- Contenu du fichier : LICENSE.txt ---
Apache License

Version 2.0, January 2004

http://www.apache.org/licenses/ 

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and

You must cause any modified files to carry prominent notices stating that You changed the files; and

You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and

If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2016, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2013, GoInstant Inc., a salesforce.com company
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

* Neither the name of salesforce.com, nor GoInstant, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The ISC License

Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE.txt ---
The MIT License (MIT)

Copyright (c) Sebastian Mayr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : MIT-LICENSE.txt ---
Copyright (c) 2015 Craig Condon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


--- Contenu du fichier : LICENSE-MIT.txt ---
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : LICENSE-MIT.txt ---


--- Contenu du fichier : top_level.txt ---
pygame


--- Contenu du fichier : entry_points.txt ---
[pyinstaller40]
hook-dirs = pygame.__pyinstaller:get_hook_dirs


--- Contenu du fichier : vendor.txt ---
CacheControl==0.14.0
distlib==0.3.8
distro==1.9.0
msgpack==1.0.8
packaging==24.1
platformdirs==4.2.2
pyproject-hooks==1.0.0
requests==2.32.3
    certifi==2024.7.4
    idna==3.7
    urllib3==1.26.18
rich==13.7.1
    pygments==2.18.0
    typing_extensions==4.12.2
resolvelib==1.0.1
setuptools==70.3.0
tomli==2.0.1
truststore==0.9.1


--- Contenu du fichier : AUTHORS.txt ---
@Switch01
A_Rog
Aakanksha Agrawal
Abhinav Sagar
ABHYUDAY PRATAP SINGH
abs51295
AceGentile
Adam Chainz
Adam Tse
Adam Wentz
admin
Adolfo Ochagavía
Adrien Morison
Agus
ahayrapetyan
Ahilya
AinsworthK
Akash Srivastava
Alan Yee
Albert Tugushev
Albert-Guan
albertg
Alberto Sottile
Aleks Bunin
Ales Erjavec
Alethea Flowers
Alex Gaynor
Alex Grönholm
Alex Hedges
Alex Loosley
Alex Morega
Alex Stachowiak
Alexander Shtyrov
Alexandre Conrad
Alexey Popravka
Aleš Erjavec
Alli
Ami Fischman
Ananya Maiti
Anatoly Techtonik
Anders Kaseorg
Andre Aguiar
Andreas Lutro
Andrei Geacar
Andrew Gaul
Andrew Shymanel
Andrey Bienkowski
Andrey Bulgakov
Andrés Delfino
Andy Freeland
Andy Kluger
Ani Hayrapetyan
Aniruddha Basak
Anish Tambe
Anrs Hu
Anthony Sottile
Antoine Musso
Anton Ovchinnikov
Anton Patrushev
Antonio Alvarado Hernandez
Antony Lee
Antti Kaihola
Anubhav Patel
Anudit Nagar
Anuj Godase
AQNOUCH Mohammed
AraHaan
arena
arenasys
Arindam Choudhury
Armin Ronacher
Arnon Yaari
Artem
Arun Babu Neelicattu
Ashley Manton
Ashwin Ramaswami
atse
Atsushi Odagiri
Avinash Karhana
Avner Cohen
Awit (Ah-Wit) Ghirmai
Baptiste Mispelon
Barney Gale
barneygale
Bartek Ogryczak
Bastian Venthur
Ben Bodenmiller
Ben Darnell
Ben Hoyt
Ben Mares
Ben Rosser
Bence Nagy
Benjamin Peterson
Benjamin VanEvery
Benoit Pierre
Berker Peksag
Bernard
Bernard Tyers
Bernardo B. Marques
Bernhard M. Wiedemann
Bertil Hatt
Bhavam Vidyarthi
Blazej Michalik
Bogdan Opanchuk
BorisZZZ
Brad Erickson
Bradley Ayers
Branch Vincent
Brandon L. Reiss
Brandt Bucher
Brannon Dorsey
Brett Randall
Brett Rosen
Brian Cristante
Brian Rosner
briantracy
BrownTruck
Bruno Oliveira
Bruno Renié
Bruno S
Bstrdsmkr
Buck Golemon
burrows
Bussonnier Matthias
bwoodsend
c22
Caleb Martinez
Calvin Smith
Carl Meyer
Carlos Liam
Carol Willing
Carter Thayer
Cass
Chandrasekhar Atina
Charlie Marsh
Chih-Hsuan Yen
Chris Brinker
Chris Hunt
Chris Jerdonek
Chris Kuehl
Chris Markiewicz
Chris McDonough
Chris Pawley
Chris Pryer
Chris Wolfe
Christian Clauss
Christian Heimes
Christian Oudard
Christoph Reiter
Christopher Hunt
Christopher Snyder
chrysle
cjc7373
Clark Boylan
Claudio Jolowicz
Clay McClure
Cody
Cody Soyland
Colin Watson
Collin Anderson
Connor Osborn
Cooper Lees
Cooper Ry Lees
Cory Benfield
Cory Wright
Craig Kerstiens
Cristian Sorinel
Cristina
Cristina Muñoz
ctg123
Curtis Doty
cytolentino
Daan De Meyer
Dale
Damian
Damian Quiroga
Damian Shaw
Dan Black
Dan Savilonis
Dan Sully
Dane Hillard
daniel
Daniel Collins
Daniel Hahler
Daniel Holth
Daniel Jost
Daniel Katz
Daniel Shaulov
Daniele Esposti
Daniele Nicolodi
Daniele Procida
Daniil Konovalenko
Danny Hermes
Danny McClanahan
Darren Kavanagh
Dav Clark
Dave Abrahams
Dave Jones
David Aguilar
David Black
David Bordeynik
David Caro
David D Lowe
David Evans
David Hewitt
David Linke
David Poggi
David Poznik
David Pursehouse
David Runge
David Tucker
David Wales
Davidovich
ddelange
Deepak Sharma
Deepyaman Datta
Denise Yu
dependabot[bot]
derwolfe
Desetude
Devesh Kumar Singh
devsagul
Diego Caraballo
Diego Ramirez
DiegoCaraballo
Dimitri Merejkowsky
Dimitri Papadopoulos
Dirk Stolle
Dmitry Gladkov
Dmitry Volodin
Domen Kožar
Dominic Davis-Foster
Donald Stufft
Dongweiming
doron zarhi
Dos Moonen
Douglas Thor
DrFeathers
Dustin Ingram
Dustin Rodrigues
Dwayne Bailey
Ed Morley
Edgar Ramírez
Edgar Ramírez Mondragón
Ee Durbin
Efflam Lemaillet
efflamlemaillet
Eitan Adler
ekristina
elainechan
Eli Schwartz
Elisha Hollander
Ellen Marie Dash
Emil Burzo
Emil Styrke
Emmanuel Arias
Endoh Takanao
enoch
Erdinc Mutlu
Eric Cousineau
Eric Gillingham
Eric Hanchrow
Eric Hopper
Erik M. Bray
Erik Rose
Erwin Janssen
Eugene Vereshchagin
everdimension
Federico
Felipe Peter
Felix Yan
fiber-space
Filip Kokosiński
Filipe Laíns
Finn Womack
finnagin
Flavio Amurrio
Florian Briand
Florian Rathgeber
Francesco
Francesco Montesano
Fredrik Orderud
Frost Ming
Gabriel Curio
Gabriel de Perthuis
Garry Polley
gavin
gdanielson
Geoffrey Sneddon
George Song
Georgi Valkov
Georgy Pchelkin
ghost
Giftlin Rajaiah
gizmoguy1
gkdoc
Godefroid Chapelle
Gopinath M
GOTO Hayato
gousaiyang
gpiks
Greg Roodt
Greg Ward
Guilherme Espada
Guillaume Seguin
gutsytechster
Guy Rozendorn
Guy Tuval
gzpan123
Hanjun Kim
Hari Charan
Harsh Vardhan
harupy
Harutaka Kawamura
hauntsaninja
Henrich Hartzer
Henry Schreiner
Herbert Pfennig
Holly Stotelmyer
Honnix
Hsiaoming Yang
Hugo Lopes Tavares
Hugo van Kemenade
Hugues Bruant
Hynek Schlawack
Ian Bicking
Ian Cordasco
Ian Lee
Ian Stapleton Cordasco
Ian Wienand
Igor Kuzmitshov
Igor Sobreira
Ikko Ashimine
Ilan Schnell
Illia Volochii
Ilya Baryshev
Inada Naoki
Ionel Cristian Mărieș
Ionel Maries Cristian
Itamar Turner-Trauring
Ivan Pozdeev
J. Nick Koston
Jacob Kim
Jacob Walls
Jaime Sanz
jakirkham
Jakub Kuczys
Jakub Stasiak
Jakub Vysoky
Jakub Wilk
James Cleveland
James Curtin
James Firth
James Gerity
James Polley
Jan Pokorný
Jannis Leidel
Jarek Potiuk
jarondl
Jason Curtis
Jason R. Coombs
JasonMo
JasonMo1
Jay Graves
Jean Abou Samra
Jean-Christophe Fillion-Robin
Jeff Barber
Jeff Dairiki
Jeff Widman
Jelmer Vernooĳ
jenix21
Jeremy Fleischman
Jeremy Stanley
Jeremy Zafran
Jesse Rittner
Jiashuo Li
Jim Fisher
Jim Garrison
Jinzhe Zeng
Jiun Bae
Jivan Amara
Joe Bylund
Joe Michelini
John Paton
John Sirois
John T. Wodder II
John-Scott Atlakson
johnthagen
Jon Banafato
Jon Dufresne
Jon Parise
Jonas Nockert
Jonathan Herbert
Joonatan Partanen
Joost Molenaar
Jorge Niedbalski
Joseph Bylund
Joseph Long
Josh Bronson
Josh Cannon
Josh Hansen
Josh Schneier
Joshua
Juan Luis Cano Rodríguez
Juanjo Bazán
Judah Rand
Julian Berman
Julian Gethmann
Julien Demoor
Jussi Kukkonen
jwg4
Jyrki Pulliainen
Kai Chen
Kai Mueller
Kamal Bin Mustafa
kasium
kaustav haldar
keanemind
Keith Maxwell
Kelsey Hightower
Kenneth Belitzky
Kenneth Reitz
Kevin Burke
Kevin Carter
Kevin Frommelt
Kevin R Patterson
Kexuan Sun
Kit Randel
Klaas van Schelven
KOLANICH
konstin
kpinc
Krishna Oza
Kumar McMillan
Kuntal Majumder
Kurt McKee
Kyle Persohn
lakshmanaram
Laszlo Kiss-Kollar
Laurent Bristiel
Laurent LAPORTE
Laurie O
Laurie Opperman
layday
Leon Sasson
Lev Givon
Lincoln de Sousa
Lipis
lorddavidiii
Loren Carvalho
Lucas Cimon
Ludovic Gasc
Luis Medel
Lukas Geiger
Lukas Juhrich
Luke Macken
Luo Jiebin
luojiebin
luz.paz
László Kiss Kollár
M00nL1ght
Marc Abramowitz
Marc Tamlyn
Marcus Smith
Mariatta
Mark Kohler
Mark McLoughlin
Mark Williams
Markus Hametner
Martey Dodoo
Martin Fischer
Martin Häcker
Martin Pavlasek
Masaki
Masklinn
Matej Stuchlik
Mathew Jennings
Mathieu Bridon
Mathieu Kniewallner
Matt Bacchi
Matt Good
Matt Maker
Matt Robenolt
Matt Wozniski
matthew
Matthew Einhorn
Matthew Feickert
Matthew Gilliard
Matthew Hughes
Matthew Iversen
Matthew Treinish
Matthew Trumbell
Matthew Willson
Matthias Bussonnier
mattip
Maurits van Rees
Max W Chase
Maxim Kurnikov
Maxime Rouyrre
mayeut
mbaluna
mdebi
memoselyk
meowmeowcat
Michael
Michael Aquilina
Michael E. Karpeles
Michael Klich
Michael Mintz
Michael Williamson
michaelpacer
Michał Górny
Mickaël Schoentgen
Miguel Araujo Perez
Mihir Singh
Mike
Mike Hendricks
Min RK
MinRK
Miro Hrončok
Monica Baluna
montefra
Monty Taylor
morotti
mrKazzila
Muha Ajjan
Nadav Wexler
Nahuel Ambrosini
Nate Coraor
Nate Prewitt
Nathan Houghton
Nathaniel J. Smith
Nehal J Wani
Neil Botelho
Nguyễn Gia Phong
Nicholas Serra
Nick Coghlan
Nick Stenning
Nick Timkovich
Nicolas Bock
Nicole Harris
Nikhil Benesch
Nikhil Ladha
Nikita Chepanov
Nikolay Korolev
Nipunn Koorapati
Nitesh Sharma
Niyas Sait
Noah
Noah Gorny
Nowell Strite
NtaleGrey
nvdv
OBITORASU
Ofek Lev
ofrinevo
Oliver Freund
Oliver Jeeves
Oliver Mannion
Oliver Tonnhofer
Olivier Girardot
Olivier Grisel
Ollie Rutherfurd
OMOTO Kenji
Omry Yadan
onlinejudge95
Oren Held
Oscar Benjamin
Oz N Tiram
Pachwenko
Patrick Dubroy
Patrick Jenkins
Patrick Lawson
patricktokeeffe
Patrik Kopkan
Paul Ganssle
Paul Kehrer
Paul Moore
Paul Nasrat
Paul Oswald
Paul van der Linden
Paulus Schoutsen
Pavel Safronov
Pavithra Eswaramoorthy
Pawel Jasinski
Paweł Szramowski
Pekka Klärck
Peter Gessler
Peter Lisák
Peter Shen
Peter Waller
Petr Viktorin
petr-tik
Phaneendra Chiruvella
Phil Elson
Phil Freo
Phil Pennock
Phil Whelan
Philip Jägenstedt
Philip Molloy
Philippe Ombredanne
Pi Delport
Pierre-Yves Rofes
Pieter Degroote
pip
Prabakaran Kumaresshan
Prabhjyotsing Surjit Singh Sodhi
Prabhu Marappan
Pradyun Gedam
Prashant Sharma
Pratik Mallya
pre-commit-ci[bot]
Preet Thakkar
Preston Holmes
Przemek Wrzos
Pulkit Goyal
q0w
Qiangning Hong
Qiming Xu
Quentin Lee
Quentin Pradet
R. David Murray
Rafael Caricio
Ralf Schmitt
Ran Benita
Razzi Abuissa
rdb
Reece Dunham
Remi Rampin
Rene Dudfield
Riccardo Magliocchetti
Riccardo Schirone
Richard Jones
Richard Si
Ricky Ng-Adam
Rishi
rmorotti
RobberPhex
Robert Collins
Robert McGibbon
Robert Pollak
Robert T. McGibbon
robin elisha robinson
Roey Berman
Rohan Jain
Roman Bogorodskiy
Roman Donchenko
Romuald Brunet
ronaudinho
Ronny Pfannschmidt
Rory McCann
Ross Brattain
Roy Wellington Ⅳ
Ruairidh MacLeod
Russell Keith-Magee
Ryan Shepherd
Ryan Wooden
ryneeverett
S. Guliaev
Sachi King
Salvatore Rinchiera
sandeepkiran-js
Sander Van Balen
Savio Jomton
schlamar
Scott Kitterman
Sean
seanj
Sebastian Jordan
Sebastian Schaetz
Segev Finer
SeongSoo Cho
Sergey Vasilyev
Seth Michael Larson
Seth Woodworth
Shahar Epstein
Shantanu
shenxianpeng
shireenrao
Shivansh-007
Shixian Sheng
Shlomi Fish
Shovan Maity
Simeon Visser
Simon Cross
Simon Pichugin
sinoroc
sinscary
snook92
socketubs
Sorin Sbarnea
Srinivas Nyayapati
Stavros Korokithakis
Stefan Scherfke
Stefano Rivera
Stephan Erb
Stephen Rosen
stepshal
Steve (Gadget) Barnes
Steve Barnes
Steve Dower
Steve Kowalik
Steven Myint
Steven Silvester
stonebig
studioj
Stéphane Bidoul
Stéphane Bidoul (ACSONE)
Stéphane Klein
Sumana Harihareswara
Surbhi Sharma
Sviatoslav Sydorenko
Sviatoslav Sydorenko (Святослав Сидоренко)
Swat009
Sylvain
Takayuki SHIMIZUKAWA
Taneli Hukkinen
tbeswick
Thiago
Thijs Triemstra
Thomas Fenzl
Thomas Grainger
Thomas Guettler
Thomas Johansson
Thomas Kluyver
Thomas Smith
Thomas VINCENT
Tim D. Smith
Tim Gates
Tim Harder
Tim Heap
tim smith
tinruufu
Tobias Hermann
Tom Forbes
Tom Freudenheim
Tom V
Tomas Hrnciar
Tomas Orsava
Tomer Chachamu
Tommi Enenkel | AnB
Tomáš Hrnčiar
Tony Beswick
Tony Narlock
Tony Zhaocheng Tan
TonyBeswick
toonarmycaptain
Toshio Kuratomi
toxinu
Travis Swicegood
Tushar Sadhwani
Tzu-ping Chung
Valentin Haenel
Victor Stinner
victorvpaulo
Vikram - Google
Viktor Szépe
Ville Skyttä
Vinay Sajip
Vincent Philippon
Vinicyus Macedo
Vipul Kumar
Vitaly Babiy
Vladimir Fokow
Vladimir Rutsky
W. Trevor King
Wil Tan
Wilfred Hughes
William Edwards
William ML Leslie
William T Olson
William Woodruff
Wilson Mo
wim glenn
Winson Luk
Wolfgang Maier
Wu Zhenyu
XAMES3
Xavier Fernandez
Xianpeng Shen
xoviat
xtreak
YAMAMOTO Takashi
Yen Chi Hsuan
Yeray Diaz Diaz
Yoval P
Yu Jian
Yuan Jing Vincent Yan
Yusuke Hayashi
Zearin
Zhiping Deng
ziebam
Zvezdan Petkovic
Łukasz Langa
Роман Донченко
Семён Марьясин


--- Contenu du fichier : top_level.txt ---
pip


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : entry_points.txt ---
[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main


--- Contenu du fichier : LGPL.txt ---
		  GNU LESSER GENERAL PUBLIC LICENSE
		       Version 2.1, February 1999

 Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
 as the successor of the GNU Library Public License, version 2, hence
 the version number 2.1.]

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software packages--typically libraries--of the
Free Software Foundation and other authors who decide to use it.  You
can use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of
it in new free programs; and that you are informed that you can do
these things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the "Lesser" General Public License because it
does Less to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

		  GNU LESSER GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms of
this Lesser General Public License (also called "this License").
Each licensee is addressed as "you".

  A "library" means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The "Library", below, refers to any such software library or work
which has been distributed under these terms.  A "work based on the
Library" means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term "modification".)

  "Source code" for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.
  
  1. You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

  2. You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) The modified work must itself be a software library.

    b) You must cause the files modified to carry prominent notices
    stating that you changed the files and the date of any change.

    c) You must cause the whole of the work to be licensed at no
    charge to all third parties under the terms of this License.

    d) If a facility in the modified Library refers to a function or a
    table of data to be supplied by an application program that uses
    the facility, other than as an argument passed when the facility
    is invoked, then you must make a good faith effort to ensure that,
    in the event an application does not supply such function or
    table, the facility still operates, and performs whatever part of
    its purpose remains meaningful.

    (For example, a function in a library to compute square roots has
    a purpose that is entirely well-defined independent of the
    application.  Therefore, Subsection 2d requires that any
    application-supplied function or table used by this function must
    be optional: if the application does not supply it, the square
    root function must still compute square roots.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a "work that uses the Library".  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a "work that uses the Library" with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a "work that uses the
library".  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a "work that uses the Library" uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
link a "work that uses the Library" with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

    a) Accompany the work with the complete corresponding
    machine-readable source code for the Library including whatever
    changes were used in the work (which must be distributed under
    Sections 1 and 2 above); and, if the work is an executable linked
    with the Library, with the complete machine-readable "work that
    uses the Library", as object code and/or source code, so that the
    user can modify the Library and then relink to produce a modified
    executable containing the modified Library.  (It is understood
    that the user who changes the contents of definitions files in the
    Library will not necessarily be able to recompile the application
    to use the modified definitions.)

    b) Use a suitable shared library mechanism for linking with the
    Library.  A suitable mechanism is one that (1) uses at run time a
    copy of the library already present on the user's computer system,
    rather than copying library functions into the executable, and (2)
    will operate properly with a modified version of the library, if
    the user installs one, as long as the modified version is
    interface-compatible with the version that the work was made with.

    c) Accompany the work with a written offer, valid for at
    least three years, to give the same user the materials
    specified in Subsection 6a, above, for a charge no more
    than the cost of performing this distribution.

    d) If distribution of the work is made by offering access to copy
    from a designated place, offer equivalent access to copy the above
    specified materials from the same place.

    e) Verify that the user has already received a copy of these
    materials or that you have already sent this user a copy.

  For an executable, the required form of the "work that uses the
Library" must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies
the executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

  7. You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

    a) Accompany the combined library with a copy of the same work
    based on the Library, uncombined with any other library
    facilities.  This must be distributed under the terms of the
    Sections above.

    b) Give prominent notice with the combined library of the fact
    that part of it is a work based on the Library, and explaining
    where to find the accompanying uncombined form of the same work.

  8. You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

  9. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

  11. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

  13. The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
"any later version", you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

			    NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

		     END OF TERMS AND CONDITIONS

           How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the library's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the library, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  library `Frob' (a library for tweaking knobs) written by James Random Hacker.

  <signature of Ty Coon>, 1 April 1990
  Ty Coon, President of Vice

That's all there is to it!




--- Contenu du fichier : filepaths.rst.txt ---
File Path Function Arguments
============================

A pygame function or method which takes a file path argument will accept
either a Unicode or a byte (8-bit or ASCII character) string.
Unicode strings are translated to Python's default filesystem encoding,
as returned by sys.getfilesystemencoding().  A Unicode code point
above U+FFFF (``\uFFFF``) can be coded directly with a 32-bit escape sequences
(``\Uxxxxxxxx``), even for Python interpreters built with an UCS-2
(16-bit character) Unicode type.  Byte strings are passed
to the operating system unchanged.

Null characters (``\x00``) are not permitted in the path, raising an exception.
An exception is also raised if an Unicode file path cannot be encoded.
How UTF-16 surrogate codes are handled is Python-interpreter-dependent.
Use UTF-32 code points and 32-bit escape sequences instead.
The exception types are function-dependent.


--- Contenu du fichier : c_api.rst.txt ---
pygame C API
============

.. toctree::
   :maxdepth: 1
   :glob:

   c_api/slots.rst
   c_api/base.rst
   c_api/bufferproxy.rst
   c_api/color.rst
   c_api/display.rst
   c_api/event.rst
   c_api/freetype.rst
   c_api/mixer.rst
   c_api/rect.rst
   c_api/rwobject.rst
   c_api/surface.rst
   c_api/surflock.rst
   c_api/version.rst


src_c/include/ contains header files for applications
that use the pygame C API, while src_c/ contains
headers used by pygame internally.


--- Contenu du fichier : index.rst.txt ---
Pygame Front Page
=================

.. toctree::
   :maxdepth: 2
   :glob:
   :hidden:

   ref/*
   tut/*
   tut/en/**/*
   tut/ko/**/*
   c_api
   filepaths
   logos

Quick start
-----------

Welcome to pygame! Once you've got pygame installed (:code:`pip install pygame` or
:code:`pip3 install pygame` for most people), the next question is how to get a game
loop running. Pygame, unlike some other libraries, gives you full control of program
execution. That freedom means it is easy to mess up in your initial steps.

Here is a good example of a basic setup (opens the window, updates the screen, and handles events)--

.. literalinclude:: ref/code_examples/base_script.py

Here is a slightly more fleshed out example, which shows you how to move something
(a circle in this case) around on screen--

.. literalinclude:: ref/code_examples/base_script_example.py

For more in depth reference, check out the :ref:`tutorials-reference-label`
section below, check out a video tutorial (`I'm a fan of this one
<https://www.youtube.com/watch?v=AY9MnQ4x3zk>`_), or reference the API
documentation by module.

Documents
---------

`Readme`_
  Basic information about pygame: what it is, who is involved, and where to find it.

`Install`_
  Steps needed to compile pygame on several platforms.
  Also help on finding and installing prebuilt binaries for your system.

:doc:`filepaths`
  How pygame handles file system paths.

:doc:`Pygame Logos <logos>`
   The logos of Pygame in different resolutions.


`LGPL License`_
  This is the license pygame is distributed under.
  It provides for pygame to be distributed with open source and commercial software.
  Generally, if pygame is not changed, it can be used with any type of program.

.. _tutorials-reference-label:

Tutorials
---------

:doc:`Introduction to Pygame <tut/PygameIntro>`
  An introduction to the basics of pygame.
  This is written for users of Python and appeared in volume two of the Py magazine.

:doc:`Import and Initialize <tut/ImportInit>`
  The beginning steps on importing and initializing pygame.
  The pygame package is made of several modules.
  Some modules are not included on all platforms.

:doc:`How do I move an Image? <tut/MoveIt>`
  A basic tutorial that covers the concepts behind 2D computer animation.
  Information about drawing and clearing objects to make them appear animated.

:doc:`Chimp Tutorial, Line by Line <tut/ChimpLineByLine>`
  The pygame examples include a simple program with an interactive fist and a chimpanzee.
  This was inspired by the annoying flash banner of the early 2000s.
  This tutorial examines every line of code used in the example.

:doc:`Sprite Module Introduction <tut/SpriteIntro>`
  Pygame includes a higher level sprite module to help organize games.
  The sprite module includes several classes that help manage details found in almost all games types.
  The Sprite classes are a bit more advanced than the regular pygame modules,
  and need more understanding to be properly used.

:doc:`Surfarray Introduction <tut/SurfarrayIntro>`
  Pygame used the NumPy python module to allow efficient per pixel effects on images.
  Using the surface arrays is an advanced feature that allows custom effects and filters.
  This also examines some of the simple effects from the pygame example, arraydemo.py.

:doc:`Camera Module Introduction <tut/CameraIntro>`
  Pygame, as of 1.9, has a camera module that allows you to capture images,
  watch live streams, and do some basic computer vision.
  This tutorial covers those use cases.

:doc:`Newbie Guide <tut/newbieguide>`
  A list of thirteen helpful tips for people to get comfortable using pygame.

:doc:`Making Games Tutorial <tut/MakeGames>`
  A large tutorial that covers the bigger topics needed to create an entire game.

:doc:`Display Modes <tut/DisplayModes>`
  Getting a display surface for the screen.

:doc:`한국어 튜토리얼 (Korean Tutorial) <tut/ko/빨간블록 검은블록/개요>`
  빨간블록 검은블록


Reference
---------

:ref:`genindex`
  A list of all functions, classes, and methods in the pygame package.

:doc:`ref/bufferproxy`
  An array protocol view of surface pixels

:doc:`ref/color`
  Color representation.

:doc:`ref/cursors`
  Loading and compiling cursor images.

:doc:`ref/display`
  Configure the display surface.

:doc:`ref/draw`
  Drawing simple shapes like lines and ellipses to surfaces.

:doc:`ref/event`
  Manage the incoming events from various input devices and the windowing platform.

:doc:`ref/examples`
  Various programs demonstrating the use of individual pygame modules.

:doc:`ref/font`
  Loading and rendering TrueType fonts.

:doc:`ref/freetype`
  Enhanced pygame module for loading and rendering font faces.

:doc:`ref/gfxdraw`
  Anti-aliasing draw functions.

:doc:`ref/image`
  Loading, saving, and transferring of surfaces.

:doc:`ref/joystick`
  Manage the joystick devices.

:doc:`ref/key`
  Manage the keyboard device.

:doc:`ref/locals`
  Pygame constants.

:doc:`ref/mixer`
  Load and play sounds

:doc:`ref/mouse`
  Manage the mouse device and display.

:doc:`ref/music`
  Play streaming music tracks.

:doc:`ref/pygame`
  Top level functions to manage pygame.

:doc:`ref/pixelarray`
  Manipulate image pixel data.

:doc:`ref/rect`
  Flexible container for a rectangle.

:doc:`ref/scrap`
  Native clipboard access.

:doc:`ref/sndarray`
  Manipulate sound sample data.

:doc:`ref/sprite`
  Higher level objects to represent game images.

:doc:`ref/surface`
  Objects for images and the screen.

:doc:`ref/surfarray`
  Manipulate image pixel data.

:doc:`ref/tests`
  Test pygame.

:doc:`ref/time`
  Manage timing and framerate.

:doc:`ref/transform`
  Resize and move images.

:doc:`pygame C API <c_api>`
  The C api shared amongst pygame extension modules.

:ref:`search`
  Search pygame documents by keyword.

.. _Readme: ../wiki/about

.. _Install: ../wiki/GettingStarted#Pygame%20Installation

.. _LGPL License: LGPL.txt


--- Contenu du fichier : logos.rst.txt ---
*************************************************
  Pygame Logos Page
*************************************************

Pygame Logos
============

These logos are available for use in your own game projects.
Please put them up wherever you see fit. The logo was created
by TheCorruptor on July 29, 2001 and upscaled by Mega_JC on
August 29, 2021.

.. container:: fullwidth

    .. image:: _static/pygame_logo.png

    | `pygame_logo.svg <_static/pygame_logo.svg>`_
    | `pygame_logo.png <_static/pygame_logo.png>`_ - 1561 x 438

    .. image:: _static/pygame_lofi.png

    | `pygame_lofi.svg <_static/pygame_lofi.svg>`_
    | `pygame_lofi.png <_static/pygame_lofi.png>`_ - 1561 x 438

    .. image:: _static/pygame_powered.png

    | `pygame_powered.svg <_static/pygame_powered.svg>`_
    | `pygame_powered.png <_static/pygame_powered.png>`_ - 1617 x 640

    .. image:: _static/pygame_tiny.png

    | `pygame_tiny.png <_static/pygame_tiny.png>`_ - 214 x 60

    .. image:: _static/pygame_powered_lowres.png

    | `pygame_powered_lowres.png <_static/pygame_powered_lowres.png>`_ - 101 x 40


There is a higher resolution layered photoshop image
available `here <https://www.pygame.org/ftp/pygame_logo.psd>`_. *(1.3 MB)*

Legacy logos
------------

.. container:: fullwidth

    `legacy_logos.zip <_static/legacy_logos.zip>`_ - 50.1 KB

--- Contenu du fichier : key.rst.txt ---
.. include:: common.txt

:mod:`pygame.key`
=================

.. module:: pygame.key
   :synopsis: pygame module to work with the keyboard

| :sl:`pygame module to work with the keyboard`

This module contains functions for dealing with the keyboard.

The :mod:`pygame.event` queue gets ``pygame.KEYDOWN`` and ``pygame.KEYUP``
events when the keyboard buttons are pressed and released. Both events have
``key`` and ``mod`` attributes.

   * ``key``: an :ref:`integer ID <key-constants-label>` representing every key
     on the keyboard
   * ``mod``: a bitmask of all the :ref:`modifier keys <key-modifiers-label>`
     that were in a pressed state when the event occurred

The ``pygame.KEYDOWN`` event has the additional attributes ``unicode`` and
``scancode``.

   * ``unicode``: a single character string that is the fully translated
     character entered, this takes into account the shift and composition keys
   * ``scancode``: the platform-specific key code, which could be different from
     keyboard to keyboard, but is useful for key selection of weird keys like
     the multimedia keys

.. versionadded:: 2.0.0
    The ``pygame.TEXTINPUT`` event is preferred to the ``unicode`` attribute
    of ``pygame.KEYDOWN``. The attribute ``text`` contains the input.


.. _key-constants-label:

The following is a list of all the constants (from :mod:`pygame.locals`) used to
represent keyboard keys.

Portability note: The integers for key constants differ between pygame 1 and 2.
Always use key constants (``K_a``) rather than integers directly (``97``) so
that your key handling code works well on both pygame 1 and pygame 2.


::

      pygame
      Constant      ASCII   Description
      ---------------------------------
      K_BACKSPACE   \b      backspace
      K_TAB         \t      tab
      K_CLEAR               clear
      K_RETURN      \r      return
      K_PAUSE               pause
      K_ESCAPE      ^[      escape
      K_SPACE               space
      K_EXCLAIM     !       exclaim
      K_QUOTEDBL    "       quotedbl
      K_HASH        #       hash
      K_DOLLAR      $       dollar
      K_AMPERSAND   &       ampersand
      K_QUOTE               quote
      K_LEFTPAREN   (       left parenthesis
      K_RIGHTPAREN  )       right parenthesis
      K_ASTERISK    *       asterisk
      K_PLUS        +       plus sign
      K_COMMA       ,       comma
      K_MINUS       -       minus sign
      K_PERIOD      .       period
      K_SLASH       /       forward slash
      K_0           0       0
      K_1           1       1
      K_2           2       2
      K_3           3       3
      K_4           4       4
      K_5           5       5
      K_6           6       6
      K_7           7       7
      K_8           8       8
      K_9           9       9
      K_COLON       :       colon
      K_SEMICOLON   ;       semicolon
      K_LESS        <       less-than sign
      K_EQUALS      =       equals sign
      K_GREATER     >       greater-than sign
      K_QUESTION    ?       question mark
      K_AT          @       at
      K_LEFTBRACKET [       left bracket
      K_BACKSLASH   \       backslash
      K_RIGHTBRACKET ]      right bracket
      K_CARET       ^       caret
      K_UNDERSCORE  _       underscore
      K_BACKQUOTE   `       grave
      K_a           a       a
      K_b           b       b
      K_c           c       c
      K_d           d       d
      K_e           e       e
      K_f           f       f
      K_g           g       g
      K_h           h       h
      K_i           i       i
      K_j           j       j
      K_k           k       k
      K_l           l       l
      K_m           m       m
      K_n           n       n
      K_o           o       o
      K_p           p       p
      K_q           q       q
      K_r           r       r
      K_s           s       s
      K_t           t       t
      K_u           u       u
      K_v           v       v
      K_w           w       w
      K_x           x       x
      K_y           y       y
      K_z           z       z
      K_DELETE              delete
      K_KP0                 keypad 0
      K_KP1                 keypad 1
      K_KP2                 keypad 2
      K_KP3                 keypad 3
      K_KP4                 keypad 4
      K_KP5                 keypad 5
      K_KP6                 keypad 6
      K_KP7                 keypad 7
      K_KP8                 keypad 8
      K_KP9                 keypad 9
      K_KP_PERIOD   .       keypad period
      K_KP_DIVIDE   /       keypad divide
      K_KP_MULTIPLY *       keypad multiply
      K_KP_MINUS    -       keypad minus
      K_KP_PLUS     +       keypad plus
      K_KP_ENTER    \r      keypad enter
      K_KP_EQUALS   =       keypad equals
      K_UP                  up arrow
      K_DOWN                down arrow
      K_RIGHT               right arrow
      K_LEFT                left arrow
      K_INSERT              insert
      K_HOME                home
      K_END                 end
      K_PAGEUP              page up
      K_PAGEDOWN            page down
      K_F1                  F1
      K_F2                  F2
      K_F3                  F3
      K_F4                  F4
      K_F5                  F5
      K_F6                  F6
      K_F7                  F7
      K_F8                  F8
      K_F9                  F9
      K_F10                 F10
      K_F11                 F11
      K_F12                 F12
      K_F13                 F13
      K_F14                 F14
      K_F15                 F15
      K_NUMLOCK             numlock
      K_CAPSLOCK            capslock
      K_SCROLLOCK           scrollock
      K_RSHIFT              right shift
      K_LSHIFT              left shift
      K_RCTRL               right control
      K_LCTRL               left control
      K_RALT                right alt
      K_LALT                left alt
      K_RMETA               right meta
      K_LMETA               left meta
      K_LSUPER              left Windows key
      K_RSUPER              right Windows key
      K_MODE                mode shift
      K_HELP                help
      K_PRINT               print screen
      K_SYSREQ              sysrq
      K_BREAK               break
      K_MENU                menu
      K_POWER               power
      K_EURO                Euro
      K_AC_BACK             Android back button


.. _key-modifiers-label:

The keyboard also has a list of modifier states (from :mod:`pygame.locals`) that
can be assembled by bitwise-ORing them together.

::

      pygame
      Constant      Description
      -------------------------
      KMOD_NONE     no modifier keys pressed
      KMOD_LSHIFT   left shift
      KMOD_RSHIFT   right shift
      KMOD_SHIFT    left shift or right shift or both
      KMOD_LCTRL    left control
      KMOD_RCTRL    right control
      KMOD_CTRL     left control or right control or both
      KMOD_LALT     left alt
      KMOD_RALT     right alt
      KMOD_ALT      left alt or right alt or both
      KMOD_LMETA    left meta
      KMOD_RMETA    right meta
      KMOD_META     left meta or right meta or both
      KMOD_CAPS     caps lock
      KMOD_NUM      num lock
      KMOD_MODE     AltGr


The modifier information is contained in the ``mod`` attribute of the
``pygame.KEYDOWN`` and ``pygame.KEYUP`` events. The ``mod`` attribute is a
bitmask of all the modifier keys that were in a pressed state when the event
occurred. The modifier information can be decoded using a bitwise AND (except
for ``KMOD_NONE``, which should be compared using equals ``==``). For example:

::

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:
            if event.mod == pygame.KMOD_NONE:
                print('No modifier keys were in a pressed state when this '
                      'event occurred.')
            else:
                if event.mod & pygame.KMOD_LSHIFT:
                    print('Left shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_RSHIFT:
                    print('Right shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_SHIFT:
                    print('Left shift or right shift or both were in a '
                          'pressed state when this event occurred.')



.. function:: get_focused

   | :sl:`true if the display is receiving keyboard input from the system`
   | :sg:`get_focused() -> bool`

   Returns ``True`` when the display window has keyboard focus from the
   system. If the display needs to ensure it does not lose keyboard focus, it
   can use :func:`pygame.event.set_grab()` to grab all input.

   .. ## pygame.key.get_focused ##

.. function:: get_pressed

   | :sl:`get the state of all keyboard buttons`
   | :sg:`get_pressed() -> bools`

   Returns a sequence of boolean values representing the state of every key on
   the keyboard. Use the key constant values to index the array. A ``True``
   value means that the button is pressed.

   .. note::
      Getting the list of pushed buttons with this function is not the proper
      way to handle text entry from the user. There is no way to know the order
      of keys pressed, and rapidly pushed keys can be completely unnoticed
      between two calls to ``pygame.key.get_pressed()``. There is also no way to
      translate these pushed keys into a fully translated character value. See
      the ``pygame.KEYDOWN`` events on the :mod:`pygame.event` queue for this
      functionality.
   
   .. versionadded:: 2.2.0
      The collection of bools returned by ``get_pressed`` can not be iterated
      over because the indexes of the internal tuple does not correspond to the 
      keycodes.

   .. versionadded:: 2.5.0
      Iteration over the collection of bools returned by ``get_pressed`` is now
      restored. However it still does not make sense to iterate over it. Currently.

   .. ## pygame.key.get_pressed ##

.. function:: get_mods

   | :sl:`determine which modifier keys are being held`
   | :sg:`get_mods() -> int`

   Returns a single integer representing a bitmask of all the modifier keys
   being held. Using bitwise operators you can test if specific
   :ref:`modifier keys <key-modifiers-label>` are pressed.

   .. ## pygame.key.get_mods ##

.. function:: set_mods

   | :sl:`temporarily set which modifier keys are pressed`
   | :sg:`set_mods(int) -> None`

   Create a bitmask of the :ref:`modifier key constants <key-modifiers-label>`
   you want to impose on your program.

   .. ## pygame.key.set_mods ##

.. function:: set_repeat

   | :sl:`control how held keys are repeated`
   | :sg:`set_repeat() -> None`
   | :sg:`set_repeat(delay) -> None`
   | :sg:`set_repeat(delay, interval) -> None`

   When the keyboard repeat is enabled, keys that are held down will generate
   multiple ``pygame.KEYDOWN`` events. The ``delay`` parameter is the number of
   milliseconds before the first repeated ``pygame.KEYDOWN`` event will be sent.
   After that, another ``pygame.KEYDOWN`` event will be sent every ``interval``
   milliseconds. If a ``delay`` value is provided and an ``interval`` value is
   not provided or is 0, then the ``interval`` will be set to the same value as
   ``delay``.

   To disable key repeat call this function with no arguments or with ``delay``
   set to 0.

   When pygame is initialized the key repeat is disabled.

   :raises ValueError: if ``delay`` or ``interval`` is < 0

   .. versionchanged:: 2.0.0 A ``ValueError`` is now raised (instead of a
      ``pygame.error``) if ``delay`` or ``interval`` is < 0.

   .. ## pygame.key.set_repeat ##

.. function:: get_repeat

   | :sl:`see how held keys are repeated`
   | :sg:`get_repeat() -> (delay, interval)`

   Get the ``delay`` and ``interval`` keyboard repeat values. Refer to
   :func:`pygame.key.set_repeat()` for a description of these values.

   .. versionadded:: 1.8

   .. ## pygame.key.get_repeat ##

.. function:: name

   | :sl:`get the name of a key identifier`
   | :sg:`name(key, use_compat=True) -> str`

   Get the descriptive name of the button from a keyboard button id constant.
   Returns an empty string (``""``) if the key is not found.

   If ``use_compat`` argument is ``True`` (which is the default), this function
   returns the legacy name of a key where applicable. The return value is
   expected to be the same across different pygame versions (provided the
   corresponding key constant exists and is unique). If the return value is
   passed to the ``key_code`` function, the original constant will be returned.

   **Experimental:** ``use_compat`` parameter still in development for testing and feedback. It may change.
   `Please leave use_compat feedback with authors <https://github.com/pygame/pygame/pull/3312>`_

   If this argument is ``False``, the returned name may be prettier to display
   and may cover a wider range of keys than with ``use_compat``, but there are
   no guarantees that this name will be the same across different pygame
   versions. If the name returned is passed to the ``key_code`` function, the
   original constant is returned back (this is an implementation detail which
   may change later, do not rely on this)

   .. versionchanged:: 2.1.3 Added ``use_compat`` argument and guaranteed API stability for it

   .. ## pygame.key.name ##

.. function:: key_code

   | :sl:`get the key identifier from a key name`
   | :sg:`key_code(name=string) -> int`

   Get the key identifier code from the descriptive name of the key. This
   returns an integer matching one of the K_* keycodes. For example:

   ::

        >>> pygame.key.key_code("return") == pygame.K_RETURN
        True
        >>> pygame.key.key_code("0") == pygame.K_0
        True
        >>> pygame.key.key_code("space") == pygame.K_SPACE
        True

   :raises ValueError: if the key name is not known.

   .. versionadded:: 2.0.0

   .. ## pygame.key.key_code ##

.. function:: start_text_input

   | :sl:`start handling Unicode text input events`
   | :sg:`start_text_input() -> None`

   Start receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If applicable, show the on-screen keyboard or IME editor.

   For many languages, key presses will automatically generate a
   corresponding ``pygame.TEXTINPUT`` event. Special keys like
   escape or function keys, and certain key combinations will not
   generate ``pygame.TEXTINPUT`` events.

   In other languages, entering a single symbol may require multiple
   key presses, or a language-specific user interface. In this case,
   ``pygame.TEXTINPUT`` events are preferable to ``pygame.KEYDOWN``
   events for text input.

   A ``pygame.TEXTEDITING`` event is received when an IME composition
   is started or changed. It contains the composition ``text``, ``length``,
   and editing ``start`` position within the composition (attributes
   ``text``, ``length``, and ``start``, respectively).
   When the composition is committed (or non-IME input is received),
   a ``pygame.TEXTINPUT`` event is generated.

   Text input events handling is on by default.

   .. versionadded:: 2.0.0

   .. ## pygame.key.start_text_input ##

.. function:: stop_text_input

   | :sl:`stop handling Unicode text input events`
   | :sg:`stop_text_input() -> None`

   Stop receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If an on-screen keyboard or IME editor was shown with
   ``pygame.key.start_text_input()``, hide it again.

   Text input events handling is on by default.

   To avoid triggering the IME editor or the on-screen keyboard
   when the user is holding down a key during gameplay, text input
   should be disabled once text entry is finished, or when the user
   clicks outside of a text box.

   .. versionadded:: 2.0.0

   .. ## pygame.key.stop_text_input ##

.. function:: set_text_input_rect

   | :sl:`controls the position of the candidate list`
   | :sg:`set_text_input_rect(Rect) -> None`

   This sets the rectangle used for typing with an IME.
   It controls where the candidate list will open, if supported.

   .. versionadded:: 2.0.0

   .. ## pygame.key.set_text_input_rect ##

.. ## pygame.key ##


--- Contenu du fichier : pixelarray.rst.txt ---
.. include:: common.txt

:class:`pygame.PixelArray`
==========================

.. currentmodule:: pygame

.. class:: PixelArray

   | :sl:`pygame object for direct pixel access of surfaces`
   | :sg:`PixelArray(Surface) -> PixelArray`

   The PixelArray wraps a Surface and provides direct access to the
   surface's pixels. A pixel array can be one or two dimensional.
   A two dimensional array, like its surface, is indexed [column, row].
   Pixel arrays support slicing, both for returning a subarray or
   for assignment. A pixel array sliced on a single column or row
   returns a one dimensional pixel array. Arithmetic and other operations
   are not supported. A pixel array can be safely assigned to itself.
   Finally, pixel arrays export an array struct interface, allowing
   them to interact with :mod:`pygame.pixelcopy` methods and NumPy
   arrays.

   A PixelArray pixel item can be assigned a raw integer values, a
   :class:`pygame.Color` instance, or a (r, g, b[, a]) tuple.

   ::

     pxarray[x, y] = 0xFF00FF
     pxarray[x, y] = pygame.Color(255, 0, 255)
     pxarray[x, y] = (255, 0, 255)

   However, only a pixel's integer value is returned. So, to compare a pixel
   to a particular color the color needs to be first mapped using
   the :meth:`Surface.map_rgb()` method of the Surface object for which the
   PixelArray was created.

   ::

     pxarray = pygame.PixelArray(surface)
     # Check, if the first pixel at the topleft corner is blue
     if pxarray[0, 0] == surface.map_rgb((0, 0, 255)):
         ...

   When assigning to a range of of pixels, a non tuple sequence of colors or
   a PixelArray can be used as the value. For a sequence, the length must
   match the PixelArray width.

   ::

     pxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF
     pxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,
                                               # second pixel  = 0xAACCEE, ...
     pxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above
     pxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above
     pxarray[a:b] = otherarray[x:y]            # slice sizes must match

   For PixelArray assignment, if the right hand side array has a row length
   of 1, then the column is broadcast over the target array's rows. An
   array of height 1 is broadcast over the target's columns, and is equivalent
   to assigning a 1D PixelArray.

   Subscript slices can also be used to assign to a rectangular subview of
   the target PixelArray.

   ::

     # Create some new PixelArray objects providing a different view
     # of the original array/surface.
     newarray = pxarray[2:4, 3:5]
     otherarray = pxarray[::2, ::2]

   Subscript slices can also be used to do fast rectangular pixel manipulations
   instead of iterating over the x or y axis. The

   ::

     pxarray[::2, :] = (0, 0, 0)               # Make even columns black.
     pxarray[::2] = (0, 0, 0)                  # Same as [::2, :]

   During its lifetime, the PixelArray locks the surface, thus you explicitly
   have to close() it once its not used any more and the surface should perform
   operations in the same scope. It is best to use it as a context manager
   using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.

   A simple ``:`` slice index for the column can be omitted.

   ::

     pxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]
     pxarray[...] = (255, 0, 0)                # Same as pxarray[:]

   A note about PixelArray to PixelArray assignment, for arrays with an
   item size of 3 (created from 24 bit surfaces) pixel values are translated
   from the source to the destinations format. The red, green, and blue
   color elements of each pixel are shifted to match the format of the
   target surface. For all other pixel sizes no such remapping occurs.
   This should change in later pygame releases, where format conversions
   are performed for all pixel sizes. To avoid code breakage when full mapped
   copying is implemented it is suggested PixelArray to PixelArray copies be
   only between surfaces of identical format.

   .. versionadded:: 1.9.4

    - close() method was added. For explicitly cleaning up.
    - being able to use PixelArray as a context manager for cleanup.
    - both of these are useful for when working without reference counting (pypy).

   .. versionadded:: 1.9.2

    - array struct interface
    - transpose method
    - broadcasting for a length 1 dimension

   .. versionchanged:: 1.9.2

    - A 2D PixelArray can have a length 1 dimension.
      Only an integer index on a 2D PixelArray returns a 1D array.
    - For assignment, a tuple can only be a color. Any other sequence type
      is a sequence of colors.


   .. versionadded: 1.8.0
      Subscript support

   .. versionadded: 1.8.1
      Methods :meth:`make_surface`, :meth:`replace`, :meth:`extract`, and
      :meth:`compare`

   .. versionadded: 1.9.2
      Properties :attr:`itemsize`, :attr:`ndim`, :attr:`shape`,
      and :attr:`strides`

   .. versionadded: 1.9.2
      Array struct interface

   .. versionadded: 1.9.4
      Methods :meth:`close`

   .. attribute:: surface

      | :sl:`Gets the Surface the PixelArray uses.`
      | :sg:`surface -> Surface`

      The Surface the PixelArray was created for.

      .. ## PixelArray.surface ##

   .. attribute:: itemsize

      | :sl:`Returns the byte size of a pixel array item`
      | :sg:`itemsize -> int`

      This is the same as :meth:`Surface.get_bytesize` for the
      pixel array's surface.

      .. versionadded:: 1.9.2

   .. attribute:: ndim

      | :sl:`Returns the number of dimensions.`
      | :sg:`ndim -> int`

      A pixel array can be 1 or 2 dimensional.

      .. versionadded:: 1.9.2

   .. attribute:: shape

      | :sl:`Returns the array size.`
      | :sg:`shape -> tuple of int's`

      A tuple or length :attr:`ndim` giving the length of each
      dimension. Analogous to :meth:`Surface.get_size`.

      .. versionadded:: 1.9.2

   .. attribute:: strides

      | :sl:`Returns byte offsets for each array dimension.`
      | :sg:`strides -> tuple of int's`

      A tuple or length :attr:`ndim` byte counts. When a stride is
      multiplied by the corresponding index it gives the offset
      of that index from the start of the array. A stride is negative
      for an array that has is inverted (has a negative step).

      .. versionadded:: 1.9.2

   .. method:: make_surface

      | :sl:`Creates a new Surface from the current PixelArray.`
      | :sg:`make_surface() -> Surface`

      Creates a new Surface from the current PixelArray. Depending on the
      current PixelArray the size, pixel order etc. will be different from the
      original Surface.

      ::

        # Create a new surface flipped around the vertical axis.
        sf = pxarray[:,::-1].make_surface ()

      .. versionadded:: 1.8.1

      .. ## PixelArray.make_surface ##

   .. method:: replace

      | :sl:`Replaces the passed color in the PixelArray with another one.`
      | :sg:`replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -> None`

      Replaces the pixels with the passed color in the PixelArray by changing
      them them to the passed replacement color.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      replacement to take pixels with a similar, but not exactly identical
      color, into account as well.

      This is an in place operation that directly affects the pixels of the
      PixelArray.

      .. versionadded:: 1.8.1

      .. ## PixelArray.replace ##

   .. method:: extract

      | :sl:`Extracts the passed color from the PixelArray.`
      | :sg:`extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Extracts the passed color by changing all matching pixels to white, while
      non-matching pixels are changed to black. This returns a new PixelArray
      with the black/white color mask.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      extraction to take pixels with a similar, but not exactly identical
      color, into account as well.

      .. versionadded:: 1.8.1

      .. ## PixelArray.extract ##

   .. method:: compare

      | :sl:`Compares the PixelArray with another one.`
      | :sg:`compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Compares the contents of the PixelArray with those from the passed in
      PixelArray. It returns a new PixelArray with a black/white color mask
      that indicates the differences (black) of both arrays. Both PixelArray
      objects must have identical bit depths and dimensions.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as a threshold for the color detection. This causes the
      comparison to mark pixels with a similar, but not exactly identical
      color, as white.

      .. versionadded:: 1.8.1

      .. ## PixelArray.compare ##

   .. method:: transpose

      | :sl:`Exchanges the x and y axis.`
      | :sg:`transpose() -> PixelArray`

      This method returns a new view of the pixel array with the rows and
      columns swapped. So for a (w, h) sized array a (h, w) slice is returned.
      If an array is one dimensional, then a length 1 x dimension is added,
      resulting in a 2D pixel array.

      .. versionadded:: 1.9.2

      .. ## PixelArray.transpose ##

   .. method:: close

      | :sl:`Closes the PixelArray, and releases Surface lock.`
      | :sg:`close() -> PixelArray`

      This method is for explicitly closing the PixelArray, and releasing
      a lock on the Surface.

      .. versionadded:: 1.9.4

      .. ## PixelArray.close ##


   .. ## pygame.PixelArray ##


--- Contenu du fichier : freetype.rst.txt ---
.. include:: common.txt

:mod:`pygame.freetype`
======================

.. module:: pygame.freetype
   :synopsis: Enhanced pygame module for loading and rendering computer fonts

| :sl:`Enhanced pygame module for loading and rendering computer fonts`

The ``pygame.freetype`` module is a replacement for :mod:`pygame.font`.
It has all of the functionality of the original, plus many new features.
Yet is has absolutely no dependencies on the SDL_ttf library.
It is implemented directly on the FreeType 2 library.
The ``pygame.freetype`` module is not itself backward compatible with
:mod:`pygame.font`.
Instead, use the ``pygame.ftfont`` module as a drop-in replacement
for :mod:`pygame.font`.

All font file formats supported by FreeType can be rendered by
``pygame.freetype``, namely ``TTF``, Type1, ``CFF``, OpenType,
``SFNT``, ``PCF``, ``FNT``, ``BDF``, ``PFR`` and Type42 fonts.
All glyphs having UTF-32 code points are accessible
(see :attr:`Font.ucs4`).

Most work on fonts is done using :class:`Font` instances.
The module itself only has routines for initialization and creation
of :class:`Font` objects.
You can load fonts from the system using the :func:`SysFont` function.

Extra support of bitmap fonts is available. Available bitmap sizes can
be listed (see :meth:`Font.get_sizes`). For bitmap only fonts :class:`Font`
can set the size for you (see the :attr:`Font.size` property).

For now undefined character codes are replaced with the ``.notdef``
(not defined) character.
How undefined codes are handled may become configurable in a future release.

Pygame comes with a built-in default font. This can always be accessed by
passing None as the font name to the :class:`Font` constructor.

Extra rendering features available to :class:`pygame.freetype.Font`
are direct to surface rendering (see :meth:`Font.render_to`), character kerning
(see :attr:`Font.kerning`), vertical layout (see :attr:`Font.vertical`),
rotation of rendered text (see :attr:`Font.rotation`),
and the strong style (see :attr:`Font.strong`).
Some properties are configurable, such as
strong style strength (see :attr:`Font.strength`) and underline positioning
(see :attr:`Font.underline_adjustment`). Text can be positioned by the upper
right corner of the text box or by the text baseline (see :attr:`Font.origin`).
Finally, a font's vertical and horizontal size can be adjusted separately
(see :attr:`Font.size`).
The :any:`pygame.examples.freetype_misc <pygame.examples.freetype_misc.main>`
example shows these features in use.

The pygame package does not import ``freetype`` automatically when
loaded. This module must be imported explicitly to be used. ::

   import pygame
   import pygame.freetype

.. versionadded:: 1.9.2 :mod:`freetype`


.. function:: get_error

   | :sl:`Return the latest FreeType error`
   | :sg:`get_error() -> str`
   | :sg:`get_error() -> None`

   Return a description of the last error which occurred in the FreeType2
   library, or ``None`` if no errors have occurred.

.. function:: get_version

   | :sl:`Return the FreeType version`
   | :sg:`get_version(linked=True) -> (int, int, int)`

   Returns the version of the FreeType library in use by this module. ``linked=True``
   is the default behavior and returns the linked version of FreeType and ``linked=False``
   returns the compiled version of FreeType.

   Note that the ``freetype`` module depends on the FreeType 2 library.
   It will not compile with the original FreeType 1.0. Hence, the first element
   of the tuple will always be "2".

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

.. function:: init

   | :sl:`Initialize the underlying FreeType library.`
   | :sg:`init(cache_size=64, resolution=72) -> None`

   This function initializes the underlying FreeType library and must be
   called before trying to use any of the functionality of the ``freetype``
   module.

   However, :func:`pygame.init()` will automatically call this function
   if the ``freetype`` module is already imported. It is safe to call this
   function more than once.

   Optionally, you may specify a default *cache_size* for the Glyph cache: the
   maximum number of glyphs that will be cached at any given time by the
   module. Exceedingly small values will be automatically tuned for
   performance. Also a default pixel *resolution*, in dots per inch, can
   be given to adjust font scaling.

.. function:: quit

   | :sl:`Shut down the underlying FreeType library.`
   | :sg:`quit() -> None`

   This function closes the ``freetype`` module. After calling this
   function, you should not invoke any class, method or function related to the
   ``freetype`` module as they are likely to fail or might give unpredictable
   results. It is safe to call this function even if the module hasn't been
   initialized yet.

.. function:: get_init

   | :sl:`Returns True if the FreeType module is currently initialized.`
   | :sg:`get_init() -> bool`

   Returns ``True`` if the ``pygame.freetype`` module is currently initialized.

   .. versionadded:: 1.9.5

.. function:: was_init

   | :sl:`DEPRECATED: Use get_init() instead.`
   | :sg:`was_init() -> bool`

   DEPRECATED: Returns ``True`` if the ``pygame.freetype`` module is currently
   initialized. Use ``get_init()`` instead.

.. function:: get_cache_size

   | :sl:`Return the glyph case size`
   | :sg:`get_cache_size() -> long`

   See :func:`pygame.freetype.init()`.

.. function:: get_default_resolution

   | :sl:`Return the default pixel size in dots per inch`
   | :sg:`get_default_resolution() -> long`

   Returns the default pixel size, in dots per inch, for the module.
   The default is 72 DPI.

.. function:: set_default_resolution

   | :sl:`Set the default pixel size in dots per inch for the module`
   | :sg:`set_default_resolution([resolution])`

   Set the default pixel size, in dots per inch, for the module. If the
   optional argument is omitted or zero the resolution is reset to 72 DPI.

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested *bold* and *italic* flags. Pygame uses a small set of
   common font aliases. If the specific font you ask for is not available, a
   reasonable alternative may be used. If a suitable system font is not found
   this will fall back on loading the default pygame font.

   The font *name* can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

.. function:: get_default_font

   | :sl:`Get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the default pygame font. This is not the full path
   to the file. The file is usually in the same directory as the font module,
   but can also be bundled in a separate archive.

.. class:: Font

   | :sl:`Create a new Font instance from a supported font file.`
   | :sg:`Font(file, size=0, font_index=0, resolution=0, ucs4=False) -> Font`
   | :sg:`Font(pathlib.Path) -> Font`

   Argument *file* can be either a string representing the font's filename, a
   file-like object containing the font, or None; if None, a default,
   Pygame, font is used.

   .. _freetype-font-size-argument:

   Optionally, a *size* argument may be specified to set the default size in
   points, which determines the size of the rendered characters.
   The size can also be passed explicitly to each method call.
   Because of the way the caching   system works, specifying a default size on
   the constructor doesn't imply a performance gain over manually passing
   the size on each function call. If the font is bitmap and no *size*
   is given, the default size is set to the first available size for the font.

   If the font file has more than one font, the font to load can be chosen with
   the *index* argument. An exception is raised for an out-of-range font index
   value.

   The optional *resolution* argument sets the pixel size, in dots per inch,
   for use in scaling glyphs for this Font instance. If 0 then the default
   module value, set by :func:`init`, is used. The Font object's
   resolution can only be changed by re-initializing the Font instance.

   The optional *ucs4* argument, an integer, sets the default text translation
   mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True),
   to treat Unicode text as UCS-4, with no surrogate pairs. See
   :attr:`Font.ucs4`.

   .. attribute:: name

      | :sl:`Proper font name.`
      | :sg:`name -> string`

      Read only. Returns the real (long) name of the font, as
      recorded in the font file.

   .. attribute:: path

      | :sl:`Font file path`
      | :sg:`path -> unicode`

      Read only. Returns the path of the loaded font file

   .. attribute:: size

      | :sl:`The default point size used in rendering`
      | :sg:`size -> float`
      | :sg:`size -> (float, float)`

      Get or set the default size for text metrics and rendering. It can be
      a single point size, given as a Python ``int`` or ``float``, or a
      font ppem (width, height) ``tuple``. Size values are non-negative.
      A zero size or width represents an undefined size. In this case
      the size must be given as a method argument, or an exception is
      raised. A zero width but non-zero height is a ValueError.

      For a scalable font, a single number value is equivalent to a tuple
      with width equal height. A font can be stretched vertically with
      height set greater than width, or horizontally with width set
      greater than height. For embedded bitmaps, as listed by :meth:`get_sizes`,
      use the nominal width and height to select an available size.

      Font size differs for a non-scalable, bitmap, font. During a
      method call it must match one of the available sizes returned by
      method :meth:`get_sizes`. If not, an exception is raised.
      If the size is a single number, the size is first matched against the
      point size value. If no match, then the available size with the
      same nominal width and height is chosen.

   .. method:: get_rect

      | :sl:`Return the size and offset of rendered text`
      | :sg:`get_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -> rect`

      Gets the final dimensions and origin, in pixels, of *text* using the
      optional *size* in points, *style*, and *rotation*. For other
      relevant render properties, and for any optional argument not given,
      the default values set for the :class:`Font` instance are used.

      Returns a :class:`Rect <pygame.Rect>` instance containing the
      width and height of the text's bounding box and the position of the
      text's origin.
      The origin is useful in aligning separately rendered pieces of text.
      It gives the baseline position and bearing at the start of the text.
      See the :meth:`render_to` method for an example.

      If *text* is a char (byte) string, its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will return the bounding
      rectangle for the text passed to a previous :meth:`get_rect`,
      :meth:`render`, :meth:`render_to`, :meth:`render_raw`, or
      :meth:`render_raw_to` call. See :meth:`render_to` for more
      details.

   .. method:: get_metrics

      | :sl:`Return the glyph metrics for the given text`
      | :sg:`get_metrics(text, size=0) -> [(...), ...]`

      Returns the glyph metrics for each character in *text*.

      The glyph metrics are returned as a list of tuples. Each tuple gives
      metrics of a single character glyph. The glyph metrics are:

      ::

          (min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)

      The bounding box min_x, max_x, min_y, and max_y values are returned as
      grid-fitted pixel coordinates of type int. The advance values are
      float values.

      The calculations are done using the font's default size in points.
      Optionally you may specify another point size with the *size* argument.

      The metrics are adjusted for the current rotation, strong, and oblique
      settings.

      If text is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. attribute:: height

      | :sl:`The unscaled height of the font in font units`
      | :sg:`height -> int`

      Read only. Gets the height of the font. This is the average value of all
      glyphs in the font.

   .. attribute:: ascender

      | :sl:`The unscaled ascent of the font in font units`
      | :sg:`ascender -> int`

      Read only. Return the number of units from the font's baseline to
      the top of the bounding box.

   .. attribute:: descender

      | :sl:`The unscaled descent of the font in font units`
      | :sg:`descender -> int`

      Read only. Return the height in font units for the font descent.
      The descent is the number of units from the font's baseline to the
      bottom of the bounding box.

   .. method:: get_sized_ascender

      | :sl:`The scaled ascent of the font in pixels`
      | :sg:`get_sized_ascender(<size>=0) -> int`

      Return the number of units from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_descender

      | :sl:`The scaled descent of the font in pixels`
      | :sg:`get_sized_descender(<size>=0) -> int`

      Return the number of pixels from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_height

      | :sl:`The scaled height of the font in pixels`
      | :sg:`get_sized_height(<size>=0) -> int`

      Returns the height of the font. This is the average value of all
      glyphs in the font. It is not adjusted for strong or rotation.

   .. method:: get_sized_glyph_height

      | :sl:`The scaled bounding box height of the font in pixels`
      | :sg:`get_sized_glyph_height(<size>=0) -> int`

      Return the glyph bounding box height of the font in pixels.
      This is the average value of all glyphs in the font.
      It is not adjusted for strong or rotation.

   .. method:: get_sizes

      | :sl:`return the available sizes of embedded bitmaps`
      | :sg:`get_sizes() -> [(int, int, int, float, float), ...]`
      | :sg:`get_sizes() -> []`

      Returns a list of tuple records, one for each point size
      supported. Each tuple containing the point size, the height in pixels,
      width in pixels, horizontal ppem (nominal width) in fractional pixels,
      and vertical ppem (nominal height) in fractional pixels.

   .. method:: render

      | :sl:`Return rendered text as a surface`
      | :sg:`render(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> (Surface, Rect)`

      Returns a new :class:`Surface <pygame.Surface>`,
      with the text rendered to it
      in the color given by 'fgcolor'. If no foreground color is given,
      the default foreground color, :attr:`fgcolor <Font.fgcolor>` is used.
      If ``bgcolor`` is given, the surface
      will be filled with this color. When no background color is given,
      the surface background is transparent, zero alpha. Normally the returned
      surface has a 32 bit pixel size. However, if ``bgcolor`` is ``None``
      and anti-aliasing is disabled a monochrome 8 bit colorkey surface,
      with colorkey set for the background color, is returned.

      The return value is a tuple: the new surface and the bounding
      rectangle giving the size and origin of the rendered text.

      If an empty string is passed for text then the returned Rect is zero
      width and the height of the font.

      Optional *fgcolor*, *style*, *rotation*, and *size* arguments override
      the default values set for the :class:`Font` instance.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will render the text
      passed to a previous :meth:`get_rect`, :meth:`render`, :meth:`render_to`,
      :meth:`render_raw`, or :meth:`render_raw_to` call.
      See :meth:`render_to` for details.

   .. method:: render_to

      | :sl:`Render text onto an existing surface`
      | :sg:`render_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> Rect`

      Renders the string *text* to the :mod:`pygame.Surface` *surf*,
      at position *dest*, a (x, y) surface coordinate pair.
      If either x or y is not an integer it is converted to one if possible.
      Any sequence where the first two items are x and y positional elements
      is accepted, including a :class:`Rect <pygame.Rect>` instance.
      As with :meth:`render`,
      optional *fgcolor*, *style*, *rotation*, and *size* argument are
      available.

      If a background color *bgcolor* is given, the text bounding box is
      first filled with that color. The text is blitted next.
      Both the background fill and text rendering involve full alpha blits.
      That is, the alpha values of the foreground, background, and destination
      target surface all affect the blit.

      The return value is a rectangle giving the size and position of the
      rendered text within the surface.

      If an empty string is passed for text then the returned
      :class:`Rect <pygame.Rect>` is zero width and the height of the font.
      The rect will test False.

      Optionally, *text* can be set ``None``, which will re-render text
      passed to a previous :meth:`render_to`, :meth:`get_rect`, :meth:`render`,
      :meth:`render_raw`, or :meth:`render_raw_to` call. Primarily, this
      feature is an aid to using :meth:`render_to` in combination with
      :meth:`get_rect`. An example: ::

          def word_wrap(surf, text, font, color=(0, 0, 0)):
              font.origin = True
              words = text.split(' ')
              width, height = surf.get_size()
              line_spacing = font.get_sized_height() + 2
              x, y = 0, line_spacing
              space = font.get_rect(' ')
              for word in words:
                  bounds = font.get_rect(word)
                  if x + bounds.width + bounds.x >= width:
                      x, y = 0, y + line_spacing
                  if x + bounds.width + bounds.x >= width:
                      raise ValueError("word too wide for the surface")
                  if y + bounds.height - bounds.y >= height:
                      raise ValueError("text to long for the surface")
                  font.render_to(surf, (x, y), None, color)
                  x += bounds.width + space.width
              return x, y

      When :meth:`render_to` is called with the same
      font properties ― :attr:`size`, :attr:`style`, :attr:`strength`,
      :attr:`wide`, :attr:`antialiased`, :attr:`vertical`, :attr:`rotation`,
      :attr:`kerning`, and :attr:`use_bitmap_strikes` ― as :meth:`get_rect`,
      :meth:`render_to` will use the layout calculated by :meth:`get_rect`.
      Otherwise, :meth:`render_to` will recalculate the layout if called
      with a text string or one of the above properties has changed
      after the :meth:`get_rect` call.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. method:: render_raw

      | :sl:`Return rendered text as a string of bytes`
      | :sg:`render_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> (bytes, (int, int))`

      Like :meth:`render` but with the pixels returned as a byte string
      of 8-bit gray-scale values. The foreground color is 255, the
      background 0, useful as an alpha mask for a foreground pattern.

   .. method:: render_raw_to

      | :sl:`Render text into an array of ints`
      | :sg:`render_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> Rect`

      Render to an array object exposing an array struct interface. The array
      must be two dimensional with integer items. The default *dest* value,
      ``None``, is equivalent to position (0, 0). See :meth:`render_to`.
      As with the other render methods, *text* can be ``None`` to
      render a text string passed previously to another method.

      The return value is a :func:`pygame.Rect` giving the size and position of
      the rendered text.

   .. attribute:: style

      | :sl:`The font's style flags`
      | :sg:`style -> int`

      Gets or sets the default style of the Font. This default style will be
      used for all text rendering and size calculations unless overridden
      specifically a render or :meth:`get_rect` call.
      The style value may be a bit-wise OR of one or more of the following
      constants:

      ::

          STYLE_NORMAL
          STYLE_UNDERLINE
          STYLE_OBLIQUE
          STYLE_STRONG
          STYLE_WIDE
          STYLE_DEFAULT

      These constants may be found on the FreeType constants module.
      Optionally, the default style can be modified or obtained accessing the
      individual style attributes (underline, oblique, strong).

      The ``STYLE_OBLIQUE`` and ``STYLE_STRONG`` styles are for
      scalable fonts only. An attempt to set either for a bitmap font raises
      an AttributeError. An attempt to set either for an inactive font,
      as returned by ``Font.__new__()``, raises a RuntimeError.

      Assigning ``STYLE_DEFAULT`` to the :attr:`style` property leaves
      the property unchanged, as this property defines the default.
      The :attr:`style` property will never return ``STYLE_DEFAULT``.

   .. attribute:: underline

      | :sl:`The state of the font's underline style flag`
      | :sg:`underline -> bool`

      Gets or sets whether the font will be underlined when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: strong

      | :sl:`The state of the font's strong style flag`
      | :sg:`strong -> bool`

      Gets or sets whether the font will be bold when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: oblique

      | :sl:`The state of the font's oblique style flag`
      | :sg:`oblique -> bool`

      Gets or sets whether the font will be rendered as oblique. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the *style* parameter.

      The oblique style is only supported for scalable (outline) fonts.
      An attempt to set this style on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, setting this property raises a RuntimeError.

   .. attribute:: wide

      | :sl:`The state of the font's wide style flag`
      | :sg:`wide -> bool`

      Gets or sets whether the font will be stretched horizontally
      when drawing text. It produces a result similar to
      :class:`pygame.font.Font`'s bold. This style not available for
      rotated text.

   .. attribute:: strength

      | :sl:`The strength associated with the strong or wide font styles`
      | :sg:`strength -> float`

      The amount by which a font glyph's size is enlarged for the
      strong or wide transformations, as a fraction of the untransformed
      size. For the wide style only the horizontal dimension is
      increased. For strong text both the horizontal and vertical
      dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is
      equivalent to the :class:`pygame.font.Font` bold style.
      The default is 0.02778 ( 1/36 ).

      The strength style is only supported for scalable (outline) fonts.
      An attempt to set this property on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, assignment to this property raises a RuntimeError.

   .. attribute:: underline_adjustment

      | :sl:`Adjustment factor for the underline position`
      | :sg:`underline_adjustment -> float`

      Gets or sets a factor which, when positive, is multiplied with the
      font's underline offset to adjust the underline position. A negative
      value turns an underline into a strike-through or overline. It is
      multiplied with the ascender. Accepted values range between -2.0 and 2.0
      inclusive. A value of 0.5 closely matches Tango underlining. A value of
      1.0 mimics :class:`pygame.font.Font` underlining.

   .. attribute:: fixed_width

      | :sl:`Gets whether the font is fixed-width`
      | :sg:`fixed_width -> bool`

      Read only. Returns ``True`` if the font contains fixed-width
      characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).

   .. attribute:: fixed_sizes

      | :sl:`the number of available bitmap sizes for the font`
      | :sg:`fixed_sizes -> int`

      Read only. Returns the number of point sizes for which the font contains
      bitmap character images. If zero then the font is not a bitmap font.
      A scalable font may contain pre-rendered point sizes as strikes.

   .. attribute:: scalable

      | :sl:`Gets whether the font is scalable`
      | :sg:`scalable -> bool`

      Read only. Returns ``True`` if the font contains outline glyphs.
      If so, the point size is not limited to available bitmap sizes.

   .. attribute:: use_bitmap_strikes

      | :sl:`allow the use of embedded bitmaps in an outline font file`
      | :sg:`use_bitmap_strikes -> bool`

      Some scalable fonts include embedded bitmaps for particular point
      sizes. This property controls whether or not those bitmap strikes
      are used. Set it ``False`` to disable the loading of any bitmap
      strike. Set it ``True``, the default, to permit bitmap strikes
      for a non-rotated render with no style other than :attr:`wide` or
      :attr:`underline`. This property is ignored for bitmap fonts.

      See also :attr:`fixed_sizes` and :meth:`get_sizes`.

   .. attribute:: antialiased

      | :sl:`Font anti-aliasing mode`
      | :sg:`antialiased -> bool`

      Gets or sets the font's anti-aliasing mode. This defaults to
      ``True`` on all fonts, which are rendered with full 8 bit blending.

      Set to ``False`` to do monochrome rendering. This should
      provide a small speed gain and reduce cache memory size.

   .. attribute:: kerning

      | :sl:`Character kerning mode`
      | :sg:`kerning -> bool`

      Gets or sets the font's kerning mode. This defaults to ``False``
      on all fonts, which will be rendered without kerning.

      Set to ``True`` to add kerning between character pairs, if supported
      by the font, when positioning glyphs.

   .. attribute:: vertical

      | :sl:`Font vertical mode`
      | :sg:`vertical -> bool`

      Gets or sets whether the characters are laid out vertically rather
      than horizontally. May be useful when rendering Kanji or some other
      vertical script.

      Set to ``True`` to switch to a vertical text layout. The default
      is ``False``, place horizontally.

      Note that the :class:`Font` class does not automatically determine
      script orientation. Vertical layout must be selected explicitly.

      Also note that several font formats (especially bitmap based ones) don't
      contain the necessary metrics to draw glyphs vertically, so drawing in
      those cases will give unspecified results.

   .. attribute:: rotation

      | :sl:`text rotation in degrees counterclockwise`
      | :sg:`rotation -> int`

      Gets or sets the baseline angle of the rendered text. The angle is
      represented as integer degrees. The default angle is 0, with horizontal
      text rendered along the X-axis, and vertical text along the Y-axis.
      A positive value rotates these axes counterclockwise that many degrees.
      A negative angle corresponds to a clockwise rotation. The rotation
      value is normalized to a value within the range 0 to 359 inclusive
      (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,
      720 -> 720 - (2 * 360) -> 0).

      Only scalable (outline) fonts can be rotated. An attempt to change
      the rotation of a bitmap font raises an AttributeError.
      An attempt to change the rotation of an inactive font instance, as
      returned by ``Font.__new__()``, raises a RuntimeError.

   .. attribute:: fgcolor

      | :sl:`default foreground color`
      | :sg:`fgcolor -> Color`

      Gets or sets the default glyph rendering color. It is initially opaque
      black ― (0, 0, 0, 255). Applies to :meth:`render` and :meth:`render_to`.

   .. attribute:: bgcolor

      | :sl:`default background color`
      | :sg:`bgcolor -> Color`

      Gets or sets the default background rendering color. Initially it is
      unset and text will render with a transparent background by default.
      Applies to :meth:`render` and :meth:`render_to`.

   .. versionadded:: 2.0.0

   .. attribute:: origin

      | :sl:`Font render to text origin mode`
      | :sg:`origin -> bool`

      If set ``True``, :meth:`render_to` and :meth:`render_raw_to` will
      take the *dest* position to be that of the text origin, as opposed to
      the top-left corner of the bounding box. See :meth:`get_rect` for
      details.

   .. attribute:: pad

      | :sl:`padded boundary mode`
      | :sg:`pad -> bool`

      If set ``True``, then the text boundary rectangle will be inflated
      to match that of :class:`font.Font <pygame.font.Font>`.
      Otherwise, the boundary rectangle is just large enough for the text.

   .. attribute:: ucs4

      | :sl:`Enable UCS-4 mode`
      | :sg:`ucs4 -> bool`

      Gets or sets the decoding of Unicode text. By default, the
      freetype module performs UTF-16 surrogate pair decoding on Unicode text.
      This allows 32-bit escape sequences ('\Uxxxxxxxx') between 0x10000 and
      0x10FFFF to represent their corresponding UTF-32 code points on Python
      interpreters built with a UCS-2 Unicode type (on Windows, for instance).
      It also means character values within the UTF-16 surrogate area (0xD800
      to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate
      pair will raise a UnicodeEncodeError. Setting ucs4 ``True`` turns
      surrogate pair decoding off, allowing access the full UCS-4 character
      range to a Python interpreter built with four-byte Unicode character
      support.

   .. attribute:: resolution

      | :sl:`Pixel resolution in dots per inch`
      | :sg:`resolution -> int`

      Read only. Gets pixel size used in scaling font glyphs for this
      :class:`Font` instance.


--- Contenu du fichier : image.rst.txt ---
.. include:: common.txt

:mod:`pygame.image`
===================

.. module:: pygame.image
   :synopsis: pygame module for loading and saving images

| :sl:`pygame module for image transfer`

The image module contains functions for loading and saving pictures, as well as
transferring Surfaces to formats usable by other packages.

Note that there is no Image class; an image is loaded as a Surface object. The
Surface class allows manipulation (drawing lines, setting pixels, capturing
regions, etc.).

In the vast majority of installations, pygame is built to support extended
formats, using the SDL_Image library behind the scenes. However, some
installations may only support uncompressed ``BMP`` images. With full image
support, the :func:`pygame.image.load()` function can load the following
formats.

   * ``BMP``

   * ``GIF`` (non-animated)

   * ``JPEG``

   * ``LBM`` (and ``PBM``, ``PGM``, ``PPM``)

   * ``PCX``

   * ``PNG``
   
   * ``PNM``

   * ``SVG`` (limited support, using Nano SVG)

   * ``TGA`` (uncompressed)

   * ``TIFF``

   * ``WEBP``

   * ``XPM``
   
   
.. versionadded:: 2.0 Loading SVG, WebP, PNM

Saving images only supports a limited set of formats. You can save to the
following formats.

   * ``BMP``

   * ``JPEG``

   * ``PNG``

   * ``TGA``
   

``JPEG`` and ``JPG``, as well as ``TIF`` and ``TIFF`` refer to the same file format

.. versionadded:: 1.8 Saving PNG and JPEG files.


.. function:: load

   | :sl:`load new image from a file (or file-like object)`
   | :sg:`load(filename) -> Surface`
   | :sg:`load(fileobj, namehint="") -> Surface`

   Load an image from a file source. You can pass either a filename, a Python
   file-like object, or a pathlib.Path.

   Pygame will automatically determine the image type (e.g., ``GIF`` or bitmap)
   and create a new Surface object from the data. In some cases it will need to
   know the file extension (e.g., ``GIF`` images should end in ".gif"). If you
   pass a raw file-like object, you may also want to pass the original filename
   as the namehint argument.

   The returned Surface will contain the same color format, colorkey and alpha
   transparency as the file it came from. You will often want to call
   :func:`pygame.Surface.convert()` with no arguments, to create a copy that
   will draw more quickly on the screen.

   For alpha transparency, like in .png images, use the
   :func:`pygame.Surface.convert_alpha()` method after loading so that the
   image has per pixel transparency.

   Pygame may not always be built to support all image formats. At minimum it
   will support uncompressed ``BMP``. If :func:`pygame.image.get_extended()`
   returns ``True``, you should be able to load most images (including PNG, JPG
   and GIF).

   You should use :func:`os.path.join()` for compatibility.

   ::

     eg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))

   .. ## pygame.image.load ##

.. function:: save

   | :sl:`save an image to file (or file-like object)`
   | :sg:`save(Surface, filename) -> None`
   | :sg:`save(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``BMP``, ``TGA``, ``PNG``, or
   ``JPEG`` image. If the filename extension is unrecognized it will default to
   ``TGA``. Both ``TGA``, and ``BMP`` file formats create uncompressed files.
   You can pass a filename, a pathlib.Path or a Python file-like object.
   For file-like object, the image is saved to ``TGA`` format unless
   a namehint with a recognizable extension is passed in.

   .. note:: When saving to a file-like object, it seems that for most formats,
             the object needs to be flushed after saving to it to make loading
             from it possible.

   .. versionchanged:: 1.8 Saving PNG and JPEG files.
   .. versionchanged:: 2.0.0
                       The ``namehint`` parameter was added to make it possible
                       to save other formats than ``TGA`` to a file-like object.
                       Saving to a file-like object with JPEG is possible.

   .. ## pygame.image.save ##

.. function:: get_sdl_image_version

   | :sl:`get version number of the SDL_Image library being used`
   | :sg:`get_sdl_image_version(linked=True) -> None`
   | :sg:`get_sdl_image_version(linked=True) -> (major, minor, patch)`

   If pygame is built with extended image formats, then this function will
   return the SDL_Image library's version number as a tuple of 3 integers
   ``(major, minor, patch)``. If not, then it will return ``None``.

   ``linked=True`` is the default behavior and the function will return the
   version of the library that Pygame is linked against, while ``linked=False``
   will return the version of the library that Pygame is compiled against.

   .. versionadded:: 2.0.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

   .. ## pygame.image.get_sdl_image_version ##

.. function:: get_extended

   | :sl:`test if extended image formats can be loaded`
   | :sg:`get_extended() -> bool`

   If pygame is built with extended image formats this function will return
   True. It is still not possible to determine which formats will be available,
   but generally you will be able to load them all.

   .. ## pygame.image.get_extended ##

.. function:: tostring

   | :sl:`transfer image to byte buffer`
   | :sg:`tostring(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first

   .. note:: it is preferred to use :func:`tobytes` as of pygame 2.1.3

   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.tostring ##

.. function:: tobytes

   | :sl:`transfer image to byte buffer`
   | :sg:`tobytes(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped      

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first
   
   .. note:: this function is an alias for :func:`tostring`. The use of this
             function is recommended over :func:`tostring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.tobytes ##


.. function:: fromstring

   | :sl:`create new Surface from a byte buffer`
   | :sg:`fromstring(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tostring()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: it is preferred to use :func:`frombytes` as of pygame 2.1.3

   .. ## pygame.image.fromstring ##

.. function:: frombytes

   | :sl:`create new Surface from a byte buffer`
   | :sg:`frombytes(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tobytes()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: this function is an alias for :func:`fromstring`. The use of this
             function is recommended over :func:`fromstring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.frombytes ##

.. function:: frombuffer

   | :sl:`create a new Surface that shares data inside a bytes buffer`
   | :sg:`frombuffer(buffer, size, format) -> Surface`

   Create a new Surface that shares pixel data directly from a buffer. This
   buffer can be bytes, a bytearray, a memoryview, a
   :class:`pygame.BufferProxy`, or any object that supports the buffer protocol.
   This method takes similar arguments to :func:`pygame.image.fromstring()`, but
   is unable to vertically flip the source data.

   This will run much faster than :func:`pygame.image.fromstring`, since no
   pixel data must be allocated and copied.

   It accepts the following 'format' arguments:

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``BGR``, 24-bit image, red and blue channels swapped.

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first

      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped
  
   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.frombuffer ##

.. function:: load_basic

   | :sl:`load new BMP image from a file (or file-like object)`
   | :sg:`load_basic(file) -> Surface`

   Load an image from a file source. You can pass either a filename or a Python
   file-like object, or a pathlib.Path.

   This function only supports loading "basic" image format, ie ``BMP``
   format.
   This function is always available, no matter how pygame was built.

   .. ## pygame.image.load_basic ##

.. function:: load_extended

   | :sl:`load an image from a file (or file-like object)`
   | :sg:`load_extended(filename) -> Surface`
   | :sg:`load_extended(fileobj, namehint="") -> Surface`

   This function is similar to :func:`pygame.image.load()`, except that this
   function can only be used if pygame was built with extended image format
   support.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.load_extended ##

.. function:: save_extended

   | :sl:`save a png/jpg image to file (or file-like object)`
   | :sg:`save_extended(Surface, filename) -> None`
   | :sg:`save_extended(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``PNG`` or ``JPEG`` image.

   In case the image is being saved to a file-like object, this function
   uses the namehint argument to determine the format of the file being
   saved. Saves to ``JPEG`` in case the namehint was not specified while
   saving to a file-like object.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.save_extended ##

.. ## pygame.image ##


--- Contenu du fichier : draw.rst.txt ---
.. include:: common.txt

:mod:`pygame.draw`
==================

.. module:: pygame.draw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

Draw several simple shapes to a surface. These functions will work for
rendering to any format of surface.

Most of the functions take a width argument to represent the size of stroke
(thickness) around the edge of the shape. If a width of 0 is passed the shape
will be filled (solid).

All the drawing functions respect the clip area for the surface and will be
constrained to that area. The functions return a rectangle representing the
bounding area of changed pixels. This bounding rectangle is the 'minimum'
bounding box that encloses the affected area.

All the drawing functions accept a color argument that can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)
   - an integer value that has been mapped to the surface's pixel format
     (see :func:`pygame.Surface.map_rgb` and :func:`pygame.Surface.unmap_rgb`)

A color's alpha value will be written directly into the surface (if the
surface contains pixel alphas), but the draw function will not draw
transparently.

These functions temporarily lock the surface they are operating on. Many
sequential drawing calls can be sped up by locking and unlocking the surface
object around the draw calls (see :func:`pygame.Surface.lock` and
:func:`pygame.Surface.unlock`).

.. note ::
   See the :mod:`pygame.gfxdraw` module for alternative draw methods.


.. function:: rect

   | :sl:`draw a rectangle`
   | :sg:`rect(surface, color, rect) -> Rect`
   | :sg:`rect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect`

   Draws a rectangle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to draw, position and dimensions
   :param int width: (optional) used for line thickness or to indicate that
      the rectangle is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the rectangle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |
      
      .. versionchanged:: 2.1.1 
          Drawing rects with width now draws the width correctly inside the 
          rect's area, rather than using an internal call to draw.lines(), 
          which had half the width spill outside the rect area.

   :param int border_radius: (optional) used for drawing rectangle with rounded corners.
      The supported range is [0, min(height, width) / 2], with 0 representing a rectangle
      without rounded corners.
   :param int border_top_left_radius: (optional) used for setting the value of top left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_top_right_radius: (optional) used for setting the value of top right
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_left_radius: (optional) used for setting the value of bottom left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_right_radius: (optional) used for setting the value of bottom right
      border. If you don't set this value, it will use the border_radius value.

         | if ``border_radius < 1`` it will draw rectangle without rounded corners
         | if any of border radii has the value ``< 0`` it will use value of the border_radius
         | If sum of radii on the same side of the rectangle is greater than the rect size the radii
         | will get scaled

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. note::
      The :func:`pygame.Surface.fill()` method works just as well for drawing
      filled rectangles and can be hardware accelerated on some platforms.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
   .. versionchanged:: 2.0.0.dev8 Added support for border radius.

   .. ## pygame.draw.rect ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, color, points) -> Rect`
   | :sg:`polygon(surface, color, points, width=0) -> Rect`

   Draws a polygon on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param points: a sequence of 3 or more (x, y) coordinates that make up the
      vertices of the polygon, each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats,
      e.g. ``[(x1, y1), (x2, y2), (x3, y3)]``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness or to indicate that
      the polygon is to be filled

         | if width == 0, (default) fill the polygon
         | if width > 0, used for line thickness
         | if width < 0, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will grow
            outside the original boundary of the polygon. For more details on
            how the thickness for edge lines grow, refer to the ``width`` notes
            of the :func:`pygame.draw.line` function.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. note::
       For an aapolygon, use :func:`aalines()` with ``closed=True``.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.polygon ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, color, center, radius) -> Rect`
   | :sg:`circle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect`

   Draws a circle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param center: center point of the circle as a sequence of 2 ints/floats,
      e.g. ``(x, y)``
   :type center: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param radius: radius of the circle, measured from the ``center`` parameter,
      nothing will be drawn if the ``radius`` is less than 1
   :type radius: int or float
   :param int width: (optional) used for line thickness or to indicate that
      the circle is to be filled

         | if ``width == 0``, (default) fill the circle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward.
   :param bool draw_top_right: (optional) if this is set to True then the top right corner
      of the circle will be drawn
   :param bool draw_top_left: (optional) if this is set to True then the top left corner
      of the circle will be drawn
   :param bool draw_bottom_left: (optional) if this is set to True then the bottom left corner
      of the circle will be drawn
   :param bool draw_bottom_right: (optional) if this is set to True then the bottom right corner
      of the circle will be drawn

         | if any of the draw_circle_part is True then it will draw all circle parts that have the True
         | value, otherwise it will draw the entire circle.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``center`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``center`` is not a sequence of two numbers
   :raises TypeError: if ``radius`` is not a number

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
      Nothing is drawn when the radius is 0 (a pixel at the ``center`` coordinates
      used to be drawn when the radius equaled 0).
      Floats, and Vector2 are accepted for the ``center`` param.
      The drawing algorithm was improved to look more like a circle.
   .. versionchanged:: 2.0.0.dev8 Added support for drawing circle quadrants.

   .. ## pygame.draw.circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, color, rect) -> Rect`
   | :sg:`ellipse(surface, color, rect, width=0) -> Rect`

   Draws an ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse, the ellipse will be centered inside the rectangle and bounded
      by it
   :param int width: (optional) used for line thickness or to indicate that
      the ellipse is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the ellipse
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.ellipse ##

.. function:: arc

   | :sl:`draw an elliptical arc`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle) -> Rect`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect`

   Draws an elliptical arc on the given surface.

   The two angle arguments are given in radians and indicate the start and stop
   positions of the arc. The arc is drawn in a counterclockwise direction from
   the ``start_angle`` to the ``stop_angle``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse which the arc will be based on, the ellipse will be centered
      inside the rectangle
   :param float start_angle: start angle of the arc in radians
   :param float stop_angle: stop angle of the arc in
      radians

         | if ``start_angle < stop_angle``, the arc is drawn in a
            counterclockwise direction from the ``start_angle`` to the
            ``stop_angle``
         | if ``start_angle > stop_angle``, tau (tau == 2 * pi) will be added
            to the ``stop_angle``, if the resulting stop angle value is greater
            than the ``start_angle`` the above ``start_angle < stop_angle`` case
            applies, otherwise nothing will be drawn
         | if ``start_angle == stop_angle``, nothing will be drawn
         |

   :param int width: (optional) used for line thickness (not to be confused
      with the width value of the ``rect`` parameter)

         | if ``width == 0``, nothing will be drawn
         | if ``width > 0``, (default is 1) used for line thickness
         | if ``width < 0``, same as ``width == 0``

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.arc ##

.. function:: line

   | :sl:`draw a straight line`
   | :sg:`line(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`line(surface, color, start_pos, end_pos, width=1) -> Rect`

   Draws a straight line on the given surface. There are no endcaps. For thick
   lines the ends are squared off.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, lines will grow as follows.

            For odd ``width`` values, the thickness of each line grows with the
            original line being in the center.

            For even ``width`` values, the thickness of each line grows with the
            original line being offset from the center (as there is no exact
            center line drawn). As a result, lines with a slope < 1
            (horizontal-ish) will have 1 more pixel of thickness below the
            original line (in the y direction). Lines with a slope >= 1
            (vertical-ish) will have 1 more pixel of thickness to the right of
            the original line (in the x direction).

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.line ##

.. function:: lines

   | :sl:`draw multiple contiguous straight line segments`
   | :sg:`lines(surface, color, closed, points) -> Rect`
   | :sg:`lines(surface, color, closed, points, width=1) -> Rect`

   Draws a sequence of contiguous straight lines on the given surface. There are
   no endcaps or miter joints. For thick lines the ends are squared off.
   Drawing thick lines with sharp corners can have undesired looking results.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1`` refer to the ``width`` notes
            of :func:`line` for details on how thick lines grow.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.lines ##

.. function:: aaline

   | :sl:`draw a straight antialiased line`
   | :sg:`aaline(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`aaline(surface, color, start_pos, end_pos, blend=1) -> Rect`

   Draws a straight antialiased line on the given surface.

   The line has a thickness of one pixel and the endpoints have a height and
   width of one pixel each.

   The way a line and its endpoints are drawn:
      If both endpoints are equal, only a single pixel is drawn (after
      rounding floats to nearest integer).

      Otherwise if the line is not steep (i.e. if the length along the x-axis
      is greater than the height along the y-axis):

         For each endpoint:

            If ``x``, the endpoint's x-coordinate, is a whole number find
            which pixels would be covered by it and draw them.

            Otherwise:

               Calculate the position of the nearest point with a whole number
               for its x-coordinate, when extending the line past the
               endpoint.

               Find which pixels would be covered and how much by that point.

               If the endpoint is the left one, multiply the coverage by (1 -
               the decimal part of ``x``).

               Otherwise multiply the coverage by the decimal part of ``x``.

               Then draw those pixels.

               *e.g.:*
                  | The left endpoint of the line ``((1, 1.3), (5, 3))`` would
                    cover 70% of the pixel ``(1, 1)`` and 30% of the pixel
                    ``(1, 2)`` while the right one would cover 100% of the
                    pixel ``(5, 3)``.
                  | The left endpoint of the line ``((1.2, 1.4), (4.6, 3.1))``
                    would cover 56% *(i.e. 0.8 * 70%)* of the pixel ``(1, 1)``
                    and 24% *(i.e. 0.8 * 30%)* of the pixel ``(1, 2)`` while
                    the right one would cover 42% *(i.e. 0.6 * 70%)* of the
                    pixel ``(5, 3)`` and 18% *(i.e. 0.6 * 30%)* of the pixel
                    ``(5, 4)`` while the right

         Then for each point between the endpoints, along the line, whose
         x-coordinate is a whole number:

            Find which pixels would be covered and how much by that point and
            draw them.

            *e.g.:*
               | The points along the line ``((1, 1), (4, 2.5))`` would be
                 ``(2, 1.5)`` and ``(3, 2)`` and would cover 50% of the pixel
                 ``(2, 1)``, 50% of the pixel ``(2, 2)`` and 100% of the pixel
                 ``(3, 2)``.
               | The points along the line ``((1.2, 1.4), (4.6, 3.1))`` would
                 be ``(2, 1.8)`` (covering 20% of the pixel ``(2, 1)`` and 80%
                 of the pixel ``(2, 2)``), ``(3, 2.3)`` (covering 70% of the
                 pixel ``(3, 2)`` and 30% of the pixel ``(3, 3)``) and ``(4,
                 2.8)`` (covering 20% of the pixel ``(2, 1)`` and 80% of the
                 pixel ``(2, 2)``)

      Otherwise do the same for steep lines as for non-steep lines except
      along the y-axis instead of the x-axis (using ``y`` instead of ``x``,
      top instead of left and bottom instead of right).

   .. note::
      Regarding float values for coordinates, a point with coordinate
      consisting of two whole numbers is considered being right in the center
      of said pixel (and having a height and width of 1 pixel would therefore
      completely cover it), while a point with coordinate where one (or both)
      of the numbers have non-zero decimal parts would be partially covering
      two (or four if both numbers have decimal parts) adjacent pixels, *e.g.*
      the point ``(1.4, 2)`` covers 60% of the pixel ``(1, 2)`` and 40% of the
      pixel ``(2,2)``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int blend: (optional) (deprecated) if non-zero (default) the line will be blended
      with the surface's existing pixel shades, otherwise it will overwrite them

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aaline ##

.. function:: aalines

   | :sl:`draw multiple contiguous straight antialiased line segments`
   | :sg:`aalines(surface, color, closed, points) -> Rect`
   | :sg:`aalines(surface, color, closed, points, blend=1) -> Rect`

   Draws a sequence of contiguous straight antialiased lines on the given
   surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int blend: (optional) (deprecated) if non-zero (default) each line will be blended
      with the surface's existing pixel shades, otherwise the pixels will be
      overwritten

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aalines ##

.. ## pygame.draw ##

.. figure:: code_examples/draw_module_example.png
   :alt: draw module example

   Example code for draw module.

.. literalinclude:: code_examples/draw_module_example.py



--- Contenu du fichier : rect.rst.txt ---
.. include:: common.txt

:mod:`pygame.Rect`
==================

.. currentmodule:: pygame

.. class:: Rect

   | :sl:`pygame object for storing rectangular coordinates`
   | :sg:`Rect(left, top, width, height) -> Rect`
   | :sg:`Rect((left, top), (width, height)) -> Rect`
   | :sg:`Rect(object) -> Rect`

   Pygame uses Rect objects to store and manipulate rectangular areas. A Rect
   can be created from a combination of left, top, width, and height values.
   Rects can also be created from Python objects that are already a Rect or
   have an attribute named "rect".

   Any Pygame function that requires a Rect argument also accepts any of these
   values to construct a Rect. This makes it easier to create Rects on the fly
   as arguments for functions.

   The Rect functions that change the position or size of a Rect return a new
   copy of the Rect with the affected changes. The original Rect is not
   modified. Some methods have an alternate "in-place" version that returns
   None but affects the original Rect. These "in-place" methods are denoted
   with the "ip" suffix.

   The Rect object has several virtual attributes which can be used to move and
   align the Rect:

   ::

       x,y
       top, left, bottom, right
       topleft, bottomleft, topright, bottomright
       midtop, midleft, midbottom, midright
       center, centerx, centery
       size, width, height
       w,h

   All of these attributes can be assigned to:

   ::

       rect1.right = 10
       rect2.center = (20,30)

   Assigning to size, width or height changes the dimensions of the rectangle;
   all other assignments move the rectangle without resizing it. Notice that
   some attributes are integers and others are pairs of integers.

   If a Rect has a nonzero width or height, it will return ``True`` for a
   nonzero test. Some methods return a Rect with 0 size to represent an invalid
   rectangle. A Rect with a 0 size will not collide when using collision
   detection methods (e.g. :meth:`collidepoint`, :meth:`colliderect`, etc.).

   The coordinates for Rect objects are all integers. The size values can be
   programmed to have negative values, but these are considered illegal Rects
   for most operations.

   There are several collision tests between other rectangles. Most python
   containers can be searched for collisions against a single Rect.

   The area covered by a Rect does not include the right- and bottom-most edge
   of pixels. If one Rect's bottom border is another Rect's top border (i.e.,
   rect1.bottom=rect2.top), the two meet exactly on the screen but do not
   overlap, and ``rect1.colliderect(rect2)`` returns false.

   The Rect object is also iterable:

   ::

      r = Rect(0, 1, 2, 3)
      x, y, w, h = r

   .. versionadded:: 1.9.2
      The Rect class can be subclassed. Methods such as ``copy()`` and ``move()``
      will recognize this and return instances of the subclass.
      However, the subclass's ``__init__()`` method is not called,
      and ``__new__()`` is assumed to take no arguments. So these methods should be
      overridden if any extra attributes need to be copied.

   .. method:: copy

      | :sl:`copy the rectangle`
      | :sg:`copy() -> Rect`

      Returns a new rectangle having the same position and size as the original.

      New in pygame 1.9

      .. ## Rect.copy ##

   .. method:: move

      | :sl:`moves the rectangle`
      | :sg:`move(x, y) -> Rect`

      Returns a new rectangle that is moved by the given offset. The x and y
      arguments can be any integer value, positive or negative.

      .. ## Rect.move ##

   .. method:: move_ip

      | :sl:`moves the rectangle, in place`
      | :sg:`move_ip(x, y) -> None`

      Same as the ``Rect.move()`` method, but operates in place.

      .. ## Rect.move_ip ##

   .. method:: inflate

      | :sl:`grow or shrink the rectangle size`
      | :sg:`inflate(x, y) -> Rect`

      Returns a new rectangle with the size changed by the given offset. The
      rectangle remains centered around its current center. Negative values
      will shrink the rectangle. Note, uses integers, if the offset given is
      too small(< 2 > -2), center will be off.

      .. ## Rect.inflate ##

   .. method:: inflate_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`inflate_ip(x, y) -> None`

      Same as the ``Rect.inflate()`` method, but operates in place.

      .. ## Rect.inflate_ip ##

   .. method:: scale_by

      | :sl:`scale the rectangle by given a multiplier`
      | :sg:`scale_by(scalar) -> Rect`
      | :sg:`scale_by(scalex, scaley) -> Rect`

      Returns a new rectangle with the size scaled by the given multipliers.
      The rectangle remains centered around its current center. A single 
      scalar or separate width and height scalars are allowed. Values above
      one will increase the size of the rectangle, whereas values between
      zero and one will decrease the size of the rectangle.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by ##

   .. method:: scale_by_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`scale_by_ip(scalar) -> None`
      | :sg:`scale_by_ip(scalex, scaley) -> None`

      Same as the ``Rect.scale_by()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by_ip ##

   .. method:: update

      | :sl:`sets the position and size of the rectangle`
      | :sg:`update(left, top, width, height) -> None`
      | :sg:`update((left, top), (width, height)) -> None`
      | :sg:`update(object) -> None`

      Sets the position and size of the rectangle, in place. See
      parameters for :meth:`pygame.Rect` for the parameters of this function.

      .. versionadded:: 2.0.1

      .. ## Rect.update ##

   .. method:: clamp

      | :sl:`moves the rectangle inside another`
      | :sg:`clamp(Rect) -> Rect`

      Returns a new rectangle that is moved to be completely inside the
      argument Rect. If the rectangle is too large to fit inside, it is
      centered inside the argument Rect, but its size is not changed.

      .. ## Rect.clamp ##

   .. method:: clamp_ip

      | :sl:`moves the rectangle inside another, in place`
      | :sg:`clamp_ip(Rect) -> None`

      Same as the ``Rect.clamp()`` method, but operates in place.

      .. ## Rect.clamp_ip ##

   .. method:: clip

      | :sl:`crops a rectangle inside another`
      | :sg:`clip(Rect) -> Rect`

      Returns a new rectangle that is cropped to be completely inside the
      argument Rect. If the two rectangles do not overlap to begin with, a Rect
      with 0 size is returned.

      .. ## Rect.clip ##

   .. method:: clipline

      | :sl:`crops a line inside a rectangle`
      | :sg:`clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(x1, y1, x2, y2) -> ()`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ()`
      | :sg:`clipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1, x2, y2)) -> ()`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ()`

      Returns the coordinates of a line that is cropped to be completely inside
      the rectangle. If the line does not overlap the rectangle, then an empty
      tuple is returned.

      The line to crop can be any of the following formats (floats can be used
      in place of ints, but they will be truncated):

         - four ints
         - 2 lists/tuples/Vector2s of 2 ints
         - a list/tuple of four ints
         - a list/tuple of 2 lists/tuples/Vector2s of 2 ints

      :returns: a tuple with the coordinates of the given line cropped to be
         completely inside the rectangle is returned, if the given line does
         not overlap the rectangle, an empty tuple is returned
      :rtype: tuple(tuple(int, int), tuple(int, int)) or ()

      :raises TypeError: if the line coordinates are not given as one of the
         above described line formats

      .. note ::
         This method can be used for collision detection between a rect and a
         line. See example code below.

      .. note ::
         The ``rect.bottom`` and ``rect.right`` attributes of a
         :mod:`pygame.Rect` always lie one pixel outside of its actual border.

      ::

         # Example using clipline().
         clipped_line = rect.clipline(line)

         if clipped_line:
             # If clipped_line is not an empty tuple then the line
             # collides/overlaps with the rect. The returned value contains
             # the endpoints of the clipped line.
             start, end = clipped_line
             x1, y1 = start
             x2, y2 = end
         else:
             print("No clipping. The line is fully outside the rect.")

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. versionadded:: 2.0.0

      .. ## Rect.clipline ##

   .. method:: union

      | :sl:`joins two rectangles into one`
      | :sg:`union(Rect) -> Rect`

      Returns a new rectangle that completely covers the area of the two
      provided rectangles. There may be area inside the new Rect that is not
      covered by the originals.

      .. ## Rect.union ##

   .. method:: union_ip

      | :sl:`joins two rectangles into one, in place`
      | :sg:`union_ip(Rect) -> None`

      Same as the ``Rect.union()`` method, but operates in place.

      .. ## Rect.union_ip ##

   .. method:: unionall

      | :sl:`the union of many rectangles`
      | :sg:`unionall(Rect_sequence) -> Rect`

      Returns the union of one rectangle with a sequence of many rectangles.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall ##

   .. method:: unionall_ip

      | :sl:`the union of many rectangles, in place`
      | :sg:`unionall_ip(Rect_sequence) -> None`

      The same as the ``Rect.unionall()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall_ip ##

   .. method:: fit

      | :sl:`resize and move a rectangle with aspect ratio`
      | :sg:`fit(Rect) -> Rect`

      Returns a new rectangle that is moved and resized to fit another. The
      aspect ratio of the original Rect is preserved, so the new rectangle may
      be smaller than the target in either width or height.

      .. ## Rect.fit ##

   .. method:: normalize

      | :sl:`correct negative sizes`
      | :sg:`normalize() -> None`

      This will flip the width or height of a rectangle if it has a negative
      size. The rectangle will remain in the same place, with only the sides
      swapped.

      .. ## Rect.normalize ##

   .. method:: contains

      | :sl:`test if one rectangle is inside another`
      | :sg:`contains(Rect) -> bool`

      Returns true when the argument is completely inside the Rect.

      .. ## Rect.contains ##

   .. method:: collidepoint

      | :sl:`test if a point is inside a rectangle`
      | :sg:`collidepoint(x, y) -> bool`
      | :sg:`collidepoint((x,y)) -> bool`

      Returns true if the given point is inside the rectangle. A point along
      the right or bottom edge is not considered to be inside the rectangle.

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.collidepoint ##

   .. method:: colliderect

      | :sl:`test if two rectangles overlap`
      | :sg:`colliderect(Rect) -> bool`

      Returns true if any portion of either rectangle overlap (except the
      top+bottom or left+right edges).

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.colliderect ##

   .. method:: collidelist

      | :sl:`test if one rectangle in a list intersects`
      | :sg:`collidelist(list) -> index`

      Test whether the rectangle collides with any in a sequence of rectangles.
      The index of the first collision found is returned. If no collisions are
      found an index of -1 is returned.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelist ##

   .. method:: collidelistall

      | :sl:`test if all rectangles in a list intersect`
      | :sg:`collidelistall(list) -> indices`

      Returns a list of all the indices that contain rectangles that collide
      with the Rect. If no intersecting rectangles are found, an empty list is
      returned.

      Not only Rects are valid arguments, but these are all valid calls:

      .. code-block:: python
    
          Rect = pygame.Rect
          r = Rect(0, 0, 10, 10)
          
          list_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]
          indices0 = r.collidelistall(list_of_rects)
          
          list_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]
          indices1 = r.collidelistall(list_of_lists)
          
          list_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]
          indices2 = r.collidelistall(list_of_tuples)
          
          list_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]
          indices3 = r.collidelistall(list_of_double_tuples)
          
          class ObjectWithRectAttribute(object):
              def __init__(self, r):
                  self.rect = r
          
          list_of_object_with_rect_attribute = [
              ObjectWithRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices4 = r.collidelistall(list_of_object_with_rect_attribute)
          
          class ObjectWithCallableRectAttribute(object):
              def __init__(self, r):
                  self._rect = r
          
              def rect(self):
                  return self._rect
          
          list_of_object_with_callable_rect = [
              ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices5 = r.collidelistall(list_of_object_with_callable_rect)

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelistall ##

   .. method:: collideobjects

      | :sl:`test if any object in a list intersects`
      | :sg:`collideobjects(rect_list) -> object`
      | :sg:`collideobjects(obj_list, key=func) -> object`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjects feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Test whether the rectangle collides with any object in the sequence.
      The object of the first collision found is returned. If no collisions are
      found then ``None`` is returned

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
          ]

          # collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object
          collision = r.collideobjects(
              objects, key=lambda o: o.collision_box
          )  # -> <ObjectWithSomRectAttribute("B", [1, 1, 10, 10], [300, 300, 50, 50])>
          print(collision)

          screen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None
          print(screen_rect)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjects ##

   .. method:: collideobjectsall

      | :sl:`test if all objects in a list intersect`
      | :sg:`collideobjectsall(rect_list) -> objects`
      | :sg:`collideobjectsall(obj_list, key=func) -> objects`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjectsall feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Returns a list of all the objects that contain rectangles that collide
      with the Rect. If no intersecting objects are found, an empty list is
      returned.

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjectsall(
              rects
          )  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
          ]

          # collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object
          collisions = r.collideobjectsall(
              objects, key=lambda o: o.collision_box
          )  # -> [<ObjectWithSomRectAttribute("A", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute("B", [5, 5, 10, 10], [200, 500, 50, 50])>]
          print(collisions)

          screen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []
          print(screen_rects)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjectsall ##

   .. method:: collidedict

      | :sl:`test if one rectangle in a dictionary intersects`
      | :sg:`collidedict(dict) -> (key, value)`
      | :sg:`collidedict(dict) -> None`
      | :sg:`collidedict(dict, use_values=0) -> (key, value)`
      | :sg:`collidedict(dict, use_values=0) -> None`

      Returns the first key and value pair that intersects with the calling
      Rect object. If no collisions are found, ``None`` is returned. If
      ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedict({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedict ##

   .. method:: collidedictall

      | :sl:`test if all rectangles in a dictionary intersect`
      | :sg:`collidedictall(dict) -> [(key, value), ...]`
      | :sg:`collidedictall(dict, use_values=0) -> [(key, value), ...]`

      Returns a list of all the key and value pairs that intersect with the
      calling Rect object. If no collisions are found an empty list is returned.
      If ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedictall({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedictall ##

   .. ## pygame.Rect ##


--- Contenu du fichier : surface.rst.txt ---
.. include:: common.txt

:mod:`pygame.Surface`
=====================

.. currentmodule:: pygame

.. class:: Surface

   | :sl:`pygame object for representing images`
   | :sg:`Surface((width, height), flags=0, depth=0, masks=None) -> Surface`
   | :sg:`Surface((width, height), flags=0, Surface) -> Surface`

   A pygame Surface is used to represent any image. The Surface has a fixed
   resolution and pixel format. Surfaces with 8-bit pixels use a color palette
   to map to 24-bit color.

   Call :meth:`pygame.Surface()` to create a new image object. The Surface will
   be cleared to all black. The only required arguments are the sizes. With no
   additional arguments, the Surface will be created in a format that best
   matches the display Surface.

   The pixel format can be controlled by passing the bit depth or an existing
   Surface. The flags argument is a bitmask of additional features for the
   surface. You can pass any combination of these flags:

   ::

     HWSURFACE    (obsolete in pygame 2) creates the image in video memory
     SRCALPHA     the pixel format will include a per-pixel alpha

   Both flags are only a request, and may not be possible for all displays and
   formats.

   Advance users can combine a set of bitmasks with a depth value. The masks
   are a set of 4 integers representing which bits in a pixel will represent
   each color. Normal Surfaces should not require the masks argument.

   Surfaces can have many extra attributes like alpha planes, colorkeys, source
   rectangle clipping. These functions mainly effect how the Surface is blitted
   to other Surfaces. The blit routines will attempt to use hardware
   acceleration when possible, otherwise they will use highly optimized
   software blitting methods.

   There are three types of transparency supported in pygame: colorkeys,
   surface alphas, and pixel alphas. Surface alphas can be mixed with
   colorkeys, but an image with per pixel alphas cannot use the other modes.
   Colorkey transparency makes a single color value transparent. Any pixels
   matching the colorkey will not be drawn. The surface alpha value is a single
   value that changes the transparency for the entire image. A surface alpha of
   255 is opaque, and a value of 0 is completely transparent.

   Per pixel alphas are different because they store a transparency value for
   every pixel. This allows for the most precise transparency effects, but it
   also the slowest. Per pixel alphas cannot be mixed with surface alpha and
   colorkeys.

   There is support for pixel access for the Surfaces. Pixel access on hardware
   surfaces is slow and not recommended. Pixels can be accessed using the
   :meth:`get_at()` and :meth:`set_at()` functions. These methods are fine for
   simple access, but will be considerably slow when doing of pixel work with
   them. If you plan on doing a lot of pixel level work, it is recommended to
   use a :class:`pygame.PixelArray`, which gives an array like view of the
   surface. For involved mathematical manipulations try the
   :mod:`pygame.surfarray` module (It's quite quick, but requires NumPy.)

   Any functions that directly access a surface's pixel data will need that
   surface to be lock()'ed. These functions can :meth:`lock()` and
   :meth:`unlock()` the surfaces themselves without assistance. But, if a
   function will be called many times, there will be a lot of overhead for
   multiple locking and unlocking of the surface. It is best to lock the
   surface manually before making the function call many times, and then
   unlocking when you are finished. All functions that need a locked surface
   will say so in their docs. Remember to leave the Surface locked only while
   necessary.

   Surface pixels are stored internally as a single number that has all the
   colors encoded into it. Use the :meth:`map_rgb()` and
   :meth:`unmap_rgb()` to convert between individual red, green, and blue
   values into a packed integer for that Surface.

   Surfaces can also reference sections of other Surfaces. These are created
   with the :meth:`subsurface()` method. Any change to either Surface will
   effect the other.

   Each Surface contains a clipping area. By default the clip area covers the
   entire Surface. If it is changed, all drawing operations will only effect
   the smaller area.

   .. method:: blit

      | :sl:`draw one image onto another`
      | :sg:`blit(source, dest, area=None, special_flags=0) -> Rect`

      Draws a source Surface onto this Surface. The draw can be positioned with
      the dest argument. The dest argument can either be a pair of coordinates representing the position of
      the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the
      position for the blit. The size of the destination rectangle does not
      effect the blit.

      An optional area rectangle can be passed as well. This represents a
      smaller portion of the source Surface to draw.

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      .. versionadded:: 1.9.2
         Optional ``special_flags``: ``BLEND_PREMULTIPLIED``

      .. versionadded:: 2.0.0
         Optional ``special_flags``:  ``BLEND_ALPHA_SDL2`` - Uses the SDL2 blitter for alpha blending,
         this gives different results than the default blitter, which is modelled after SDL1, due to
         different approximations used for the alpha blending formula. The SDL2 blitter also supports
         RLE on alpha blended surfaces which the pygame one does not.

      The return rectangle is the area of the affected pixels, excluding any
      pixels outside the destination Surface, or outside the clipping area.

      Pixel alphas will be ignored when blitting to an 8 bit Surface.

      For a surface with colorkey or blanket alpha, a blit to self may give
      slightly different colors than a non self-blit.

      .. ## Surface.blit ##

   .. method:: blits

      | :sl:`draw many images onto another`
      | :sg:`blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None`
      | :sg:`blits(((source, dest, area), ...)) -> [Rect, ...]`
      | :sg:`blits(((source, dest, area, special_flags), ...)) -> [Rect, ...]`

      Draws many surfaces onto this Surface. It takes a sequence as input,
      with each of the elements corresponding to the ones of :meth:`blit()`.
      It needs at minimum a sequence of (source, dest).

      :param blit_sequence: a sequence of surfaces and arguments to blit them,
         they correspond to the :meth:`blit()` arguments
      :param doreturn: if ``True``, return a list of rects of the areas changed,
         otherwise return ``None``

      :returns: a list of rects of the areas changed if ``doreturn`` is
         ``True``, otherwise ``None``
      :rtype: list or None

      New in pygame 1.9.4.

      .. ## Surface.blits ##


   .. method:: convert

      | :sl:`change the pixel format of an image`
      | :sg:`convert(Surface=None) -> Surface`
      | :sg:`convert(depth, flags=0) -> Surface`
      | :sg:`convert(masks, flags=0) -> Surface`

      Creates a new copy of the Surface with the pixel format changed. The new
      pixel format can be determined from another existing Surface. Otherwise
      depth, flags, and masks arguments can be used, similar to the
      :meth:`pygame.Surface()` call.

      If no arguments are passed the new Surface will have the same pixel
      format as the display Surface. This is always the fastest format for
      blitting. It is a good idea to convert all Surfaces before they are
      blitted many times.

      The converted Surface will have no pixel alphas. They will be stripped if
      the original had them. See :meth:`convert_alpha()` for preserving or
      creating per-pixel alphas.

      The new copy will have the same class as the copied surface. This lets
      as Surface subclass inherit this method without the need to override,
      unless subclass specific instance attributes also need copying.

      .. ## Surface.convert ##

   .. method:: convert_alpha

      | :sl:`change the pixel format of an image including per pixel alphas`
      | :sg:`convert_alpha(Surface) -> Surface`
      | :sg:`convert_alpha() -> Surface`

      Creates a new copy of the surface with the desired pixel format. The new
      surface will be in a format suited for quick blitting to the given format
      with per pixel alpha. If no surface is given, the new surface will be
      optimized for blitting to the current display.

      Unlike the :meth:`convert()` method, the pixel format for the new
      image will not be exactly the same as the requested source, but it will
      be optimized for fast alpha blitting to the destination.

      As with :meth:`convert()` the returned surface has the same class as
      the converted surface.

      .. ## Surface.convert_alpha ##

   .. method:: copy

      | :sl:`create a new copy of a Surface`
      | :sg:`copy() -> Surface`

      Makes a duplicate copy of a Surface. The new surface will have the same
      pixel formats, color palettes, transparency settings, and class as the
      original. If a Surface subclass also needs to copy any instance specific
      attributes then it should override ``copy()``.

      .. ## Surface.copy ##

   .. method:: fill

      | :sl:`fill Surface with a solid color`
      | :sg:`fill(color, rect=None, special_flags=0) -> Rect`

      Fill the Surface with a solid color. If no rect argument is given the
      entire Surface will be filled. The rect argument will limit the fill to a
      specific area. The fill will also be contained by the Surface clip area.

      The color argument can be either a ``RGB`` sequence, a ``RGBA`` sequence
      or a mapped color index. If using ``RGBA``, the Alpha (A part of
      ``RGBA``) is ignored unless the surface uses per pixel alpha (Surface has
      the ``SRCALPHA`` flag).

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      This will return the affected Surface area.

      .. ## Surface.fill ##

   .. method:: scroll

      | :sl:`Shift the surface image in place`
      | :sg:`scroll(dx=0, dy=0) -> None`

      Move the image by dx pixels right and dy pixels down. dx and dy may be
      negative for left and up scrolls respectively. Areas of the surface that
      are not overwritten retain their original pixel values. Scrolling is
      contained by the Surface clip area. It is safe to have dx and dy values
      that exceed the surface size.

      .. versionadded:: 1.9

      .. ## Surface.scroll ##

   .. method:: set_colorkey

      | :sl:`Set the transparent colorkey`
      | :sg:`set_colorkey(Color, flags=0) -> None`
      | :sg:`set_colorkey(None) -> None`

      Set the current color key for the Surface. When blitting this Surface
      onto a destination, any pixels that have the same color as the colorkey
      will be transparent. The color can be an ``RGB`` color or a mapped color
      integer. If ``None`` is passed, the colorkey will be unset.

      The colorkey will be ignored if the Surface is formatted to use per pixel
      alpha values. The colorkey can be mixed with the full Surface alpha
      value.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_colorkey ##

   .. method:: get_colorkey

      | :sl:`Get the current transparent colorkey`
      | :sg:`get_colorkey() -> RGB or None`

      Return the current colorkey value for the Surface. If the colorkey is not
      set then ``None`` is returned.

      .. ## Surface.get_colorkey ##

   .. method:: set_alpha

      | :sl:`set the alpha value for the full Surface image`
      | :sg:`set_alpha(value, flags=0) -> None`
      | :sg:`set_alpha(None) -> None`

      Set the current alpha value for the Surface. When blitting this Surface
      onto a destination, the pixels will be drawn slightly transparent. The
      alpha value is an integer from 0 to 255, 0 is fully transparent and 255
      is fully opaque. If ``None`` is passed for the alpha value, then alpha
      blending will be disabled, including per-pixel alpha.

      This value is different than the per pixel Surface alpha. For a surface
      with per pixel alpha, blanket alpha is ignored and ``None`` is returned.

      .. versionchanged:: 2.0 per-surface alpha can be combined with per-pixel
                          alpha.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_alpha ##

   .. method:: get_alpha

      | :sl:`get the current Surface transparency value`
      | :sg:`get_alpha() -> int_value`

      Return the current alpha value for the Surface.

      .. ## Surface.get_alpha ##

   .. method:: lock

      | :sl:`lock the Surface memory for pixel access`
      | :sg:`lock() -> None`

      Lock the pixel data of a Surface for access. On accelerated Surfaces, the
      pixel data may be stored in volatile video memory or nonlinear compressed
      forms. When a Surface is locked the pixel memory becomes available to
      access by regular software. Code that reads or writes pixel values will
      need the Surface to be locked.

      Surfaces should not remain locked for more than necessary. A locked
      Surface can often not be displayed or managed by pygame.

      Not all Surfaces require locking. The :meth:`mustlock()` method can
      determine if it is actually required. There is no performance penalty for
      locking and unlocking a Surface that does not need it.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.lock ##

   .. method:: unlock

      | :sl:`unlock the Surface memory from pixel access`
      | :sg:`unlock() -> None`

      Unlock the Surface pixel data after it has been locked. The unlocked
      Surface can once again be drawn and managed by pygame. See the
      :meth:`lock()` documentation for more details.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.unlock ##

   .. method:: mustlock

      | :sl:`test if the Surface requires locking`
      | :sg:`mustlock() -> bool`

      Returns ``True`` if the Surface is required to be locked to access pixel
      data. Usually pure software Surfaces do not require locking. This method
      is rarely needed, since it is safe and quickest to just lock all Surfaces
      as needed.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      .. ## Surface.mustlock ##

   .. method:: get_locked

      | :sl:`test if the Surface is current locked`
      | :sg:`get_locked() -> bool`

      Returns ``True`` when the Surface is locked. It doesn't matter how many
      times the Surface is locked.

      .. ## Surface.get_locked ##

   .. method:: get_locks

      | :sl:`Gets the locks for the Surface`
      | :sg:`get_locks() -> tuple`

      Returns the currently existing locks for the Surface.

      .. ## Surface.get_locks ##

   .. method:: get_at

      | :sl:`get the color value at a single pixel`
      | :sg:`get_at((x, y)) -> Color`

      Return a copy of the ``RGBA`` Color value at the given pixel. If the
      Surface has no per pixel alpha, then the alpha value will always be 255
      (opaque). If the pixel position is outside the area of the Surface an
      ``IndexError`` exception will be raised.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation. It is better to use methods which
      operate on many pixels at a time like with the blit, fill and draw
      methods - or by using :mod:`pygame.surfarray`/:mod:`pygame.PixelArray`.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9
         Returning a Color instead of tuple. Use ``tuple(surf.get_at((x,y)))``
         if you want a tuple, and not a Color. This should only matter if
         you want to use the color as a key in a dict.

      .. ## Surface.get_at ##

   .. method:: set_at

      | :sl:`set the color value for a single pixel`
      | :sg:`set_at((x, y), Color) -> None`

      Set the ``RGBA`` or mapped integer color value for a single pixel. If the
      Surface does not have per pixel alphas, the alpha value is ignored.
      Setting pixels outside the Surface area or outside the Surface clipping
      will have no effect.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation.

      This function will temporarily lock and unlock the Surface as needed.

      .. note:: If the surface is palettized, the pixel color will be set to the
                most similar color in the palette.

      .. ## Surface.set_at ##

   .. method:: get_at_mapped

      | :sl:`get the mapped color value at a single pixel`
      | :sg:`get_at_mapped((x, y)) -> Color`

      Return the integer value of the given pixel. If the pixel position is
      outside the area of the Surface an ``IndexError`` exception will be
      raised.

      This method is intended for pygame unit testing. It unlikely has any use
      in an application.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9.2

      .. ## Surface.get_at_mapped ##

   .. method:: get_palette

      | :sl:`get the color index palette for an 8-bit Surface`
      | :sg:`get_palette() -> [RGB, RGB, RGB, ...]`

      Return a list of up to 256 color elements that represent the indexed
      colors used in an 8-bit Surface. The returned list is a copy of the
      palette, and changes will have no effect on the Surface.

      Returning a list of ``Color(with length 3)`` instances instead of tuples.

      .. versionadded:: 1.9

      .. ## Surface.get_palette ##

   .. method:: get_palette_at

      | :sl:`get the color for a single entry in a palette`
      | :sg:`get_palette_at(index) -> RGB`

      Returns the red, green, and blue color values for a single index in a
      Surface palette. The index should be a value from 0 to 255.

      .. versionadded:: 1.9
         Returning ``Color(with length 3)`` instance instead of a tuple.

      .. ## Surface.get_palette_at ##

   .. method:: set_palette

      | :sl:`set the color palette for an 8-bit Surface`
      | :sg:`set_palette([RGB, RGB, RGB, ...]) -> None`

      Set the full palette for an 8-bit Surface. This will replace the colors in
      the existing palette. A partial palette can be passed and only the first
      colors in the original palette will be changed.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette ##

   .. method:: set_palette_at

      | :sl:`set the color for a single index in an 8-bit Surface palette`
      | :sg:`set_palette_at(index, RGB) -> None`

      Set the palette value for a single entry in a Surface palette. The index
      should be a value from 0 to 255.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette_at ##

   .. method:: map_rgb

      | :sl:`convert a color into a mapped color value`
      | :sg:`map_rgb(Color) -> mapped_int`

      Convert an ``RGBA`` color into the mapped integer value for this Surface.
      The returned integer will contain no more bits than the bit depth of the
      Surface. Mapped color values are not often used inside pygame, but can be
      passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.map_rgb ##

   .. method:: unmap_rgb

      | :sl:`convert a mapped integer color value into a Color`
      | :sg:`unmap_rgb(mapped_int) -> Color`

      Convert an mapped integer color into the ``RGB`` color components for
      this Surface. Mapped color values are not often used inside pygame, but
      can be passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.unmap_rgb ##

   .. method:: set_clip

      | :sl:`set the current clipping area of the Surface`
      | :sg:`set_clip(rect) -> None`
      | :sg:`set_clip(None) -> None`

      Each Surface has an active clipping area. This is a rectangle that
      represents the only pixels on the Surface that can be modified. If
      ``None`` is passed for the rectangle the full Surface will be available
      for changes.

      The clipping area is always restricted to the area of the Surface itself.
      If the clip rectangle is too large it will be shrunk to fit inside the
      Surface.

      .. ## Surface.set_clip ##

   .. method:: get_clip

      | :sl:`get the current clipping area of the Surface`
      | :sg:`get_clip() -> Rect`

      Return a rectangle of the current clipping area. The Surface will always
      return a valid rectangle that will never be outside the bounds of the
      image. If the Surface has had ``None`` set for the clipping area, the
      Surface will return a rectangle with the full area of the Surface.

      .. ## Surface.get_clip ##

   .. method:: subsurface

      | :sl:`create a new surface that references its parent`
      | :sg:`subsurface(Rect) -> Surface`

      Returns a new Surface that shares its pixels with its new parent. The new
      Surface is considered a child of the original. Modifications to either
      Surface pixels will effect each other. Surface information like clipping
      area and color keys are unique to each Surface.

      The new Surface will inherit the palette, color key, and alpha settings
      from its parent.

      It is possible to have any number of subsurfaces and subsubsurfaces on
      the parent. It is also possible to subsurface the display Surface if the
      display mode is not hardware accelerated.

      See :meth:`get_offset()` and :meth:`get_parent()` to learn more
      about the state of a subsurface.

      A subsurface will have the same class as the parent surface.

      .. ## Surface.subsurface ##

   .. method:: get_parent

      | :sl:`find the parent of a subsurface`
      | :sg:`get_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then ``None`` will be returned.

      .. ## Surface.get_parent ##

   .. method:: get_abs_parent

      | :sl:`find the top level parent of a subsurface`
      | :sg:`get_abs_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then this surface will be returned.

      .. ## Surface.get_abs_parent ##

   .. method:: get_offset

      | :sl:`find the position of a child subsurface inside a parent`
      | :sg:`get_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of a parent. If the
      Surface is not a subsurface this will return (0, 0).

      .. ## Surface.get_offset ##

   .. method:: get_abs_offset

      | :sl:`find the absolute position of a child subsurface inside its top level parent`
      | :sg:`get_abs_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of its top level
      parent Surface. If the Surface is not a subsurface this will return (0,
      0).

      .. ## Surface.get_abs_offset ##

   .. method:: get_size

      | :sl:`get the dimensions of the Surface`
      | :sg:`get_size() -> (width, height)`

      Return the width and height of the Surface in pixels.

      .. ## Surface.get_size ##

   .. method:: get_width

      | :sl:`get the width of the Surface`
      | :sg:`get_width() -> width`

      Return the width of the Surface in pixels.

      .. ## Surface.get_width ##

   .. method:: get_height

      | :sl:`get the height of the Surface`
      | :sg:`get_height() -> height`

      Return the height of the Surface in pixels.

      .. ## Surface.get_height ##

   .. method:: get_rect

      | :sl:`get the rectangular area of the Surface`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new rectangle covering the entire surface. This rectangle will
      always start at (0, 0) with a width and height the same size as the image.

      You can pass keyword argument values to this function. These named values
      will be applied to the attributes of the Rect before it is returned. An
      example would be ``mysurf.get_rect(center=(100, 100))`` to create a
      rectangle for the Surface centered at a given position.

      .. ## Surface.get_rect ##

   .. method:: get_bitsize

      | :sl:`get the bit depth of the Surface pixel format`
      | :sg:`get_bitsize() -> int`

      Returns the number of bits used to represent each pixel. This value may
      not exactly fill the number of bytes used per pixel. For example a 15 bit
      Surface still requires a full 2 bytes.

      .. ## Surface.get_bitsize ##

   .. method:: get_bytesize

      | :sl:`get the bytes used per Surface pixel`
      | :sg:`get_bytesize() -> int`

      Return the number of bytes used per pixel.

      .. ## Surface.get_bytesize ##

   .. method:: get_flags

      | :sl:`get the additional flags used for the Surface`
      | :sg:`get_flags() -> int`

      Returns a set of current Surface features. Each feature is a bit in the
      flags bitmask. Typical flags are ``RLEACCEL``, ``SRCALPHA``, and
      ``SRCCOLORKEY``.

      Here is a more complete list of flags. A full list can be found in
      ``SDL_video.h``

      ::

        SWSURFACE      0x00000000    # Surface is in system memory
        HWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory
        ASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible

      See :func:`pygame.display.set_mode()` for flags exclusive to the
      display surface.

      Used internally (read-only)

      ::

        HWACCEL        0x00000100    # Blit uses hardware acceleration
        SRCCOLORKEY    0x00001000    # Blit uses a source color key
        RLEACCELOK     0x00002000    # Private flag
        RLEACCEL       0x00004000    # Surface is RLE encoded
        SRCALPHA       0x00010000    # Blit uses source alpha blending
        PREALLOC       0x01000000    # Surface uses preallocated memory

      .. ## Surface.get_flags ##

   .. method:: get_pitch

      | :sl:`get the number of bytes used per Surface row`
      | :sg:`get_pitch() -> int`

      Return the number of bytes separating each row in the Surface. Surfaces
      in video memory are not always linearly packed. Subsurfaces will also
      have a larger pitch than their real width.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_pitch ##

   .. method:: get_masks

      | :sl:`the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`get_masks() -> (R, G, B, A)`

      Returns the bitmasks used to isolate each color in a mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_masks ##

   .. method:: set_masks

      | :sl:`set the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`set_masks((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the masks are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_masks ##

   .. method:: get_shifts

      | :sl:`the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`get_shifts() -> (R, G, B, A)`

      Returns the pixel shifts need to convert between each color and a mapped
      integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_shifts ##

   .. method:: set_shifts

      | :sl:`sets the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`set_shifts((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the shifts are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_shifts ##

   .. method:: get_losses

      | :sl:`the significant bits used to convert between a color and a mapped integer`
      | :sg:`get_losses() -> (R, G, B, A)`

      Return the least significant number of bits stripped from each color in a
      mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_losses ##

   .. method:: get_bounding_rect

      | :sl:`find the smallest rect containing data`
      | :sg:`get_bounding_rect(min_alpha = 1) -> Rect`

      Returns the smallest rectangular region that contains all the pixels in
      the surface that have an alpha value greater than or equal to the minimum
      alpha value.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.8

      .. ## Surface.get_bounding_rect ##

   .. method:: get_view

      | :sl:`return a buffer view of the Surface's pixels.`
      | :sg:`get_view(<kind>='2') -> BufferProxy`

      Return an object which exports a surface's internal pixel buffer as
      a C level array struct, Python level array interface or a C level
      buffer interface. The new buffer protocol is supported.

      The kind argument is the length 1 string '0', '1', '2', '3',
      'r', 'g', 'b', or 'a'. The letters are case insensitive;
      'A' will work as well. The argument can be either a Unicode or byte (char)
      string. The default is '2'.

      '0' returns a contiguous unstructured bytes view. No surface shape
      information is given. A ``ValueError`` is raised if the surface's pixels
      are discontinuous.

      '1' returns a (surface-width * surface-height) array of continuous
      pixels. A ``ValueError`` is raised if the surface pixels are
      discontinuous.

      '2' returns a (surface-width, surface-height) array of raw pixels.
      The pixels are surface-bytesize-d unsigned integers. The pixel format is
      surface specific. The 3 byte unsigned integers of 24 bit surfaces are
      unlikely accepted by anything other than other pygame functions.

      '3' returns a (surface-width, surface-height, 3) array of ``RGB`` color
      components. Each of the red, green, and blue components are unsigned
      bytes. Only 24-bit and 32-bit surfaces are supported. The color
      components must be in either ``RGB`` or ``BGR`` order within the pixel.

      'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a
      (surface-width, surface-height) view of a single color component within a
      surface: a color plane. Color components are unsigned bytes. Both 24-bit
      and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with
      ``SRCALPHA`` support 'a'.

      The surface is locked only when an exposed interface is accessed.
      For new buffer interface accesses, the surface is unlocked once the
      last buffer view is released. For array interface and old buffer
      interface accesses, the surface remains locked until the BufferProxy
      object is released.

      .. versionadded:: 1.9.2

   .. method:: get_buffer

      | :sl:`acquires a buffer object for the pixels of the Surface.`
      | :sg:`get_buffer() -> BufferProxy`

      Return a buffer object for the pixels of the Surface. The buffer can be
      used for direct pixel access and manipulation. Surface pixel data is
      represented as an unstructured block of memory, with a start address
      and length in bytes. The data need not be contiguous. Any gaps are
      included in the length, but otherwise ignored.

      This method implicitly locks the Surface. The lock will be released when
      the returned :mod:`pygame.BufferProxy` object is garbage collected.

      .. versionadded:: 1.8

      .. ## Surface.get_buffer ##

   .. attribute:: _pixels_address

      | :sl:`pixel buffer address`
      | :sg:`_pixels_address -> int`

      The starting address of the surface's raw pixel bytes.

      .. versionadded:: 1.9.2

   .. method:: premul_alpha

      | :sl:`returns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.`
      | :sg:`premul_alpha() -> Surface`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave premul_alpha feedback with authors <https://github.com/pygame/pygame/pull/3276>`_

      Returns a copy of the initial surface with the red, green and blue color channels multiplied
      by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED
      blend mode flag of the blit() method. Surfaces which have called this method will only look
      correct after blitting if the BLEND_PREMULTIPLED special flag is used.

      It is worth noting that after calling this method, methods that return the colour of a pixel
      such as get_at() will return the alpha multiplied colour values. It is not possible to fully
      reverse an alpha multiplication of the colours in a surface as integer colour channel data
      is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct
      the original 255 from just the two remaining zeros in the colour and alpha channels).

      If you call this method, and then call it again, it will multiply the colour channels by the alpha channel
      twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the
      alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels.
      It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and
      one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied
      alpha blending.

      Surfaces without an alpha channel cannot use this method and will return an error if you use
      it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting
      on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.

      In general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces
      superior results when blitting an alpha surface onto another surface with alpha - assuming both
      surfaces contain pre-multiplied alpha colours.

      .. versionadded:: 2.2.0

      .. ## Surface.premul_alpha ##

   .. ## pygame.Surface ##




--- Contenu du fichier : scrap.rst.txt ---
.. include:: common.txt

:mod:`pygame.scrap`
===================

.. module:: pygame.scrap
   :synopsis: pygame module for clipboard support.

| :sl:`pygame module for clipboard support.`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The scrap module is for transferring data to/from the clipboard. This allows
for cutting and pasting data between pygame and other applications. Some basic
data (MIME) types are defined and registered:

::

   pygame         string
  constant        value        description
  --------------------------------------------------
  SCRAP_TEXT   "text/plain"    plain text
  SCRAP_BMP    "image/bmp"     BMP encoded image data
  SCRAP_PBM    "image/pbm"     PBM encoded image data
  SCRAP_PPM    "image/ppm"     PPM encoded image data

``pygame.SCRAP_PPM``, ``pygame.SCRAP_PBM`` and ``pygame.SCRAP_BMP`` are
suitable for surface buffers to be shared with other applications.
``pygame.SCRAP_TEXT`` is an alias for the plain text clipboard type.

Depending on the platform, additional types are automatically registered when
data is placed into the clipboard to guarantee a consistent sharing behaviour
with other applications. The following listed types can be used as strings to
be passed to the respective :mod:`pygame.scrap` module functions.

For **Windows** platforms, these additional types are supported automatically
and resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "audio/wav"                  WAV encoded audio
  "image/tiff"                 TIFF encoded image data

For **X11** platforms, these additional types are supported automatically and
resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "UTF8_STRING"                UTF-8 encoded text
  "COMPOUND_TEXT"              COMPOUND text

User defined types can be used, but the data might not be accessible by other
applications unless they know what data type to look for.
Example: Data placed into the clipboard by
``pygame.scrap.put("my_data_type", byte_data)`` can only be accessed by
applications which query the clipboard for the ``"my_data_type"`` data type.

For an example of how the scrap module works refer to the examples page
(:func:`pygame.examples.scrap_clipboard.main`) or the code directly in GitHub
(`pygame/examples/scrap_clipboard.py <https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py>`_).

.. versionadded:: 1.8

.. note::
   The scrap module is currently only supported for Windows, X11 and Mac OS X.
   On Mac OS X only text works at the moment - other types may be supported in
   future releases.

.. function:: init

   | :sl:`Initializes the scrap module.`
   | :sg:`init() -> None`

   Initialize the scrap module.

   :raises pygame.error: if unable to initialize scrap module

   .. note:: The scrap module requires :func:`pygame.display.set_mode()` be
      called before being initialized.

   .. ## pygame.scrap.init ##

.. function:: get_init

   | :sl:`Returns True if the scrap module is currently initialized.`
   | :sg:`get_init() -> bool`

   Gets the scrap module's initialization state.

   :returns: ``True`` if the :mod:`pygame.scrap` module is currently
      initialized, ``False`` otherwise
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.scrap.get_init ##

.. function:: get

   | :sl:`Gets the data for the specified type from the clipboard.`
   | :sg:`get(type) -> bytes | None`

   Retrieves the data for the specified type from the clipboard. The data is
   returned as a byte string and might need further processing (such as
   decoding to Unicode).

   :param string type: data type to retrieve from the clipboard

   :returns: data (bytes object) for the given type identifier or ``None`` if
      no data for the given type is available
   :rtype: bytes | None

   ::

     text = pygame.scrap.get(pygame.SCRAP_TEXT)
     if text:
         print("There is text in the clipboard.")
     else:
         print("There does not seem to be text in the clipboard.")

   .. ## pygame.scrap.get ##

.. function:: get_types

   | :sl:`Gets a list of the available clipboard types.`
   | :sg:`get_types() -> list`

   Gets a list of data type string identifiers for the data currently
   available on the clipboard. Each identifier can be used in the
   :func:`pygame.scrap.get()` method to get the clipboard content of the
   specific type.

   :returns: list of strings of the available clipboard data types, if there
      is no data in the clipboard an empty list is returned
   :rtype: list

   ::

     for t in pygame.scrap.get_types():
         if "text" in t:
             # There is some content with the word "text" in its type string.
             print(pygame.scrap.get(t))

   .. ## pygame.scrap.get_types ##

.. function:: put

   | :sl:`Places data into the clipboard.`
   | :sg:`put(type, data) -> None`

   Places data for a given clipboard type into the clipboard. The data must
   be a string buffer. The type is a string identifying the type of data to be
   placed into the clipboard. This can be one of the predefined
   ``pygame.SCRAP_PBM``, ``pygame.SCRAP_PPM``, ``pygame.SCRAP_BMP`` or
   ``pygame.SCRAP_TEXT`` values or a user defined string identifier.

   :param string type: type identifier of the data to be placed into the
      clipboard
   :param data: data to be place into the clipboard, a bytes object
   :type data: bytes

   :raises pygame.error: if unable to put the data into the clipboard

   ::

     with open("example.bmp", "rb") as fp:
         pygame.scrap.put(pygame.SCRAP_BMP, fp.read())
     # The image data is now on the clipboard for other applications to access
     # it.
     pygame.scrap.put(pygame.SCRAP_TEXT, b"A text to copy")
     pygame.scrap.put("Plain text", b"Data for user defined type 'Plain text'")

   .. ## pygame.scrap.put ##

.. function:: contains

   | :sl:`Checks whether data for a given type is available in the clipboard.`
   | :sg:`contains(type) -> bool`

   Checks whether data for the given type is currently available in the
   clipboard.

   :param string type: data type to check availability of

   :returns: ``True`` if data for the passed type is available in the
      clipboard, ``False`` otherwise
   :rtype: bool

   ::

     if pygame.scrap.contains(pygame.SCRAP_TEXT):
         print("There is text in the clipboard.")
     if pygame.scrap.contains("own_data_type"):
         print("There is stuff in the clipboard.")

   .. ## pygame.scrap.contains ##

.. function:: lost

   | :sl:`Indicates if the clipboard ownership has been lost by the pygame application.`
   | :sg:`lost() -> bool`

   Indicates if the clipboard ownership has been lost by the pygame
   application.

   :returns: ``True``, if the clipboard ownership has been lost by the pygame
      application, ``False`` if the pygame application still owns the clipboard
   :rtype: bool

   ::

     if pygame.scrap.lost():
         print("The clipboard is in use by another application.")

   .. ## pygame.scrap.lost ##

.. function:: set_mode

   | :sl:`Sets the clipboard access mode.`
   | :sg:`set_mode(mode) -> None`

   Sets the access mode for the clipboard. This is only of interest for X11
   environments where clipboard modes ``pygame.SCRAP_SELECTION`` (for mouse
   selections) and ``pygame.SCRAP_CLIPBOARD`` (for the clipboard) are
   available. Setting the mode to ``pygame.SCRAP_SELECTION`` in other
   environments will not change the mode from ``pygame.SCRAP_CLIPBOARD``.

   :param mode: access mode, supported values are ``pygame.SCRAP_CLIPBOARD``
      and ``pygame.SCRAP_SELECTION`` (``pygame.SCRAP_SELECTION`` only has an
      effect when used on X11 platforms)

   :raises ValueError: if the ``mode`` parameter is not
      ``pygame.SCRAP_CLIPBOARD`` or ``pygame.SCRAP_SELECTION``

   .. ## pygame.scrap.set_mode ##

.. ## pygame.scrap ##


--- Contenu du fichier : display.rst.txt ---
.. include:: common.txt

:mod:`pygame.display`
=====================

.. module:: pygame.display
   :synopsis: pygame module to control the display window and screen

| :sl:`pygame module to control the display window and screen`

This module offers control over the pygame display. Pygame has a single display
Surface that is either contained in a window or runs full screen. Once you
create the display you treat it as a regular Surface. Changes are not
immediately visible onscreen; you must choose one of the two flipping functions
to update the actual display.

The origin of the display, where x = 0 and y = 0, is the top left of the
screen. Both axes increase positively towards the bottom right of the screen.

The pygame display can actually be initialized in one of several modes. By
default, the display is a basic software driven framebuffer. You can request
special modules like automatic scaling or OpenGL support. These are
controlled by flags passed to ``pygame.display.set_mode()``.

Pygame can only have a single display active at any time. Creating a new one
with ``pygame.display.set_mode()`` will close the previous display. To detect
the number and size of attached screens, you can use
``pygame.display.get_desktop_sizes`` and then select appropriate window size
and display index to pass to ``pygame.display.set_mode()``.

For backward compatibility ``pygame.display`` allows precise control over
the pixel format or display resolutions. This used to be necessary with old
graphics cards and CRT screens, but is usually not needed any more. Use the
functions ``pygame.display.mode_ok()``, ``pygame.display.list_modes()``, and
``pygame.display.Info()`` to query detailed information about the display.

Once the display Surface is created, the functions from this module affect the
single existing display. The Surface becomes invalid if the module is
uninitialized. If a new display mode is set, the existing Surface will
automatically switch to operate on the new display.

When the display mode is set, several events are placed on the pygame event
queue. ``pygame.QUIT`` is sent when the user has requested the program to
shut down. The window will receive ``pygame.ACTIVEEVENT`` events as the display
gains and loses input focus. If the display is set with the
``pygame.RESIZABLE`` flag, ``pygame.VIDEORESIZE`` events will be sent when the
user adjusts the window dimensions. Hardware displays that draw direct to the
screen will get ``pygame.VIDEOEXPOSE`` events when portions of the window must
be redrawn.

A new windowevent API was introduced in pygame 2.0.1. Check event module docs
for more information on that

Some display environments have an option for automatically stretching all
windows. When this option is enabled, this automatic stretching distorts the
appearance of the pygame window. In the pygame examples directory, there is
example code (prevent_display_stretching.py) which shows how to disable this
automatic stretching of the pygame display on Microsoft Windows (Vista or newer
required).

.. function:: init

   | :sl:`Initialize the display module`
   | :sg:`init() -> None`

   Initializes the pygame display module. The display module cannot do anything
   until it is initialized. This is usually handled for you automatically when
   you call the higher level ``pygame.init()``.

   Pygame will select from one of several internal display backends when it is
   initialized. The display mode will be chosen depending on the platform and
   permissions of current user. Before the display module is initialized the
   environment variable ``SDL_VIDEODRIVER`` can be set to control which backend
   is used. The systems with multiple choices are listed here.

   ::

      Windows : windib, directx
      Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib

   On some platforms it is possible to embed the pygame display into an already
   existing window. To do this, the environment variable ``SDL_WINDOWID`` must
   be set to a string containing the window id or handle. The environment
   variable is checked when the pygame display is initialized. Be aware that
   there can be many strange side effects when running in an embedded display.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.init ##

.. function:: quit

   | :sl:`Uninitialize the display module`
   | :sg:`quit() -> None`

   This will shut down the entire display module. This means any active
   displays will be closed. This will also be handled automatically when the
   program exits.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.quit ##

.. function:: get_init

   | :sl:`Returns True if the display module has been initialized`
   | :sg:`get_init() -> bool`

   Returns True if the :mod:`pygame.display` module is currently initialized.

   .. ## pygame.display.get_init ##

.. function:: set_mode

   | :sl:`Initialize a window or screen for display`
   | :sg:`set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface`

   This function will create a display Surface. The arguments passed in are
   requests for a display type. The actual created display will be the best
   possible match supported by the system.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   The size argument is a pair of numbers representing the width and
   height. The flags argument is a collection of additional options. The depth
   argument represents the number of bits to use for color.

   The Surface that gets returned can be drawn to like a regular Surface but
   changes will eventually be seen on the monitor.

   If no size is passed or is set to ``(0, 0)`` and pygame uses ``SDL``
   version 1.2.10 or above, the created Surface will have the same size as the
   current screen resolution. If only the width or height are set to ``0``, the
   Surface will have the same width or height as the screen resolution. Using a
   ``SDL`` version prior to 1.2.10 will raise an exception.

   It is usually best to not pass the depth argument. It will default to the
   best and fastest color depth for the system. If your game requires a
   specific color format you can control the depth with this argument. Pygame
   will emulate an unavailable color depth which can be slow.

   When requesting fullscreen display modes, sometimes an exact match for the
   requested size cannot be made. In these situations pygame will select
   the closest compatible match. The returned surface will still always match
   the requested size.

   On high resolution displays(4k, 1080p) and tiny graphics games (640x480)
   show up very small so that they are unplayable. SCALED scales up the window
   for you. The game thinks it's a 640x480 window, but really it can be bigger.
   Mouse events are scaled for you, so your game doesn't need to do it. Note
   that SCALED is considered an experimental API and may change in future
   releases.

   The flags argument controls which type of display you want. There are
   several to choose from, and you can even combine multiple types using the
   bitwise or operator, (the pipe "|" character). Here are the display
   flags you will want to choose from:

   ::

      pygame.FULLSCREEN    create a fullscreen display
      pygame.DOUBLEBUF     only applicable with OPENGL
      pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
      pygame.OPENGL        create an OpenGL-renderable display
      pygame.RESIZABLE     display window should be resizeable
      pygame.NOFRAME       display window will have no border or controls
      pygame.SCALED        resolution depends on desktop size and scale graphics
      pygame.SHOWN         window is opened in visible mode (default)
      pygame.HIDDEN        window is opened in hidden mode


   .. versionadded:: 2.0.0 ``SCALED``, ``SHOWN`` and ``HIDDEN``

   By setting the ``vsync`` parameter to ``1``, it is possible to get a display
   with vertical sync, but you are not guaranteed to get one. The request only
   works at all for calls to ``set_mode()`` with the ``pygame.OPENGL`` or
   ``pygame.SCALED`` flags set, and is still not guaranteed even with one of
   those set. What you get depends on the hardware and driver configuration
   of the system pygame is running on. Here is an example usage of a call
   to ``set_mode()`` that may give you a display with vsync:

   ::

     flags = pygame.OPENGL | pygame.FULLSCREEN
     window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)

   Vsync behaviour is considered experimental, and may change in future releases.

   .. versionadded:: 2.0.0 ``vsync``

   Basic example:

   ::

        # Open a window on the screen
        screen_width=700
        screen_height=400
        screen=pygame.display.set_mode([screen_width, screen_height])

   The display index ``0`` means the default display is used. If no display
   index argument is provided, the default display can be overridden with an
   environment variable.


   .. versionchanged:: 1.9.5 ``display`` argument added

   .. versionchanged:: 2.1.3
      pygame now ensures that subsequent calls to this function clears the
      window to black. On older versions, this was an implementation detail
      on the major platforms this function was tested with.

   .. ## pygame.display.set_mode ##

.. function:: get_surface

   | :sl:`Get a reference to the currently set display surface`
   | :sg:`get_surface() -> Surface`

   Return a reference to the currently set display Surface. If no display mode
   has been set this will return None.

   .. ## pygame.display.get_surface ##

.. function:: flip

   | :sl:`Update the full display Surface to the screen`
   | :sg:`flip() -> None`

   This will update the contents of the entire display. If your display mode is
   using the flags ``pygame.HWSURFACE`` and ``pygame.DOUBLEBUF`` on pygame 1,
   this will wait for a vertical retrace and swap the surfaces.

   When using an ``pygame.OPENGL`` display mode this will perform a gl buffer
   swap.

   .. ## pygame.display.flip ##

.. function:: update

   | :sl:`Update portions of the screen for software displays`
   | :sg:`update(rectangle=None) -> None`
   | :sg:`update(rectangle_list) -> None`

   This function is like an optimized version of ``pygame.display.flip()`` for
   software displays. It allows only a portion of the screen to be updated,
   instead of the entire area. If no argument is passed it updates the entire
   Surface area like ``pygame.display.flip()``.

   Note that calling ``display.update(None)`` means no part of the window is
   updated. Whereas ``display.update()`` means the whole window is updated.

   You can pass the function a single rectangle, or a sequence of rectangles.
   It is more efficient to pass many rectangles at once than to call update
   multiple times with single or a partial list of rectangles. If passing a
   sequence of rectangles it is safe to include None values in the list, which
   will be skipped.

   This call cannot be used on ``pygame.OPENGL`` displays and will generate an
   exception.

   .. ## pygame.display.update ##

.. function:: get_driver

   | :sl:`Get the name of the pygame display backend`
   | :sg:`get_driver() -> name`

   Pygame chooses one of many available display backends when it is
   initialized. This returns the internal name used for the display backend.
   This can be used to provide limited information about what display
   capabilities might be accelerated. See the ``SDL_VIDEODRIVER`` flags in
   ``pygame.display.set_mode()`` to see some of the common options.

   .. ## pygame.display.get_driver ##

.. function:: Info

   | :sl:`Create a video display information object`
   | :sg:`Info() -> VideoInfo`

   Creates a simple object containing several attributes to describe the
   current graphics environment. If this is called before
   ``pygame.display.set_mode()`` some platforms can provide information about
   the default display mode. This can also be called after setting the display
   mode to verify specific display options were satisfied. The VidInfo object
   has several attributes:

   ::

     hw:         1 if the display is hardware accelerated
     wm:         1 if windowed display modes can be used
     video_mem:  The megabytes of video memory on the display. This is 0 if
                 unknown
     bitsize:    Number of bits used to store each pixel
     bytesize:   Number of bytes used to store each pixel
     masks:      Four values used to pack RGBA values into pixels
     shifts:     Four values used to pack RGBA values into pixels
     losses:     Four values used to pack RGBA values into pixels
     blit_hw:    1 if hardware Surface blitting is accelerated
     blit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated
     blit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated
     blit_sw:    1 if software Surface blitting is accelerated
     blit_sw_CC: 1 if software Surface colorkey blitting is accelerated
     blit_sw_A:  1 if software Surface pixel alpha blitting is accelerated
     current_h, current_w:  Height and width of the current video mode, or
                 of the desktop mode if called before the display.set_mode
                 is called. (current_h, current_w are available since
                 SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if
                 an old SDL is being used.

   .. ## pygame.display.Info ##

.. function:: get_wm_info

   | :sl:`Get information about the current windowing system`
   | :sg:`get_wm_info() -> dict`

   Creates a dictionary filled with string keys. The strings and values are
   arbitrarily created by the system. Some systems may have no information and
   an empty dictionary will be returned. Most platforms will return a "window"
   key with the value set to the system id for the current display.

   .. versionadded:: 1.7.1

   .. ## pygame.display.get_wm_info ##

.. function:: get_desktop_sizes

   | :sl:`Get sizes of active desktops`
   | :sg:`get_desktop_sizes() -> list`

   This function returns the sizes of the currently configured
   virtual desktops as a list of (x, y) tuples of integers.

   The length of the list is not the same as the number of attached monitors,
   as a desktop can be mirrored across multiple monitors. The desktop sizes
   do not indicate the maximum monitor resolutions supported by the hardware,
   but the desktop size configured in the operating system.

   In order to fit windows into the desktop as it is currently configured, and
   to respect the resolution configured by the operating system in fullscreen
   mode, this function *should* be used to replace many use cases of
   ``pygame.display.list_modes()`` whenever applicable.

   .. versionadded:: 2.0.0

.. function:: list_modes

   | :sl:`Get list of available fullscreen modes`
   | :sg:`list_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -> list`

   This function returns a list of possible sizes for a specified color
   depth. The return value will be an empty list if no display modes are
   available with the given arguments. A return value of ``-1`` means that
   any requested size should work (this is likely the case for windowed
   modes). Mode sizes are sorted from biggest to smallest.

   If depth is ``0``, the current/best color depth for the display is used.
   The flags defaults to ``pygame.FULLSCREEN``, but you may need to add
   additional flags for specific fullscreen modes.

   The display index ``0`` means the default display is used.

   Since pygame 2.0, ``pygame.display.get_desktop_sizes()`` has taken over
   some use cases from ``pygame.display.list_modes()``:

   To find a suitable size for non-fullscreen windows, it is preferable to
   use ``pygame.display.get_desktop_sizes()`` to get the size of the *current*
   desktop, and to then choose a smaller window size. This way, the window is
   guaranteed to fit, even when the monitor is configured to a lower resolution
   than the maximum supported by the hardware.

   To avoid changing the physical monitor resolution, it is also preferable to
   use ``pygame.display.get_desktop_sizes()`` to determine the fullscreen
   resolution. Developers are strongly advised to default to the current
   physical monitor resolution unless the user explicitly requests a different
   one (e.g. in an options menu or configuration file).

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.list_modes ##

.. function:: mode_ok

   | :sl:`Pick the best color depth for a display mode`
   | :sg:`mode_ok(size, flags=0, depth=0, display=0) -> depth`

   This function uses the same arguments as ``pygame.display.set_mode()``. It
   is used to determine if a requested display mode is available. It will
   return ``0`` if the display mode cannot be set. Otherwise it will return a
   pixel depth that best matches the display asked for.

   Usually the depth argument is not passed, but some platforms can support
   multiple display depths. If passed it will hint to which depth is a better
   match.

   The function will return ``0`` if the passed display flags cannot be set.

   The display index ``0`` means the default display is used.

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.mode_ok ##

.. function:: gl_get_attribute

   | :sl:`Get the value for an OpenGL flag for the current display`
   | :sg:`gl_get_attribute(flag) -> value`

   After calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   it is a good idea to check the value of any requested OpenGL attributes. See
   ``pygame.display.gl_set_attribute()`` for a list of valid flags.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.gl_get_attribute ##

.. function:: gl_set_attribute

   | :sl:`Request an OpenGL display attribute for the display mode`
   | :sg:`gl_set_attribute(flag, value) -> None`

   When calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   Pygame automatically handles setting the OpenGL attributes like color and
   double-buffering. OpenGL offers several other attributes you may want control
   over. Pass one of these attributes as the flag, and its appropriate value.
   This must be called before ``pygame.display.set_mode()``.

   Many settings are the requested minimum. Creating a window with an OpenGL context
   will fail if OpenGL cannot provide the requested attribute, but it may for example
   give you a stencil buffer even if you request none, or it may give you a larger
   one than requested.

   The ``OPENGL`` flags are:

   ::

     GL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,
     GL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,
     GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO

   :const:`GL_MULTISAMPLEBUFFERS`

     Whether to enable multisampling anti-aliasing.
     Defaults to 0 (disabled).

     Set ``GL_MULTISAMPLESAMPLES`` to a value
     above 0 to control the amount of anti-aliasing.
     A typical value is 2 or 3.

   :const:`GL_STENCIL_SIZE`

     Minimum bit size of the stencil buffer. Defaults to 0.

   :const:`GL_DEPTH_SIZE`

     Minimum bit size of the depth buffer. Defaults to 16.

   :const:`GL_STEREO`

     1 enables stereo 3D. Defaults to 0.

   :const:`GL_BUFFER_SIZE`

     Minimum bit size of the frame buffer. Defaults to 0.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. versionadded:: 2.0.0 Additional attributes:

   ::

     GL_ACCELERATED_VISUAL,
     GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,
     GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,
     GL_SHARE_WITH_CURRENT_CONTEXT,
     GL_CONTEXT_RELEASE_BEHAVIOR,
     GL_FRAMEBUFFER_SRGB_CAPABLE

   :const:`GL_CONTEXT_PROFILE_MASK`

     Sets the OpenGL profile to one of these values:

     ::

       GL_CONTEXT_PROFILE_CORE             disable deprecated features
       GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features
       GL_CONTEXT_PROFILE_ES               allow only the ES feature
                                           subset of OpenGL

   :const:`GL_ACCELERATED_VISUAL`

     Set to 1 to require hardware acceleration, or 0 to force software render.
     By default, both are allowed.

   .. ## pygame.display.gl_set_attribute ##

.. function:: get_active

   | :sl:`Returns True when the display is active on the screen`
   | :sg:`get_active() -> bool`

   Returns True when the display Surface is considered actively
   renderable on the screen and may be visible to the user.  This is
   the default state immediately after ``pygame.display.set_mode()``.
   This method may return True even if the application is fully hidden
   behind another application window.

   This will return False if the display Surface has been iconified or
   minimized (either via ``pygame.display.iconify()`` or via an OS
   specific method such as the minimize-icon available on most
   desktops).

   The method can also return False for other reasons without the
   application being explicitly iconified or minimized by the user.  A
   notable example being if the user has multiple virtual desktops and
   the display Surface is not on the active virtual desktop.

   .. note:: This function returning True is unrelated to whether the
       application has input focus.  Please see
       ``pygame.key.get_focused()`` and ``pygame.mouse.get_focused()``
       for APIs related to input focus.

   .. ## pygame.display.get_active ##

.. function:: iconify

   | :sl:`Iconify the display surface`
   | :sg:`iconify() -> bool`

   Request the window for the display surface be iconified or hidden. Not all
   systems and displays support an iconified display. The function will return
   True if successful.

   When the display is iconified ``pygame.display.get_active()`` will return
   ``False``. The event queue should receive an ``ACTIVEEVENT`` event when the
   window has been iconified. Additionally, the event queue also receives a
   ``WINDOWEVENT_MINIMIZED`` event when the window has been iconified on pygame 2.

   .. ## pygame.display.iconify ##

.. function:: toggle_fullscreen

   | :sl:`Switch between fullscreen and windowed displays`
   | :sg:`toggle_fullscreen() -> int`

   Switches the display window between windowed and fullscreen modes.
   Display driver support is not great when using pygame 1, but with
   pygame 2 it is the most reliable method to switch to and from fullscreen.

   Supported display drivers in pygame 1:

    * x11 (Linux/Unix)
    * wayland (Linux/Unix)

   Supported display drivers in pygame 2:

    * windows (Windows)
    * x11 (Linux/Unix)
    * wayland (Linux/Unix)
    * cocoa (OSX/Mac)

   .. Note:: :func:`toggle_fullscreen` doesn't work on Windows
             unless the window size is in :func:`pygame.display.list_modes()` or
             the window is created with the flag ``pygame.SCALED``.
             See `issue #2380 <https://github.com/pygame/pygame/issues/2380>`_.

   .. ## pygame.display.toggle_fullscreen ##

.. function:: set_gamma

   | :sl:`Change the hardware gamma ramps`
   | :sg:`set_gamma(red, green=None, blue=None) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma values on the display hardware. If the
   green and blue arguments are not passed, they will both be the same as red.
   Not all systems and hardware support gamma ramps, if the function succeeds
   it will return ``True``.

   A gamma value of ``1.0`` creates a linear color table. Lower values will
   darken the display and higher values will brighten.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma ##

.. function:: set_gamma_ramp

   | :sl:`Change the hardware gamma ramps with a custom lookup`
   | :sg:`set_gamma_ramp(red, green, blue) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma ramps with an explicit lookup table. Each
   argument should be sequence of 256 integers. The integers should range
   between ``0`` and ``0xffff``. Not all systems and hardware support gamma
   ramps, if the function succeeds it will return ``True``.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma_ramp ##

.. function:: set_icon

   | :sl:`Change the system image for the display window`
   | :sg:`set_icon(Surface) -> None`

   Sets the runtime icon the system will use to represent the display window.
   All windows default to a simple pygame logo for the window icon.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   You can pass any surface, but most systems want a smaller image around
   32x32. The image can have colorkey transparency which will be passed to the
   system.

   Some systems do not allow the window icon to change after it has been shown.
   This function can be called before ``pygame.display.set_mode()`` to create
   the icon before the display mode is set.

   .. ## pygame.display.set_icon ##

.. function:: set_caption

   | :sl:`Set the current window caption`
   | :sg:`set_caption(title, icontitle=None) -> None`

   If the display has a window title, this function will change the name on the
   window. In pygame 1.x, some systems supported an alternate shorter title to
   be used for minimized displays, but in pygame 2 ``icontitle`` does nothing.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   
   .. ## pygame.display.set_caption ##

.. function:: get_caption

   | :sl:`Get the current window caption`
   | :sg:`get_caption() -> (title, icontitle)`

   Returns the title and icontitle for the display window. In pygame 2.x
   these will always be the same value.

   .. ## pygame.display.get_caption ##

.. function:: set_palette

   | :sl:`Set the display color palette for indexed displays`
   | :sg:`set_palette(palette=None) -> None`

   This will change the video display color palette for 8-bit displays. This
   does not change the palette for the actual display Surface, only the palette
   that is used to display the Surface. If no palette argument is passed, the
   system default palette will be restored. The palette is a sequence of
   ``RGB`` triplets.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.set_palette ##

.. function:: get_num_displays

   | :sl:`Return the number of displays`
   | :sg:`get_num_displays() -> int`

   Returns the number of available displays. This is always 1 if
   :func:`pygame.get_sdl_version()` returns a major version number below 2.

   .. versionadded:: 1.9.5

   .. ## pygame.display.get_num_displays ##

.. function:: get_window_size

   | :sl:`Return the size of the window or screen`
   | :sg:`get_window_size() -> tuple`

   Returns the size of the window initialized with :func:`pygame.display.set_mode()`.
   This may differ from the size of the display surface if ``SCALED`` is used.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_window_size ##

.. function:: get_allow_screensaver

   | :sl:`Return whether the screensaver is allowed to run.`
   | :sg:`get_allow_screensaver() -> bool`

   Return whether screensaver is allowed to run whilst the app is running.
   Default is ``False``.
   By default pygame does not allow the screensaver during game play.

   .. note:: Some platforms do not have a screensaver or support
             disabling the screensaver.  Please see
             :func:`pygame.display.set_allow_screensaver()` for
             caveats with screensaver support.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_allow_screensaver ##

.. function:: set_allow_screensaver

   | :sl:`Set whether the screensaver may run`
   | :sg:`set_allow_screensaver(bool) -> None`

   Change whether screensavers should be allowed whilst the app is running.
   The default value of the argument to the function is True.
   By default pygame does not allow the screensaver during game play.

   If the screensaver has been disallowed due to this function, it will automatically
   be allowed to run when :func:`pygame.quit()` is called.

   It is possible to influence the default value via the environment variable
   ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER``, which can be set to either ``0`` (disable)
   or ``1`` (enable).

   .. note:: Disabling screensaver is subject to platform support.
             When platform support is absent, this function will
             silently appear to work even though the screensaver state
             is unchanged.  The lack of feedback is due to SDL not
             providing any supported method for determining whether
             it supports changing the screensaver state.
             ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER`` is available in SDL 2.0.2 or later.
             SDL1.2 does not implement this.

   .. versionadded:: 2.0.0


   .. ## pygame.display.set_allow_screensaver ##

.. ## pygame.display ##


--- Contenu du fichier : event.rst.txt ---
.. include:: common.txt

:mod:`pygame.event`
===================

.. module:: pygame.event
   :synopsis: pygame module for interacting with events and queues

| :sl:`pygame module for interacting with events and queues`

Pygame handles all its event messaging through an event queue. The routines in
this module help you manage that event queue. The input queue is heavily
dependent on the :mod:`pygame.display` module. If the display has not been
initialized and a video mode not set, the event queue may not work properly.

The event queue has an upper limit on the number of events it can hold. When
the queue becomes full new events are quietly dropped. To prevent lost events,
especially input events which signal a quit command, your program must handle
events every frame (with ``pygame.event.get()``, ``pygame.event.pump()``,
``pygame.event.wait()``, ``pygame.event.peek()`` or ``pygame.event.clear()``)
and process them. Not handling events may cause your system to decide your
program has locked up. To speed up queue processing use
:func:`pygame.event.set_blocked()` to limit which events get queued.

To get the state of various input devices, you can forego the event queue and
access the input devices directly with their appropriate modules:
:mod:`pygame.mouse`, :mod:`pygame.key`, and :mod:`pygame.joystick`. If you use
this method, remember that pygame requires some form of communication with the
system window manager and other parts of the platform. To keep pygame in sync
with the system, you will need to call :func:`pygame.event.pump()` to keep
everything current. Usually, this should be called once per game loop.
Note: Joysticks will not send any events until the device has been initialized.

The event queue contains :class:`pygame.event.Event` event objects.
There are a variety of ways to access the queued events, from simply
checking for the existence of events, to grabbing them directly off the stack.
The event queue also offers some simple filtering which can slightly help
performance by blocking certain event types from the queue. Use
:func:`pygame.event.set_allowed()` and :func:`pygame.event.set_blocked()` to
change this filtering. By default, all event types can be placed on the queue.

All :class:`pygame.event.Event` instances contain an event type identifier
and attributes specific to that event type. The event type identifier is
accessible as the :attr:`pygame.event.Event.type` property. Any of the
event specific attributes can be accessed through the
:attr:`pygame.event.Event.__dict__` attribute or directly as an attribute
of the event object (as member lookups are passed through to the object's
dictionary values). The event object has no method functions. Users can create
their own new events with the :func:`pygame.event.Event()` function.

The event type identifier is in between the values of ``NOEVENT`` and
``NUMEVENTS``. User defined events should have a value in the inclusive range
of ``USEREVENT`` to ``NUMEVENTS - 1``. User defined events can get a custom
event number with :func:`pygame.event.custom_type()`. 
It is recommended all user events follow this system.

Events support equality and inequality comparisons. Two events are equal if
they are the same type and have identical attribute values.

While debugging and experimenting, you can print an event object for a quick
display of its type and members. The function :func:`pygame.event.event_name()`
can be used to get a string representing the name of the event type.

Events that come from the system will have a guaranteed set of member
attributes based on the type. The following is a list of event types with their
specific attributes.

::

    QUIT              none
    ACTIVEEVENT       gain, state
    KEYDOWN           key, mod, unicode, scancode
    KEYUP             key, mod, unicode, scancode
    MOUSEMOTION       pos, rel, buttons, touch
    MOUSEBUTTONUP     pos, button, touch
    MOUSEBUTTONDOWN   pos, button, touch
    JOYAXISMOTION     joy (deprecated), instance_id, axis, value
    JOYBALLMOTION     joy (deprecated), instance_id, ball, rel
    JOYHATMOTION      joy (deprecated), instance_id, hat, value
    JOYBUTTONUP       joy (deprecated), instance_id, button
    JOYBUTTONDOWN     joy (deprecated), instance_id, button
    VIDEORESIZE       size, w, h
    VIDEOEXPOSE       none
    USEREVENT         code

.. versionchanged:: 2.0.0 The ``joy`` attribute was deprecated, ``instance_id`` was added.

.. versionchanged:: 2.0.1 The ``unicode`` attribute was added to ``KEYUP`` event.

Note that ``ACTIVEEVENT``, ``VIDEORESIZE`` and ``VIDEOEXPOSE`` are considered
as "legacy" events, the use of pygame2 ``WINDOWEVENT`` API is recommended over
the use of this older API.

You can also find a list of constants for keyboard keys
:ref:`here <key-constants-label>`.

A keyboard event occurs when a key is pressed (``KEYDOWN``) and when a key is released (``KEYUP``) 
The ``key`` attribute of keyboard events contains the value of what key was pressed or released.
The ``mod`` attribute contains information about the state of keyboard modifiers (SHIFT, CTRL, ALT, etc.).
The ``unicode`` attribute stores the 16-bit unicode value of the key that was pressed or released.
The ``scancode`` attribute represents the physical location of a key on the keyboard.

The ``ACTIVEEVENT`` contains information about the application gaining or losing focus. The ``gain`` attribute
will be 1 if the mouse enters the window, otherwise ``gain`` will be 0.  The ``state`` attribute will have a 
value of ``SDL_APPMOUSEFOCUS`` if mouse focus was gained/lost, ``SDL_APPINPUTFOCUS`` if the application loses
or gains keyboard focus, or ``SDL_APPACTIVE`` if the application is minimized (``gain`` will be 0) or restored.

|

When compiled with SDL2, pygame has these additional events and their
attributes.

::

    AUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)
    AUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)
    FINGERMOTION       touch_id, finger_id, x, y, dx, dy
    FINGERDOWN         touch_id, finger_id, x, y, dx, dy
    FINGERUP           touch_id, finger_id, x, y, dx, dy
    MOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y
    MULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers
    TEXTEDITING        text, start, length
    TEXTINPUT          text

.. versionadded:: 1.9.5

.. versionchanged:: 2.0.2 Fixed amount horizontal scroll (x, positive to the right and negative to the left).

.. versionchanged:: 2.0.2 The ``touch`` attribute was added to all the ``MOUSE`` events.

The ``touch`` attribute of ``MOUSE`` events indicates whether or not the events were generated
by a touch input device, and not a real mouse. You might want to ignore such events, if your application
already handles ``FINGERMOTION``, ``FINGERDOWN`` and ``FINGERUP`` events.

.. versionadded:: 2.1.3 Added ``precise_x`` and ``precise_y`` to ``MOUSEWHEEL`` events

``MOUSEWHEEL`` event occurs whenever the mouse wheel is moved. 
The ``which`` attribute determines if the event was generated from a touch input device vs an actual 
mousewheel. 
The ``preciseX`` attribute contains a float with the amount scrolled horizontally (positive to the right,
negative to the left).
The ``preciseY`` attribute contains a float with the amount scrolled vertically (positive away from user,
negative towards user).
The ``flipped`` attribute determines if the values in x and y will be opposite or not. If ``SDL_MOUSEWHEEL_FLIPPED``
is defined, the direction of x and y will be opposite.

``TEXTEDITING`` event is triggered when a user activates an input method via hotkey or selecting an 
input method in a GUI and starts typing

The ``which`` attribute for ``AUDIODEVICE*`` events is an integer representing the index for new audio 
devices that are added. ``AUDIODEVICE*`` events are used to update audio settings or device list. 

|

Many new events were introduced in pygame 2.

pygame can recognize text or files dropped in its window. If a file
is dropped, ``DROPFILE`` event will be sent, ``file`` will be its path.
The ``DROPTEXT`` event is only supported on X11.

``MIDIIN`` and ``MIDIOUT`` are events reserved for :mod:`pygame.midi` use.
``MIDI*`` events differ from ``AUDIODEVICE*`` events in that AUDIODEVICE 
events are triggered when there is a state change related to an audio 
input/output device. 

pygame 2 also supports controller hot-plugging

::

   Event name               Attributes and notes

   DROPFILE                 file
   DROPBEGIN                (SDL backend >= 2.0.5)
   DROPCOMPLETE             (SDL backend >= 2.0.5)
   DROPTEXT                 text (SDL backend >= 2.0.5)
   MIDIIN
   MIDIOUT
   CONTROLLERDEVICEADDED    device_index
   JOYDEVICEADDED           device_index
   CONTROLLERDEVICEREMOVED  instance_id
   JOYDEVICEREMOVED         instance_id
   CONTROLLERDEVICEREMAPPED instance_id
   KEYMAPCHANGED            (SDL backend >= 2.0.4)
   CLIPBOARDUPDATE
   RENDER_TARGETS_RESET     (SDL backend >= 2.0.2)
   RENDER_DEVICE_RESET      (SDL backend >= 2.0.4)
   LOCALECHANGED            (SDL backend >= 2.0.14)

Also in this version, ``instance_id`` attributes were added to joystick events,
and the ``joy`` attribute was deprecated.

``KEYMAPCHANGED`` is a type of an event sent when keymap changes due to a 
system event such as an input language or keyboard layout change.

``CLIPBOARDUPDATE`` is an event sent when clipboard changes. This can still
be considered as an experimental feature, some kinds of clipboard changes might
not trigger this event.

``LOCALECHANGED`` is an event sent when user locale changes

.. versionadded:: 2.0.0

.. versionadded:: 2.1.3 ``KEYMAPCHANGED``, ``CLIPBOARDUPDATE``, 
   ``RENDER_TARGETS_RESET``, ``RENDER_DEVICE_RESET`` and ``LOCALECHANGED``

|

Since pygame 2.0.1, there are a new set of events, called window events.
Here is a list of all window events, along with a short description

::

   Event type                Short description

   WINDOWSHOWN            Window became shown
   WINDOWHIDDEN           Window became hidden
   WINDOWEXPOSED          Window got updated by some external event
   WINDOWMOVED            Window got moved
   WINDOWRESIZED          Window got resized
   WINDOWSIZECHANGED      Window changed its size
   WINDOWMINIMIZED        Window was minimized
   WINDOWMAXIMIZED        Window was maximized
   WINDOWRESTORED         Window was restored
   WINDOWENTER            Mouse entered the window
   WINDOWLEAVE            Mouse left the window
   WINDOWFOCUSGAINED      Window gained focus
   WINDOWFOCUSLOST        Window lost focus
   WINDOWCLOSE            Window was closed
   WINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)
   WINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)
   WINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)
   WINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)


``WINDOWMOVED``, ``WINDOWRESIZED`` and ``WINDOWSIZECHANGED`` have ``x`` and
``y`` attributes, ``WINDOWDISPLAYCHANGED`` has a ``display_index`` attribute.
All windowevents have a ``window`` attribute.

.. versionadded:: 2.0.1

.. versionadded:: 2.1.3 ``WINDOWICCPROFCHANGED`` and ``WINDOWDISPLAYCHANGED``

|

On Android, the following events can be generated

::

   Event type                 Short description

   APP_TERMINATING           OS is terminating the application
   APP_LOWMEMORY             OS is low on memory, try to free memory if possible
   APP_WILLENTERBACKGROUND   Application is entering background
   APP_DIDENTERBACKGROUND    Application entered background
   APP_WILLENTERFOREGROUND   Application is entering foreground
   APP_DIDENTERFOREGROUND    Application entered foreground

.. versionadded:: 2.1.3

|

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system. If you are not using other event functions in your
   game, you should call ``pygame.event.pump()`` to allow pygame to handle
   internal actions.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.event` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.pump ##

.. function:: get

   | :sl:`get events from the queue`
   | :sg:`get(eventtype=None) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True, exclude=None) -> Eventlist`

   This will get all the messages and remove them from the queue. If a type or
   sequence of types is given only those messages will be removed from the
   queue and returned.

   If a type or sequence of types is passed in the ``exclude`` argument
   instead, then all only *other* messages will be removed from the queue. If
   an ``exclude`` parameter is passed, the ``eventtype`` parameter *must* be
   None.

   If you are only taking specific events from the queue, be aware that the
   queue could eventually fill up with the events you are not interested.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument
   .. versionchanged:: 2.0.2 Added ``exclude`` argument

   .. ## pygame.event.get ##

.. function:: poll

   | :sl:`get a single event from the queue`
   | :sg:`poll() -> Event instance`

   Returns a single event from the queue. If the event queue is empty an event
   of type ``pygame.NOEVENT`` will be returned immediately. The returned event
   is removed from the queue.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.poll ##

.. function:: wait

   | :sl:`wait for a single event from the queue`
   | :sg:`wait() -> Event instance`
   | :sg:`wait(timeout) -> Event instance`

   Returns a single event from the queue. If the queue is empty this function
   will wait until one is created. From pygame 2.0.0, if a ``timeout`` argument
   is given, the function will return an event of type ``pygame.NOEVENT`` 
   if no events enter the queue in ``timeout`` milliseconds. The event is removed
   from the queue once it has been returned. While the program is waiting it will
   sleep in an idle state. This is important for programs that want to share the
   system with other applications.

   .. versionchanged:: 2.0.0.dev13 Added ``timeout`` argument

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.wait ##

.. function:: peek

   | :sl:`test if event types are waiting on the queue`
   | :sg:`peek(eventtype=None) -> bool`
   | :sg:`peek(eventtype=None, pump=True) -> bool`

   Returns ``True`` if there are any events of the given type waiting on the
   queue. If a sequence of event types is passed, this will return ``True`` if
   any of those events are on the queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.peek ##

.. function:: clear

   | :sl:`remove all events from the queue`
   | :sg:`clear(eventtype=None) -> None`
   | :sg:`clear(eventtype=None, pump=True) -> None`

   Removes all events from the queue. If ``eventtype`` is given, removes the given event
   or sequence of events. This has the same effect as :func:`pygame.event.get()` except ``None``
   is returned. It can be slightly more efficient when clearing a full event queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.clear ##

.. function:: event_name

   | :sl:`get the string name from an event id`
   | :sg:`event_name(type) -> string`

   Returns a string representing the name (in CapWords style) of the given
   event type.

   "UserEvent" is returned for all values in the user event id range.
   "Unknown" is returned when the event type does not exist.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   .. ## pygame.event.event_name ##


.. function:: set_blocked

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_blocked(type) -> None`
   | :sg:`set_blocked(typelist) -> None`
   | :sg:`set_blocked(None) -> None`

   The given event types are not allowed to appear on the event queue. By
   default all events can be placed on the queue. It is safe to disable an
   event type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are blocked
   from being placed on the queue.

   .. ## pygame.event.set_blocked ##

.. function:: set_allowed

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_allowed(type) -> None`
   | :sg:`set_allowed(typelist) -> None`
   | :sg:`set_allowed(None) -> None`

   The given event types are allowed to appear on the event queue. By default,
   all event types can be placed on the queue. It is safe to enable an event
   type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are allowed
   to be placed on the queue.

   .. ## pygame.event.set_allowed ##

.. function:: get_blocked

   | :sl:`test if a type of event is blocked from the queue`
   | :sg:`get_blocked(type) -> bool`
   | :sg:`get_blocked(typelist) -> bool`

   Returns ``True`` if the given event type is blocked from the queue. If a
   sequence of event types is passed, this will return ``True`` if any of those
   event types are blocked.

   .. ## pygame.event.get_blocked ##

.. function:: set_grab

   | :sl:`control the sharing of input devices with other applications`
   | :sg:`set_grab(bool) -> None`

   When your program runs in a windowed environment, it will share the mouse
   and keyboard devices with other applications that have focus. If your
   program sets the event grab to ``True``, it will lock all input into your
   program.

   It is best to not always grab the input, since it prevents the user from
   doing other things on their system.

   .. ## pygame.event.set_grab ##

.. function:: get_grab

   | :sl:`test if the program is sharing input devices`
   | :sg:`get_grab() -> bool`

   Returns ``True`` when the input events are grabbed for this application.

   .. ## pygame.event.get_grab ##

.. function:: set_keyboard_grab

   | :sl:`grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.`
   | :sg:`set_keyboard_grab(bool) -> None`

   Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.
   Note that not all system keyboard shortcuts can be captured by applications (one example is Ctrl+Alt+Del on Windows).
   This is primarily intended for specialized applications such as VNC clients or VM frontends. Normal games should not use keyboard grab.

   .. versionadded:: 2.5.0

   .. ## pygame.event.set_keyboard_grab ##

.. function:: get_keyboard_grab

   | :sl:`get the current keyboard grab state`
   | :sg:`get_keyboard_grab() -> bool`

   Returns ``True`` when keyboard grab is enabled.

   .. versionadded:: 2.5.0

   .. ## pygame.event.get_keyboard_grab ##

.. function:: post

   | :sl:`place a new event on the queue`
   | :sg:`post(Event) -> bool`

   Places the given event at the end of the event queue.

   This is usually used for placing custom events on the event queue.
   Any type of event can be posted, and the events posted can have any attributes.

   This returns a boolean on whether the event was posted or not. Blocked events
   cannot be posted, and this function returns ``False`` if you try to post them.

   .. versionchanged:: 2.0.1 returns a boolean, previously returned ``None``

   .. ## pygame.event.post ##

.. function:: custom_type

   | :sl:`make custom user event type`
   | :sg:`custom_type() -> int`

   Reserves a ``pygame.USEREVENT`` for a custom use.

   If too many events are made a :exc:`pygame.error` is raised.

   .. versionadded:: 2.0.0.dev3

   .. ## pygame.event.custom_type ##

.. class:: Event

   | :sl:`pygame object for representing events`
   | :sg:`Event(type, dict) -> Event`
   | :sg:`Event(type, \**attributes) -> Event`

   A pygame object used for representing an event. ``Event`` instances
   support attribute assignment and deletion.

   When creating the object, the attributes may come from a dictionary
   argument with string keys or from keyword arguments.

   .. note::
      From version 2.1.3 ``EventType`` is an alias for ``Event``. Beforehand,
      ``Event`` was a function that returned ``EventType`` instances. Use of
      ``Event`` is preferred over ``EventType`` wherever it is possible, as
      the latter could be deprecated in a future version.

   .. attribute:: type

      | :sl:`event type identifier.`
      | :sg:`type -> int`

      Read-only. The event type identifier. For user created event
      objects, this is the ``type`` argument passed to
      :func:`pygame.event.Event()`.

      For example, some predefined event identifiers are ``QUIT`` and
      ``MOUSEMOTION``.

      .. ## pygame.event.Event.type ##

   .. attribute:: __dict__

      | :sl:`event attribute dictionary`
      | :sg:`__dict__ -> dict`

      Read-only. The event type specific attributes of an event. The
      ``dict`` attribute is a synonym for backward compatibility.

      For example, the attributes of a ``KEYDOWN`` event would be ``unicode``,
      ``key``, and ``mod``

      .. ## pygame.event.Event.__dict__ ##

   .. versionadded:: 1.9.2 Mutable attributes.

   .. ## pygame.event.Event ##

.. ## pygame.event ##


--- Contenu du fichier : mask.rst.txt ---
.. include:: common.txt

:mod:`pygame.mask`
==================

.. module:: pygame.mask
   :synopsis: pygame module for image masks.

| :sl:`pygame module for image masks.`

Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
to store which parts collide.

.. versionadded:: 1.8

.. versionchanged:: 2.0.2 Mask functions now support keyword arguments.

.. versionchanged:: 2.0.2 Mask functions that take positions or offsets now
                    support :class:`pygame.math.Vector2` arguments.


.. function:: from_surface

   | :sl:`Creates a Mask from the given surface`
   | :sg:`from_surface(surface) -> Mask`
   | :sg:`from_surface(surface, threshold=127) -> Mask`

   Creates a :class:`Mask` object from the given surface by setting all the
   opaque pixels and not setting the transparent pixels.

   If the surface uses a color-key, then it is used to decide which bits in
   the resulting mask are set. All the pixels that are **not** equal to the
   color-key are **set** and the pixels equal to the color-key are not set.

   If a color-key is not used, then the alpha value of each pixel is used to
   decide which bits in the resulting mask are set. All the pixels that have an
   alpha value **greater than** the ``threshold`` parameter are **set** and the
   pixels with an alpha value less than or equal to the ``threshold`` are
   not set.

   :param Surface surface: the surface to create the mask from
   :param int threshold: (optional) the alpha threshold (default is 127) to
      compare with each surface pixel's alpha value, if the ``surface`` is
      color-keyed this parameter is ignored

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. note::
      This function is used to create the masks for
      :func:`pygame.sprite.collide_mask`.

   .. ## pygame.mask.from_surface ##

.. function:: from_threshold

   | :sl:`Creates a mask by thresholding Surfaces`
   | :sg:`from_threshold(surface, color) -> Mask`
   | :sg:`from_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -> Mask`

   This is a more featureful method of getting a :class:`Mask` from a surface.

   If the optional ``othersurface`` is not used, all the pixels **within** the
   ``threshold`` of the ``color`` parameter are **set** in the resulting mask.

   If the optional ``othersurface`` is used, every pixel in the first surface
   that is **within** the ``threshold`` of the corresponding pixel in
   ``othersurface`` is **set** in the resulting mask.

   :param Surface surface: the surface to create the mask from
   :param color: color used to check if the surface's pixels are within the
      given ``threshold`` range, this parameter is ignored if the optional
      ``othersurface`` parameter is supplied
   :type color: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param threshold: (optional) the threshold range used to check the difference
      between two colors (default is ``(0, 0, 0, 255)``)
   :type threshold: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param Surface othersurface: (optional) used to check whether the pixels of
      the first surface are within the given ``threshold`` range of the pixels
      from this surface (default is ``None``)
   :param int palette_colors: (optional) indicates whether to use the palette
      colors or not, a nonzero value causes the palette colors to be used and a
      0 causes them not to be used (default is 1)

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. ## pygame.mask.from_threshold ##

.. class:: Mask

   | :sl:`pygame object for representing 2D bitmasks`
   | :sg:`Mask(size=(width, height)) -> Mask`
   | :sg:`Mask(size=(width, height), fill=False) -> Mask`

   A ``Mask`` object is used to represent a 2D bitmask. Each bit in
   the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
   to indicate an unset bit. Set bits in a mask can be used to detect collisions
   with other masks and their set bits.

   A filled mask has all of its bits set to 1, conversely an
   unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
   created unfilled (default) or filled by using the ``fill`` parameter. Masks
   can also be cleared or filled using the :func:`pygame.mask.Mask.clear()` and
   :func:`pygame.mask.Mask.fill()` methods respectively.

   A mask's coordinates start in the top left corner at ``(0, 0)`` just like
   :mod:`pygame.Surface`. Individual bits can be accessed using the
   :func:`pygame.mask.Mask.get_at()` and :func:`pygame.mask.Mask.set_at()`
   methods.

   .. _mask-offset-label:

   The methods :meth:`overlap`, :meth:`overlap_area`, :meth:`overlap_mask`,
   :meth:`draw`, :meth:`erase`, and :meth:`convolve` use an offset parameter
   to indicate the offset of another mask's top left corner from the calling
   mask's top left corner. The calling mask's top left corner is considered to
   be the origin ``(0, 0)``. Offsets are a sequence of two values
   ``(x_offset, y_offset)``. Positive and negative offset values are supported.

   ::

                 0 to x (x_offset)
                 :    :
         0 ..... +----:---------+
         to      |    :         |
         y .......... +-----------+
      (y_offset) |    | othermask |
                 |    +-----------+
                 | calling_mask |
                 +--------------+

   :param size: the dimensions of the mask (width and height)
   :param bool fill: (optional) create an unfilled mask (default: ``False``) or
      filled mask (``True``)

   :returns: a newly created :class:`Mask` object
   :rtype: Mask

   .. versionchanged:: 2.0.0
      Shallow copy support added. The :class:`Mask` class supports the special
      method ``__copy__()`` and shallow copying via ``copy.copy(mask)``.
   .. versionchanged:: 2.0.0 Subclassing support added. The :class:`Mask` class
      can be used as a base class.
   .. versionchanged:: 1.9.5 Added support for keyword arguments.
   .. versionchanged:: 1.9.5 Added the optional keyword parameter ``fill``.
   .. versionchanged:: 1.9.5 Added support for masks with a width and/or a
      height of 0.

   .. method:: copy

      | :sl:`Returns a new copy of the mask`
      | :sg:`copy() -> Mask`

      :returns: a new copy of this mask, the new mask will have the same width,
         height, and set/unset bits as the original
      :rtype: Mask

      .. note::
         If a mask subclass needs to copy any instance specific attributes
         then it should override the ``__copy__()`` method. The overridden
         ``__copy__()`` method needs to call ``super().__copy__()`` and then
         copy the required data as in the following example code.

         ::

            class SubMask(pygame.mask.Mask):
                def __copy__(self):
                    new_mask = super().__copy__()
                    # Do any SubMask attribute copying here.
                    return new_mask

      .. versionadded:: 2.0.0

      .. ## Mask.copy ##

   .. method:: get_size

      | :sl:`Returns the size of the mask`
      | :sg:`get_size() -> (width, height)`

      :returns: the size of the mask, (width, height)
      :rtype: tuple(int, int)

      .. ## Mask.get_size ##

   .. method:: get_rect

      | :sl:`Returns a Rect based on the size of the mask`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new :func:`pygame.Rect` object based on the size of this mask.
      The rect's default position will be ``(0, 0)`` and its default width and
      height will be the same as this mask's. The rect's attributes can be
      altered via :func:`pygame.Rect` attribute keyword arguments/values passed
      into this method. As an example, ``a_mask.get_rect(center=(10, 5))`` would
      create a :func:`pygame.Rect` based on the mask's size centered at the
      given position.

      :param dict kwargs: :func:`pygame.Rect` attribute keyword arguments/values
         that will be applied to the rect

      :returns: a new :func:`pygame.Rect` object based on the size of this mask
         with any :func:`pygame.Rect` attribute keyword arguments/values applied
         to it
      :rtype: Rect

      .. versionadded:: 2.0.0

      .. ## Mask.get_rect ##

   .. method:: get_at

      | :sl:`Gets the bit at the given position`
      | :sg:`get_at(pos) -> int`

      :param pos: the position of the bit to get (x, y)

      :returns: 1 if the bit is set, 0 if the bit is not set
      :rtype: int

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.get_at ##

   .. method:: set_at

      | :sl:`Sets the bit at the given position`
      | :sg:`set_at(pos) -> None`
      | :sg:`set_at(pos, value=1) -> None`

      :param pos: the position of the bit to set (x, y)
      :param int value: any nonzero int will set the bit to 1, 0 will set the
         bit to 0 (default is 1)

      :returns: ``None``
      :rtype: NoneType

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.set_at ##

   .. method:: overlap

      | :sl:`Returns the point of intersection`
      | :sg:`overlap(other, offset) -> (x, y)`
      | :sg:`overlap(other, offset) -> None`

      Returns the first point of intersection encountered between this mask and
      ``other``. A point of intersection is 2 overlapping set bits.

      The current algorithm searches the overlapping area in
      ``sizeof(unsigned long int) * CHAR_BIT`` bit wide column blocks (the value
      of ``sizeof(unsigned long int) * CHAR_BIT`` is platform dependent, for
      clarity it will be referred to as ``W``). Starting at the top left corner
      it checks bits 0 to ``W - 1`` of the first row (``(0, 0)`` to
      ``(W - 1, 0)``) then continues to the next row (``(0, 1)`` to
      ``(W - 1, 1)``). Once this entire column block is checked, it continues to
      the next one (``W`` to ``2 * W - 1``). This is repeated until it finds a
      point of intersection or the entire overlapping area is checked.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: point of intersection or ``None`` if no intersection
      :rtype: tuple(int, int) or NoneType

      .. ## Mask.overlap ##

   .. method:: overlap_area

      | :sl:`Returns the number of overlapping set bits`
      | :sg:`overlap_area(other, offset) -> numbits`

      Returns the number of overlapping set bits between between this mask and
      ``other``.

      This can be useful for collision detection. An approximate collision
      normal can be found by calculating the gradient of the overlapping area
      through the finite difference.

      ::

         dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
         dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: the number of overlapping set bits
      :rtype: int

      .. ## Mask.overlap_area ##

   .. method:: overlap_mask

      | :sl:`Returns a mask of the overlapping set bits`
      | :sg:`overlap_mask(other, offset) -> Mask`

      Returns a :class:`Mask`, the same size as this mask, containing the
      overlapping set bits between this mask and ``other``.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: a newly created :class:`Mask` with the overlapping bits set
      :rtype: Mask

      .. ## Mask.overlap_mask ##

   .. method:: fill

      | :sl:`Sets all bits to 1`
      | :sg:`fill() -> None`

      Sets all bits in the mask to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.fill ##

   .. method:: clear

      | :sl:`Sets all bits to 0`
      | :sg:`clear() -> None`

      Sets all bits in the mask to 0.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.clear ##

   .. method:: invert

      | :sl:`Flips all the bits`
      | :sg:`invert() -> None`

      Flips all of the bits in the mask. All the set bits are cleared to 0 and
      all the unset bits are set to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.invert ##

   .. method:: scale

      | :sl:`Resizes a mask`
      | :sg:`scale((width, height)) -> Mask`

      Creates a new :class:`Mask` of the requested size with its bits scaled
      from this mask.

      :param size: the width and height (size) of the mask to create

      :returns: a new :class:`Mask` object with its bits scaled from this mask
      :rtype: Mask

      :raises ValueError: if ``width < 0`` or ``height < 0``

      .. ## Mask.scale ##

   .. method:: draw

      | :sl:`Draws a mask onto another`
      | :sg:`draw(other, offset) -> None`

      Performs a bitwise OR, drawing ``othermask`` onto this mask.

      :param Mask other: the mask to draw onto this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.draw ##

   .. method:: erase

      | :sl:`Erases a mask from another`
      | :sg:`erase(other, offset) -> None`

      Erases (clears) all bits set in ``other`` from this mask.

      :param Mask other: the mask to erase from this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.erase ##

   .. method:: count

      | :sl:`Returns the number of set bits`
      | :sg:`count() -> bits`

      :returns: the number of set bits in the mask
      :rtype: int

      .. ## Mask.count ##

   .. method:: centroid

      | :sl:`Returns the centroid of the set bits`
      | :sg:`centroid() -> (x, y)`

      Finds the centroid (the center mass of the set bits) for this mask.

      :returns: a coordinate tuple indicating the centroid of the mask, it will
         return ``(0, 0)`` if the mask has no bits set
      :rtype: tuple(int, int)

      .. ## Mask.centroid ##

   .. method:: angle

      | :sl:`Returns the orientation of the set bits`
      | :sg:`angle() -> theta`

      Finds the approximate orientation (from -90 to 90 degrees) of the set bits
      in the mask. This works best if performed on a mask with only one
      connected component.

      :returns: the orientation of the set bits in the mask, it will return
         ``0.0`` if the mask has no bits set
      :rtype: float

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.angle ##

   .. method:: outline

      | :sl:`Returns a list of points outlining an object`
      | :sg:`outline() -> [(x, y), ...]`
      | :sg:`outline(every=1) -> [(x, y), ...]`

      Returns a list of points of the outline of the first connected component
      encountered in the mask. To find a connected component, the mask is
      searched per row (left to right) starting in the top left corner.

      The ``every`` optional parameter skips set bits in the outline. For
      example, setting it to 10 would return a list of every 10th set bit in the
      outline.

      :param int every: (optional) indicates the number of bits to skip over in
         the outline (default is 1)

      :returns: a list of points outlining the first connected component
         encountered, an empty list is returned if the mask has no bits set
      :rtype: list[tuple(int, int)]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.outline ##

   .. method:: convolve

      | :sl:`Returns the convolution of this mask with another mask`
      | :sg:`convolve(other) -> Mask`
      | :sg:`convolve(other, output=None, offset=(0, 0)) -> Mask`

      Convolve this mask with the given ``other`` Mask.

      :param Mask other: mask to convolve this mask with
      :param output: (optional) mask for output (default is ``None``)
      :type output: Mask or NoneType
      :param offset: the offset of ``other`` from this mask, (default is
         ``(0, 0)``)

      :returns: a :class:`Mask` with the ``(i - offset[0], j - offset[1])`` bit
         set, if shifting ``other`` (such that its bottom right corner is at
         ``(i, j)``) causes it to overlap with this mask

         If an ``output`` Mask is specified, the output is drawn onto it and
         it is returned. Otherwise a mask of size ``(MAX(0, width + other mask's
         width - 1), MAX(0, height + other mask's height - 1))`` is created and
         returned.
      :rtype: Mask

      .. ## Mask.convolve ##

   .. method:: connected_component

      | :sl:`Returns a mask containing a connected component`
      | :sg:`connected_component() -> Mask`
      | :sg:`connected_component(pos) -> Mask`

      A connected component is a group (1 or more) of connected set bits
      (orthogonally and diagonally). The SAUF algorithm, which checks 8 point
      connectivity, is used to find a connected component in the mask.

      By default this method will return a :class:`Mask` containing the largest
      connected component in the mask. Optionally, a bit coordinate can be
      specified and the connected component containing it will be returned. If
      the bit at the given location is not set, the returned :class:`Mask` will
      be empty (no bits set).

      :param pos: (optional) selects the connected component that contains the
         bit at this position

      :returns: a :class:`Mask` object (same size as this mask) with the largest
         connected component from this mask, if this mask has no bits set then
         an empty mask will be returned

         If the ``pos`` parameter is provided then the mask returned will have
         the connected component that contains this position. An empty mask will
         be returned if the ``pos`` parameter selects an unset bit.
      :rtype: Mask

      :raises IndexError: if the optional ``pos`` parameter is outside of the
         mask's bounds

      .. ## Mask.connected_component ##

   .. method:: connected_components

      | :sl:`Returns a list of masks of connected components`
      | :sg:`connected_components() -> [Mask, ...]`
      | :sg:`connected_components(minimum=0) -> [Mask, ...]`

      Provides a list containing a :class:`Mask` object for each connected
      component.

      :param int minimum: (optional) indicates the minimum number of bits (to
	 filter out noise) per connected component (default is 0, which equates
 	 to no minimum and is equivalent to setting it to 1, as a connected
         component must have at least 1 bit set)

      :returns: a list containing a :class:`Mask` object for each connected
         component, an empty list is returned if the mask has no bits set
      :rtype: list[Mask]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.connected_components ##

   .. method:: get_bounding_rects

      | :sl:`Returns a list of bounding rects of connected components`
      | :sg:`get_bounding_rects() -> [Rect, ...]`

      Provides a list containing a bounding rect for each connected component.

      :returns: a list containing a bounding rect for each connected component,
         an empty list is returned if the mask has no bits set
      :rtype: list[Rect]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.get_bounding_rects ##

   .. method:: to_surface

      | :sl:`Returns a surface with the mask drawn on it`
      | :sg:`to_surface() -> Surface`
      | :sg:`to_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface`

      Draws this mask on the given surface. Set bits (bits set to 1) and unset
      bits (bits set to 0) can be drawn onto a surface.

      :param surface: (optional) Surface to draw mask onto, if no surface is
         provided one will be created (default is ``None``, which will cause a
         surface with the parameters
         ``Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)`` to be
         created, drawn on, and returned)
      :type surface: Surface or None
      :param setsurface: (optional) use this surface's color values to draw
         set bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``setcolor`` value
      :type setsurface: Surface or None
      :param unsetsurface: (optional) use this surface's color values to draw
         unset bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``unsetcolor`` value
      :type unsetsurface: Surface or None
      :param setcolor: (optional) color to draw set bits (default is
         ``(255, 255, 255, 255)``, white), use ``None`` to skip drawing the set
         bits, the ``setsurface`` parameter (if set) will takes precedence over
         this parameter
      :type setcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param unsetcolor: (optional) color to draw unset bits (default is
         ``(0, 0, 0, 255)``, black), use ``None`` to skip drawing the unset
         bits, the ``unsetsurface`` parameter (if set) will takes precedence
         over this parameter
      :type unsetcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param dest: (optional) surface destination of where to position the
         topleft corner of the mask being drawn (default is ``(0, 0)``), if a
         Rect is used as the ``dest`` parameter, its ``x`` and ``y`` attributes
         will be used as the destination, **NOTE1:** rects with a negative width
         or height value will not be normalized before using their ``x`` and
         ``y`` values, **NOTE2:** this destination value is only used to
         position the mask on the surface, it does not offset the ``setsurface``
         and ``unsetsurface`` from the mask, they are always aligned with the
         mask (i.e. position ``(0, 0)`` on the mask always corresponds to
         position ``(0, 0)`` on the ``setsurface`` and ``unsetsurface``)
      :type dest: Rect or tuple(int, int) or list(int, int) or Vector2(int, int)

      :returns: the ``surface`` parameter (or a newly created surface if no
         ``surface`` parameter was provided) with this mask drawn on it
      :rtype: Surface

      :raises ValueError: if the ``setsurface`` parameter or ``unsetsurface``
         parameter does not have the same format (bytesize/bitsize/alpha) as
         the ``surface`` parameter

      .. note ::
         To skip drawing the set bits, both ``setsurface`` and ``setcolor`` must
         be ``None``. The ``setsurface`` parameter defaults to ``None``, but
         ``setcolor`` defaults to a color value and therefore must be set to
         ``None``.

      .. note ::
         To skip drawing the unset bits, both ``unsetsurface`` and
         ``unsetcolor`` must be ``None``. The ``unsetsurface`` parameter
         defaults to ``None``, but ``unsetcolor`` defaults to a color value and
         therefore must be set to ``None``.

      .. versionadded:: 2.0.0

      .. ## Mask.to_surface ##

   .. ## pygame.mask.Mask ##

.. ## pygame.mask ##


--- Contenu du fichier : context.rst.txt ---
.. include:: common.txt

:mod:`pygame.context`
======================

.. module:: pygame.context
    :synopsis: pygame module to provide additional context about the system

| :sl:`pygame module to provide additional context about the system`

**EXPERIMENTAL!** This API may change or disappear in later pygame releases. 
If you use this, your code may break with the next pygame release.
This is a new module, so we are marking it experimental for now.
We probably won't have to change API, but we're keeping the possibility
open just in case something obvious comes up.

.. versionadded:: 2.1.3

.. function:: get_pref_path

   | :sl:`get a writeable folder for your app`
   | :sg:`get_pref_path(org, app) -> path`

   When distributing apps, it's helpful to have a way to get a writeable path,
   because it's what apps are expected to do, and because sometimes the local
   space around the app isn't writeable to the app.

   This function returns a platform specific path for your app to store
   savegames, settings, and the like. This path is unique per user and
   per app name.

   It takes two strings, ``org`` and ``app``, referring to the "organization"
   and "application name." For example, the organization could be "Valve," 
   and the application name could be "Half Life 2." It then will figure out the
   preferred path, **creating the folders referenced by the path if necessary**,
   and return a string containing the absolute path.

   For example::

        On Windows, it would resemble
        C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\

        On macOS, it would resemble
        /Users/bob/Library/Application Support/My Program Name/

        And on Linux it would resemble
        /home/bob/.local/share/My Program Name/
    
   .. versionadded:: 2.1.3

.. function:: get_pref_locales

   | :sl:`get preferred locales set on the system`
   | :sg:`get_pref_locales() -> list[locale]`

   Returns a list of "locale" dicts, sorted in descending order of preference
   set on the host OS (the most preferred locale is the first element). May
   also be an empty list if pygame could not find this information.

   Each "locale" dict contains the language code which can be accessed by the
   key ``"language"``. This language code is an ISO-639 language specifier 
   (such as "en" for English, "de" for German, etc).
   A "locale" dict may also optionally contain a ``"country"`` field, whose
   value is an ISO-3166 country code (such as "US" for the United States, 
   "CA" for Canada, etc). If this field is not set or undetermined, it is 
   ``None``.
   A "locale" dict which looks like ``{'language': 'en', 'country': 'US'}``
   indicates the user prefers American English, while
   ``{'language': 'en', 'country': None}`` indicates that the user prefers
   English, generically.

   This might be a bit of an expensive call because it has to query the OS. So
   this function must not be called in a game loop, instead it's best to ask 
   for this once and save the results. However, this list can change when the
   user changes a system preference outside of your program. pygame will send
   a ``LOCALECHANGED`` event in this case, if possible, and you can call this
   function again to get an updated copy of preferred locales.

   .. note::
        Since the organization and app names can potentially be used as
        a folder name, it is highly encouraged to avoid punctuation.
        Instead stick to letters, numbers, and spaces.

   .. note::
        The ``appdirs`` library has similar functionality for this use case,
        but has more "folder types" to choose from.

   .. versionadded:: 2.1.3


--- Contenu du fichier : locals.rst.txt ---
.. include:: common.txt

:mod:`pygame.locals`
====================

.. module:: pygame.locals
   :synopsis: pygame constants

| :sl:`pygame constants`

This module contains various constants used by pygame. Its contents are
automatically placed in the pygame module namespace. However, an application
can use ``pygame.locals`` to include only the pygame constants with a ``from
pygame.locals import *``.

Detailed descriptions of the various constants can be found throughout the
pygame documentation. Here are the locations of some of them.

   - The :mod:`pygame.display` module contains flags like ``FULLSCREEN`` used
     by :func:`pygame.display.set_mode`.
   - The :mod:`pygame.event` module contains the various event types.
   - The :mod:`pygame.key` module lists the keyboard constants and modifiers
     (``K_``\* and ``MOD_``\*) relating to the ``key`` and ``mod`` attributes of
     the ``KEYDOWN`` and ``KEYUP`` events.
   - The :mod:`pygame.time` module defines ``TIMER_RESOLUTION``.

.. ## pygame.locals ##


--- Contenu du fichier : cursors.rst.txt ---
.. include:: common.txt

:mod:`pygame.cursors`
=====================

.. module:: pygame.cursors
   :synopsis: pygame module for cursor resources

| :sl:`pygame module for cursor resources`

Pygame offers control over the system hardware cursor. Pygame supports
black and white cursors (bitmap cursors), as well as system variant cursors and color cursors.
You control the cursor with functions inside :mod:`pygame.mouse`.

This cursors module contains functions for loading and decoding various
cursor formats. These allow you to easily store your cursors in external files
or directly as encoded python strings.

The module includes several standard cursors. The :func:`pygame.mouse.set_cursor()`
function takes several arguments. All those arguments have been stored in a
single tuple you can call like this:

::

   >>> pygame.mouse.set_cursor(*pygame.cursors.arrow)
   
The following variables can be passed to ``pygame.mouse.set_cursor`` function:

   * ``pygame.cursors.arrow``

   * ``pygame.cursors.diamond``

   * ``pygame.cursors.broken_x``

   * ``pygame.cursors.tri_left``

   * ``pygame.cursors.tri_right``

This module also contains a few cursors as formatted strings. You'll need to
pass these to ``pygame.cursors.compile()`` function before you can use them.
The example call would look like this:

::

   >>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)
   >>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)

The following strings can be converted into cursor bitmaps with
``pygame.cursors.compile()`` :

   * ``pygame.cursors.thickarrow_strings``

   * ``pygame.cursors.sizer_x_strings``

   * ``pygame.cursors.sizer_y_strings``

   * ``pygame.cursors.sizer_xy_strings``
   
   * ``pygame.cursor.textmarker_strings``

.. function:: compile

   | :sl:`create binary cursor data from simple strings`
   | :sg:`compile(strings, black='X', white='.', xor='o') -> data, mask`

   A sequence of strings can be used to create binary cursor data for the
   system cursor. This returns the binary data in the form of two tuples.
   Those can be passed as the third and fourth arguments respectively of the 
   :func:`pygame.mouse.set_cursor()` function.

   If you are creating your own cursor strings, you can use any value represent
   the black and white pixels. Some system allow you to set a special toggle
   color for the system color, this is also called the xor color. If the system
   does not support xor cursors, that color will simply be black.
   
   The height must be divisible by 8. The width of the strings must all be equal 
   and be divisible by 8. If these two conditions are not met, ``ValueError`` is
   raised.
   An example set of cursor strings looks like this

   ::

       thickarrow_strings = (               #sized 24x24
         "XX                      ",
         "XXX                     ",
         "XXXX                    ",
         "XX.XX                   ",
         "XX..XX                  ",
         "XX...XX                 ",
         "XX....XX                ",
         "XX.....XX               ",
         "XX......XX              ",
         "XX.......XX             ",
         "XX........XX            ",
         "XX........XXX           ",
         "XX......XXXXX           ",
         "XX.XXX..XX              ",
         "XXXX XX..XX             ",
         "XX   XX..XX             ",
         "     XX..XX             ",
         "      XX..XX            ",
         "      XX..XX            ",
         "       XXXX             ",
         "       XX               ",
         "                        ",
         "                        ",
         "                        ")

   .. ## pygame.cursors.compile ##

.. function:: load_xbm

   | :sl:`load cursor data from an XBM file`
   | :sg:`load_xbm(cursorfile) -> cursor_args`
   | :sg:`load_xbm(cursorfile, maskfile) -> cursor_args`

   This loads cursors for a simple subset of ``XBM`` files. ``XBM`` files are
   traditionally used to store cursors on UNIX systems, they are an ASCII
   format used to represent simple images.

   Sometimes the black and white color values will be split into two separate
   ``XBM`` files. You can pass a second maskfile argument to load the two
   images into a single cursor.

   The cursorfile and maskfile arguments can either be filenames or file-like
   object with the readlines method.

   The return value cursor_args can be passed directly to the
   ``pygame.mouse.set_cursor()`` function.

   .. ## pygame.cursors.load_xbm ##



.. class:: Cursor

   | :sl:`pygame object representing a cursor`
   | :sg:`Cursor(size, hotspot, xormasks, andmasks) -> Cursor`
   | :sg:`Cursor(hotspot, surface) -> Cursor`
   | :sg:`Cursor(constant) -> Cursor`
   | :sg:`Cursor(Cursor) -> Cursor`
   | :sg:`Cursor() -> Cursor`

   In pygame 2, there are 3 types of cursors you can create to give your
   game that little bit of extra polish. There's **bitmap** type cursors,
   which existed in pygame 1.x, and are compiled from a string or load from an xbm file.
   Then there are **system** type cursors, where you choose a preset that will 
   convey the same meaning but look native across different operating systems. 
   Finally you can create a **color** cursor, which displays a pygame surface as the cursor.

   **Creating a system cursor**

   Choose a constant from this list, pass it into ``pygame.cursors.Cursor(constant)``, 
   and you're good to go. Be advised that not all systems support every system
   cursor, and you may get a substitution instead. For example, on MacOS,
   WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL
   should show up as a closed hand. And on Wayland, every SIZE cursor should 
   show up as a hand.

   ::

      Pygame Cursor Constant           Description
      --------------------------------------------
      pygame.SYSTEM_CURSOR_ARROW       arrow
      pygame.SYSTEM_CURSOR_IBEAM       i-beam
      pygame.SYSTEM_CURSOR_WAIT        wait
      pygame.SYSTEM_CURSOR_CROSSHAIR   crosshair
      pygame.SYSTEM_CURSOR_WAITARROW   small wait cursor 
                                       (or wait if not available)
      pygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing 
                                       northwest and southeast
      pygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing
                                       northeast and southwest
      pygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing
                                       west and east
      pygame.SYSTEM_CURSOR_SIZENS      double arrow pointing 
                                       north and south
      pygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing
                                       north, south, east, and west
      pygame.SYSTEM_CURSOR_NO          slashed circle or crossbones
      pygame.SYSTEM_CURSOR_HAND        hand

   **Creating a cursor without passing arguments**
   
   In addition to the cursor constants available and described above,
   you can also call ``pygame.cursors.Cursor()``, and your cursor is ready (doing that is the same as
   calling ``pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)``.
   Doing one of those calls actually creates a system cursor using the default native image.

   **Creating a color cursor**

   To create a color cursor, create a ``Cursor`` from a ``hotspot`` and a ``surface``.
   ``hotspot`` is an (x,y) coordinate that determines where in the cursor the exact point is.
   The hotspot position must be within the bounds of the ``surface``.

   **Creating a bitmap cursor**

   When the mouse cursor is visible, it will be displayed as a black and white
   bitmap using the given bitmask arrays. The ``size`` is a sequence containing 
   the cursor width and height. ``hotspot`` is a sequence containing the cursor 
   hotspot position. 
   
   A cursor has a width and height, but a mouse position is represented by a 
   set of point coordinates. So the value passed into the cursor ``hotspot`` 
   variable helps pygame to actually determine at what exact point the cursor 
   is at.
   
   ``xormasks`` is a sequence of bytes containing the cursor xor data masks. 
   Lastly ``andmasks``, a sequence of bytes containing the cursor bitmask data.
   To create these variables, we can make use of the 
   :func:`pygame.cursors.compile()` function.

   Width and height must be a multiple of 8, and the mask arrays must be the 
   correct size for the given width and height. Otherwise an exception is raised.
   
   .. method:: copy

      | :sl:`copy the current cursor`
      | :sg:`copy() -> Cursor`
      
      Returns a new Cursor object with the same data and hotspot as the original.
   .. ## pygame.cursors.Cursor.copy ##
   

   .. attribute:: type
   
      | :sl:`Gets the cursor type`
      | :sg:`type -> string`

      The type will be ``"system"``, ``"bitmap"``, or ``"color"``.

   .. ## pygame.cursors.Cursor.type ##

   .. attribute:: data

      | :sl:`Gets the cursor data`
      | :sg:`data -> tuple`

      Returns the data that was used to create this cursor object, wrapped up in a tuple.

   .. ## pygame.cursors.Cursor.data ##

   .. versionadded:: 2.0.1

   .. ## pygame.cursors.Cursor ##
   
.. ## pygame.cursors ##

Example code for creating and settings cursors. (Click the mouse to switch cursor)

.. literalinclude:: code_examples/cursors_module_example.py


--- Contenu du fichier : touch.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.touch`
=========================

.. module:: pygame._sdl2.touch
   :synopsis: pygame module to work with touch input

| :sl:`pygame module to work with touch input`

.. versionadded:: 2 This module requires SDL2.

.. function:: get_num_devices

   | :sl:`get the number of touch devices`
   | :sg:`get_num_devices() -> int`

   Return the number of available touch devices.

   .. ## pygame._sdl2.touch.get_num_devices ##

.. function:: get_device

   | :sl:`get the a touch device id for a given index`
   | :sg:`get_device(index) -> touchid`

   :param int index: This number is at least 0 and less than the
                     :func:`number of devices <pygame._sdl2.touch.get_num_devices()>`.

   Return an integer id associated with the given ``index``.

   .. ## pygame._sdl2.touch.get_device ##

.. function:: get_num_fingers

   | :sl:`the number of active fingers for a given touch device`
   | :sg:`get_num_fingers(touchid) -> int`

   Return the number of fingers active for the touch device
   whose id is `touchid`.

   .. ## pygame._sdl2.touch.get_num_fingers ##

.. function:: get_finger

   | :sl:`get information about an active finger`
   | :sg:`get_finger(touchid, index) -> int`

   :param int touchid: The touch device id.
   :param int index: The index of the finger to return
                     information about, between 0 and the
                     :func:`number of active fingers <pygame._sdl2.touch.get_num_fingers()>`.

   Return a dict for the finger ``index`` active on ``touchid``.
   The dict contains these keys:

   ::

      id         the id of the finger (an integer).
      x          the normalized x position of the finger, between 0 and 1.
      y          the normalized y position of the finger, between 0 and 1.
      pressure   the amount of pressure applied by the finger, between 0 and 1.

   .. ## pygame._sdl2.touch.get_finger ##

.. ## pygame._sdl2.touch ##


--- Contenu du fichier : joystick.rst.txt ---
.. include:: common.txt

:mod:`pygame.joystick`
======================

.. module:: pygame.joystick
   :synopsis: Pygame module for interacting with joysticks, gamepads, and trackballs.

| :sl:`Pygame module for interacting with joysticks, gamepads, and trackballs.`

The joystick module manages the joystick devices on a computer.
Joystick devices include trackballs and video-game-style
gamepads, and the module allows the use of multiple buttons and "hats".
Computers may manage multiple joysticks at a time.

Each instance of the Joystick class represents one gaming device plugged
into the computer. If a gaming pad has multiple joysticks on it, then the
joystick object can actually represent multiple joysticks on that single
game device.

For a quick way to initialise the joystick module and get a list of Joystick instances
use the following code::

    pygame.joystick.init()
    joysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]

The following event types will be generated by the joysticks ::

    JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION

And in pygame 2, which supports hotplugging::

   JOYDEVICEADDED JOYDEVICEREMOVED

Note that in pygame 2, joysticks events use a unique "instance ID". The device index
passed in the constructor to a Joystick object is not unique after devices have
been added and removed. You must call :meth:`Joystick.get_instance_id()` to find
the instance ID that was assigned to a Joystick on opening.

The event queue needs to be pumped frequently for some of the methods to work.
So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.

To be able to get joystick events and update the joystick objects while the window
is not in focus, you may set the ``SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS`` environment
variable. See :ref:`environment variables <environment-variables>` for more details.


.. function:: init

   | :sl:`Initialize the joystick module.`
   | :sg:`init() -> None`

   This function is called automatically by ``pygame.init()``.

   It initializes the joystick module. The module must be initialized before any
   other functions will work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.init ##

.. function:: quit

   | :sl:`Uninitialize the joystick module.`
   | :sg:`quit() -> None`

   Uninitialize the joystick module. After you call this any existing joystick
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.quit ##

.. function:: get_init

   | :sl:`Returns True if the joystick module is initialized.`
   | :sg:`get_init() -> bool`

   Test if the ``pygame.joystick.init()`` function has been called.

   .. ## pygame.joystick.get_init ##

.. function:: get_count

   | :sl:`Returns the number of joysticks.`
   | :sg:`get_count() -> count`

   Return the number of joystick devices on the system. The count will be ``0`` 
   if there are no joysticks on the system.

   When you create Joystick objects using ``Joystick(id)``, you pass an integer
   that must be lower than this count.

   .. ## pygame.joystick.get_count ##

.. class:: Joystick

   | :sl:`Create a new Joystick object.`
   | :sg:`Joystick(id) -> Joystick`

   Create a new joystick to access a physical device. The id argument must be a
   value from ``0`` to ``pygame.joystick.get_count() - 1``.

   Joysticks are initialised on creation and are shut down when deallocated.
   Once the device is initialized the pygame event queue will start receiving
   events about its input.

   .. versionchanged:: 2.0.0 Joystick objects are now opened immediately on creation.

   .. method:: init

      | :sl:`initialize the Joystick`
      | :sg:`init() -> None`

      Initialize the joystick, if it has been closed. It is safe to call this
      even if the joystick is already initialized.

      .. deprecated:: 2.0.0

         In future it will not be possible to reinitialise a closed Joystick
         object. Will be removed in Pygame 2.1.

      .. ## Joystick.init ##

   .. method:: quit

      | :sl:`uninitialize the Joystick`
      | :sg:`quit() -> None`

      Close a Joystick object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Joystick.quit ##

   .. method:: get_init

      | :sl:`check if the Joystick is initialized`
      | :sg:`get_init() -> bool`

      Return True if the Joystick object is currently initialised.

      .. ## Joystick.get_init ##

   .. method:: get_id

      | :sl:`get the device index (deprecated)`
      | :sg:`get_id() -> int`

      Returns the original device index for this device. This is the same
      value that was passed to the ``Joystick()`` constructor. This method can
      safely be called while the Joystick is not initialized.

      .. deprecated:: 2.0.0

         The original device index is not useful in pygame 2. Use
         :meth:`.get_instance_id` instead. Will be removed in Pygame 2.1.

   .. method:: get_instance_id() -> int

      | :sl:`get the joystick instance id`
      | :sg:`get_instance_id() -> int`

      Get the joystick instance ID. This matches the ``instance_id`` field
      that is given in joystick events.

      .. versionadded:: 2.0.0dev11

   .. method:: get_guid() -> str

      | :sl:`get the joystick GUID`
      | :sg:`get_guid() -> str`

      Get the GUID string. This identifies the exact hardware of the joystick
      device.

      .. versionadded:: 2.0.0dev11

   .. method:: get_power_level() -> str

      | :sl:`get the approximate power status of the device`
      | :sg:`get_power_level() -> str`

      Get a string giving the power status of the device.

      One of: ``empty``, ``low``, ``medium``, ``full``, ``wired``, ``max``, or
      ``unknown``.

      .. versionadded:: 2.0.0dev11

      .. ## Joystick.get_id ##

   .. method:: get_name

      | :sl:`get the Joystick system name`
      | :sg:`get_name() -> string`

      Returns the system name for this joystick device. It is unknown what name
      the system will give to the Joystick, but it should be a unique name that
      identifies the device. This method can safely be called while the
      Joystick is not initialized.

      .. ## Joystick.get_name ##

   .. method:: get_numaxes

      | :sl:`get the number of axes on a Joystick`
      | :sg:`get_numaxes() -> int`

      Returns the number of input axes are on a Joystick. There will usually be
      two for the position. Controls like rudders and throttles are treated as
      additional axes.

      The ``pygame.JOYAXISMOTION`` events will be in the range from ``-1.0`` 
      to ``1.0``. A value of ``0.0`` means the axis is centered. Gamepad devices 
      will usually be ``-1``, ``0``, or ``1`` with no values in between. Older 
      analog joystick axes will not always use the full ``-1`` to ``1`` range, 
      and the centered value will be some area around ``0``. 
      
      Analog joysticks usually have a bit of noise in their axis, which will 
      generate a lot of rapid small motion events.

      .. ## Joystick.get_numaxes ##

   .. method:: get_axis

      | :sl:`get the current position of an axis`
      | :sg:`get_axis(axis_number) -> float`

      Returns the current position of a joystick axis. The value will range
      from ``-1`` to ``1`` with a value of ``0`` being centered. You may want 
      to take into account some tolerance to handle jitter, and joystick drift 
      may keep the joystick from centering at ``0`` or using the full range of 
      position values.

      The axis number must be an integer from ``0`` to ``get_numaxes() - 1``.

      When using gamepads both the control sticks and the analog triggers are
      usually reported as axes.

      .. ## Joystick.get_axis ##

   .. method:: get_numballs

      | :sl:`get the number of trackballs on a Joystick`
      | :sg:`get_numballs() -> int`

      Returns the number of trackball devices on a Joystick. These devices work
      similar to a mouse but they have no absolute position; they only have
      relative amounts of movement.

      The ``pygame.JOYBALLMOTION`` event will be sent when the trackball is
      rolled. It will report the amount of movement on the trackball.

      .. ## Joystick.get_numballs ##

   .. method:: get_ball

      | :sl:`get the relative position of a trackball`
      | :sg:`get_ball(ball_number) -> x, y`

      Returns the relative movement of a joystick button. The value is a ``x, y``
      pair holding the relative movement since the last call to get_ball.

      The ball number must be an integer from ``0`` to ``get_numballs() - 1``.

      .. ## Joystick.get_ball ##

   .. method:: get_numbuttons

      | :sl:`get the number of buttons on a Joystick`
      | :sg:`get_numbuttons() -> int`

      Returns the number of pushable buttons on the joystick. These buttons
      have a boolean (on or off) state.

      Buttons generate a ``pygame.JOYBUTTONDOWN`` and ``pygame.JOYBUTTONUP``
      event when they are pressed and released.

      .. ## Joystick.get_numbuttons ##

   .. method:: get_button

      | :sl:`get the current button state`
      | :sg:`get_button(button) -> bool`

      Returns the current state of a joystick button.

      .. ## Joystick.get_button ##

   .. method:: get_numhats

      | :sl:`get the number of hat controls on a Joystick`
      | :sg:`get_numhats() -> int`

      Returns the number of joystick hats on a Joystick. Hat devices are like
      miniature digital joysticks on a joystick. Each hat has two axes of
      input.

      The ``pygame.JOYHATMOTION`` event is generated when the hat changes
      position. The ``position`` attribute for the event contains a pair of 
      values that are either ``-1``, ``0``, or ``1``. A position of ``(0, 0)`` 
      means the hat is centered.

      .. ## Joystick.get_numhats ##

   .. method:: get_hat

      | :sl:`get the position of a joystick hat`
      | :sg:`get_hat(hat_number) -> x, y`

      Returns the current position of a position hat. The position is given as
      two values representing the ``x`` and ``y`` position for the hat. ``(0, 0)``
      means centered. A value of ``-1`` means left/down and a value of ``1`` means
      right/up: so ``(-1, 0)`` means left; ``(1, 0)`` means right; ``(0, 1)`` means 
      up; ``(1, 1)`` means upper-right; etc.

      This value is digital, ``i.e.``, each coordinate can be ``-1``, ``0`` or ``1`` 
      but never in-between.

      The hat number must be between ``0`` and ``get_numhats() - 1``.

      .. ## Joystick.get_hat ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the joystick, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Joystick.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      joystick does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Joystick.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the joystick. See
      :meth:`Joystick.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Joystick.stop_rumble ##

   .. ## pygame.joystick.Joystick ##

.. ## pygame.joystick ##

.. figure:: code_examples/joystick_calls.png
   :scale: 100 %
   :alt: joystick module example

   Example code for joystick module.

.. literalinclude:: ../../../examples/joystick.py

.. _controller-mappings:


Common Controller Axis Mappings
===============================

Controller mappings are drawn from the underlying SDL library which pygame uses and they differ
between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.

Axis and hat mappings are listed from -1 to +1.


Nintendo Switch Left Joy-Con (pygame 2.x)
*****************************************

The Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    D-pad Up        - Button 0
    D-pad Down      - Button 1
    D-pad Left      - Button 2
    D-pad Right     - Button 3
    SL              - Button 4
    SR              - Button 5
    -               - Button 8
    Stick In        - Button 10
    Capture         - Button 13
    L               - Button 14
    ZL              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Right Joy-Con (pygame 2.x)
******************************************

The Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    SL              - Button 4
    SR              - Button 5
    +               - Button 9
    Stick In        - Button 11
    Home            - Button 12
    R               - Button 14
    ZR              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Pro Controller (pygame 2.x)
*******************************************

The Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats.
The controller is recognized as "Nintendo Switch Pro Controller".


* **Left Stick**::

    Left -> Right   - Axis 0
    Up -> Down      - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up -> Down      - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    - Button        - Button 4
    Home Button     - Button 5
    + Button        - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Capture Button  - Button 15


XBox 360 Controller (pygame 2.x)
********************************

The Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat.
The controller is recognized as "Xbox 360 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9
    Guide Button    - Button 10

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 2.x)
*************************************

The PlayStation 4 controller mapping has 6 axes and 16 buttons.
The controller is recognized as "PS4 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Share Button    - Button 4
    PS Button       - Button 5
    Options Button  - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Touch Pad Click - Button 15

Playstation 5 Controller (pygame 2.x)
*************************************

The PlayStation 5 controller mapping has 6 axes, 13 buttons, and 1 hat.
The controller is recognized as "Sony Interactive Entertainment Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Left Trigger    - Button 6
    Right Trigger   - Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    PS Button       - Button 10
    Left Stick in   - Button 11
    Right Stick in  - Button 12

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



XBox 360 Controller (pygame 1.x)
********************************

The Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat.
The controller is recognized as "Controller (XBOX 360 For Windows)".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 4
    Up   -> Down    - Axis 3

* **Left Trigger & Right Trigger**::

    RT -> LT        - Axis 2

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 1.x)
*************************************

The PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat.
The controller is recognized as "Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 5

* **Right Trigger**::

    Out -> In       - Axis 4

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    L. Trigger(Full)- Button 6
    R. Trigger(Full)- Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    L. Stick In     - Button 10
    R. Stick In     - Button 11
    PS Button       - Button 12
    Touch Pad Click - Button 13

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



--- Contenu du fichier : math.rst.txt ---
.. include:: common.txt

:mod:`pygame.math`
==================

.. module:: pygame.math
   :synopsis: pygame module for vector classes

| :sl:`pygame module for vector classes`

The pygame math module currently provides Vector classes in two and three
dimensions, ``Vector2`` and ``Vector3`` respectively.

They support the following numerical operations: ``vec + vec``, ``vec - vec``, 
``vec * number``, ``number * vec``, ``vec / number``, ``vec // number``, ``vec += vec``, 
``vec -= vec``, ``vec *= number``, ``vec /= number``, ``vec //= number``, ``round(vec, ndigits=0)``. 

All these operations will be performed elementwise.
In addition ``vec * vec`` will perform a scalar-product (a.k.a. dot-product). 
If you want to multiply every element from vector v with every element from 
vector w you can use the elementwise method: ``v.elementwise() * w``

The coordinates of a vector can be retrieved or set using attributes or
subscripts

::

   v = pygame.Vector3()

   v.x = 5
   v[1] = 2 * v.x
   print(v[1]) # 10

   v.x == v[0]
   v.y == v[1]
   v.z == v[2]

Multiple coordinates can be set using slices or swizzling

::

   v = pygame.Vector2()
   v.xy = 1, 2
   v[:] = 1, 2

.. versionadded:: 1.9.2pre
.. versionchanged:: 1.9.4 Removed experimental notice.
.. versionchanged:: 1.9.4 Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)
.. versionchanged:: 1.9.4 :mod:`pygame.math` import not required. More convenient ``pygame.Vector2`` and ``pygame.Vector3``.
.. versionchanged:: 2.2.0 `round` returns a new vector with components rounded to the specified digits.

.. function:: clamp

   | :sl:`returns value clamped to min and max.`
   | :sg:`clamp(value, min, max) -> float`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave clamp feedback with authors <https://github.com/pygame/pygame/pull/3326>`_

   Clamps a numeric ``value`` so that it's no lower than ``min``, and no higher
   than ``max``.

   .. versionadded:: 2.1.3

   .. ## math.clamp ##

.. function:: lerp

   | :sl:`interpolates between two values by a weight.`
   | :sg:`lerp(a, b, weight) -> float`

   Linearly interpolates between ``a`` and ``b`` by ``weight`` using the formula ``a + (b-a) * weight``.
   
   If ``weight`` is ``0.5``, ``lerp`` will return the value half-way between ``a``
   and ``b``. When ``a = 10`` and ``b = 20``, ``lerp(a, b, 0.5)`` will return ``15``. You
   can think of weight as the percentage of interpolation from ``a`` to ``b``, ``0.0``
   being 0% and ``1.0`` being 100%.

   ``lerp`` can be used for many things. You could rotate a sprite by a weight with
   ``angle = lerp(0, 360, weight)``. You could even scale an enemy's attack value
   based on the level you're playing:

   ::

      FINAL_LEVEL = 10
      current_level = 2

      attack = lerp(10, 50, current_level/MAX_LEVEL) # 18

   If you're on level 0, ``attack`` will be ``10``, if you're on level 10,
   ``attack`` will be ``50``. If you're on level 5, the
   result of ``current_level/MAX_LEVEL`` will be ``0.5``
   which represents 50%, therefore ``attack`` will be ``30``, which is the midpoint of ``10`` and ``50``.

   Raises a ValueError if ``weight`` is outside the range of ``[0, 1]``.

   .. versionadded:: 2.1.3

   .. ## math.lerp ##

.. class:: Vector2

   | :sl:`a 2-Dimensional Vector`
   | :sg:`Vector2() -> Vector2(0, 0)`
   | :sg:`Vector2(int) -> Vector2`
   | :sg:`Vector2(float) -> Vector2`
   | :sg:`Vector2(Vector2) -> Vector2`
   | :sg:`Vector2(x, y) -> Vector2`
   | :sg:`Vector2((x, y)) -> Vector2`

   Some general information about the ``Vector2`` class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector2) -> float`

      .. ## Vector2.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector2) -> float`

      calculates the third component of the cross-product.

      .. ## Vector2.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude_squared() == vec.x**2 + vec.y**2``. This
      is faster than ``vec.magnitude()`` because it avoids the square root.

      .. ## Vector2.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length_squared() == vec.x**2 + vec.y**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector2.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector2`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector2.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. 
      The direction of the vector is not changed.

      .. ## Vector2.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise 
      it returns ``False``.

      .. ## Vector2.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector2.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector2) -> Vector2`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector2.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector2) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector2.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector2) -> float`

      .. ## Vector2.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector2) -> float`

      .. ## Vector2.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector2, float) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector2, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector2, float) -> Vector2`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self and
      other the result is going to be. It must be a value between ``0`` and ``1`` 
      where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector2.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector2, float) -> Vector2`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector2.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector2.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector2.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in degrees. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in radians. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector2) -> float`

      Returns the angle from self to the passed ``Vector2`` that would rotate self
      to be aligned with the passed ``Vector2`` without crossing over the negative 
      x-axis.

      .. figure:: code_examples/angle_to.png
         :alt: angle_to image

         Example demonstrating the angle returned

      .. ## Vector2.angle_to ##

   .. method:: as_polar

      | :sl:`returns a tuple with radial distance and azimuthal angle.`
      | :sg:`as_polar() -> (r, phi)`

      Returns a tuple ``(r, phi)`` where r is the radial distance, and phi 
      is the azimuthal angle.

      .. ## Vector2.as_polar ##

   .. method:: from_polar

      | :sl:`Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple.`
      | :sg:`Vector2.from_polar((r, phi)) -> Vector2`
      | :sg:`Vector2().from_polar((r, phi)) -> None`

      If used from the class creates a Vector2(x,y), else sets x and y.
      The values of x and y are defined from a tuple ``(r, phi)`` where r
      is the radial distance, and phi is the azimuthal angle.

      .. ## Vector2.from_polar ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector2) -> Vector2`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector2.project ##

   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector2`

      Returns a new Vector2 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector2.copy ##
   

   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector2`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude_ip ##


   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector2) -> None`
      | :sg:`update(x, y) -> None`
      | :sg:`update((x, y)) -> None`

      Sets coordinates x and y in place.

      .. versionadded:: 1.9.5

      .. ## Vector2.update ##

   
   .. attribute:: epsilon
      
      | :sl:`Determines the tolerance of vector calculations.`
      
      Both Vector classes have a value named ``epsilon`` that defaults to ``1e-6``.
      This value acts as a numerical margin in various methods to account for floating point
      arithmetic errors. Specifically, ``epsilon`` is used in the following places:

         * comparing Vectors (``==`` and ``!=``)
         * the ``is_normalized`` method (if the square of the length is within ``epsilon`` of 1, it's normalized)
         * slerping (a Vector with a length of ``<epsilon`` is considered a zero vector, and can't slerp with that)
         * reflection (can't reflect over the zero vector)
         * projection (can't project onto the zero vector)
         * rotation (only used when rotating by a multiple of 90 degrees)

      While it's possible to change ``epsilon`` for a specific instance of a Vector, all the other Vectors
      will retain the default value. Changing ``epsilon`` on a specific instance however could lead to some
      asymmetric behavior where symmetry would be expected, such as

      ::

         u = pygame.Vector2(0, 1)
         v = pygame.Vector2(0, 1.2)
         u.epsilon = 0.5 # don't set it nearly this large

         print(u == v) # >> True
         print(v == u) # >> False

      You'll probably never have to change ``epsilon`` from the default value, but in rare situations you might
      find that either the margin is too large or too small, in which case changing ``epsilon`` slightly 
      might help you out.


   .. ## pygame.math.Vector2 ##

.. class:: Vector3

   | :sl:`a 3-Dimensional Vector`
   | :sg:`Vector3() -> Vector3(0, 0, 0)`
   | :sg:`Vector3(int) -> Vector3`
   | :sg:`Vector3(float) -> Vector3`
   | :sg:`Vector3(Vector3) -> Vector3`
   | :sg:`Vector3(x, y, z) -> Vector3`
   | :sg:`Vector3((x, y, z)) -> Vector3`

   Some general information about the Vector3 class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector3) -> float`

      .. ## Vector3.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector3) -> Vector3`

      calculates the cross-product.

      .. ## Vector3.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared Euclidean magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: 
      ``vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2``.
      This is faster than ``vec.magnitude()`` because it avoids the
      square root.

      .. ## Vector3.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector3.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector3`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector3.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. The 
      direction of the vector is not changed.

      .. ## Vector3.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise it 
      returns ``False``.

      .. ## Vector3.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector3.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector3) -> Vector3`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector3.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector3) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector3.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector3) -> float`

      .. ## Vector3.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector3) -> float`

      .. ## Vector3.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector3, float) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector3, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector3, float) -> Vector3`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self an
      other the result is going to be. It must be a value between ``0`` and 
      ``1``, where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector3.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector3, float) -> Vector3`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector3.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector3.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle, Vector3) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_ip_rad ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_rad_ip ##

   .. method:: rotate_x

      | :sl:`rotates a vector around the x-axis by the angle in degrees.`
      | :sg:`rotate_x(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x ##

   .. method:: rotate_x_rad

      | :sl:`rotates a vector around the x-axis by the angle in radians.`
      | :sg:`rotate_x_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_x_rad ##

   .. method:: rotate_x_ip

      | :sl:`rotates the vector around the x-axis by the angle in degrees in place.`
      | :sg:`rotate_x_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x_ip ##

   .. method:: rotate_x_ip_rad

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_x_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_x_ip_rad ##

   .. method:: rotate_x_rad_ip

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_x_rad_ip ##

   .. method:: rotate_y

      | :sl:`rotates a vector around the y-axis by the angle in degrees.`
      | :sg:`rotate_y(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y ##

   .. method:: rotate_y_rad

      | :sl:`rotates a vector around the y-axis by the angle in radians.`
      | :sg:`rotate_y_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_y_rad ##

   .. method:: rotate_y_ip

      | :sl:`rotates the vector around the y-axis by the angle in degrees in place.`
      | :sg:`rotate_y_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y_ip ##

   .. method:: rotate_y_ip_rad

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_y_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_y_ip_rad ##

   .. method:: rotate_y_rad_ip

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_y_rad_ip ##

   .. method:: rotate_z

      | :sl:`rotates a vector around the z-axis by the angle in degrees.`
      | :sg:`rotate_z(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z ##

   .. method:: rotate_z_rad

      | :sl:`rotates a vector around the z-axis by the angle in radians.`
      | :sg:`rotate_z_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_z_rad ##

   .. method:: rotate_z_ip

      | :sl:`rotates the vector around the z-axis by the angle in degrees in place.`
      | :sg:`rotate_z_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z_ip ##

   .. method:: rotate_z_ip_rad

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_z_rad_ip() instead.
      
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_z_ip_rad ##

   .. method:: rotate_z_rad_ip

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_z_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector3) -> float`

      Returns the angle between self and the given vector.

      .. ## Vector3.angle_to ##

   .. method:: as_spherical

      | :sl:`returns a tuple with radial distance, inclination and azimuthal angle.`
      | :sg:`as_spherical() -> (r, theta, phi)`

      Returns a tuple ``(r, theta, phi)`` where r is the radial distance, theta is
      the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.as_spherical ##

   .. method:: from_spherical

      | :sl:`Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.`
      | :sg:`Vector3.from_spherical((r, theta, phi)) -> Vector3`
      | :sg:`Vector3().from_spherical((r, theta, phi)) -> None`

      If used from the class creates a Vector3(x, y, z), else sets x, y, and z.
      The values of x, y, and z are from a tuple ``(r, theta, phi)`` where r is the radial
      distance, theta is the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.from_spherical ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector3) -> Vector3`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector3.project ##
   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector3`

      Returns a new Vector3 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector3.copy ##


   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector3`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude_ip ##

   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector3) -> None`
      | :sg:`update(x, y, z) -> None`
      | :sg:`update((x, y, z)) -> None`

      Sets coordinates x, y, and z in place.

      .. versionadded:: 1.9.5

      .. ## Vector3.update ##

   .. attribute:: epsilon

      | :sl:`Determines the tolerance of vector calculations.`
      
      With lengths within this number, vectors are considered equal. For more information see :attr:`pygame.math.Vector2.epsilon`
            
   .. ##  ##

   .. ## pygame.math.Vector3 ##

.. ## pygame.math ##


--- Contenu du fichier : bufferproxy.rst.txt ---
.. include:: common.txt

.. default-domain:: py

:class:`pygame.BufferProxy`
===========================

.. currentmodule:: pygame

.. class:: BufferProxy

   | :sl:`pygame object to export a surface buffer through an array protocol`
   | :sg:`BufferProxy(<parent>) -> BufferProxy`

   :class:`BufferProxy` is a pygame support type, designed as the return value
   of the :meth:`Surface.get_buffer` and :meth:`Surface.get_view` methods.
   For all Python versions a :class:`BufferProxy` object exports a C struct
   and Python level array interface on behalf of its parent object's buffer.
   A new buffer interface is also exported.
   In pygame, :class:`BufferProxy` is key to implementing the
   :mod:`pygame.surfarray` module.

   :class:`BufferProxy` instances can be created directly from Python code,
   either for a parent that exports an interface, or from a Python ``dict``
   describing an object's buffer layout. The dict entries are based on the
   Python level array interface mapping. The following keys are recognized:

      ``"shape"`` : tuple
         The length of each array dimension as a tuple of integers. The
         length of the tuple is the number of dimensions in the array.

      ``"typestr"`` : string
         The array element type as a length 3 string. The first character
         gives byteorder, '<' for little-endian, '>' for big-endian, and
         '\|' for not applicable. The second character is the element type,
         'i' for signed integer, 'u' for unsigned integer, 'f' for floating
         point, and 'V' for an chunk of bytes. The third character gives the
         bytesize of the element, from '1' to '9' bytes. So, for example,
         "<u4" is an unsigned 4 byte little-endian integer, such as a
         32 bit pixel on a PC, while "\|V3" would represent a 24 bit pixel,
         which has no integer equivalent.

      ``"data"`` : tuple
         The physical buffer start address and a read-only flag as a length
         2 tuple. The address is an integer value, while the read-only flag
         is a bool—``False`` for writable, ``True`` for read-only.

      ``"strides"`` : tuple : (optional)
         Array stride information as a tuple of integers. It is required
	 only of non C-contiguous arrays. The tuple length must match
	 that of ``"shape"``.

      ``"parent"`` : object : (optional)
         The exporting object. It can be used to keep the parent object
         alive while its buffer is visible.

      ``"before"`` : callable : (optional)
         Callback invoked when the :class:`BufferProxy` instance
         exports the buffer. The callback is given one argument, the
	 ``"parent"`` object if given, otherwise ``None``.
         The callback is useful for setting a lock on the parent.

      ``"after"`` : callable : (optional)
         Callback invoked when an exported buffer is released.
         The callback is passed on argument, the ``"parent"`` object if given,
         otherwise None. The callback is useful for releasing a lock on the
         parent.
      
   The BufferProxy class supports subclassing, instance variables, and weak
   references.

   .. versionadded:: 1.8.0
   .. versionextended:: 1.9.2

   .. attribute:: parent

      | :sl:`Return wrapped exporting object.`
      | :sg:`parent -> Surface`
      | :sg:`parent -> <parent>`

      The :class:`Surface` which returned the :class:`BufferProxy` object or
      the object passed to a :class:`BufferProxy` call.

   .. attribute:: length

      | :sl:`The size, in bytes, of the exported buffer.`
      | :sg:`length -> int`

      The number of valid bytes of data exported. For discontinuous data,
      that is data which is not a single block of memory, the bytes within
      the gaps are excluded from the count. This property is equivalent to
      the ``Py_buffer`` C struct ``len`` field.

   .. attribute:: raw

      | :sl:`A copy of the exported buffer as a single block of bytes.`
      | :sg:`raw -> bytes`

      The buffer data as a ``str``/``bytes`` object.
      Any gaps in the exported data are removed.

   .. method:: write

      | :sl:`Write raw bytes to object buffer.`
      | :sg:`write(buffer, offset=0)`

      Overwrite bytes in the parent object's data. The data must be C or F
      contiguous, otherwise a ValueError is raised. Argument `buffer` is a
      ``str``/``bytes`` object. An optional offset gives a
      start position, in bytes, within the buffer where overwriting begins.
      If the offset is negative or greater that or equal to the buffer proxy's
      :attr:`length` value, an ``IndexException`` is raised.
      If ``len(buffer) > proxy.length + offset``, a ``ValueError`` is raised.


--- Contenu du fichier : color_list.rst.txt ---
.. include:: common.txt

Named Colors
============

.. raw:: html

    <style>
    .aliceblue {background-color: #f0f8ff; color: #f0f8ff;}
    .antiquewhite {background-color: #faebd7; color: #faebd7;}
    .antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}
    .antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}
    .antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}
    .antiquewhite4 {background-color: #8b8378; color: #8b8378;}
    .aqua {background-color: #00ffff; color: #00ffff;}
    .aquamarine {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine1 {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine2 {background-color: #76eec6; color: #76eec6;}
    .aquamarine3 {background-color: #66cdaa; color: #66cdaa;}
    .aquamarine4 {background-color: #458b74; color: #458b74;}
    .azure {background-color: #f0ffff; color: #f0ffff;}
    .azure1 {background-color: #f0ffff; color: #f0ffff;}
    .azure3 {background-color: #c1cdcd; color: #c1cdcd;}
    .azure2 {background-color: #e0eeee; color: #e0eeee;}
    .azure4 {background-color: #838b8b; color: #838b8b;}
    .beige {background-color: #f5f5dc; color: #f5f5dc;}
    .bisque {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque1 {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque2 {background-color: #eed5b7; color: #eed5b7;}
    .bisque3 {background-color: #cdb79e; color: #cdb79e;}
    .bisque4 {background-color: #8b7d6b; color: #8b7d6b;}
    .black {background-color: #000000; color: #000000;}
    .blanchedalmond {background-color: #ffebcd; color: #ffebcd;}
    .blue {background-color: #0000ff; color: #0000ff;}
    .blue1 {background-color: #0000ff; color: #0000ff;}
    .blue2 {background-color: #0000ee; color: #0000ee;}
    .blue3 {background-color: #0000cd; color: #0000cd;}
    .blue4 {background-color: #00008b; color: #00008b;}
    .blueviolet {background-color: #8a2be2; color: #8a2be2;}
    .brown {background-color: #a52a2a; color: #a52a2a;}
    .brown1 {background-color: #ff4040; color: #ff4040;}
    .brown2 {background-color: #ee3b3b; color: #ee3b3b;}
    .brown3 {background-color: #cd3333; color: #cd3333;}
    .brown4 {background-color: #8b2323; color: #8b2323;}
    .burlywood {background-color: #deb887; color: #deb887;}
    .burlywood1 {background-color: #ffd39b; color: #ffd39b;}
    .burlywood2 {background-color: #eec591; color: #eec591;}
    .burlywood3 {background-color: #cdaa7d; color: #cdaa7d;}
    .burlywood4 {background-color: #8b7355; color: #8b7355;}
    .cadetblue {background-color: #5f9ea0; color: #5f9ea0;}
    .cadetblue1 {background-color: #98f5ff; color: #98f5ff;}
    .cadetblue2 {background-color: #8ee5ee; color: #8ee5ee;}
    .cadetblue3 {background-color: #7ac5cd; color: #7ac5cd;}
    .cadetblue4 {background-color: #53868b; color: #53868b;}
    .chartreuse {background-color: #7fff00; color: #7fff00;}
    .chartreuse1 {background-color: #7fff00; color: #7fff00;}
    .chartreuse2 {background-color: #76ee00; color: #76ee00;}
    .chartreuse3 {background-color: #66cd00; color: #66cd00;}
    .chartreuse4 {background-color: #458b00; color: #458b00;}
    .chocolate {background-color: #d2691e; color: #d2691e;}
    .chocolate1 {background-color: #ff7f24; color: #ff7f24;}
    .chocolate2 {background-color: #ee7621; color: #ee7621;}
    .chocolate3 {background-color: #cd661d; color: #cd661d;}
    .chocolate4 {background-color: #8b4513; color: #8b4513;}
    .coral {background-color: #ff7f50; color: #ff7f50;}
    .coral1 {background-color: #ff7256; color: #ff7256;}
    .coral2 {background-color: #ee6a50; color: #ee6a50;}
    .coral3 {background-color: #cd5b45; color: #cd5b45;}
    .coral4 {background-color: #8b3e2f; color: #8b3e2f;}
    .cornflowerblue {background-color: #6495ed; color: #6495ed;}
    .cornsilk {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk1 {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk2 {background-color: #eee8cd; color: #eee8cd;}
    .cornsilk3 {background-color: #cdc8b1; color: #cdc8b1;}
    .cornsilk4 {background-color: #8b8878; color: #8b8878;}
    .crimson {background-color: #dc143c; color: #dc143c;}
    .cyan {background-color: #00ffff; color: #00ffff;}
    .cyan1 {background-color: #00ffff; color: #00ffff;}
    .cyan2 {background-color: #00eeee; color: #00eeee;}
    .cyan3 {background-color: #00cdcd; color: #00cdcd;}
    .cyan4 {background-color: #008b8b; color: #008b8b;}
    .darkblue {background-color: #00008b; color: #00008b;}
    .darkcyan {background-color: #008b8b; color: #008b8b;}
    .darkgoldenrod {background-color: #b8860b; color: #b8860b;}
    .darkgoldenrod1 {background-color: #ffb90f; color: #ffb90f;}
    .darkgoldenrod2 {background-color: #eead0e; color: #eead0e;}
    .darkgoldenrod3 {background-color: #cd950c; color: #cd950c;}
    .darkgoldenrod4 {background-color: #8b6508; color: #8b6508;}
    .darkgray {background-color: #a9a9a9; color: #a9a9a9;}
    .darkgreen {background-color: #006400; color: #006400;}
    .darkgrey {background-color: #a9a9a9; color: #a9a9a9;}
    .darkkhaki {background-color: #bdb76b; color: #bdb76b;}
    .darkmagenta {background-color: #8b008b; color: #8b008b;}
    .darkolivegreen {background-color: #556b2f; color: #556b2f;}
    .darkolivegreen1 {background-color: #caff70; color: #caff70;}
    .darkolivegreen2 {background-color: #bcee68; color: #bcee68;}
    .darkolivegreen3 {background-color: #a2cd5a; color: #a2cd5a;}
    .darkolivegreen4 {background-color: #6e8b3d; color: #6e8b3d;}
    .darkorange {background-color: #ff8c00; color: #ff8c00;}
    .darkorange1 {background-color: #ff7f00; color: #ff7f00;}
    .darkorange2 {background-color: #ee7600; color: #ee7600;}
    .darkorange3 {background-color: #cd6600; color: #cd6600;}
    .darkorange4 {background-color: #8b4500; color: #8b4500;}
    .darkorchid {background-color: #9932cc; color: #9932cc;}
    .darkorchid1 {background-color: #bf3eff; color: #bf3eff;}
    .darkorchid2 {background-color: #b23aee; color: #b23aee;}
    .darkorchid3 {background-color: #9a32cd; color: #9a32cd;}
    .darkorchid4 {background-color: #68228b; color: #68228b;}
    .darkred {background-color: #8b0000; color: #8b0000;}
    .darksalmon {background-color: #e9967a; color: #e9967a;}
    .darkseagreen {background-color: #8fbc8f; color: #8fbc8f;}
    .darkseagreen1 {background-color: #c1ffc1; color: #c1ffc1;}
    .darkseagreen2 {background-color: #b4eeb4; color: #b4eeb4;}
    .darkseagreen3 {background-color: #9bcd9b; color: #9bcd9b;}
    .darkseagreen4 {background-color: #698b69; color: #698b69;}
    .darkslateblue {background-color: #483d8b; color: #483d8b;}
    .darkslategray {background-color: #2f4f4f; color: #2f4f4f;}
    .darkslategray1 {background-color: #97ffff; color: #97ffff;}
    .darkslategray2 {background-color: #8deeee; color: #8deeee;}
    .darkslategray3 {background-color: #79cdcd; color: #79cdcd;}
    .darkslategray4 {background-color: #528b8b; color: #528b8b;}
    .darkslategrey {background-color: #2f4f4f; color: #2f4f4f;}
    .darkturquoise {background-color: #00ced1; color: #00ced1;}
    .darkviolet {background-color: #9400d3; color: #9400d3;}
    .deeppink {background-color: #ff1493; color: #ff1493;}
    .deeppink1 {background-color: #ff1493; color: #ff1493;}
    .deeppink2 {background-color: #ee1289; color: #ee1289;}
    .deeppink3 {background-color: #cd1076; color: #cd1076;}
    .deeppink4 {background-color: #8b0a50; color: #8b0a50;}
    .deepskyblue {background-color: #00bfff; color: #00bfff;}
    .deepskyblue1 {background-color: #00bfff; color: #00bfff;}
    .deepskyblue2 {background-color: #00b2ee; color: #00b2ee;}
    .deepskyblue3 {background-color: #009acd; color: #009acd;}
    .deepskyblue4 {background-color: #00688b; color: #00688b;}
    .dimgray {background-color: #696969; color: #696969;}
    .dimgrey {background-color: #696969; color: #696969;}
    .dodgerblue {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue1 {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue2 {background-color: #1c86ee; color: #1c86ee;}
    .dodgerblue3 {background-color: #1874cd; color: #1874cd;}
    .dodgerblue4 {background-color: #104e8b; color: #104e8b;}
    .firebrick {background-color: #b22222; color: #b22222;}
    .firebrick1 {background-color: #ff3030; color: #ff3030;}
    .firebrick2 {background-color: #ee2c2c; color: #ee2c2c;}
    .firebrick3 {background-color: #cd2626; color: #cd2626;}
    .firebrick4 {background-color: #8b1a1a; color: #8b1a1a;}
    .floralwhite {background-color: #fffaf0; color: #fffaf0;}
    .forestgreen {background-color: #228b22; color: #228b22;}
    .fuchsia {background-color: #ff00ff; color: #ff00ff;}
    .gainsboro {background-color: #dcdcdc; color: #dcdcdc;}
    .ghostwhite {background-color: #f8f8ff; color: #f8f8ff;}
    .gold {background-color: #ffd700; color: #ffd700;}
    .gold1 {background-color: #ffd700; color: #ffd700;}
    .gold2 {background-color: #eec900; color: #eec900;}
    .gold3 {background-color: #cdad00; color: #cdad00;}
    .gold4 {background-color: #8b7500; color: #8b7500;}
    .goldenrod {background-color: #daa520; color: #daa520;}
    .goldenrod1 {background-color: #ffc125; color: #ffc125;}
    .goldenrod2 {background-color: #eeb422; color: #eeb422;}
    .goldenrod3 {background-color: #cd9b1d; color: #cd9b1d;}
    .goldenrod4 {background-color: #8b6914; color: #8b6914;}
    .gray {background-color: #bebebe; color: #bebebe;}
    .gray0 {background-color: #000000; color: #000000;}
    .gray1 {background-color: #030303; color: #030303;}
    .gray2 {background-color: #050505; color: #050505;}
    .gray3 {background-color: #080808; color: #080808;}
    .gray4 {background-color: #0a0a0a; color: #0a0a0a;}
    .gray5 {background-color: #0d0d0d; color: #0d0d0d;}
    .gray6 {background-color: #0f0f0f; color: #0f0f0f;}
    .gray7 {background-color: #121212; color: #121212;}
    .gray8 {background-color: #141414; color: #141414;}
    .gray9 {background-color: #171717; color: #171717;}
    .gray10 {background-color: #1a1a1a; color: #1a1a1a;}
    .gray11 {background-color: #1c1c1c; color: #1c1c1c;}
    .gray12 {background-color: #1f1f1f; color: #1f1f1f;}
    .gray13 {background-color: #212121; color: #212121;}
    .gray14 {background-color: #242424; color: #242424;}
    .gray15 {background-color: #262626; color: #262626;}
    .gray16 {background-color: #292929; color: #292929;}
    .gray17 {background-color: #2b2b2b; color: #2b2b2b;}
    .gray18 {background-color: #2e2e2e; color: #2e2e2e;}
    .gray19 {background-color: #303030; color: #303030;}
    .gray20 {background-color: #333333; color: #333333;}
    .gray21 {background-color: #363636; color: #363636;}
    .gray22 {background-color: #383838; color: #383838;}
    .gray23 {background-color: #3b3b3b; color: #3b3b3b;}
    .gray24 {background-color: #3d3d3d; color: #3d3d3d;}
    .gray25 {background-color: #404040; color: #404040;}
    .gray26 {background-color: #424242; color: #424242;}
    .gray27 {background-color: #454545; color: #454545;}
    .gray28 {background-color: #474747; color: #474747;}
    .gray29 {background-color: #4a4a4a; color: #4a4a4a;}
    .gray30 {background-color: #4d4d4d; color: #4d4d4d;}
    .gray31 {background-color: #4f4f4f; color: #4f4f4f;}
    .gray32 {background-color: #525252; color: #525252;}
    .gray33 {background-color: #545454; color: #545454;}
    .gray34 {background-color: #575757; color: #575757;}
    .gray35 {background-color: #595959; color: #595959;}
    .gray36 {background-color: #5c5c5c; color: #5c5c5c;}
    .gray37 {background-color: #5e5e5e; color: #5e5e5e;}
    .gray38 {background-color: #616161; color: #616161;}
    .gray39 {background-color: #636363; color: #636363;}
    .gray40 {background-color: #666666; color: #666666;}
    .gray41 {background-color: #696969; color: #696969;}
    .gray42 {background-color: #6b6b6b; color: #6b6b6b;}
    .gray43 {background-color: #6e6e6e; color: #6e6e6e;}
    .gray44 {background-color: #707070; color: #707070;}
    .gray45 {background-color: #737373; color: #737373;}
    .gray46 {background-color: #757575; color: #757575;}
    .gray47 {background-color: #787878; color: #787878;}
    .gray48 {background-color: #7a7a7a; color: #7a7a7a;}
    .gray49 {background-color: #7d7d7d; color: #7d7d7d;}
    .gray50 {background-color: #7f7f7f; color: #7f7f7f;}
    .gray51 {background-color: #828282; color: #828282;}
    .gray52 {background-color: #858585; color: #858585;}
    .gray53 {background-color: #878787; color: #878787;}
    .gray54 {background-color: #8a8a8a; color: #8a8a8a;}
    .gray55 {background-color: #8c8c8c; color: #8c8c8c;}
    .gray56 {background-color: #8f8f8f; color: #8f8f8f;}
    .gray57 {background-color: #919191; color: #919191;}
    .gray58 {background-color: #949494; color: #949494;}
    .gray59 {background-color: #969696; color: #969696;}
    .gray60 {background-color: #999999; color: #999999;}
    .gray61 {background-color: #9c9c9c; color: #9c9c9c;}
    .gray62 {background-color: #9e9e9e; color: #9e9e9e;}
    .gray63 {background-color: #a1a1a1; color: #a1a1a1;}
    .gray64 {background-color: #a3a3a3; color: #a3a3a3;}
    .gray65 {background-color: #a6a6a6; color: #a6a6a6;}
    .gray66 {background-color: #a8a8a8; color: #a8a8a8;}
    .gray67 {background-color: #ababab; color: #ababab;}
    .gray68 {background-color: #adadad; color: #adadad;}
    .gray69 {background-color: #b0b0b0; color: #b0b0b0;}
    .gray70 {background-color: #b3b3b3; color: #b3b3b3;}
    .gray71 {background-color: #b5b5b5; color: #b5b5b5;}
    .gray72 {background-color: #b8b8b8; color: #b8b8b8;}
    .gray73 {background-color: #bababa; color: #bababa;}
    .gray74 {background-color: #bdbdbd; color: #bdbdbd;}
    .gray75 {background-color: #bfbfbf; color: #bfbfbf;}
    .gray76 {background-color: #c2c2c2; color: #c2c2c2;}
    .gray77 {background-color: #c4c4c4; color: #c4c4c4;}
    .gray78 {background-color: #c7c7c7; color: #c7c7c7;}
    .gray79 {background-color: #c9c9c9; color: #c9c9c9;}
    .gray80 {background-color: #cccccc; color: #cccccc;}
    .gray81 {background-color: #cfcfcf; color: #cfcfcf;}
    .gray82 {background-color: #d1d1d1; color: #d1d1d1;}
    .gray83 {background-color: #d4d4d4; color: #d4d4d4;}
    .gray84 {background-color: #d6d6d6; color: #d6d6d6;}
    .gray85 {background-color: #d9d9d9; color: #d9d9d9;}
    .gray86 {background-color: #dbdbdb; color: #dbdbdb;}
    .gray87 {background-color: #dedede; color: #dedede;}
    .gray88 {background-color: #e0e0e0; color: #e0e0e0;}
    .gray89 {background-color: #e3e3e3; color: #e3e3e3;}
    .gray90 {background-color: #e5e5e5; color: #e5e5e5;}
    .gray91 {background-color: #e8e8e8; color: #e8e8e8;}
    .gray92 {background-color: #ebebeb; color: #ebebeb;}
    .gray93 {background-color: #ededed; color: #ededed;}
    .gray94 {background-color: #f0f0f0; color: #f0f0f0;}
    .gray95 {background-color: #f2f2f2; color: #f2f2f2;}
    .gray96 {background-color: #f5f5f5; color: #f5f5f5;}
    .gray97 {background-color: #f7f7f7; color: #f7f7f7;}
    .gray98 {background-color: #fafafa; color: #fafafa;}
    .gray99 {background-color: #fcfcfc; color: #fcfcfc;}
    .gray100 {background-color: #ffffff; color: #ffffff;}
    .green {background-color: #00ff00; color: #00ff00;}
    .green1 {background-color: #00ff00; color: #00ff00;}
    .green2 {background-color: #00ee00; color: #00ee00;}
    .green3 {background-color: #00cd00; color: #00cd00;}
    .green4 {background-color: #008b00; color: #008b00;}
    .greenyellow {background-color: #adff2f; color: #adff2f;}
    .grey {background-color: #bebebe; color: #bebebe;}
    .grey0 {background-color: #000000; color: #000000;}
    .grey1 {background-color: #030303; color: #030303;}
    .grey2 {background-color: #050505; color: #050505;}
    .grey3 {background-color: #080808; color: #080808;}
    .grey4 {background-color: #0a0a0a; color: #0a0a0a;}
    .grey5 {background-color: #0d0d0d; color: #0d0d0d;}
    .grey6 {background-color: #0f0f0f; color: #0f0f0f;}
    .grey7 {background-color: #121212; color: #121212;}
    .grey8 {background-color: #141414; color: #141414;}
    .grey9 {background-color: #171717; color: #171717;}
    .grey10 {background-color: #1a1a1a; color: #1a1a1a;}
    .grey11 {background-color: #1c1c1c; color: #1c1c1c;}
    .grey12 {background-color: #1f1f1f; color: #1f1f1f;}
    .grey13 {background-color: #212121; color: #212121;}
    .grey14 {background-color: #242424; color: #242424;}
    .grey15 {background-color: #262626; color: #262626;}
    .grey16 {background-color: #292929; color: #292929;}
    .grey17 {background-color: #2b2b2b; color: #2b2b2b;}
    .grey18 {background-color: #2e2e2e; color: #2e2e2e;}
    .grey19 {background-color: #303030; color: #303030;}
    .grey20 {background-color: #333333; color: #333333;}
    .grey21 {background-color: #363636; color: #363636;}
    .grey22 {background-color: #383838; color: #383838;}
    .grey23 {background-color: #3b3b3b; color: #3b3b3b;}
    .grey24 {background-color: #3d3d3d; color: #3d3d3d;}
    .grey25 {background-color: #404040; color: #404040;}
    .grey26 {background-color: #424242; color: #424242;}
    .grey27 {background-color: #454545; color: #454545;}
    .grey28 {background-color: #474747; color: #474747;}
    .grey29 {background-color: #4a4a4a; color: #4a4a4a;}
    .grey30 {background-color: #4d4d4d; color: #4d4d4d;}
    .grey31 {background-color: #4f4f4f; color: #4f4f4f;}
    .grey32 {background-color: #525252; color: #525252;}
    .grey33 {background-color: #545454; color: #545454;}
    .grey34 {background-color: #575757; color: #575757;}
    .grey35 {background-color: #595959; color: #595959;}
    .grey36 {background-color: #5c5c5c; color: #5c5c5c;}
    .grey37 {background-color: #5e5e5e; color: #5e5e5e;}
    .grey38 {background-color: #616161; color: #616161;}
    .grey39 {background-color: #636363; color: #636363;}
    .grey40 {background-color: #666666; color: #666666;}
    .grey41 {background-color: #696969; color: #696969;}
    .grey42 {background-color: #6b6b6b; color: #6b6b6b;}
    .grey43 {background-color: #6e6e6e; color: #6e6e6e;}
    .grey44 {background-color: #707070; color: #707070;}
    .grey45 {background-color: #737373; color: #737373;}
    .grey46 {background-color: #757575; color: #757575;}
    .grey47 {background-color: #787878; color: #787878;}
    .grey48 {background-color: #7a7a7a; color: #7a7a7a;}
    .grey49 {background-color: #7d7d7d; color: #7d7d7d;}
    .grey50 {background-color: #7f7f7f; color: #7f7f7f;}
    .grey51 {background-color: #828282; color: #828282;}
    .grey52 {background-color: #858585; color: #858585;}
    .grey53 {background-color: #878787; color: #878787;}
    .grey54 {background-color: #8a8a8a; color: #8a8a8a;}
    .grey55 {background-color: #8c8c8c; color: #8c8c8c;}
    .grey56 {background-color: #8f8f8f; color: #8f8f8f;}
    .grey57 {background-color: #919191; color: #919191;}
    .grey58 {background-color: #949494; color: #949494;}
    .grey59 {background-color: #969696; color: #969696;}
    .grey60 {background-color: #999999; color: #999999;}
    .grey61 {background-color: #9c9c9c; color: #9c9c9c;}
    .grey62 {background-color: #9e9e9e; color: #9e9e9e;}
    .grey63 {background-color: #a1a1a1; color: #a1a1a1;}
    .grey64 {background-color: #a3a3a3; color: #a3a3a3;}
    .grey65 {background-color: #a6a6a6; color: #a6a6a6;}
    .grey66 {background-color: #a8a8a8; color: #a8a8a8;}
    .grey67 {background-color: #ababab; color: #ababab;}
    .grey68 {background-color: #adadad; color: #adadad;}
    .grey69 {background-color: #b0b0b0; color: #b0b0b0;}
    .grey70 {background-color: #b3b3b3; color: #b3b3b3;}
    .grey71 {background-color: #b5b5b5; color: #b5b5b5;}
    .grey72 {background-color: #b8b8b8; color: #b8b8b8;}
    .grey73 {background-color: #bababa; color: #bababa;}
    .grey74 {background-color: #bdbdbd; color: #bdbdbd;}
    .grey75 {background-color: #bfbfbf; color: #bfbfbf;}
    .grey76 {background-color: #c2c2c2; color: #c2c2c2;}
    .grey77 {background-color: #c4c4c4; color: #c4c4c4;}
    .grey78 {background-color: #c7c7c7; color: #c7c7c7;}
    .grey79 {background-color: #c9c9c9; color: #c9c9c9;}
    .grey80 {background-color: #cccccc; color: #cccccc;}
    .grey81 {background-color: #cfcfcf; color: #cfcfcf;}
    .grey82 {background-color: #d1d1d1; color: #d1d1d1;}
    .grey83 {background-color: #d4d4d4; color: #d4d4d4;}
    .grey84 {background-color: #d6d6d6; color: #d6d6d6;}
    .grey85 {background-color: #d9d9d9; color: #d9d9d9;}
    .grey86 {background-color: #dbdbdb; color: #dbdbdb;}
    .grey87 {background-color: #dedede; color: #dedede;}
    .grey88 {background-color: #e0e0e0; color: #e0e0e0;}
    .grey89 {background-color: #e3e3e3; color: #e3e3e3;}
    .grey90 {background-color: #e5e5e5; color: #e5e5e5;}
    .grey91 {background-color: #e8e8e8; color: #e8e8e8;}
    .grey92 {background-color: #ebebeb; color: #ebebeb;}
    .grey93 {background-color: #ededed; color: #ededed;}
    .grey94 {background-color: #f0f0f0; color: #f0f0f0;}
    .grey95 {background-color: #f2f2f2; color: #f2f2f2;}
    .grey96 {background-color: #f5f5f5; color: #f5f5f5;}
    .grey97 {background-color: #f7f7f7; color: #f7f7f7;}
    .grey98 {background-color: #fafafa; color: #fafafa;}
    .grey99 {background-color: #fcfcfc; color: #fcfcfc;}
    .grey100 {background-color: #ffffff; color: #ffffff;}
    .honeydew {background-color: #f0fff0; color: #f0fff0;}
    .honeydew1 {background-color: #f0fff0; color: #f0fff0;}
    .honeydew2 {background-color: #e0eee0; color: #e0eee0;}
    .honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}
    .honeydew4 {background-color: #838b83; color: #838b83;}
    .hotpink {background-color: #ff69b4; color: #ff69b4;}
    .hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}
    .hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}
    .hotpink3 {background-color: #cd6090; color: #cd6090;}
    .hotpink4 {background-color: #8b3a62; color: #8b3a62;}
    .indianred {background-color: #cd5c5c; color: #cd5c5c;}
    .indianred1 {background-color: #ff6a6a; color: #ff6a6a;}
    .indianred2 {background-color: #ee6363; color: #ee6363;}
    .indianred3 {background-color: #cd5555; color: #cd5555;}
    .indianred4 {background-color: #8b3a3a; color: #8b3a3a;}
    .indigo {background-color: #4b0082; color: #4b0082;}
    .ivory {background-color: #fffff0; color: #fffff0;}
    .ivory1 {background-color: #fffff0; color: #fffff0;}
    .ivory2 {background-color: #eeeee0; color: #eeeee0;}
    .ivory3 {background-color: #cdcdc1; color: #cdcdc1;}
    .ivory4 {background-color: #8b8b83; color: #8b8b83;}
    .khaki {background-color: #f0e68c; color: #f0e68c;}
    .khaki1 {background-color: #fff68f; color: #fff68f;}
    .khaki2 {background-color: #eee685; color: #eee685;}
    .khaki3 {background-color: #cdc673; color: #cdc673;}
    .khaki4 {background-color: #8b864e; color: #8b864e;}
    .lavender {background-color: #e6e6fa; color: #e6e6fa;}
    .lavenderblush {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}
    .lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}
    .lavenderblush4 {background-color: #8b8386; color: #8b8386;}
    .lawngreen {background-color: #7cfc00; color: #7cfc00;}
    .lemonchiffon {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon1 {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}
    .lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}
    .lemonchiffon4 {background-color: #8b8970; color: #8b8970;}
    .lightblue {background-color: #add8e6; color: #add8e6;}
    .lightblue1 {background-color: #bfefff; color: #bfefff;}
    .lightblue2 {background-color: #b2dfee; color: #b2dfee;}
    .lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}
    .lightblue4 {background-color: #68838b; color: #68838b;}
    .lightcoral {background-color: #f08080; color: #f08080;}
    .lightcyan {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan1 {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan2 {background-color: #d1eeee; color: #d1eeee;}
    .lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}
    .lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}
    .lightgoldenrod {background-color: #eedd82; color: #eedd82;}
    .lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}
    .lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}
    .lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}
    .lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}
    .lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}
    .lightgray {background-color: #d3d3d3; color: #d3d3d3;}
    .lightgreen {background-color: #90ee90; color: #90ee90;}
    .lightgrey {background-color: #d3d3d3; color: #d3d3d3;}
    .lightpink {background-color: #ffb6c1; color: #ffb6c1;}
    .lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}
    .lightpink2 {background-color: #eea2ad; color: #eea2ad;}
    .lightpink3 {background-color: #cd8c95; color: #cd8c95;}
    .lightpink4 {background-color: #8b5f65; color: #8b5f65;}
    .lightsalmon {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon2 {background-color: #ee9572; color: #ee9572;}
    .lightsalmon3 {background-color: #cd8162; color: #cd8162;}
    .lightsalmon4 {background-color: #8b5742; color: #8b5742;}
    .lightseagreen {background-color: #20b2aa; color: #20b2aa;}
    .lightskyblue {background-color: #87cefa; color: #87cefa;}
    .lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}
    .lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}
    .lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}
    .lightskyblue4 {background-color: #607b8b; color: #607b8b;}
    .lightslateblue {background-color: #8470ff; color: #8470ff;}
    .lightslategray {background-color: #778899; color: #778899;}
    .lightslategrey {background-color: #778899; color: #778899;}
    .lightsteelblue {background-color: #b0c4de; color: #b0c4de;}
    .lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}
    .lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}
    .lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}
    .lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}
    .lightyellow {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow1 {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow2 {background-color: #eeeed1; color: #eeeed1;}
    .lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}
    .lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}
    .linen {background-color: #faf0e6; color: #faf0e6;}
    .limegreen {background-color: #32cd32; color: #32cd32;}
    .lime {background-color: #00ff00; color: #00ff00;}
    .magenta {background-color: #ff00ff; color: #ff00ff;}
    .magenta1 {background-color: #ff00ff; color: #ff00ff;}
    .magenta2 {background-color: #ee00ee; color: #ee00ee;}
    .magenta3 {background-color: #cd00cd; color: #cd00cd;}
    .magenta4 {background-color: #8b008b; color: #8b008b;}
    .maroon {background-color: #b03060; color: #b03060;}
    .maroon1 {background-color: #ff34b3; color: #ff34b3;}
    .maroon2 {background-color: #ee30a7; color: #ee30a7;}
    .maroon3 {background-color: #cd2990; color: #cd2990;}
    .maroon4 {background-color: #8b1c62; color: #8b1c62;}
    .mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}
    .mediumblue {background-color: #0000cd; color: #0000cd;}
    .mediumorchid {background-color: #ba55d3; color: #ba55d3;}
    .mediumorchid1 {background-color: #e066ff; color: #e066ff;}
    .mediumorchid2 {background-color: #d15fee; color: #d15fee;}
    .mediumorchid3 {background-color: #b452cd; color: #b452cd;}
    .mediumorchid4 {background-color: #7a378b; color: #7a378b;}
    .mediumpurple {background-color: #9370db; color: #9370db;}
    .mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}
    .mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}
    .mediumpurple3 {background-color: #8968cd; color: #8968cd;}
    .mediumpurple4 {background-color: #5d478b; color: #5d478b;}
    .mediumseagreen {background-color: #3cb371; color: #3cb371;}
    .mediumslateblue {background-color: #7b68ee; color: #7b68ee;}
    .mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}
    .mediumturquoise {background-color: #48d1cc; color: #48d1cc;}
    .mediumvioletred {background-color: #c71585; color: #c71585;}
    .midnightblue {background-color: #191970; color: #191970;}
    .mintcream {background-color: #f5fffa; color: #f5fffa;}
    .mistyrose {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose2 {background-color: #eed5d2; color: #eed5d2;}
    .mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}
    .mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}
    .moccasin {background-color: #ffe4b5; color: #ffe4b5;}
    .navajowhite {background-color: #ffdead; color: #ffdead;}
    .navajowhite1 {background-color: #ffdead; color: #ffdead;}
    .navajowhite2 {background-color: #eecfa1; color: #eecfa1;}
    .navajowhite3 {background-color: #cdb38b; color: #cdb38b;}
    .navajowhite4 {background-color: #8b795e; color: #8b795e;}
    .navy {background-color: #000080; color: #000080;}
    .navyblue {background-color: #000080; color: #000080;}
    .oldlace {background-color: #fdf5e6; color: #fdf5e6;}
    .olive {background-color: #808000; color: #808000;}
    .olivedrab {background-color: #6b8e23; color: #6b8e23;}
    .olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}
    .olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}
    .olivedrab3 {background-color: #9acd32; color: #9acd32;}
    .olivedrab4 {background-color: #698b22; color: #698b22;}
    .orange {background-color: #ffa500; color: #ffa500;}
    .orange1 {background-color: #ffa500; color: #ffa500;}
    .orange2 {background-color: #ee9a00; color: #ee9a00;}
    .orange3 {background-color: #cd8500; color: #cd8500;}
    .orange4 {background-color: #8b5a00; color: #8b5a00;}
    .orangered {background-color: #ff4500; color: #ff4500;}
    .orangered1 {background-color: #ff4500; color: #ff4500;}
    .orangered2 {background-color: #ee4000; color: #ee4000;}
    .orangered3 {background-color: #cd3700; color: #cd3700;}
    .orangered4 {background-color: #8b2500; color: #8b2500;}
    .orchid {background-color: #da70d6; color: #da70d6;}
    .orchid1 {background-color: #ff83fa; color: #ff83fa;}
    .orchid2 {background-color: #ee7ae9; color: #ee7ae9;}
    .orchid3 {background-color: #cd69c9; color: #cd69c9;}
    .orchid4 {background-color: #8b4789; color: #8b4789;}
    .palegreen {background-color: #98fb98; color: #98fb98;}
    .palegreen1 {background-color: #9aff9a; color: #9aff9a;}
    .palegreen2 {background-color: #90ee90; color: #90ee90;}
    .palegreen3 {background-color: #7ccd7c; color: #7ccd7c;}
    .palegreen4 {background-color: #548b54; color: #548b54;}
    .palegoldenrod {background-color: #eee8aa; color: #eee8aa;}
    .paleturquoise {background-color: #afeeee; color: #afeeee;}
    .paleturquoise1 {background-color: #bbffff; color: #bbffff;}
    .paleturquoise2 {background-color: #aeeeee; color: #aeeeee;}
    .paleturquoise3 {background-color: #96cdcd; color: #96cdcd;}
    .paleturquoise4 {background-color: #668b8b; color: #668b8b;}
    .palevioletred {background-color: #db7093; color: #db7093;}
    .palevioletred1 {background-color: #ff82ab; color: #ff82ab;}
    .palevioletred2 {background-color: #ee799f; color: #ee799f;}
    .palevioletred3 {background-color: #cd6889; color: #cd6889;}
    .palevioletred4 {background-color: #8b475d; color: #8b475d;}
    .papayawhip {background-color: #ffefd5; color: #ffefd5;}
    .peachpuff {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff1 {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff2 {background-color: #eecbad; color: #eecbad;}
    .peachpuff3 {background-color: #cdaf95; color: #cdaf95;}
    .peachpuff4 {background-color: #8b7765; color: #8b7765;}
    .peru {background-color: #cd853f; color: #cd853f;}
    .pink {background-color: #ffc0cb; color: #ffc0cb;}
    .pink1 {background-color: #ffb5c5; color: #ffb5c5;}
    .pink2 {background-color: #eea9b8; color: #eea9b8;}
    .pink3 {background-color: #cd919e; color: #cd919e;}
    .pink4 {background-color: #8b636c; color: #8b636c;}
    .plum {background-color: #dda0dd; color: #dda0dd;}
    .plum1 {background-color: #ffbbff; color: #ffbbff;}
    .plum2 {background-color: #eeaeee; color: #eeaeee;}
    .plum3 {background-color: #cd96cd; color: #cd96cd;}
    .plum4 {background-color: #8b668b; color: #8b668b;}
    .powderblue {background-color: #b0e0e6; color: #b0e0e6;}
    .purple {background-color: #a020f0; color: #a020f0;}
    .purple1 {background-color: #9b30ff; color: #9b30ff;}
    .purple2 {background-color: #912cee; color: #912cee;}
    .purple3 {background-color: #7d26cd; color: #7d26cd;}
    .purple4 {background-color: #551a8b; color: #551a8b;}
    .red {background-color: #ff0000; color: #ff0000;}
    .red1 {background-color: #ff0000; color: #ff0000;}
    .red2 {background-color: #ee0000; color: #ee0000;}
    .red3 {background-color: #cd0000; color: #cd0000;}
    .red4 {background-color: #8b0000; color: #8b0000;}
    .rosybrown {background-color: #bc8f8f; color: #bc8f8f;}
    .rosybrown1 {background-color: #ffc1c1; color: #ffc1c1;}
    .rosybrown2 {background-color: #eeb4b4; color: #eeb4b4;}
    .rosybrown3 {background-color: #cd9b9b; color: #cd9b9b;}
    .rosybrown4 {background-color: #8b6969; color: #8b6969;}
    .royalblue {background-color: #4169e1; color: #4169e1;}
    .royalblue1 {background-color: #4876ff; color: #4876ff;}
    .royalblue2 {background-color: #436eee; color: #436eee;}
    .royalblue3 {background-color: #3a5fcd; color: #3a5fcd;}
    .royalblue4 {background-color: #27408b; color: #27408b;}
    .salmon {background-color: #fa8072; color: #fa8072;}
    .salmon1 {background-color: #ff8c69; color: #ff8c69;}
    .salmon2 {background-color: #ee8262; color: #ee8262;}
    .salmon3 {background-color: #cd7054; color: #cd7054;}
    .salmon4 {background-color: #8b4c39; color: #8b4c39;}
    .saddlebrown {background-color: #8b4513; color: #8b4513;}
    .sandybrown {background-color: #f4a460; color: #f4a460;}
    .seagreen {background-color: #2e8b57; color: #2e8b57;}
    .seagreen1 {background-color: #54ff9f; color: #54ff9f;}
    .seagreen2 {background-color: #4eee94; color: #4eee94;}
    .seagreen3 {background-color: #43cd80; color: #43cd80;}
    .seagreen4 {background-color: #2e8b57; color: #2e8b57;}
    .seashell {background-color: #fff5ee; color: #fff5ee;}
    .seashell1 {background-color: #fff5ee; color: #fff5ee;}
    .seashell2 {background-color: #eee5de; color: #eee5de;}
    .seashell3 {background-color: #cdc5bf; color: #cdc5bf;}
    .seashell4 {background-color: #8b8682; color: #8b8682;}
    .sienna {background-color: #a0522d; color: #a0522d;}
    .sienna1 {background-color: #ff8247; color: #ff8247;}
    .sienna2 {background-color: #ee7942; color: #ee7942;}
    .sienna3 {background-color: #cd6839; color: #cd6839;}
    .sienna4 {background-color: #8b4726; color: #8b4726;}
    .silver {background-color: #c0c0c0; color: #c0c0c0;}
    .skyblue {background-color: #87ceeb; color: #87ceeb;}
    .skyblue1 {background-color: #87ceff; color: #87ceff;}
    .skyblue2 {background-color: #7ec0ee; color: #7ec0ee;}
    .skyblue3 {background-color: #6ca6cd; color: #6ca6cd;}
    .skyblue4 {background-color: #4a708b; color: #4a708b;}
    .slateblue {background-color: #6a5acd; color: #6a5acd;}
    .slateblue1 {background-color: #836fff; color: #836fff;}
    .slateblue2 {background-color: #7a67ee; color: #7a67ee;}
    .slateblue3 {background-color: #6959cd; color: #6959cd;}
    .slateblue4 {background-color: #473c8b; color: #473c8b;}
    .slategray {background-color: #708090; color: #708090;}
    .slategray1 {background-color: #c6e2ff; color: #c6e2ff;}
    .slategray2 {background-color: #b9d3ee; color: #b9d3ee;}
    .slategray3 {background-color: #9fb6cd; color: #9fb6cd;}
    .slategray4 {background-color: #6c7b8b; color: #6c7b8b;}
    .slategrey {background-color: #708090; color: #708090;}
    .snow {background-color: #fffafa; color: #fffafa;}
    .snow1 {background-color: #fffafa; color: #fffafa;}
    .snow2 {background-color: #eee9e9; color: #eee9e9;}
    .snow3 {background-color: #cdc9c9; color: #cdc9c9;}
    .snow4 {background-color: #8b8989; color: #8b8989;}
    .springgreen {background-color: #00ff7f; color: #00ff7f;}
    .springgreen1 {background-color: #00ff7f; color: #00ff7f;}
    .springgreen2 {background-color: #00ee76; color: #00ee76;}
    .springgreen3 {background-color: #00cd66; color: #00cd66;}
    .springgreen4 {background-color: #008b45; color: #008b45;}
    .steelblue {background-color: #4682b4; color: #4682b4;}
    .steelblue1 {background-color: #63b8ff; color: #63b8ff;}
    .steelblue2 {background-color: #5cacee; color: #5cacee;}
    .steelblue3 {background-color: #4f94cd; color: #4f94cd;}
    .steelblue4 {background-color: #36648b; color: #36648b;}
    .tan {background-color: #d2b48c; color: #d2b48c;}
    .tan1 {background-color: #ffa54f; color: #ffa54f;}
    .tan2 {background-color: #ee9a49; color: #ee9a49;}
    .tan3 {background-color: #cd853f; color: #cd853f;}
    .tan4 {background-color: #8b5a2b; color: #8b5a2b;}
    .teal {background-color: #008080; color: #008080;}
    .thistle {background-color: #d8bfd8; color: #d8bfd8;}
    .thistle1 {background-color: #ffe1ff; color: #ffe1ff;}
    .thistle2 {background-color: #eed2ee; color: #eed2ee;}
    .thistle3 {background-color: #cdb5cd; color: #cdb5cd;}
    .thistle4 {background-color: #8b7b8b; color: #8b7b8b;}
    .tomato {background-color: #ff6347; color: #ff6347;}
    .tomato1 {background-color: #ff6347; color: #ff6347;}
    .tomato2 {background-color: #ee5c42; color: #ee5c42;}
    .tomato3 {background-color: #cd4f39; color: #cd4f39;}
    .tomato4 {background-color: #8b3626; color: #8b3626;}
    .turquoise {background-color: #40e0d0; color: #40e0d0;}
    .turquoise1 {background-color: #00f5ff; color: #00f5ff;}
    .turquoise2 {background-color: #00e5ee; color: #00e5ee;}
    .turquoise3 {background-color: #00c5cd; color: #00c5cd;}
    .turquoise4 {background-color: #00868b; color: #00868b;}
    .violet {background-color: #ee82ee; color: #ee82ee;}
    .violetred {background-color: #d02090; color: #d02090;}
    .violetred1 {background-color: #ff3e96; color: #ff3e96;}
    .violetred2 {background-color: #ee3a8c; color: #ee3a8c;}
    .violetred3 {background-color: #cd3278; color: #cd3278;}
    .violetred4 {background-color: #8b2252; color: #8b2252;}
    .wheat {background-color: #f5deb3; color: #f5deb3;}
    .wheat1 {background-color: #ffe7ba; color: #ffe7ba;}
    .wheat2 {background-color: #eed8ae; color: #eed8ae;}
    .wheat3 {background-color: #cdba96; color: #cdba96;}
    .wheat4 {background-color: #8b7e66; color: #8b7e66;}
    .white {background-color: #ffffff; color: #ffffff;}
    .whitesmoke {background-color: #f5f5f5; color: #f5f5f5;}
    .yellow {background-color: #ffff00; color: #ffff00;}
    .yellow1 {background-color: #ffff00; color: #ffff00;}
    .yellow2 {background-color: #eeee00; color: #eeee00;}
    .yellow3 {background-color: #cdcd00; color: #cdcd00;}
    .yellow4 {background-color: #8b8b00; color: #8b8b00;}
    .yellowgreen {background-color: #9acd32; color: #9acd32;}
    </style>

:doc:`color` lets you specify any of these named colors when creating a new
``pygame.Color`` (taken from the
`colordict module <https://github.com/pygame/pygame/blob/main/src_py/colordict.py>`_).

.. role:: aliceblue
.. role:: antiquewhite
.. role:: antiquewhite1
.. role:: antiquewhite2
.. role:: antiquewhite3
.. role:: antiquewhite4
.. role:: aqua
.. role:: aquamarine
.. role:: aquamarine1
.. role:: aquamarine2
.. role:: aquamarine3
.. role:: aquamarine4
.. role:: azure
.. role:: azure1
.. role:: azure2
.. role:: azure3
.. role:: azure4
.. role:: beige
.. role:: bisque
.. role:: bisque1
.. role:: bisque2
.. role:: bisque3
.. role:: bisque4
.. role:: black
.. role:: blanchedalmond
.. role:: blue
.. role:: blue1
.. role:: blue2
.. role:: blue3
.. role:: blue4
.. role:: blueviolet
.. role:: brown
.. role:: brown1
.. role:: brown2
.. role:: brown3
.. role:: brown4
.. role:: burlywood
.. role:: burlywood1
.. role:: burlywood2
.. role:: burlywood3
.. role:: burlywood4
.. role:: cadetblue
.. role:: cadetblue1
.. role:: cadetblue2
.. role:: cadetblue3
.. role:: cadetblue4
.. role:: chartreuse
.. role:: chartreuse1
.. role:: chartreuse2
.. role:: chartreuse3
.. role:: chartreuse4
.. role:: chocolate
.. role:: chocolate1
.. role:: chocolate2
.. role:: chocolate3
.. role:: chocolate4
.. role:: coral
.. role:: coral1
.. role:: coral2
.. role:: coral3
.. role:: coral4
.. role:: cornflowerblue
.. role:: cornsilk
.. role:: cornsilk1
.. role:: cornsilk2
.. role:: cornsilk3
.. role:: cornsilk4
.. role:: crimson
.. role:: cyan
.. role:: cyan1
.. role:: cyan2
.. role:: cyan3
.. role:: cyan4
.. role:: darkblue
.. role:: darkcyan
.. role:: darkgoldenrod
.. role:: darkgoldenrod1
.. role:: darkgoldenrod2
.. role:: darkgoldenrod3
.. role:: darkgoldenrod4
.. role:: darkgray
.. role:: darkgreen
.. role:: darkgrey
.. role:: darkkhaki
.. role:: darkmagenta
.. role:: darkolivegreen
.. role:: darkolivegreen1
.. role:: darkolivegreen2
.. role:: darkolivegreen3
.. role:: darkolivegreen4
.. role:: darkorange
.. role:: darkorange1
.. role:: darkorange2
.. role:: darkorange3
.. role:: darkorange4
.. role:: darkorchid
.. role:: darkorchid1
.. role:: darkorchid2
.. role:: darkorchid3
.. role:: darkorchid4
.. role:: darkred
.. role:: darksalmon
.. role:: darkseagreen
.. role:: darkseagreen1
.. role:: darkseagreen2
.. role:: darkseagreen3
.. role:: darkseagreen4
.. role:: darkslateblue
.. role:: darkslategray
.. role:: darkslategray1
.. role:: darkslategray2
.. role:: darkslategray3
.. role:: darkslategray4
.. role:: darkslategrey
.. role:: darkturquoise
.. role:: darkviolet
.. role:: deeppink
.. role:: deeppink1
.. role:: deeppink2
.. role:: deeppink3
.. role:: deeppink4
.. role:: deepskyblue
.. role:: deepskyblue1
.. role:: deepskyblue2
.. role:: deepskyblue3
.. role:: deepskyblue4
.. role:: dimgray
.. role:: dimgrey
.. role:: dodgerblue
.. role:: dodgerblue1
.. role:: dodgerblue2
.. role:: dodgerblue3
.. role:: dodgerblue4
.. role:: firebrick
.. role:: firebrick1
.. role:: firebrick2
.. role:: firebrick3
.. role:: firebrick4
.. role:: floralwhite
.. role:: forestgreen
.. role:: fuchsia
.. role:: gainsboro
.. role:: ghostwhite
.. role:: gold
.. role:: gold1
.. role:: gold2
.. role:: gold3
.. role:: gold4
.. role:: goldenrod
.. role:: goldenrod1
.. role:: goldenrod2
.. role:: goldenrod3
.. role:: goldenrod4
.. role:: gray
.. role:: gray0
.. role:: gray1
.. role:: gray2
.. role:: gray3
.. role:: gray4
.. role:: gray5
.. role:: gray6
.. role:: gray7
.. role:: gray8
.. role:: gray9
.. role:: gray10
.. role:: gray11
.. role:: gray12
.. role:: gray13
.. role:: gray14
.. role:: gray15
.. role:: gray16
.. role:: gray17
.. role:: gray18
.. role:: gray19
.. role:: gray20
.. role:: gray21
.. role:: gray22
.. role:: gray23
.. role:: gray24
.. role:: gray25
.. role:: gray26
.. role:: gray27
.. role:: gray28
.. role:: gray29
.. role:: gray30
.. role:: gray31
.. role:: gray32
.. role:: gray33
.. role:: gray34
.. role:: gray35
.. role:: gray36
.. role:: gray37
.. role:: gray38
.. role:: gray39
.. role:: gray40
.. role:: gray41
.. role:: gray42
.. role:: gray43
.. role:: gray44
.. role:: gray45
.. role:: gray46
.. role:: gray47
.. role:: gray48
.. role:: gray49
.. role:: gray50
.. role:: gray51
.. role:: gray52
.. role:: gray53
.. role:: gray54
.. role:: gray55
.. role:: gray56
.. role:: gray57
.. role:: gray58
.. role:: gray59
.. role:: gray60
.. role:: gray61
.. role:: gray62
.. role:: gray63
.. role:: gray64
.. role:: gray65
.. role:: gray66
.. role:: gray67
.. role:: gray68
.. role:: gray69
.. role:: gray70
.. role:: gray71
.. role:: gray72
.. role:: gray73
.. role:: gray74
.. role:: gray75
.. role:: gray76
.. role:: gray77
.. role:: gray78
.. role:: gray79
.. role:: gray80
.. role:: gray81
.. role:: gray82
.. role:: gray83
.. role:: gray84
.. role:: gray85
.. role:: gray86
.. role:: gray87
.. role:: gray88
.. role:: gray89
.. role:: gray90
.. role:: gray91
.. role:: gray92
.. role:: gray93
.. role:: gray94
.. role:: gray95
.. role:: gray96
.. role:: gray97
.. role:: gray98
.. role:: gray99
.. role:: gray100
.. role:: green
.. role:: green1
.. role:: green2
.. role:: green3
.. role:: green4
.. role:: greenyellow
.. role:: grey
.. role:: grey0
.. role:: grey1
.. role:: grey2
.. role:: grey3
.. role:: grey4
.. role:: grey5
.. role:: grey6
.. role:: grey7
.. role:: grey8
.. role:: grey9
.. role:: grey10
.. role:: grey11
.. role:: grey12
.. role:: grey13
.. role:: grey14
.. role:: grey15
.. role:: grey16
.. role:: grey17
.. role:: grey18
.. role:: grey19
.. role:: grey20
.. role:: grey21
.. role:: grey22
.. role:: grey23
.. role:: grey24
.. role:: grey25
.. role:: grey26
.. role:: grey27
.. role:: grey28
.. role:: grey29
.. role:: grey30
.. role:: grey31
.. role:: grey32
.. role:: grey33
.. role:: grey34
.. role:: grey35
.. role:: grey36
.. role:: grey37
.. role:: grey38
.. role:: grey39
.. role:: grey40
.. role:: grey41
.. role:: grey42
.. role:: grey43
.. role:: grey44
.. role:: grey45
.. role:: grey46
.. role:: grey47
.. role:: grey48
.. role:: grey49
.. role:: grey50
.. role:: grey51
.. role:: grey52
.. role:: grey53
.. role:: grey54
.. role:: grey55
.. role:: grey56
.. role:: grey57
.. role:: grey58
.. role:: grey59
.. role:: grey60
.. role:: grey61
.. role:: grey62
.. role:: grey63
.. role:: grey64
.. role:: grey65
.. role:: grey66
.. role:: grey67
.. role:: grey68
.. role:: grey69
.. role:: grey70
.. role:: grey71
.. role:: grey72
.. role:: grey73
.. role:: grey74
.. role:: grey75
.. role:: grey76
.. role:: grey77
.. role:: grey78
.. role:: grey79
.. role:: grey80
.. role:: grey81
.. role:: grey82
.. role:: grey83
.. role:: grey84
.. role:: grey85
.. role:: grey86
.. role:: grey87
.. role:: grey88
.. role:: grey89
.. role:: grey90
.. role:: grey91
.. role:: grey92
.. role:: grey93
.. role:: grey94
.. role:: grey95
.. role:: grey96
.. role:: grey97
.. role:: grey98
.. role:: grey99
.. role:: grey100
.. role:: honeydew
.. role:: honeydew1
.. role:: honeydew2
.. role:: honeydew3
.. role:: honeydew4
.. role:: hotpink
.. role:: hotpink1
.. role:: hotpink2
.. role:: hotpink3
.. role:: hotpink4
.. role:: indianred
.. role:: indianred1
.. role:: indianred2
.. role:: indianred3
.. role:: indianred4
.. role:: indigo
.. role:: ivory
.. role:: ivory1
.. role:: ivory2
.. role:: ivory3
.. role:: ivory4
.. role:: khaki
.. role:: khaki1
.. role:: khaki2
.. role:: khaki3
.. role:: khaki4
.. role:: lavender
.. role:: lavenderblush
.. role:: lavenderblush1
.. role:: lavenderblush2
.. role:: lavenderblush3
.. role:: lavenderblush4
.. role:: lawngreen
.. role:: lemonchiffon
.. role:: lemonchiffon1
.. role:: lemonchiffon2
.. role:: lemonchiffon3
.. role:: lemonchiffon4
.. role:: lightblue
.. role:: lightblue1
.. role:: lightblue2
.. role:: lightblue3
.. role:: lightblue4
.. role:: lightcoral
.. role:: lightcyan
.. role:: lightcyan1
.. role:: lightcyan2
.. role:: lightcyan3
.. role:: lightcyan4
.. role:: lightgoldenrod
.. role:: lightgoldenrod1
.. role:: lightgoldenrod2
.. role:: lightgoldenrod3
.. role:: lightgoldenrod4
.. role:: lightgoldenrodyellow
.. role:: lightgray
.. role:: lightgreen
.. role:: lightgrey
.. role:: lightpink
.. role:: lightpink1
.. role:: lightpink2
.. role:: lightpink3
.. role:: lightpink4
.. role:: lightsalmon
.. role:: lightsalmon1
.. role:: lightsalmon2
.. role:: lightsalmon3
.. role:: lightsalmon4
.. role:: lightseagreen
.. role:: lightskyblue
.. role:: lightskyblue1
.. role:: lightskyblue2
.. role:: lightskyblue3
.. role:: lightskyblue4
.. role:: lightslateblue
.. role:: lightslategray
.. role:: lightslategrey
.. role:: lightsteelblue
.. role:: lightsteelblue1
.. role:: lightsteelblue2
.. role:: lightsteelblue3
.. role:: lightsteelblue4
.. role:: lightyellow
.. role:: lightyellow1
.. role:: lightyellow2
.. role:: lightyellow3
.. role:: lightyellow4
.. role:: limegreen
.. role:: lime
.. role:: linen
.. role:: magenta
.. role:: magenta1
.. role:: magenta2
.. role:: magenta3
.. role:: magenta4
.. role:: maroon
.. role:: maroon1
.. role:: maroon2
.. role:: maroon3
.. role:: maroon4
.. role:: mediumaquamarine
.. role:: mediumblue
.. role:: mediumorchid
.. role:: mediumorchid1
.. role:: mediumorchid2
.. role:: mediumorchid3
.. role:: mediumorchid4
.. role:: mediumpurple
.. role:: mediumpurple1
.. role:: mediumpurple2
.. role:: mediumpurple3
.. role:: mediumpurple4
.. role:: mediumseagreen
.. role:: mediumslateblue
.. role:: mediumspringgreen
.. role:: mediumturquoise
.. role:: mediumvioletred
.. role:: midnightblue
.. role:: mintcream
.. role:: mistyrose
.. role:: mistyrose1
.. role:: mistyrose2
.. role:: mistyrose3
.. role:: mistyrose4
.. role:: moccasin
.. role:: navajowhite
.. role:: navajowhite1
.. role:: navajowhite2
.. role:: navajowhite3
.. role:: navajowhite4
.. role:: navy
.. role:: navyblue
.. role:: oldlace
.. role:: olive
.. role:: olivedrab
.. role:: olivedrab1
.. role:: olivedrab2
.. role:: olivedrab3
.. role:: olivedrab4
.. role:: orange
.. role:: orange1
.. role:: orange2
.. role:: orange3
.. role:: orange4
.. role:: orangered
.. role:: orangered1
.. role:: orangered2
.. role:: orangered3
.. role:: orangered4
.. role:: orchid
.. role:: orchid1
.. role:: orchid2
.. role:: orchid3
.. role:: orchid4
.. role:: palegoldenrod
.. role:: palegreen
.. role:: palegreen1
.. role:: palegreen2
.. role:: palegreen3
.. role:: palegreen4
.. role:: paleturquoise
.. role:: paleturquoise1
.. role:: paleturquoise2
.. role:: paleturquoise3
.. role:: paleturquoise4
.. role:: palevioletred
.. role:: palevioletred1
.. role:: palevioletred2
.. role:: palevioletred3
.. role:: palevioletred4
.. role:: papayawhip
.. role:: peachpuff
.. role:: peachpuff1
.. role:: peachpuff2
.. role:: peachpuff3
.. role:: peachpuff4
.. role:: peru
.. role:: pink
.. role:: pink1
.. role:: pink2
.. role:: pink3
.. role:: pink4
.. role:: plum
.. role:: plum1
.. role:: plum2
.. role:: plum3
.. role:: plum4
.. role:: powderblue
.. role:: purple
.. role:: purple1
.. role:: purple2
.. role:: purple3
.. role:: purple4
.. role:: red
.. role:: red1
.. role:: red2
.. role:: red3
.. role:: red4
.. role:: rosybrown
.. role:: rosybrown1
.. role:: rosybrown2
.. role:: rosybrown3
.. role:: rosybrown4
.. role:: royalblue
.. role:: royalblue1
.. role:: royalblue2
.. role:: royalblue3
.. role:: royalblue4
.. role:: saddlebrown
.. role:: salmon
.. role:: salmon1
.. role:: salmon2
.. role:: salmon3
.. role:: salmon4
.. role:: sandybrown
.. role:: seagreen
.. role:: seagreen1
.. role:: seagreen2
.. role:: seagreen3
.. role:: seagreen4
.. role:: seashell
.. role:: seashell1
.. role:: seashell2
.. role:: seashell3
.. role:: seashell4
.. role:: sienna
.. role:: sienna1
.. role:: sienna2
.. role:: sienna3
.. role:: sienna4
.. role:: silver
.. role:: skyblue
.. role:: skyblue1
.. role:: skyblue2
.. role:: skyblue3
.. role:: skyblue4
.. role:: slateblue
.. role:: slateblue1
.. role:: slateblue2
.. role:: slateblue3
.. role:: slateblue4
.. role:: slategray
.. role:: slategray1
.. role:: slategray2
.. role:: slategray3
.. role:: slategray4
.. role:: slategrey
.. role:: snow
.. role:: snow1
.. role:: snow2
.. role:: snow3
.. role:: snow4
.. role:: springgreen
.. role:: springgreen1
.. role:: springgreen2
.. role:: springgreen3
.. role:: springgreen4
.. role:: steelblue
.. role:: steelblue1
.. role:: steelblue2
.. role:: steelblue3
.. role:: steelblue4
.. role:: tan
.. role:: tan1
.. role:: tan2
.. role:: tan3
.. role:: tan4
.. role:: teal
.. role:: thistle
.. role:: thistle1
.. role:: thistle2
.. role:: thistle3
.. role:: thistle4
.. role:: tomato
.. role:: tomato1
.. role:: tomato2
.. role:: tomato3
.. role:: tomato4
.. role:: turquoise
.. role:: turquoise1
.. role:: turquoise2
.. role:: turquoise3
.. role:: turquoise4
.. role:: violet
.. role:: violetred
.. role:: violetred1
.. role:: violetred2
.. role:: violetred3
.. role:: violetred4
.. role:: wheat
.. role:: wheat1
.. role:: wheat2
.. role:: wheat3
.. role:: wheat4
.. role:: white
.. role:: whitesmoke
.. role:: yellow
.. role:: yellow1
.. role:: yellow2
.. role:: yellow3
.. role:: yellow4
.. role:: yellowgreen

==========================  ======================================================================================================
Name                        Color
==========================  ======================================================================================================
``aliceblue``               :aliceblue:`████████`
``antiquewhite``            :antiquewhite:`████████`
``antiquewhite1``           :antiquewhite1:`████████`
``antiquewhite2``           :antiquewhite2:`████████`
``antiquewhite3``           :antiquewhite3:`████████`
``antiquewhite4``           :antiquewhite4:`████████`
``aqua``                    :aqua:`████████`
``aquamarine``              :aquamarine:`████████`
``aquamarine1``             :aquamarine1:`████████`
``aquamarine2``             :aquamarine2:`████████`
``aquamarine3``             :aquamarine3:`████████`
``aquamarine4``             :aquamarine4:`████████`
``azure``                   :azure:`████████`
``azure1``                  :azure1:`████████`
``azure2``                  :azure2:`████████`
``azure3``                  :azure3:`████████`
``azure4``                  :azure4:`████████`
``beige``                   :beige:`████████`
``bisque``                  :bisque:`████████`
``bisque1``                 :bisque1:`████████`
``bisque2``                 :bisque2:`████████`
``bisque3``                 :bisque3:`████████`
``bisque4``                 :bisque4:`████████`
``black``                   :black:`████████`
``blanchedalmond``          :blanchedalmond:`████████`
``blue``                    :blue:`████████`
``blue1``                   :blue1:`████████`
``blue2``                   :blue2:`████████`
``blue3``                   :blue3:`████████`
``blue4``                   :blue4:`████████`
``blueviolet``              :blueviolet:`████████`
``brown``                   :brown:`████████`
``brown1``                  :brown1:`████████`
``brown2``                  :brown2:`████████`
``brown3``                  :brown3:`████████`
``brown4``                  :brown4:`████████`
``burlywood``               :burlywood:`████████`
``burlywood1``              :burlywood1:`████████`
``burlywood2``              :burlywood2:`████████`
``burlywood3``              :burlywood3:`████████`
``burlywood4``              :burlywood4:`████████`
``cadetblue``               :cadetblue:`████████`
``cadetblue1``              :cadetblue1:`████████`
``cadetblue2``              :cadetblue2:`████████`
``cadetblue3``              :cadetblue3:`████████`
``cadetblue4``              :cadetblue4:`████████`
``chartreuse``              :chartreuse:`████████`
``chartreuse1``             :chartreuse1:`████████`
``chartreuse2``             :chartreuse2:`████████`
``chartreuse3``             :chartreuse3:`████████`
``chartreuse4``             :chartreuse4:`████████`
``chocolate``               :chocolate:`████████`
``chocolate1``              :chocolate1:`████████`
``chocolate2``              :chocolate2:`████████`
``chocolate3``              :chocolate3:`████████`
``chocolate4``              :chocolate4:`████████`
``coral``                   :coral:`████████`
``coral1``                  :coral1:`████████`
``coral2``                  :coral2:`████████`
``coral3``                  :coral3:`████████`
``coral4``                  :coral4:`████████`
``cornflowerblue``          :cornflowerblue:`████████`
``cornsilk``                :cornsilk:`████████`
``cornsilk1``               :cornsilk1:`████████`
``cornsilk2``               :cornsilk2:`████████`
``cornsilk3``               :cornsilk3:`████████`
``cornsilk4``               :cornsilk4:`████████`
``crimson``                 :crimson:`████████`
``cyan``                    :cyan:`████████`
``cyan1``                   :cyan1:`████████`
``cyan2``                   :cyan2:`████████`
``cyan3``                   :cyan3:`████████`
``cyan4``                   :cyan4:`████████`
``darkblue``                :darkblue:`████████`
``darkcyan``                :darkcyan:`████████`
``darkgoldenrod``           :darkgoldenrod:`████████`
``darkgoldenrod1``          :darkgoldenrod1:`████████`
``darkgoldenrod2``          :darkgoldenrod2:`████████`
``darkgoldenrod3``          :darkgoldenrod3:`████████`
``darkgoldenrod4``          :darkgoldenrod4:`████████`
``darkgray``                :darkgray:`████████`
``darkgreen``               :darkgreen:`████████`
``darkgrey``                :darkgrey:`████████`
``darkkhaki``               :darkkhaki:`████████`
``darkmagenta``             :darkmagenta:`████████`
``darkolivegreen``          :darkolivegreen:`████████`
``darkolivegreen1``         :darkolivegreen1:`████████`
``darkolivegreen2``         :darkolivegreen2:`████████`
``darkolivegreen3``         :darkolivegreen3:`████████`
``darkolivegreen4``         :darkolivegreen4:`████████`
``darkorange``              :darkorange:`████████`
``darkorange1``             :darkorange1:`████████`
``darkorange2``             :darkorange2:`████████`
``darkorange3``             :darkorange3:`████████`
``darkorange4``             :darkorange4:`████████`
``darkorchid``              :darkorchid:`████████`
``darkorchid1``             :darkorchid1:`████████`
``darkorchid2``             :darkorchid2:`████████`
``darkorchid3``             :darkorchid3:`████████`
``darkorchid4``             :darkorchid4:`████████`
``darkred``                 :darkred:`████████`
``darksalmon``              :darksalmon:`████████`
``darkseagreen``            :darkseagreen:`████████`
``darkseagreen1``           :darkseagreen1:`████████`
``darkseagreen2``           :darkseagreen2:`████████`
``darkseagreen3``           :darkseagreen3:`████████`
``darkseagreen4``           :darkseagreen4:`████████`
``darkslateblue``           :darkslateblue:`████████`
``darkslategray``           :darkslategray:`████████`
``darkslategray1``          :darkslategray1:`████████`
``darkslategray2``          :darkslategray2:`████████`
``darkslategray3``          :darkslategray3:`████████`
``darkslategray4``          :darkslategray4:`████████`
``darkslategrey``           :darkslategrey:`████████`
``darkturquoise``           :darkturquoise:`████████`
``darkviolet``              :darkviolet:`████████`
``deeppink``                :deeppink:`████████`
``deeppink1``               :deeppink1:`████████`
``deeppink2``               :deeppink2:`████████`
``deeppink3``               :deeppink3:`████████`
``deeppink4``               :deeppink4:`████████`
``deepskyblue``             :deepskyblue:`████████`
``deepskyblue1``            :deepskyblue1:`████████`
``deepskyblue2``            :deepskyblue2:`████████`
``deepskyblue3``            :deepskyblue3:`████████`
``deepskyblue4``            :deepskyblue4:`████████`
``dimgray``                 :dimgray:`████████`
``dimgrey``                 :dimgrey:`████████`
``dodgerblue``              :dodgerblue:`████████`
``dodgerblue1``             :dodgerblue1:`████████`
``dodgerblue2``             :dodgerblue2:`████████`
``dodgerblue3``             :dodgerblue3:`████████`
``dodgerblue4``             :dodgerblue4:`████████`
``firebrick``               :firebrick:`████████`
``firebrick1``              :firebrick1:`████████`
``firebrick2``              :firebrick2:`████████`
``firebrick3``              :firebrick3:`████████`
``firebrick4``              :firebrick4:`████████`
``floralwhite``             :floralwhite:`████████`
``forestgreen``             :forestgreen:`████████`
``fuchsia``                 :fuchsia:`████████`
``gainsboro``               :gainsboro:`████████`
``ghostwhite``              :ghostwhite:`████████`
``gold``                    :gold:`████████`
``gold1``                   :gold1:`████████`
``gold2``                   :gold2:`████████`
``gold3``                   :gold3:`████████`
``gold4``                   :gold4:`████████`
``goldenrod``               :goldenrod:`████████`
``goldenrod1``              :goldenrod1:`████████`
``goldenrod2``              :goldenrod2:`████████`
``goldenrod3``              :goldenrod3:`████████`
``goldenrod4``              :goldenrod4:`████████`
``gray``                    :gray:`████████`
``gray0``                   :gray0:`████████`
``gray1``                   :gray1:`████████`
``gray2``                   :gray2:`████████`
``gray3``                   :gray3:`████████`
``gray4``                   :gray4:`████████`
``gray5``                   :gray5:`████████`
``gray6``                   :gray6:`████████`
``gray7``                   :gray7:`████████`
``gray8``                   :gray8:`████████`
``gray9``                   :gray9:`████████`
``gray10``                  :gray10:`████████`
``gray11``                  :gray11:`████████`
``gray12``                  :gray12:`████████`
``gray13``                  :gray13:`████████`
``gray14``                  :gray14:`████████`
``gray15``                  :gray15:`████████`
``gray16``                  :gray16:`████████`
``gray17``                  :gray17:`████████`
``gray18``                  :gray18:`████████`
``gray19``                  :gray19:`████████`
``gray20``                  :gray20:`████████`
``gray21``                  :gray21:`████████`
``gray22``                  :gray22:`████████`
``gray23``                  :gray23:`████████`
``gray24``                  :gray24:`████████`
``gray25``                  :gray25:`████████`
``gray26``                  :gray26:`████████`
``gray27``                  :gray27:`████████`
``gray28``                  :gray28:`████████`
``gray29``                  :gray29:`████████`
``gray30``                  :gray30:`████████`
``gray31``                  :gray31:`████████`
``gray32``                  :gray32:`████████`
``gray33``                  :gray33:`████████`
``gray34``                  :gray34:`████████`
``gray35``                  :gray35:`████████`
``gray36``                  :gray36:`████████`
``gray37``                  :gray37:`████████`
``gray38``                  :gray38:`████████`
``gray39``                  :gray39:`████████`
``gray40``                  :gray40:`████████`
``gray41``                  :gray41:`████████`
``gray42``                  :gray42:`████████`
``gray43``                  :gray43:`████████`
``gray44``                  :gray44:`████████`
``gray45``                  :gray45:`████████`
``gray46``                  :gray46:`████████`
``gray47``                  :gray47:`████████`
``gray48``                  :gray48:`████████`
``gray49``                  :gray49:`████████`
``gray50``                  :gray50:`████████`
``gray51``                  :gray51:`████████`
``gray52``                  :gray52:`████████`
``gray53``                  :gray53:`████████`
``gray54``                  :gray54:`████████`
``gray55``                  :gray55:`████████`
``gray56``                  :gray56:`████████`
``gray57``                  :gray57:`████████`
``gray58``                  :gray58:`████████`
``gray59``                  :gray59:`████████`
``gray60``                  :gray60:`████████`
``gray61``                  :gray61:`████████`
``gray62``                  :gray62:`████████`
``gray63``                  :gray63:`████████`
``gray64``                  :gray64:`████████`
``gray65``                  :gray65:`████████`
``gray66``                  :gray66:`████████`
``gray67``                  :gray67:`████████`
``gray68``                  :gray68:`████████`
``gray69``                  :gray69:`████████`
``gray70``                  :gray70:`████████`
``gray71``                  :gray71:`████████`
``gray72``                  :gray72:`████████`
``gray73``                  :gray73:`████████`
``gray74``                  :gray74:`████████`
``gray75``                  :gray75:`████████`
``gray76``                  :gray76:`████████`
``gray77``                  :gray77:`████████`
``gray78``                  :gray78:`████████`
``gray79``                  :gray79:`████████`
``gray80``                  :gray80:`████████`
``gray81``                  :gray81:`████████`
``gray82``                  :gray82:`████████`
``gray83``                  :gray83:`████████`
``gray84``                  :gray84:`████████`
``gray85``                  :gray85:`████████`
``gray86``                  :gray86:`████████`
``gray87``                  :gray87:`████████`
``gray88``                  :gray88:`████████`
``gray89``                  :gray89:`████████`
``gray90``                  :gray90:`████████`
``gray91``                  :gray91:`████████`
``gray92``                  :gray92:`████████`
``gray93``                  :gray93:`████████`
``gray94``                  :gray94:`████████`
``gray95``                  :gray95:`████████`
``gray96``                  :gray96:`████████`
``gray97``                  :gray97:`████████`
``gray98``                  :gray98:`████████`
``gray99``                  :gray99:`████████`
``gray100``                 :gray100:`████████`
``green``                   :green:`████████`
``green1``                  :green1:`████████`
``green2``                  :green2:`████████`
``green3``                  :green3:`████████`
``green4``                  :green4:`████████`
``greenyellow``             :greenyellow:`████████`
``grey``                    :grey:`████████`
``grey0``                   :grey0:`████████`
``grey1``                   :grey1:`████████`
``grey2``                   :grey2:`████████`
``grey3``                   :grey3:`████████`
``grey4``                   :grey4:`████████`
``grey5``                   :grey5:`████████`
``grey6``                   :grey6:`████████`
``grey7``                   :grey7:`████████`
``grey8``                   :grey8:`████████`
``grey9``                   :grey9:`████████`
``grey10``                  :grey10:`████████`
``grey11``                  :grey11:`████████`
``grey12``                  :grey12:`████████`
``grey13``                  :grey13:`████████`
``grey14``                  :grey14:`████████`
``grey15``                  :grey15:`████████`
``grey16``                  :grey16:`████████`
``grey17``                  :grey17:`████████`
``grey18``                  :grey18:`████████`
``grey19``                  :grey19:`████████`
``grey20``                  :grey20:`████████`
``grey21``                  :grey21:`████████`
``grey22``                  :grey22:`████████`
``grey23``                  :grey23:`████████`
``grey24``                  :grey24:`████████`
``grey25``                  :grey25:`████████`
``grey26``                  :grey26:`████████`
``grey27``                  :grey27:`████████`
``grey28``                  :grey28:`████████`
``grey29``                  :grey29:`████████`
``grey30``                  :grey30:`████████`
``grey31``                  :grey31:`████████`
``grey32``                  :grey32:`████████`
``grey33``                  :grey33:`████████`
``grey34``                  :grey34:`████████`
``grey35``                  :grey35:`████████`
``grey36``                  :grey36:`████████`
``grey37``                  :grey37:`████████`
``grey38``                  :grey38:`████████`
``grey39``                  :grey39:`████████`
``grey40``                  :grey40:`████████`
``grey41``                  :grey41:`████████`
``grey42``                  :grey42:`████████`
``grey43``                  :grey43:`████████`
``grey44``                  :grey44:`████████`
``grey45``                  :grey45:`████████`
``grey46``                  :grey46:`████████`
``grey47``                  :grey47:`████████`
``grey48``                  :grey48:`████████`
``grey49``                  :grey49:`████████`
``grey50``                  :grey50:`████████`
``grey51``                  :grey51:`████████`
``grey52``                  :grey52:`████████`
``grey53``                  :grey53:`████████`
``grey54``                  :grey54:`████████`
``grey55``                  :grey55:`████████`
``grey56``                  :grey56:`████████`
``grey57``                  :grey57:`████████`
``grey58``                  :grey58:`████████`
``grey59``                  :grey59:`████████`
``grey60``                  :grey60:`████████`
``grey61``                  :grey61:`████████`
``grey62``                  :grey62:`████████`
``grey63``                  :grey63:`████████`
``grey64``                  :grey64:`████████`
``grey65``                  :grey65:`████████`
``grey66``                  :grey66:`████████`
``grey67``                  :grey67:`████████`
``grey68``                  :grey68:`████████`
``grey69``                  :grey69:`████████`
``grey70``                  :grey70:`████████`
``grey71``                  :grey71:`████████`
``grey72``                  :grey72:`████████`
``grey73``                  :grey73:`████████`
``grey74``                  :grey74:`████████`
``grey75``                  :grey75:`████████`
``grey76``                  :grey76:`████████`
``grey77``                  :grey77:`████████`
``grey78``                  :grey78:`████████`
``grey79``                  :grey79:`████████`
``grey80``                  :grey80:`████████`
``grey81``                  :grey81:`████████`
``grey82``                  :grey82:`████████`
``grey83``                  :grey83:`████████`
``grey84``                  :grey84:`████████`
``grey85``                  :grey85:`████████`
``grey86``                  :grey86:`████████`
``grey87``                  :grey87:`████████`
``grey88``                  :grey88:`████████`
``grey89``                  :grey89:`████████`
``grey90``                  :grey90:`████████`
``grey91``                  :grey91:`████████`
``grey92``                  :grey92:`████████`
``grey93``                  :grey93:`████████`
``grey94``                  :grey94:`████████`
``grey95``                  :grey95:`████████`
``grey96``                  :grey96:`████████`
``grey97``                  :grey97:`████████`
``grey98``                  :grey98:`████████`
``grey99``                  :grey99:`████████`
``grey100``                 :grey100:`████████`
``honeydew``                :honeydew:`████████`
``honeydew1``               :honeydew1:`████████`
``honeydew2``               :honeydew2:`████████`
``honeydew3``               :honeydew3:`████████`
``honeydew4``               :honeydew4:`████████`
``hotpink``                 :hotpink:`████████`
``hotpink1``                :hotpink1:`████████`
``hotpink2``                :hotpink2:`████████`
``hotpink3``                :hotpink3:`████████`
``hotpink4``                :hotpink4:`████████`
``indianred``               :indianred:`████████`
``indianred1``              :indianred1:`████████`
``indianred2``              :indianred2:`████████`
``indianred3``              :indianred3:`████████`
``indianred4``              :indianred4:`████████`
``indigo``                  :indigo:`████████`
``ivory``                   :ivory:`████████`
``ivory1``                  :ivory1:`████████`
``ivory2``                  :ivory2:`████████`
``ivory3``                  :ivory3:`████████`
``ivory4``                  :ivory4:`████████`
``khaki``                   :khaki:`████████`
``khaki1``                  :khaki1:`████████`
``khaki2``                  :khaki2:`████████`
``khaki3``                  :khaki3:`████████`
``khaki4``                  :khaki4:`████████`
``lavender``                :lavender:`████████`
``lavenderblush``           :lavenderblush:`████████`
``lavenderblush1``          :lavenderblush1:`████████`
``lavenderblush2``          :lavenderblush2:`████████`
``lavenderblush3``          :lavenderblush3:`████████`
``lavenderblush4``          :lavenderblush4:`████████`
``lawngreen``               :lawngreen:`████████`
``lemonchiffon``            :lemonchiffon:`████████`
``lemonchiffon1``           :lemonchiffon1:`████████`
``lemonchiffon2``           :lemonchiffon2:`████████`
``lemonchiffon3``           :lemonchiffon3:`████████`
``lemonchiffon4``           :lemonchiffon4:`████████`
``lightblue``               :lightblue:`████████`
``lightblue1``              :lightblue1:`████████`
``lightblue2``              :lightblue2:`████████`
``lightblue3``              :lightblue3:`████████`
``lightblue4``              :lightblue4:`████████`
``lightcoral``              :lightcoral:`████████`
``lightcyan``               :lightcyan:`████████`
``lightcyan1``              :lightcyan1:`████████`
``lightcyan2``              :lightcyan2:`████████`
``lightcyan3``              :lightcyan3:`████████`
``lightcyan4``              :lightcyan4:`████████`
``lightgoldenrod``          :lightgoldenrod:`████████`
``lightgoldenrod1``         :lightgoldenrod1:`████████`
``lightgoldenrod2``         :lightgoldenrod2:`████████`
``lightgoldenrod3``         :lightgoldenrod3:`████████`
``lightgoldenrod4``         :lightgoldenrod4:`████████`
``lightgoldenrodyellow``    :lightgoldenrodyellow:`████████`
``lightgray``               :lightgray:`████████`
``lightgreen``              :lightgreen:`████████`
``lightgrey``               :lightgrey:`████████`
``lightpink``               :lightpink:`████████`
``lightpink1``              :lightpink1:`████████`
``lightpink2``              :lightpink2:`████████`
``lightpink3``              :lightpink3:`████████`
``lightpink4``              :lightpink4:`████████`
``lightsalmon``             :lightsalmon:`████████`
``lightsalmon1``            :lightsalmon1:`████████`
``lightsalmon2``            :lightsalmon2:`████████`
``lightsalmon3``            :lightsalmon3:`████████`
``lightsalmon4``            :lightsalmon4:`████████`
``lightseagreen``           :lightseagreen:`████████`
``lightskyblue``            :lightskyblue:`████████`
``lightskyblue1``           :lightskyblue1:`████████`
``lightskyblue2``           :lightskyblue2:`████████`
``lightskyblue3``           :lightskyblue3:`████████`
``lightskyblue4``           :lightskyblue4:`████████`
``lightslateblue``          :lightslateblue:`████████`
``lightslategray``          :lightslategray:`████████`
``lightslategrey``          :lightslategrey:`████████`
``lightsteelblue``          :lightsteelblue:`████████`
``lightsteelblue1``         :lightsteelblue1:`████████`
``lightsteelblue2``         :lightsteelblue2:`████████`
``lightsteelblue3``         :lightsteelblue3:`████████`
``lightsteelblue4``         :lightsteelblue4:`████████`
``lightyellow``             :lightyellow:`████████`
``lightyellow1``            :lightyellow1:`████████`
``lightyellow2``            :lightyellow2:`████████`
``lightyellow3``            :lightyellow3:`████████`
``lightyellow4``            :lightyellow4:`████████`
``lime``                    :lime:`████████`
``limegreen``               :limegreen:`████████`
``linen``                   :linen:`████████`
``magenta``                 :magenta:`████████`
``magenta1``                :magenta1:`████████`
``magenta2``                :magenta2:`████████`
``magenta3``                :magenta3:`████████`
``magenta4``                :magenta4:`████████`
``maroon``                  :maroon:`████████`
``maroon1``                 :maroon1:`████████`
``maroon2``                 :maroon2:`████████`
``maroon3``                 :maroon3:`████████`
``maroon4``                 :maroon4:`████████`
``mediumaquamarine``        :mediumaquamarine:`████████`
``mediumblue``              :mediumblue:`████████`
``mediumorchid``            :mediumorchid:`████████`
``mediumorchid1``           :mediumorchid1:`████████`
``mediumorchid2``           :mediumorchid2:`████████`
``mediumorchid3``           :mediumorchid3:`████████`
``mediumorchid4``           :mediumorchid4:`████████`
``mediumpurple``            :mediumpurple:`████████`
``mediumpurple1``           :mediumpurple1:`████████`
``mediumpurple2``           :mediumpurple2:`████████`
``mediumpurple3``           :mediumpurple3:`████████`
``mediumpurple4``           :mediumpurple4:`████████`
``mediumseagreen``          :mediumseagreen:`████████`
``mediumslateblue``         :mediumslateblue:`████████`
``mediumspringgreen``       :mediumspringgreen:`████████`
``mediumturquoise``         :mediumturquoise:`████████`
``mediumvioletred``         :mediumvioletred:`████████`
``midnightblue``            :midnightblue:`████████`
``mintcream``               :mintcream:`████████`
``mistyrose``               :mistyrose:`████████`
``mistyrose1``              :mistyrose1:`████████`
``mistyrose2``              :mistyrose2:`████████`
``mistyrose3``              :mistyrose3:`████████`
``mistyrose4``              :mistyrose4:`████████`
``moccasin``                :moccasin:`████████`
``navajowhite``             :navajowhite:`████████`
``navajowhite1``            :navajowhite1:`████████`
``navajowhite2``            :navajowhite2:`████████`
``navajowhite3``            :navajowhite3:`████████`
``navajowhite4``            :navajowhite4:`████████`
``navy``                    :navy:`████████`
``navyblue``                :navyblue:`████████`
``oldlace``                 :oldlace:`████████`
``olive``                   :olive:`████████`
``olivedrab``               :olivedrab:`████████`
``olivedrab1``              :olivedrab1:`████████`
``olivedrab2``              :olivedrab2:`████████`
``olivedrab3``              :olivedrab3:`████████`
``olivedrab4``              :olivedrab4:`████████`
``orange``                  :orange:`████████`
``orange1``                 :orange1:`████████`
``orange2``                 :orange2:`████████`
``orange3``                 :orange3:`████████`
``orange4``                 :orange4:`████████`
``orangered``               :orangered:`████████`
``orangered1``              :orangered1:`████████`
``orangered2``              :orangered2:`████████`
``orangered3``              :orangered3:`████████`
``orangered4``              :orangered4:`████████`
``orchid``                  :orchid:`████████`
``orchid1``                 :orchid1:`████████`
``orchid2``                 :orchid2:`████████`
``orchid3``                 :orchid3:`████████`
``orchid4``                 :orchid4:`████████`
``palegoldenrod``           :palegoldenrod:`████████`
``palegreen``               :palegreen:`████████`
``palegreen1``              :palegreen1:`████████`
``palegreen2``              :palegreen2:`████████`
``palegreen3``              :palegreen3:`████████`
``palegreen4``              :palegreen4:`████████`
``paleturquoise``           :paleturquoise:`████████`
``paleturquoise1``          :paleturquoise1:`████████`
``paleturquoise2``          :paleturquoise2:`████████`
``paleturquoise3``          :paleturquoise3:`████████`
``paleturquoise4``          :paleturquoise4:`████████`
``palevioletred``           :palevioletred:`████████`
``palevioletred1``          :palevioletred1:`████████`
``palevioletred2``          :palevioletred2:`████████`
``palevioletred3``          :palevioletred3:`████████`
``palevioletred4``          :palevioletred4:`████████`
``papayawhip``              :papayawhip:`████████`
``peachpuff``               :peachpuff:`████████`
``peachpuff1``              :peachpuff1:`████████`
``peachpuff2``              :peachpuff2:`████████`
``peachpuff3``              :peachpuff3:`████████`
``peachpuff4``              :peachpuff4:`████████`
``peru``                    :peru:`████████`
``pink``                    :pink:`████████`
``pink1``                   :pink1:`████████`
``pink2``                   :pink2:`████████`
``pink3``                   :pink3:`████████`
``pink4``                   :pink4:`████████`
``plum``                    :plum:`████████`
``plum1``                   :plum1:`████████`
``plum2``                   :plum2:`████████`
``plum3``                   :plum3:`████████`
``plum4``                   :plum4:`████████`
``powderblue``              :powderblue:`████████`
``purple``                  :purple:`████████`
``purple1``                 :purple1:`████████`
``purple2``                 :purple2:`████████`
``purple3``                 :purple3:`████████`
``purple4``                 :purple4:`████████`
``red``                     :red:`████████`
``red1``                    :red1:`████████`
``red2``                    :red2:`████████`
``red3``                    :red3:`████████`
``red4``                    :red4:`████████`
``rosybrown``               :rosybrown:`████████`
``rosybrown1``              :rosybrown1:`████████`
``rosybrown2``              :rosybrown2:`████████`
``rosybrown3``              :rosybrown3:`████████`
``rosybrown4``              :rosybrown4:`████████`
``royalblue``               :royalblue:`████████`
``royalblue1``              :royalblue1:`████████`
``royalblue2``              :royalblue2:`████████`
``royalblue3``              :royalblue3:`████████`
``royalblue4``              :royalblue4:`████████`
``saddlebrown``             :saddlebrown:`████████`
``salmon``                  :salmon:`████████`
``salmon1``                 :salmon1:`████████`
``salmon2``                 :salmon2:`████████`
``salmon3``                 :salmon3:`████████`
``salmon4``                 :salmon4:`████████`
``sandybrown``              :sandybrown:`████████`
``seagreen``                :seagreen:`████████`
``seagreen1``               :seagreen1:`████████`
``seagreen2``               :seagreen2:`████████`
``seagreen3``               :seagreen3:`████████`
``seagreen4``               :seagreen4:`████████`
``seashell``                :seashell:`████████`
``seashell1``               :seashell1:`████████`
``seashell2``               :seashell2:`████████`
``seashell3``               :seashell3:`████████`
``seashell4``               :seashell4:`████████`
``sienna``                  :sienna:`████████`
``sienna1``                 :sienna1:`████████`
``sienna2``                 :sienna2:`████████`
``sienna3``                 :sienna3:`████████`
``sienna4``                 :sienna4:`████████`
``silver``                  :silver:`████████`
``skyblue``                 :skyblue:`████████`
``skyblue1``                :skyblue1:`████████`
``skyblue2``                :skyblue2:`████████`
``skyblue3``                :skyblue3:`████████`
``skyblue4``                :skyblue4:`████████`
``slateblue``               :slateblue:`████████`
``slateblue1``              :slateblue1:`████████`
``slateblue2``              :slateblue2:`████████`
``slateblue3``              :slateblue3:`████████`
``slateblue4``              :slateblue4:`████████`
``slategray``               :slategray:`████████`
``slategray1``              :slategray1:`████████`
``slategray2``              :slategray2:`████████`
``slategray3``              :slategray3:`████████`
``slategray4``              :slategray4:`████████`
``slategrey``               :slategrey:`████████`
``snow``                    :snow:`████████`
``snow1``                   :snow1:`████████`
``snow2``                   :snow2:`████████`
``snow3``                   :snow3:`████████`
``snow4``                   :snow4:`████████`
``springgreen``             :springgreen:`████████`
``springgreen1``            :springgreen1:`████████`
``springgreen2``            :springgreen2:`████████`
``springgreen3``            :springgreen3:`████████`
``springgreen4``            :springgreen4:`████████`
``steelblue``               :steelblue:`████████`
``steelblue1``              :steelblue1:`████████`
``steelblue2``              :steelblue2:`████████`
``steelblue3``              :steelblue3:`████████`
``steelblue4``              :steelblue4:`████████`
``tan``                     :tan:`████████`
``tan1``                    :tan1:`████████`
``tan2``                    :tan2:`████████`
``tan3``                    :tan3:`████████`
``tan4``                    :tan4:`████████`
``teal``                    :teal:`████████`
``thistle``                 :thistle:`████████`
``thistle1``                :thistle1:`████████`
``thistle2``                :thistle2:`████████`
``thistle3``                :thistle3:`████████`
``thistle4``                :thistle4:`████████`
``tomato``                  :tomato:`████████`
``tomato1``                 :tomato1:`████████`
``tomato2``                 :tomato2:`████████`
``tomato3``                 :tomato3:`████████`
``tomato4``                 :tomato4:`████████`
``turquoise``               :turquoise:`████████`
``turquoise1``              :turquoise1:`████████`
``turquoise2``              :turquoise2:`████████`
``turquoise3``              :turquoise3:`████████`
``turquoise4``              :turquoise4:`████████`
``violet``                  :violet:`████████`
``violetred``               :violetred:`████████`
``violetred1``              :violetred1:`████████`
``violetred2``              :violetred2:`████████`
``violetred3``              :violetred3:`████████`
``violetred4``              :violetred4:`████████`
``wheat``                   :wheat:`████████`
``wheat1``                  :wheat1:`████████`
``wheat2``                  :wheat2:`████████`
``wheat3``                  :wheat3:`████████`
``wheat4``                  :wheat4:`████████`
``white``                   :white:`████████`
``whitesmoke``              :whitesmoke:`████████`
``yellow``                  :yellow:`████████`
``yellow1``                 :yellow1:`████████`
``yellow2``                 :yellow2:`████████`
``yellow3``                 :yellow3:`████████`
``yellow4``                 :yellow4:`████████`
``yellowgreen``             :yellowgreen:`████████`
==========================  ======================================================================================================


--- Contenu du fichier : pixelcopy.rst.txt ---
.. include:: common.txt

:mod:`pygame.pixelcopy`
=======================

.. module:: pygame.pixelcopy
   :synopsis: pygame module for general pixel array copying

| :sl:`pygame module for general pixel array copying`

The ``pygame.pixelcopy`` module contains functions for copying between
surfaces and objects exporting an array structure interface. It is a backend
for :mod:`pygame.surfarray`, adding NumPy support. But pixelcopy is more
general, and intended for direct use.

The array struct interface exposes an array's data in a standard way.
It was introduced in NumPy. In Python 2.7 and above it is replaced by the
new buffer protocol, though the buffer protocol is still a work in progress.
The array struct interface, on the other hand, is stable and works with earlier
Python versions. So for now the array struct interface is the predominate way
pygame handles array introspection.

For 2d arrays of integer pixel values, the values are mapped to the
pixel format of the related surface. To get the actual color of a pixel
value use :meth:`pygame.Surface.unmap_rgb`. 2d arrays can only be used
directly between surfaces having the same pixel layout.

New in pygame 1.9.2.

.. function:: surface_to_array

   | :sl:`copy surface pixels to an array object`
   | :sg:`surface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None`

   The surface_to_array function copies pixels from a Surface object
   to a 2D or 3D array. Depending on argument ``kind`` and the target array
   dimension, a copy may be raw pixel value, RGB, a color component slice,
   or colorkey alpha transparency value. Recognized ``kind`` values are the
   single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case
   insensitive, so 'p' is equivalent to 'P'. The first two dimensions
   of the target must be the surface size (w, h).

   The default 'P' kind code does a direct raw integer pixel (mapped) value
   copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array
   having shape (w, h, 3). For an 8 bit colormap surface this means the
   table index is copied to a 2D array, not the table value itself. A 2D
   array's item size must be at least as large as the surface's pixel
   byte size. The item size of a 3D array must be at least one byte.

   For the 'R', 'G', 'B', and 'A' copy kinds a single color component
   of the unmapped surface pixels are copied to the target 2D array.
   For kind 'A' and surfaces with source alpha (the surface was created with
   the SRCALPHA flag), has a colorkey
   (set with :meth:`Surface.set_colorkey() <pygame.Surface.set_colorkey>`),
   or has a blanket alpha
   (set with :meth:`Surface.set_alpha() <pygame.Surface.set_alpha>`)
   then the alpha values are those expected for a SDL surface.
   If a surface has no explicit alpha value, then the target array
   is filled with the value of the optional ``opaque`` surface_to_array
   argument (default 255: not transparent).

   Copy kind 'C' is a special case for alpha copy of a source surface
   with colorkey. Unlike the 'A' color component copy, the ``clear``
   argument value is used for colorkey matches, ``opaque`` otherwise.
   By default, a match has alpha 0 (totally transparent), while everything
   else is alpha 255 (totally opaque). It is a more general implementation
   of :meth:`pygame.surfarray.array_colorkey`.

   Specific to surface_to_array, a ValueError is raised for target arrays
   with incorrect shape or item size. A TypeError is raised for an incorrect
   kind code. Surface specific problems, such as locking, raise a pygame.error.

   .. ## pygame.pixelcopy.surface_to_array ##

.. function:: array_to_surface

   | :sl:`copy an array object to a surface`
   | :sg:`array_to_surface(<surface>, <array>) -> None`

   See :func:`pygame.surfarray.blit_array`.

   .. ## pygame.pixelcopy.array_to_surface ##

.. function:: map_array

   | :sl:`copy an array to another array, using surface format`
   | :sg:`map_array(<array>, <array>, <surface>) -> None`

   Map an array of color element values - (w, h, ..., 3) - to an array of
   pixels - (w, h) according to the format of <surface>.

   .. ## pygame.pixelcopy.map_array ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`pygame.pixelcopy.make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format of the array.
   The array can be 2D or 3D with any sized integer values.

   .. ## pygame.pixelcopy.make_surface ##

.. ## pygame.pixelcopy ##


--- Contenu du fichier : midi.rst.txt ---
.. include:: common.txt

:mod:`pygame.midi`
==================

.. module:: pygame.midi
   :synopsis: pygame module for interacting with midi input and output.

| :sl:`pygame module for interacting with midi input and output.`

.. versionadded:: 1.9.0

The midi module can send output to midi devices and get input from midi
devices. It can also list midi devices on the system.

The midi module supports real and virtual midi devices.

It uses the portmidi library. Is portable to which ever platforms portmidi
supports (currently Windows, Mac OS X, and Linux).

This uses pyportmidi for now, but may use its own bindings at some point in the
future. The pyportmidi bindings are included with pygame.

|

.. versionadded:: 2.0.0

These are pygame events (:mod:`pygame.event`) reserved for midi use. The
``MIDIIN`` event is used by :func:`pygame.midi.midis2events` when converting
midi events to pygame events.

::

   MIDIIN
   MIDIOUT

|

.. function:: init

   | :sl:`initialize the midi module`
   | :sg:`init() -> None`

   Initializes the :mod:`pygame.midi` module. Must be called before using the
   :mod:`pygame.midi` module.

   It is safe to call this more than once.

   .. ## pygame.midi.init ##

.. function:: quit

   | :sl:`uninitialize the midi module`
   | :sg:`quit() -> None`

   Uninitializes the :mod:`pygame.midi` module. If :func:`pygame.midi.init` was
   called to initialize the :mod:`pygame.midi` module, then this function will
   be called automatically when your program exits.

   It is safe to call this function more than once.

   .. ## pygame.midi.quit ##

.. function:: get_init

   | :sl:`returns True if the midi module is currently initialized`
   | :sg:`get_init() -> bool`

   Gets the initialization state of the :mod:`pygame.midi` module.

   :returns: ``True`` if the :mod:`pygame.midi` module is currently initialized.
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.midi.get_init ##

.. class:: Input

   | :sl:`Input is used to get midi input from midi devices.`
   | :sg:`Input(device_id) -> None`
   | :sg:`Input(device_id, buffer_size) -> None`

   :param int device_id: midi device id
   :param int buffer_size: (optional) the number of input events to be buffered

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Input.close ##

   .. method:: poll

      | :sl:`returns True if there's data, or False if not.`
      | :sg:`poll() -> bool`

      Used to indicate if any data exists.

      :returns: ``True`` if there is data, ``False`` otherwise
      :rtype: bool

      :raises MidiException: on error

      .. ## Input.poll ##

   .. method:: read

      | :sl:`reads num_events midi events from the buffer.`
      | :sg:`read(num_events) -> midi_event_list`

      Reads from the input buffer and gives back midi events.

      :param int num_events: number of input events to read

      :returns: the format for midi_event_list is
         ``[[[status, data1, data2, data3], timestamp], ...]``
      :rtype: list

      .. ## Input.read ##

   .. ## pygame.midi.Input ##

.. class:: Output

   | :sl:`Output is used to send midi to an output device`
   | :sg:`Output(device_id) -> None`
   | :sg:`Output(device_id, latency=0) -> None`
   | :sg:`Output(device_id, buffer_size=256) -> None`
   | :sg:`Output(device_id, latency, buffer_size) -> None`

   The ``buffer_size`` specifies the number of output events to be buffered
   waiting for output. In some cases (see below) PortMidi does not buffer
   output at all and merely passes data to a lower-level API, in which case
   buffersize is ignored.

   ``latency`` is the delay in milliseconds applied to timestamps to determine
   when the output should actually occur. If ``latency`` is <<0, 0 is assumed.

   If ``latency`` is zero, timestamps are ignored and all output is delivered
   immediately. If ``latency`` is greater than zero, output is delayed until the
   message timestamp plus the ``latency``. In some cases, PortMidi can obtain
   better timing than your application by passing timestamps along to the
   device driver or hardware. Latency may also help you to synchronize midi
   data to audio data by matching midi latency to the audio buffer latency.

   .. note::
      Time is measured relative to the time source indicated by time_proc.
      Timestamps are absolute, not relative delays or offsets.

   .. method:: abort

      | :sl:`terminates outgoing messages immediately`
      | :sg:`abort() -> None`

      The caller should immediately close the output port; this call may result
      in transmission of a partial midi message. There is no abort for Midi
      input because the user can simply ignore messages in the buffer and close
      an input device at any time.

      .. ## Output.abort ##

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Output.close ##

   .. method:: note_off

      | :sl:`turns a midi note off (note must be on)`
      | :sg:`note_off(note, velocity=None, channel=0) -> None`

      Turn a note off in the output stream. The note must already be on for
      this to work correctly.

      .. ## Output.note_off ##

   .. method:: note_on

      | :sl:`turns a midi note on (note must be off)`
      | :sg:`note_on(note, velocity=None, channel=0) -> None`

      Turn a note on in the output stream. The note must already be off for
      this to work correctly.

      .. ## Output.note_on ##

   .. method:: set_instrument

      | :sl:`select an instrument, with a value between 0 and 127`
      | :sg:`set_instrument(instrument_id, channel=0) -> None`

      Select an instrument.

      .. ## Output.set_instrument ##

   .. method:: pitch_bend

      | :sl:`modify the pitch of a channel.`
      | :sg:`set_instrument(value=0, channel=0) -> None`

      Adjust the pitch of a channel. The value is a signed integer
      from -8192 to +8191. For example, 0 means "no change", +4096 is
      typically a semitone higher, and -8192 is 1 whole tone lower (though
      the musical range corresponding to the pitch bend range can also be
      changed in some synthesizers).

      If no value is given, the pitch bend is returned to "no change".

      .. versionadded:: 1.9.4

   .. method:: write

      | :sl:`writes a list of midi data to the Output`
      | :sg:`write(data) -> None`

      Writes series of MIDI information in the form of a list.

      :param list data: data to write, the expected format is
         ``[[[status, data1=0, data2=0, ...], timestamp], ...]``
         with the ``data#`` fields being optional

      :raises IndexError: if more than 1024 elements in the data list

      Example:
      ::

         # Program change at time 20000 and 500ms later send note 65 with
         # velocity 100.
         write([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])

      .. note::
         - Timestamps will be ignored if latency = 0
         - To get a note to play immediately, send MIDI info with timestamp
           read from function Time
         - Optional data fields: ``write([[[0xc0, 0, 0], 20000]])`` is
           equivalent to ``write([[[0xc0], 20000]])``

      .. ## Output.write ##

   .. method:: write_short

      | :sl:`writes up to 3 bytes of midi data to the Output`
      | :sg:`write_short(status) -> None`
      | :sg:`write_short(status, data1=0, data2=0) -> None`

      Output MIDI information of 3 bytes or less. The ``data`` fields are
      optional and assumed to be 0 if omitted.

      Examples of status byte values:
      ::

         0xc0  # program change
         0x90  # note on
         # etc.

      Example:
      ::

         # note 65 on with velocity 100
         write_short(0x90, 65, 100)

      .. ## Output.write_short ##

   .. method:: write_sys_ex

      | :sl:`writes a timestamped system-exclusive midi message.`
      | :sg:`write_sys_ex(when, msg) -> None`

      Writes a timestamped system-exclusive midi message.

      :param msg: midi message
      :type msg: list[int] or str
      :param when: timestamp in milliseconds

      Example:
      ::

         midi_output.write_sys_ex(0, '\xF0\x7D\x10\x11\x12\x13\xF7')

         # is equivalent to

         midi_output.write_sys_ex(pygame.midi.time(),
                                  [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])

      .. ## Output.write_sys_ex ##

   .. ## pygame.midi.Output ##

.. function:: get_count

   | :sl:`gets the number of devices.`
   | :sg:`get_count() -> num_devices`

   Device ids range from 0 to ``get_count() - 1``

   .. ## pygame.midi.get_count ##

.. function:: get_default_input_id

   | :sl:`gets default input device number`
   | :sg:`get_default_input_id() -> default_id`

   The following describes the usage details for this function and the
   :func:`get_default_output_id` function.

   Return the default device ID or ``-1`` if there are no devices. The result
   can be passed to the :class:`Input`/:class:`Output` class.

   On a PC the user can specify a default device by setting an environment
   variable. To use device #1, for example:
   ::

      set PM_RECOMMENDED_INPUT_DEVICE=1
      or
      set PM_RECOMMENDED_OUTPUT_DEVICE=1

   The user should first determine the available device ID by using the
   supplied application "testin" or "testout".

   In general, the registry is a better place for this kind of info. With
   USB devices that can come and go, using integers is not very reliable
   for device identification. Under Windows, if ``PM_RECOMMENDED_INPUT_DEVICE``
   (or ``PM_RECOMMENDED_OUTPUT_DEVICE``) is NOT found in the environment,
   then the default device is obtained by looking for a string in the registry
   under:
   ::

      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
      or
      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device


   The number of the first device with a substring that matches the
   string exactly is returned. For example, if the string in the registry is
   "USB" and device 1 is named "In USB MidiSport 1x1", then that will be
   the default input because it contains the string "USB".

   In addition to the name, :func:`get_device_info()` returns "interf", which is
   the interface name. The "interface" is the underlying software system or
   API used by PortMidi to access devices. Supported interfaces:
   ::

      MMSystem   # the only Win32 interface currently supported
      ALSA       # the only Linux interface currently supported
      CoreMIDI   # the only Mac OS X interface currently supported
      # DirectX - not implemented
      # OSS     - not implemented

   To specify both the interface and the device name in the registry, separate
   the two with a comma and a space. The string before the comma must be a
   substring of the "interf" string and the string after the space must be a
   substring of the "name" name string in order to match the device. e.g.:
   ::

      MMSystem, In USB MidiSport 1x1

   .. note::
      In the current release, the default is simply the first device (the
      input or output device with the lowest PmDeviceID).

   .. ## pygame.midi.get_default_input_id ##

.. function:: get_default_output_id

   | :sl:`gets default output device number`
   | :sg:`get_default_output_id() -> default_id`

   See :func:`get_default_input_id` for usage details.

   .. ## pygame.midi.get_default_output_id ##

.. function:: get_device_info

   | :sl:`returns information about a midi device`
   | :sg:`get_device_info(an_id) -> (interf, name, input, output, opened)`
   | :sg:`get_device_info(an_id) -> None`

   Gets the device info for a given id.

   :param int an_id: id of the midi device being queried

   :returns: if the id is out of range ``None`` is returned, otherwise
      a tuple of (interf, name, input, output, opened) is returned.

         - interf: string describing the device interface (e.g. 'ALSA')
         - name: string name of the device (e.g. 'Midi Through Port-0')
         - input: 1 if the device is an input device, otherwise 0
         - output: 1 if the device is an output device, otherwise 0
         - opened: 1 if the device is opened, otherwise 0
   :rtype: tuple or None

   .. ## pygame.midi.get_device_info ##

.. function:: midis2events

   | :sl:`converts midi events to pygame events`
   | :sg:`midis2events(midi_events, device_id) -> [Event, ...]`

   Takes a sequence of midi events and returns list of pygame events.

   The ``midi_events`` data is expected to be a sequence of
   ``((status, data1, data2, data3), timestamp)`` midi events (all values
   required).

   :returns: a list of pygame events of event type ``MIDIIN``
   :rtype: list

   .. ## pygame.midi.midis2events ##

.. function:: time

   | :sl:`returns the current time in ms of the PortMidi timer`
   | :sg:`time() -> time`

   The time is reset to 0 when the :mod:`pygame.midi` module is initialized.

   .. ## pygame.midi.time ##


.. function:: frequency_to_midi

   | :sl:`Converts a frequency into a MIDI note. Rounds to the closest midi note.`
   | :sg:`frequency_to_midi(midi_note) -> midi_note`

   example:
   ::

       frequency_to_midi(27.5) == 21

   .. versionadded:: 1.9.5

   .. ## pygame.midi.frequency_to_midi ##


.. function:: midi_to_frequency

   | :sl:`Converts a midi note to a frequency.`
   | :sg:`midi_to_frequency(midi_note) -> frequency`

   example:
   ::

       midi_to_frequency(21) == 27.5

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_frequency ##


.. function:: midi_to_ansi_note

   | :sl:`Returns the Ansi Note name for a midi number.`
   | :sg:`midi_to_ansi_note(midi_note) -> ansi_note`

   example:
   ::

       midi_to_ansi_note(21) == 'A0'

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_ansi_note ##

.. exception:: MidiException

   | :sl:`exception that pygame.midi functions and classes can raise`
   | :sg:`MidiException(errno) -> None`

   .. ## pygame.midi.MidiException ##


.. ## pygame.midi ##


--- Contenu du fichier : overlay.rst.txt ---
.. include:: common.txt

:mod:`pygame.Overlay`
=====================

.. currentmodule:: pygame

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.

.. class:: Overlay

   | :sl:`pygame object for video overlay graphics`
   | :sg:`Overlay(format, (width, height)) -> Overlay`

   The Overlay objects provide support for accessing hardware video overlays.
   Video overlays do not use standard ``RGB`` pixel formats, and can use
   multiple resolutions of data to create a single image.

   The Overlay objects represent lower level access to the display hardware. To
   use the object you must understand the technical details of video overlays.

   The Overlay format determines the type of pixel data used. Not all hardware
   will support all types of overlay formats. Here is a list of available
   format types:

   ::

     YV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY

   The width and height arguments control the size for the overlay image data.
   The overlay image can be displayed at any size, not just the resolution of
   the overlay.

   The overlay objects are always visible, and always show above the regular
   display contents.

   .. method:: display

      | :sl:`set the overlay pixel data`
      | :sg:`display((y, u, v)) -> None`
      | :sg:`display() -> None`

      Display the YUV data in SDL's overlay planes. The y, u, and v arguments
      are strings of binary data. The data must be in the correct format used
      to create the Overlay.

      If no argument is passed in, the Overlay will simply be redrawn with the
      current data. This can be useful when the Overlay is not really hardware
      accelerated.

      The strings are not validated, and improperly sized strings could crash
      the program.

      .. ## Overlay.display ##

   .. method:: set_location

      | :sl:`control where the overlay is displayed`
      | :sg:`set_location(rect) -> None`

      Set the location for the overlay. The overlay will always be shown
      relative to the main display Surface. This does not actually redraw the
      overlay, it will be updated on the next call to ``Overlay.display()``.

      .. ## Overlay.set_location ##

   .. method:: get_hardware

      | :sl:`test if the Overlay is hardware accelerated`
      | :sg:`get_hardware(rect) -> int`

      Returns a True value when the Overlay is hardware accelerated. If the
      platform does not support acceleration, software rendering is used.

      .. ## Overlay.get_hardware ##

   .. ## pygame.Overlay ##


--- Contenu du fichier : gfxdraw.rst.txt ---
.. include:: common.txt

:mod:`pygame.gfxdraw`
=====================

.. module:: pygame.gfxdraw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The pygame package does not import gfxdraw automatically when loaded, so it
must imported explicitly to be used.

::

    import pygame
    import pygame.gfxdraw

For all functions the arguments are strictly positional and integers are
accepted for coordinates and radii. The ``color`` argument can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)

The functions :meth:`rectangle` and :meth:`box` will accept any ``(x, y, w, h)``
sequence for their ``rect`` argument, though :mod:`pygame.Rect` instances are
preferred.

To draw a filled antialiased shape, first use the antialiased (aa*) version
of the function, and then use the filled (filled_*) version.
For example:

::

   col = (255, 0, 0)
   surf.fill((255, 255, 255))
   pygame.gfxdraw.aacircle(surf, x, y, 30, col)
   pygame.gfxdraw.filled_circle(surf, x, y, 30, col)


.. note::
   For threading, each of the functions releases the GIL during the C part of
   the call.

.. note::
   See the :mod:`pygame.draw` module for alternative draw methods.
   The ``pygame.gfxdraw`` module differs from the :mod:`pygame.draw` module in
   the API it uses and the different draw functions available.
   ``pygame.gfxdraw`` wraps the primitives from the library called SDL_gfx,
   rather than using modified versions.

.. versionadded:: 1.9.0


.. function:: pixel

   | :sl:`draw a pixel`
   | :sg:`pixel(surface, x, y, color) -> None`

   Draws a single pixel, at position (x ,y), on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the pixel
   :param int y: y coordinate of the pixel
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pixel ##

.. function:: hline

   | :sl:`draw a horizontal line`
   | :sg:`hline(surface, x1, x2, y, color) -> None`

   Draws a straight horizontal line (``(x1, y)`` to ``(x2, y)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y: y coordinate of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.hline ##

.. function:: vline

   | :sl:`draw a vertical line`
   | :sg:`vline(surface, x, y1, y2, color) -> None`

   Draws a straight vertical line (``(x, y1)`` to ``(x, y2)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the line
   :param int y1: y coordinate of one end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.vline ##

.. function:: line

   | :sl:`draw a line`
   | :sg:`line(surface, x1, y1, x2, y2, color) -> None`

   Draws a straight line (``(x1, y1)`` to ``(x2, y2)``) on the given surface.
   There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int y1: y coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.line ##

.. function:: rectangle

   | :sl:`draw a rectangle`
   | :sg:`rectangle(surface, rect, color) -> None`

   Draws an unfilled rectangle on the given surface. For a filled rectangle use
   :meth:`box`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. ## pygame.gfxdraw.rectangle ##

.. function:: box

   | :sl:`draw a filled rectangle`
   | :sg:`box(surface, rect, color) -> None`

   Draws a filled rectangle on the given surface. For an unfilled rectangle use
   :meth:`rectangle`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. note::
      The :func:`pygame.Surface.fill` method works just as well for drawing
      filled rectangles. In fact :func:`pygame.Surface.fill` can be hardware
      accelerated on some platforms with both software and hardware display
      modes.

   .. ## pygame.gfxdraw.box ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, x, y, r, color) -> None`

   Draws an unfilled circle on the given surface. For a filled circle use
   :meth:`filled_circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.circle ##

.. function:: aacircle

   | :sl:`draw an antialiased circle`
   | :sg:`aacircle(surface, x, y, r, color) -> None`

   Draws an unfilled antialiased circle on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aacircle ##

.. function:: filled_circle

   | :sl:`draw a filled circle`
   | :sg:`filled_circle(surface, x, y, r, color) -> None`

   Draws a filled circle on the given surface. For an unfilled circle use
   :meth:`circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled ellipse on the given surface. For a filled ellipse use
   :meth:`filled_ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.ellipse ##

.. function:: aaellipse

   | :sl:`draw an antialiased ellipse`
   | :sg:`aaellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled antialiased ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aaellipse ##

.. function:: filled_ellipse

   | :sl:`draw a filled ellipse`
   | :sg:`filled_ellipse(surface, x, y, rx, ry, color) -> None`

   Draws a filled ellipse on the given surface. For an unfilled ellipse use
   :meth:`ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_ellipse ##

.. function:: arc

   | :sl:`draw an arc`
   | :sg:`arc(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an arc on the given surface. For an arc with its endpoints connected
   to its center use :meth:`pie`.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the arc. The arc is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   nothing will be drawn

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the arc
   :param int y: y coordinate of the center of the arc
   :param int r: radius of the arc
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      This function uses *degrees* while the :func:`pygame.draw.arc` function
      uses *radians*.

   .. ## pygame.gfxdraw.arc ##

.. function:: pie

   | :sl:`draw a pie`
   | :sg:`pie(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an unfilled pie on the given surface. A pie is an :meth:`arc` with its
   endpoints connected to its center.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the pie. The pie is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   a straight line will be drawn from the center position at the given angle,
   to a length of the radius.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the pie
   :param int y: y coordinate of the center of the pie
   :param int r: radius of the pie
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pie ##

.. function:: trigon

   | :sl:`draw a trigon/triangle`
   | :sg:`trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled trigon (triangle) on the given surface. For a filled
   trigon use :meth:`filled_trigon`.

   A trigon can also be drawn using :meth:`polygon` e.g.
   ``polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.trigon ##

.. function:: aatrigon

   | :sl:`draw an antialiased trigon/triangle`
   | :sg:`aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled antialiased trigon (triangle) on the given surface.

   An aatrigon can also be drawn using :meth:`aapolygon` e.g.
   ``aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aatrigon ##

.. function:: filled_trigon

   | :sl:`draw a filled trigon/triangle`
   | :sg:`filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws a filled trigon (triangle) on the given surface. For an unfilled
   trigon use :meth:`trigon`.

   A filled_trigon can also be drawn using :meth:`filled_polygon` e.g.
   ``filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_trigon ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, points, color) -> None`

   Draws an unfilled polygon on the given surface. For a filled polygon use
   :meth:`filled_polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.polygon ##

.. function:: aapolygon

   | :sl:`draw an antialiased polygon`
   | :sg:`aapolygon(surface, points, color) -> None`

   Draws an unfilled antialiased polygon on the given surface.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.aapolygon ##

.. function:: filled_polygon

   | :sl:`draw a filled polygon`
   | :sg:`filled_polygon(surface, points, color) -> None`

   Draws a filled polygon on the given surface. For an unfilled polygon use
   :meth:`polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)`
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.filled_polygon ##

.. function:: textured_polygon

   | :sl:`draw a textured polygon`
   | :sg:`textured_polygon(surface, points, texture, tx, ty) -> None`

   Draws a textured polygon on the given surface. For better performance, the
   surface and the texture should have the same format.

   A per-pixel alpha texture blit to a per-pixel alpha surface will differ from
   a :func:`pygame.Surface.blit` blit. Also, a per-pixel alpha texture cannot be
   used with an 8-bit per pixel destination.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param Surface texture: texture to draw on the polygon
   :param int tx: x offset of the texture
   :param int ty: y offset of the texture

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.textured_polygon ##

.. function:: bezier

   | :sl:`draw a Bezier curve`
   | :sg:`bezier(surface, points, steps, color) -> None`

   Draws a Bézier curve on the given surface.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates used to form a
      curve, where each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param int steps: number of steps for the interpolation, the minimum is 2
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``steps < 2``
   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.bezier ##

.. ## pygame.gfxdraw ##


--- Contenu du fichier : fastevent.rst.txt ---
.. include:: common.txt

:mod:`pygame.fastevent`
=======================

.. module:: pygame.fastevent
   :synopsis: pygame module for interacting with events and queues from multiple
              threads.

| :sl:`pygame module for interacting with events and queues`

IMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2

In older pygame versions before pygame 2, :mod:`pygame.event` was not well
suited for posting events from different threads. This module served as a
replacement (with less features) for multithreaded use. Now, the usage of this
module is highly discouraged in favour of use of the main :mod:`pygame.event`
module. This module will be removed in a future pygame version.

Below, the legacy docs of the module is provided

.. function:: init

   | :sl:`initialize pygame.fastevent`
   | :sg:`init() -> None`

   Initialize the pygame.fastevent module.

   .. ## pygame.fastevent.init ##

.. function:: get_init

   | :sl:`returns True if the fastevent module is currently initialized`
   | :sg:`get_init() -> bool`

   Returns True if the pygame.fastevent module is currently initialized.

   .. ## pygame.fastevent.get_init ##

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.fastevent` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. ## pygame.fastevent.pump ##

.. function:: wait

   | :sl:`wait for an event`
   | :sg:`wait() -> Event`

   Returns the current event on the queue. If there are no messages
   waiting on the queue, this will not return until one is available.
   Sometimes it is important to use this wait to get events from the queue,
   it will allow your application to idle when the user isn't doing anything
   with it.

   .. ## pygame.fastevent.wait ##

.. function:: poll

   | :sl:`get an available event`
   | :sg:`poll() -> Event`

   Returns next event on queue. If there is no event waiting on the queue,
   this will return an event with type NOEVENT.

   .. ## pygame.fastevent.poll ##

.. function:: get

   | :sl:`get all events from the queue`
   | :sg:`get() -> list of Events`

   This will get all the messages and remove them from the queue.

   .. ## pygame.fastevent.get ##

.. function:: post

   | :sl:`place an event on the queue`
   | :sg:`post(Event) -> None`

   This will post your own event objects onto the event queue. You can post
   any event type you want, but some care must be taken. For example, if you
   post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving
   the event will expect the standard MOUSEBUTTONDOWN attributes to be
   available, like 'pos' and 'button'.

   Because pygame.fastevent.post() may have to wait for the queue to empty,
   you can get into a dead lock if you try to append an event on to a full
   queue from the thread that processes events. For that reason I do not
   recommend using this function in the main thread of an SDL program.

   .. ## pygame.fastevent.post ##

.. ## pygame.fastevent ##

--- Contenu du fichier : sdl2_controller.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.controller`
==============================

.. module:: pygame._sdl2.controller
   :synopsis: pygame module to work with controllers

| :sl:`Pygame module to work with controllers.`

.. note::
   Use import pygame._sdl2.controller before using this module.

This module offers control over common controller types like the dualshock 4 or
the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons,
a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.

Pygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but
they always refer to the same buttons. For example ``CONTROLLER_BUTTON_X`` is
always the leftmost button of the 4 buttons on the right.

Controllers can generate the following events::

   CONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,
   CONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED

Additionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated
(to get the version of sdl pygame is built with use :meth:`pygame.version.SDL`)::

   CONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP

These events can be enabled/disabled by :meth:`pygame._sdl2.controller.set_eventstate`
Note that controllers can generate joystick events as well. This function only toggles
events related to controllers.

.. note::
   See the :mod:`pygame.joystick` for a more versatile but more advanced api.

.. versionadded:: 2 This module requires SDL2.

.. function:: init

   | :sl:`initialize the controller module`
   | :sg:`init() -> None`

   Initialize the controller module.

   .. ## pygame._sdl2.controller.init ##

.. function:: quit

   | :sl:`Uninitialize the controller module.`
   | :sg:`quit() -> None`

   Uninitialize the controller module.

   .. ## pygame._sdl2.controller.quit ##

.. function:: get_init

   | :sl:`Returns True if the controller module is initialized.`
   | :sg:`get_init() -> bool`

   Test if ``pygame._sdl2.controller.init()`` was called.

    .. ## pygame._sdl2.controller.get_init ##

.. function:: set_eventstate

    | :sl:`Sets the current state of events related to controllers`
    | :sg:`set_eventstate(state) -> None`

    Enable or disable events connected to controllers.

    .. note::
        Controllers can still generate joystick events, which will not be toggled by this function.

    .. versionchanged:: 2.0.2: Changed return type from int to None

    .. ## pygame._sdl2.controller.set_eventstate ##

.. function:: get_eventstate

    | :sl:`Gets the current state of events related to controllers`
    | :sg:`get_eventstate() -> bool`

    Returns the current state of events related to controllers, True meaning
    events will be posted.

    .. versionadded:: 2.0.2

    .. ## pygame._sdl2.controller.get_eventstate ##

.. function:: get_count

    | :sl:`Get the number of joysticks connected`
    | :sg:`get_count() -> int`

    Get the number of joysticks connected.

    .. ## pygame._sdl2.controller.get_count ##

.. function:: is_controller

    | :sl:`Check if the given joystick is supported by the game controller interface`
    | :sg:`is_controller(index) -> bool`

    Returns True if the index given can be used to create a controller object.

    .. ## pygame._sdl2.controller.is_controller ##

.. function:: name_forindex

    | :sl:`Get the name of the controller`
    | :sg:`name_forindex(index) -> name or None`

    Returns the name of controller, or None if there's no name or the
    index is invalid.

    .. ## pygame._sdl2.controller.name_forindex ##

.. class:: Controller

    | :sl:`Create a new Controller object.`
    | :sg:`Controller(index) -> Controller`

    Create a new Controller object. Index should be integer between
    0 and ``pygame._sdl2.controller.get_count()``. Controllers also
    can be created from a ``pygame.joystick.Joystick`` using
    ``pygame._sdl2.controller.from_joystick``. Controllers are
    initialized on creation.

   .. method:: quit

      | :sl:`uninitialize the Controller`
      | :sg:`quit() -> None`

      Close a Controller object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Controller.quit ##

   .. method:: get_init

      | :sl:`check if the Controller is initialized`
      | :sg:`get_init() -> bool`

      Returns True if the Controller object is currently initialised.

      .. ## Controller.get_init ##

   .. staticmethod:: from_joystick

       | :sl:`Create a Controller from a pygame.joystick.Joystick object`
       | :sg:`from_joystick(joystick) -> Controller`

       Create a Controller object from a ``pygame.joystick.Joystick`` object

       .. ## Controller.from_joystick ##

   .. method:: attached

      | :sl:`Check if the Controller has been opened and is currently connected.`
      | :sg:`attached() -> bool`

      Returns True if the Controller object is opened and connected.

      .. ## Controller.attached ##

   .. method:: as_joystick

      | :sl:`Returns a pygame.joystick.Joystick() object`
      | :sg:`as_joystick() -> Joystick object`

      Returns a pygame.joystick.Joystick() object created from this controller's index

      .. ## Controller.as_joystick ##

   .. method:: get_axis

      | :sl:`Get the current state of a joystick axis`
      | :sg:`get_axis(axis) -> int`

      Get the current state of a trigger or joystick axis.
      The axis argument must be one of the following constants::

         CONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,
         CONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,
         CONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT

      Joysticks can return a value between -32768 and 32767. Triggers however
      can only return a value between 0 and 32768.

      .. ## Controller.get_axis ##

   .. method:: get_button

      | :sl:`Get the current state of a button`
      | :sg:`get_button(button) -> bool`

      Get the current state of a button, True meaning it is pressed down.
      The button argument must be one of the following constants::

         CONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,
         CONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y
         CONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,
         CONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,
         CONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,
         CONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,
         CONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,
         CONTROLLER_BUTTON_START


      .. ## Controller.get_button ##

   .. method:: get_mapping

      | :sl:`Get the mapping assigned to the controller`
      | :sg:`get_mapping() -> mapping`

      Returns a dict containing the mapping of the Controller. For more
      information see :meth:`Controller.set_mapping()`

      .. versionchanged:: 2.0.2: Return type changed from ``str`` to ``dict``

      .. ## Controller.get_mapping ##

   .. method:: set_mapping

      | :sl:`Assign a mapping to the controller`
      | :sg:`set_mapping(mapping) -> int`

      Rebind buttons, axes, triggers and dpads. The mapping should be a 
      dict containing all buttons, hats and axes. The easiest way to get this
      is to use the dict returned by :meth:`Controller.get_mapping`. To edit
      this mapping assign a value to the original button. The value of the
      dictionary must be a button, hat or axis represented in the following way:

      * For a button use: bX where X is the index of the button.
      * For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).
      * For an axis use: aX where x is the index of the axis.

      An example of mapping::

         mapping = controller.get_mapping() # Get current mapping
         mapping["a"] = "b3" # Remap button a to y
         mapping["y"] = "b0" # Remap button y to a
         controller.set_mapping(mapping) # Set the mapping


      The function will return 1 if a new mapping is added or 0 if an existing one is updated.

      .. versionchanged:: 2.0.2: Renamed from ``add_mapping`` to ``set_mapping``
      .. versionchanged:: 2.0.2: Argument type changed from ``str`` to ``dict``

      .. ## Controller.set_mapping ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the controller, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Controller.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      controller does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Controller.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the controller. See
      :meth:`Controller.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Controller.stop_rumble ##

.. ## pygame._sdl2.controller ##


--- Contenu du fichier : tests.rst.txt ---
.. include:: common.txt

:mod:`pygame.tests`
===================

.. module:: pygame.tests
   :synopsis: Pygame unit test suite package

| :sl:`Pygame unit test suite package`

A quick way to run the test suite package from the command line is to import
the go submodule with the Python -m option:

::

  python -m pygame.tests [<test options>]

Command line option --help displays a usage message. Available options
correspond to the :func:`pygame.tests.run` arguments.

The xxxx_test submodules of the tests package are unit test suites for
individual parts of pygame. Each can also be run as a main program. This is
useful if the test, such as cdrom_test, is interactive.

For pygame development the test suite can be run from a pygame distribution
root directory. Program ``run_tests.py`` is provided for convenience, though
test/go.py can be run directly.

Module level tags control which modules are included in a unit test run. Tags
are assigned to a unit test module with a corresponding <name>_tags.py module.
The tags module has the global __tags__, a list of tag names. For example,
``cdrom_test.py`` has a tag file ``cdrom_tags.py`` containing a tags list that
has the 'interactive' string. The 'interactive' tag indicates ``cdrom_test.py``
expects user input. It is excluded from a ``run_tests.py`` or
``pygame.tests.go`` run. 

Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These
two tags indicate unit tests that will not run on a particular platform, or
for which no corresponding pygame module is available.

The test runner will list each excluded module along with the tag responsible.

.. function:: run

   | :sl:`Run the pygame unit test suite`
   | :sg:`run(*args, **kwds) -> tuple`

   Positional arguments (optional):

   ::

       The names of tests to include. If omitted then all tests are run. Test names
       need not include the trailing '_test'.

   Keyword arguments:

   ::

       incomplete - fail incomplete tests (default False)
       nosubprocess - run all test suites in the current process
                      (default False, use separate subprocesses)
       dump - dump failures/errors as dict ready to eval (default False)
       file - if provided, the name of a file into which to dump failures/errors
       timings - if provided, the number of times to run each individual test to
                 get an average run time (default is run each test once)
       exclude - A list of TAG names to exclude from the run
       show_output - show silenced stderr/stdout on errors (default False)
       all - dump all results, not just errors (default False)
       randomize - randomize order of tests (default False)
       seed - if provided, a seed randomizer integer
       multi_thread - if provided, the number of THREADS in which to run
                      subprocessed tests
       time_out - if subprocess is True then the time limit in seconds before
                  killing a test (default 30)
       fake - if provided, the name of the fake tests package in the
              run_tests__tests subpackage to run instead of the normal
              pygame tests
       python - the path to a python executable to run subprocessed tests
                (default sys.executable)

   Return value:

   ::

       A tuple of total number of tests run, dictionary of error information.
       The dictionary is empty if no errors were recorded.

   By default individual test modules are run in separate subprocesses. This
   recreates normal pygame usage where ``pygame.init()`` and ``pygame.quit()``
   are called only once per program execution, and avoids unfortunate
   interactions between test modules. 
   
   A time limit is placed on test execution ensuring that any frozen tests
   processes are killed when their time allotment is expired. Use the single
   process option if threading is not working properly or if tests are taking
   too long. It is not guaranteed that all tests will pass in single process
   mode.

   Tests are run in a randomized order if the randomize argument is True or a
   seed argument is provided. If no seed integer is provided then the system
   time is used for the randomization seed value.

   Individual test modules may have a __tags__ attribute, a list of tag strings
   used to selectively omit modules from a run. By default only 'interactive'
   modules such as cdrom_test are ignored. An interactive module must be run
   from the console as a Python program.

   This function can only be called once per Python session. It is not
   reentrant.

   .. ## pygame.tests.run ##

.. ## pygame.tests ##


--- Contenu du fichier : cdrom.rst.txt ---
.. include:: common.txt

:mod:`pygame.cdrom`
===================

.. module:: pygame.cdrom
   :synopsis: pygame module for audio cdrom control

| :sl:`pygame module for audio cdrom control`

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.
	One alternative for python cdrom functionality is `pycdio <https://pypi.org/project/pycdio/>`_.
	
The cdrom module manages the ``CD`` and ``DVD`` drives on a computer. It can
also control the playback of audio CDs. This module needs to be initialized
before it can do anything. Each ``CD`` object you create represents a cdrom
drive and must also be initialized individually before it can do most things.

.. function:: init

   | :sl:`initialize the cdrom module`
   | :sg:`init() -> None`

   Initialize the cdrom module. This will scan the system for all ``CD``
   devices. The module must be initialized before any other functions will
   work. This automatically happens when you call ``pygame.init()``.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.init ##

.. function:: quit

   | :sl:`uninitialize the cdrom module`
   | :sg:`quit() -> None`

   Uninitialize the cdrom module. After you call this any existing ``CD``
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.quit ##

.. function:: get_init

   | :sl:`true if the cdrom module is initialized`
   | :sg:`get_init() -> bool`

   Test if the cdrom module is initialized or not. This is different than the
   ``CD.init()`` since each drive must also be initialized individually.

   .. ## pygame.cdrom.get_init ##

.. function:: get_count

   | :sl:`number of cd drives on the system`
   | :sg:`get_count() -> count`

   Return the number of cd drives on the system. When you create ``CD`` objects
   you need to pass an integer id that must be lower than this count. The count
   will be 0 if there are no drives on the system.

   .. ## pygame.cdrom.get_count ##

.. class:: CD

   | :sl:`class to manage a cdrom drive`
   | :sg:`CD(id) -> CD`

   You can create a ``CD`` object for each cdrom on the system. Use
   ``pygame.cdrom.get_count()`` to determine how many drives actually exist.
   The id argument is an integer of the drive, starting at zero.

   The ``CD`` object is not initialized, you can only call ``CD.get_id()`` and
   ``CD.get_name()`` on an uninitialized drive.

   It is safe to create multiple ``CD`` objects for the same drive, they will
   all cooperate normally.

   .. method:: init

      | :sl:`initialize a cdrom drive for use`
      | :sg:`init() -> None`

      Initialize the cdrom drive for use. The drive must be initialized for
      most ``CD`` methods to work. Even if the rest of pygame has been
      initialized.

      There may be a brief pause while the drive is initialized. Avoid
      ``CD.init()`` if the program should not stop for a second or two.

      .. ## CD.init ##

   .. method:: quit

      | :sl:`uninitialize a cdrom drive for use`
      | :sg:`quit() -> None`

      Uninitialize a drive for use. Call this when your program will not be
      accessing the drive for awhile.

      .. ## CD.quit ##

   .. method:: get_init

      | :sl:`true if this cd device initialized`
      | :sg:`get_init() -> bool`

      Test if this ``CDROM`` device is initialized. This is different than the
      ``pygame.cdrom.init()`` since each drive must also be initialized
      individually.

      .. ## CD.get_init ##

   .. method:: play

      | :sl:`start playing audio`
      | :sg:`play(track, start=None, end=None) -> None`

      Playback audio from an audio cdrom in the drive. Besides the track number
      argument, you can also pass a starting and ending time for playback. The
      start and end time are in seconds, and can limit the section of an audio
      track played.

      If you pass a start time but no end, the audio will play to the end of
      the track. If you pass a start time and 'None' for the end time, the
      audio will play to the end of the entire disc.

      See the ``CD.get_numtracks()`` and ``CD.get_track_audio()`` to find
      tracks to playback.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.play ##

   .. method:: stop

      | :sl:`stop audio playback`
      | :sg:`stop() -> None`

      Stops playback of audio from the cdrom. This will also lose the current
      playback position. This method does nothing if the drive isn't already
      playing audio.

      .. ## CD.stop ##

   .. method:: pause

      | :sl:`temporarily stop audio playback`
      | :sg:`pause() -> None`

      Temporarily stop audio playback on the ``CD``. The playback can be
      resumed at the same point with the ``CD.resume()`` method. If the ``CD``
      is not playing this method does nothing.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.pause ##

   .. method:: resume

      | :sl:`unpause audio playback`
      | :sg:`resume() -> None`

      Unpause a paused ``CD``. If the ``CD`` is not paused or already playing,
      this method does nothing.

      .. ## CD.resume ##

   .. method:: eject

      | :sl:`eject or open the cdrom drive`
      | :sg:`eject() -> None`

      This will open the cdrom drive and eject the cdrom. If the drive is
      playing or paused it will be stopped.

      .. ## CD.eject ##

   .. method:: get_id

      | :sl:`the index of the cdrom drive`
      | :sg:`get_id() -> id`

      Returns the integer id that was used to create the ``CD`` instance. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_id ##

   .. method:: get_name

      | :sl:`the system name of the cdrom drive`
      | :sg:`get_name() -> name`

      Return the string name of the drive. This is the system name used to
      represent the drive. It is often the drive letter or device name. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_name ##

   .. method:: get_busy

      | :sl:`true if the drive is playing audio`
      | :sg:`get_busy() -> bool`

      Returns True if the drive busy playing back audio.

      .. ## CD.get_busy ##

   .. method:: get_paused

      | :sl:`true if the drive is paused`
      | :sg:`get_paused() -> bool`

      Returns True if the drive is currently paused.

      .. ## CD.get_paused ##

   .. method:: get_current

      | :sl:`the current audio playback position`
      | :sg:`get_current() -> track, seconds`

      Returns both the current track and time of that track. This method works
      when the drive is either playing or paused.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_current ##

   .. method:: get_empty

      | :sl:`False if a cdrom is in the drive`
      | :sg:`get_empty() -> bool`

      Return False if there is a cdrom currently in the drive. If the drive is
      empty this will return True.

      .. ## CD.get_empty ##

   .. method:: get_numtracks

      | :sl:`the number of tracks on the cdrom`
      | :sg:`get_numtracks() -> count`

      Return the number of tracks on the cdrom in the drive. This will return
      zero of the drive is empty or has no tracks.

      .. ## CD.get_numtracks ##

   .. method:: get_track_audio

      | :sl:`true if the cdrom track has audio data`
      | :sg:`get_track_audio(track) -> bool`

      Determine if a track on a cdrom contains audio data. You can also call
      ``CD.num_tracks()`` and ``CD.get_all()`` to determine more information
      about the cdrom.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_audio ##

   .. method:: get_all

      | :sl:`get all track information`
      | :sg:`get_all() -> [(audio, start, end, length), ...]`

      Return a list with information for every track on the cdrom. The
      information consists of a tuple with four values. The audio value is True
      if the track contains audio data. The start, end, and length values are
      floating point numbers in seconds. Start and end represent absolute times
      on the entire disc.

      .. ## CD.get_all ##

   .. method:: get_track_start

      | :sl:`start time of a cdrom track`
      | :sg:`get_track_start(track) -> seconds`

      Return the absolute time in seconds where at start of the cdrom track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_start ##

   .. method:: get_track_length

      | :sl:`length of a cdrom track`
      | :sg:`get_track_length(track) -> seconds`

      Return a floating point value in seconds of the length of the cdrom
      track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_length ##

   .. ## pygame.cdrom.CD ##

.. ## pygame.cdrom ##


--- Contenu du fichier : pygame.rst.txt ---
.. include:: common.txt

:mod:`pygame`
=============

.. module:: pygame
   :synopsis: the top level pygame package

| :sl:`the top level pygame package`

The pygame package represents the top-level package for others to use. Pygame
itself is broken into many submodules, but this does not affect programs that
use pygame.

As a convenience, most of the top-level variables in pygame have been placed
inside a module named :mod:`pygame.locals`. This is meant to be used with
``from pygame.locals import *``, in addition to ``import pygame``.

When you ``import pygame`` all available pygame submodules are automatically
imported. Be aware that some of the pygame modules are considered *optional*,
and may not be available. In that case, pygame will provide a placeholder
object instead of the module, which can be used to test for availability.

.. function:: init

   | :sl:`initialize all imported pygame modules`
   | :sg:`init() -> (numpass, numfail)`

   Initialize all imported pygame modules. No exceptions will be raised if a
   module fails, but the total number if successful and failed inits will be
   returned as a tuple. You can always initialize individual modules manually,
   but :func:`pygame.init` is a convenient way to get everything started. The
   ``init()`` functions for individual modules will raise exceptions when they
   fail.

   You may want to initialize the different modules separately to speed up your
   program or to not use modules your game does not require.

   It is safe to call this ``init()`` more than once as repeated calls will have
   no effect. This is true even if you have ``pygame.quit()`` all the modules.

   .. ## pygame.init ##

.. function:: quit

   | :sl:`uninitialize all pygame modules`
   | :sg:`quit() -> None`

   Uninitialize all pygame modules that have previously been initialized. When
   the Python interpreter shuts down, this method is called regardless, so your
   program should not need it, except when it wants to terminate its pygame
   resources and continue. It is safe to call this function more than once as
   repeated calls have no effect.

   .. note::
      Calling :func:`pygame.quit` will not exit your program. Consider letting
      your program end in the same way a normal Python program will end.

   .. ## pygame.quit ##

.. function:: get_init

   | :sl:`returns True if pygame is currently initialized`
   | :sg:`get_init() -> bool`

   Returns ``True`` if pygame is currently initialized.

   .. versionadded:: 1.9.5

   .. ## pygame.get_init ##

.. exception:: error

   | :sl:`standard pygame exception`
   | :sg:`raise pygame.error(message)`

   This exception is raised whenever a pygame or SDL operation fails. You
   can catch any anticipated problems and deal with the error. The exception is
   always raised with a descriptive message about the problem.

   Derived from the ``RuntimeError`` exception, which can also be used to catch
   these raised errors.

   .. ## pygame.error ##

.. function:: get_error

   | :sl:`get the current error message`
   | :sg:`get_error() -> errorstr`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.get_error ##

.. function:: set_error

   | :sl:`set the current error message`
   | :sg:`set_error(error_msg) -> None`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.set_error ##

.. function:: get_sdl_version

   | :sl:`get the version number of SDL`
   | :sg:`get_sdl_version(linked=True) -> major, minor, patch`

   Returns the three version numbers of the SDL library. ``linked=True``
   will cause the function to return the version of the library that pygame
   is linked against while ``linked=False`` will cause the function to return
   the version of the library that pygame is compiled against.
   It can be used to detect which features may or may not be
   available through pygame.

   .. versionadded:: 1.7.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added

   .. ## pygame.get_sdl_version ##

.. function:: get_sdl_byteorder

   | :sl:`get the byte order of SDL`
   | :sg:`get_sdl_byteorder() -> int`

   Returns the byte order of the SDL library. It returns ``1234`` for little
   endian byte order and ``4321`` for big endian byte order.

   .. versionadded:: 1.8

   .. ## pygame.get_sdl_byteorder ##

.. function:: register_quit

   | :sl:`register a function to be called when pygame quits`
   | :sg:`register_quit(callable) -> None`

   When :func:`pygame.quit` is called, all registered quit functions are
   called. Pygame modules do this automatically when they are initializing, so
   this function will rarely be needed.

   .. ## pygame.register_quit ##

.. function:: encode_string

   | :sl:`Encode a Unicode or bytes object`
   | :sg:`encode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   encoding (string): If present, encoding to use. The default is
   ``'unicode_escape'``.

   errors (string): If given, how to handle unencodable characters. The default
   is ``'backslashreplace'``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``. For the default encoding and errors values
   there should be no encoding errors.

   This function is used in encoding file paths. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_string ##

.. function:: encode_file_path

   | :sl:`Encode a Unicode or bytes object as a file system path`
   | :sg:`encode_file_path([obj [, etype]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``.

   This function is used to encode file paths in pygame. Encoding is to the
   codec as returned by ``sys.getfilesystemencoding()``. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_file_path ##


:mod:`pygame.version`
=====================

.. module:: pygame.version
   :synopsis: small module containing version information

| :sl:`small module containing version information`

This module is automatically imported into the pygame package and can be used to
check which version of pygame has been imported.

.. data:: ver

   | :sl:`version number as a string`
   | :sg:`ver = '1.2'`

   This is the version represented as a string. It can contain a micro release
   number as well, e.g. ``'1.5.2'``

   .. ## pygame.version.ver ##

.. data:: vernum

   | :sl:`tupled integers of the version`
   | :sg:`vernum = (1, 5, 3)`

   This version information can easily be compared with other version
   numbers of the same format. An example of checking pygame version numbers
   would look like this:

   ::

       if pygame.version.vernum < (1, 5):
           print('Warning, older version of pygame (%s)' %  pygame.version.ver)
           disable_advanced_features = True

   .. versionadded:: 1.9.6 Attributes ``major``, ``minor``, and ``patch``.

   ::

      vernum.major == vernum[0]
      vernum.minor == vernum[1]
      vernum.patch == vernum[2]

   .. versionchanged:: 1.9.6
      ``str(pygame.version.vernum)`` returns a string like ``"2.0.0"`` instead
      of ``"(2, 0, 0)"``.

   .. versionchanged:: 1.9.6
      ``repr(pygame.version.vernum)`` returns a string like
      ``"PygameVersion(major=2, minor=0, patch=0)"`` instead of ``"(2, 0, 0)"``.

   .. ## pygame.version.vernum ##

.. data:: rev

   | :sl:`repository revision of the build`
   | :sg:`rev = 'a6f89747b551+'`

   The Mercurial node identifier of the repository checkout from which this
   package was built. If the identifier ends with a plus sign '+' then the
   package contains uncommitted changes. Please include this revision number
   in bug reports, especially for non-release pygame builds.
   
   Important note: pygame development has moved to github, this variable is 
   obsolete now. As soon as development shifted to github, this variable started
   returning an empty string ``""``. 
   It has always been returning an empty string since ``v1.9.5``.
   
   .. versionchanged:: 1.9.5
      Always returns an empty string ``""``.

   .. ## pygame.version.rev ##

.. data:: SDL

   | :sl:`tupled integers of the SDL library version`
   | :sg:`SDL = '(2, 0, 12)'`

   This is the SDL library version represented as an extended tuple. It also has
   attributes 'major', 'minor' & 'patch' that can be accessed like this:

   ::

     >>> pygame.version.SDL.major
     2

   printing the whole thing returns a string like this:

   ::

    >>> pygame.version.SDL
    SDLVersion(major=2, minor=0, patch=12)

   .. versionadded:: 2.0.0

   .. ## pygame.version.SDL ##

.. ## pygame.version ##

.. ## pygame ##

.. _environment-variables:

**Setting Environment Variables**

Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide
range of the library's functionality. Some of the variables are from pygame itself, while others come from
the underlying C SDL library that pygame uses.

In python, environment variables are usually set in code like this::

     import os
     os.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'

Or to preserve users ability to override the variable::

     import os
     os.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')

If the variable is more useful for users of an app to set than the developer then they can set it like this:

**Windows**::

    set NAME_OF_ENVIRONMENT_VARIABLE=value_to_set
    python my_application.py

**Linux/Mac**::

    ENV_VAR=value python my_application.py

For some variables they need to be set before initialising pygame, some must be set before even importing pygame,
and others can simply be set right before the area of code they control is run.

Below is a list of environment variables, their settable values, and a brief description of what they do.

|

**Pygame Environment Variables**

These variables are defined by pygame itself.

|

::

 PYGAME_DISPLAY - Experimental (subject to change)
 Set index of the display to use, "0" is the default.

This sets the display where pygame will open its window
or screen. The value set here will be used if set before
calling :func:`pygame.display.set_mode()`, and as long as no
'display' parameter is passed into :func:`pygame.display.set_mode()`.

|

::

 PYGAME_FORCE_SCALE -
 Set to "photo" or "default".

This forces set_mode() to use the SCALED display mode and,
if "photo" is set, makes the scaling use the slowest, but
highest quality anisotropic scaling algorithm, if it is
available. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 PYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0
 Set to "1" to enable the SDL2 blitter.

This makes pygame use the SDL2 blitter for all alpha
blending. The SDL2 blitter is sometimes faster than
the default blitter but uses a different formula so
the final colours may differ. Must be set before
:func:`pygame.init()` is called.

|

::

 PYGAME_HIDE_SUPPORT_PROMPT -
 Set to "1" to hide the prompt.

This stops the welcome message popping up in the
console that tells you which version of python,
pygame & SDL you are using. Must be set before
importing pygame.

|

::

 PYGAME_FREETYPE -
 Set to "1" to enable.

This switches the pygame.font module to a pure
freetype implementation that bypasses SDL_ttf.
See the font module for why you might want to
do this. Must be set before importing pygame.

|

::

 PYGAME_CAMERA -
 Set to "opencv" or "vidcapture"

Forces the library backend used in the camera
module, overriding the platform defaults. Must
be set before calling :func:`pygame.camera.init()`.

In pygame 2.0.3, backends can be set programmatically instead, and the old
OpenCV backend has been replaced with one on top of "opencv-python," rather
than the old "highgui" OpenCV port. Also, there is a new native Windows
backend available.

|
|

**SDL Environment Variables**

These variables are defined by SDL.

For documentation on the environment variables available in
pygame 1 try `here
<https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html>`__.
For Pygame 2, some selected environment variables are listed below.

|

::

 SDL_VIDEO_CENTERED -
 Set to "1" to enable centering the window.

This will make the pygame window open in the centre of the display.
Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEO_WINDOW_POS -
 Set to "x,y" to position the top left corner of the window.

This allows control over the placement of the pygame window within
the display. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEODRIVER -
 Set to "drivername" to change the video driver used.

On some platforms there are multiple video drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.display.init()`.

|

::

 SDL_AUDIODRIVER -
 Set to "drivername" to change the audio driver used.

On some platforms there are multiple audio drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.mixer.init()`.

|

::

 SDL_VIDEO_ALLOW_SCREENSAVER
 Set to "1" to allow screensavers while pygame apps are running.

By default pygame apps disable screensavers while
they are running. Setting this environment variable allows users or
developers to change that and make screensavers run again.

|

::

 SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
 Set to "0" to re-enable the compositor.

By default SDL tries to disable the X11 compositor for all pygame
apps. This is usually a good thing as it's faster, however if you
have an app which *doesn't* update every frame and are using linux
you may want to disable this bypass. The bypass has reported problems
on KDE linux. This variable is only used on x11/linux platforms.

|

::

 SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 Set to "1" to allow joysticks to be updated even when the window is out of focus

By default, when the window is not in focus, input devices do not get
updated. However, using this environment variable it is possible to get
joystick updates even when the window is in the background. Must be set
before calling :func:`pygame.init()` or :func:`pygame.joystick.init()`.


--- Contenu du fichier : camera.rst.txt ---
.. include:: common.txt

:mod:`pygame.camera`
====================

.. module:: pygame.camera
   :synopsis: pygame module for camera use

| :sl:`pygame module for camera use`

.. note::
   Use import pygame.camera before using this module.

Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively,
with wider platform support available via an integrated OpenCV backend.

.. versionadded:: 2.0.2 Windows native camera support
.. versionadded:: 2.0.3 New OpenCV backends

EXPERIMENTAL!: This API may change or disappear in later pygame releases. If
you use this, your code will very likely break with the next pygame release.

The Bayer to ``RGB`` function is based on:

::

 Sonix SN9C101 based webcam basic I/F routines
 Copyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

New in pygame 1.9.0.

.. function:: init

   | :sl:`Module init`
   | :sg:`init(backend = None) -> None`

   This function starts up the camera module, choosing the best webcam backend
   it can find for your system. This is not guaranteed to succeed, and may even
   attempt to import third party modules, like `OpenCV`. If you want to
   override its backend choice, you can call pass the name of the backend you
   want into this function. More about backends in
   :func:`get_backends()`.

   .. versionchanged:: 2.0.3 Option to explicitly select backend

   .. ## pygame.camera.init ##

.. function:: get_backends

   | :sl:`Get the backends supported on this system`
   | :sg:`get_backends() -> [str]`

   This function returns every backend it thinks has a possibility of working
   on your system, in order of priority.

   pygame.camera Backends:
   ::

      Backend           OS        Description
      ---------------------------------------------------------------------------------
      _camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3
      _camera (V4L2)    Linux     Builtin
      OpenCV            Any       Uses `opencv-python` module, can't enumerate cameras
      OpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration
      VideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate
                                  cameras, may be removed in the future

   There are two main differences among backends.

   The _camera backends are built in to pygame itself, and require no third
   party imports. All the other backends do. For the OpenCV and VideoCapture
   backends, those modules need to be installed on your system.

   The other big difference is "camera enumeration." Some backends don't have
   a way to list out camera names, or even the number of cameras on the
   system. In these cases, :func:`list_cameras()` will return
   something like ``[0]``. If you know you have multiple cameras on the 
   system, these backend ports will pass through a "camera index number" 
   through if you use that as the ``device`` parameter.

   .. versionadded:: 2.0.3

   .. ## pygame.camera.get_backends ##

.. function:: colorspace

   | :sl:`Surface colorspace conversion`
   | :sg:`colorspace(Surface, format, DestSurface = None) -> Surface`

   Allows for conversion from "RGB" to a destination colorspace of "HSV" or
   "YUV". The source and destination surfaces must be the same size and pixel
   depth. This is useful for computer vision on devices with limited processing
   power. Capture as small of an image as possible, ``transform.scale()`` it
   even smaller, and then convert the colorspace to ``YUV`` or ``HSV`` before
   doing any processing on it.

   .. ## pygame.camera.colorspace ##

.. function:: list_cameras

   | :sl:`returns a list of available cameras`
   | :sg:`list_cameras() -> [cameras]`

   Checks the computer for available cameras and returns a list of strings of
   camera names, ready to be fed into :class:`pygame.camera.Camera`.

   If the camera backend doesn't support webcam enumeration, this will return
   something like ``[0]``. See :func:`get_backends()` for much more
   information.

   .. ## pygame.camera.list_cameras ##

.. class:: Camera

   | :sl:`load a camera`
   | :sg:`Camera(device, (width, height), format) -> Camera`

   Loads a camera. On Linux, the device is typically something like
   "/dev/video0". Default width and height are 640 by 480. 
   Format is the desired colorspace of the output. 
   This is useful for computer vision purposes. The default is
   ``RGB``. The following are supported:

      * ``RGB`` - Red, Green, Blue

      * ``YUV`` - Luma, Blue Chrominance, Red Chrominance

      * ``HSV`` - Hue, Saturation, Value

   .. method:: start

      | :sl:`opens, initializes, and starts capturing`
      | :sg:`start() -> None`

      Opens the camera device, attempts to initialize it, and begins recording
      images to a buffer. The camera must be started before any of the below
      functions can be used.

      .. ## Camera.start ##

   .. method:: stop

      | :sl:`stops, uninitializes, and closes the camera`
      | :sg:`stop() -> None`

      Stops recording, uninitializes the camera, and closes it. Once a camera
      is stopped, the below functions cannot be used until it is started again.

      .. ## Camera.stop ##

   .. method:: get_controls

      | :sl:`gets current values of user controls`
      | :sg:`get_controls() -> (hflip = bool, vflip = bool, brightness)`

      If the camera supports it, get_controls will return the current settings
      for horizontal and vertical image flip as bools and brightness as an int.
      If unsupported, it will return the default values of (0, 0, 0). Note that
      the return values here may be different than those returned by
      set_controls, though these are more likely to be correct.

      .. ## Camera.get_controls ##

   .. method:: set_controls

      | :sl:`changes camera settings if supported by the camera`
      | :sg:`set_controls(hflip = bool, vflip = bool, brightness) -> (hflip = bool, vflip = bool, brightness)`

      Allows you to change camera settings if the camera supports it. The
      return values will be the input values if the camera claims it succeeded
      or the values previously in use if not. Each argument is optional, and
      the desired one can be chosen by supplying the keyword, like hflip. Note
      that the actual settings being used by the camera may not be the same as
      those returned by set_controls. On Windows, :code:`hflip` and :code:`vflip` are
      implemented by pygame, not by the Camera, so they should always work, but
      :code:`brightness` is unsupported.

      .. ## Camera.set_controls ##

   .. method:: get_size

      | :sl:`returns the dimensions of the images being recorded`
      | :sg:`get_size() -> (width, height)`

      Returns the current dimensions of the images being captured by the
      camera. This will return the actual size, which may be different than the
      one specified during initialization if the camera did not support that
      size.

      .. ## Camera.get_size ##

   .. method:: query_image

      | :sl:`checks if a frame is ready`
      | :sg:`query_image() -> bool`

      If an image is ready to get, it returns true. Otherwise it returns false.
      Note that some webcams will always return False and will only queue a
      frame when called with a blocking function like :func:`get_image()`.
      On Windows (MSMF), and the  OpenCV backends, :func:`query_image()`
      should be reliable, though. This is useful to separate the framerate of
      the game from that of the camera without having to use threading. 

      .. ## Camera.query_image ##

   .. method:: get_image

      | :sl:`captures an image as a Surface`
      | :sg:`get_image(Surface = None) -> Surface`

      Pulls an image off of the buffer as an ``RGB`` Surface. It can optionally
      reuse an existing Surface to save time. The bit-depth of the surface is
      24 bits on Linux, 32 bits on Windows, or the same as the optionally
      supplied Surface.

      .. ## Camera.get_image ##

   .. method:: get_raw

      | :sl:`returns an unmodified image as bytes`
      | :sg:`get_raw() -> bytes`

      Gets an image from a camera as a string in the native pixelformat of the
      camera. Useful for integration with other libraries. This returns a
      bytes object

      .. ## Camera.get_raw ##

   .. ## pygame.camera.Camera ##

.. ## pygame.camera ##


--- Contenu du fichier : mouse.rst.txt ---
.. include:: common.txt

:mod:`pygame.mouse`
===================

.. module:: pygame.mouse
   :synopsis: pygame module to work with the mouse

| :sl:`pygame module to work with the mouse`

The mouse functions can be used to get the current state of the mouse device.
These functions can also alter the system cursor for the mouse.

When the display mode is set, the event queue will start receiving mouse
events. The mouse buttons generate ``pygame.MOUSEBUTTONDOWN`` and
``pygame.MOUSEBUTTONUP`` events when they are pressed and released. These
events contain a button attribute representing which button was pressed. The
mouse wheel will generate ``pygame.MOUSEBUTTONDOWN`` and 
``pygame.MOUSEBUTTONUP`` events when rolled. The button will be set to 4 
when the wheel is rolled up, and to button 5 when the wheel is rolled down. 
Whenever the mouse is moved it generates a ``pygame.MOUSEMOTION`` event. The 
mouse movement is broken into small and accurate motion events. As the mouse 
is moving many motion events will be placed on the queue. Mouse motion events 
that are not properly cleaned from the event queue are the primary reason the 
event queue fills up.

If the mouse cursor is hidden, and input is grabbed to the current display the
mouse will enter a virtual input mode, where the relative movements of the
mouse will never be stopped by the borders of the screen. See the functions
``pygame.mouse.set_visible()`` and ``pygame.event.set_grab()`` to get this
configured.


**Mouse Wheel Behavior in pygame 2**

There is proper functionality for mouse wheel behaviour with pygame 2 supporting
``pygame.MOUSEWHEEL`` events.  The new events support horizontal and vertical 
scroll movements, with signed integer values representing the amount scrolled 
(``x`` and ``y``), as well as ``flipped`` direction (the set positive and 
negative values for each axis is flipped). Read more about SDL2 
input-related changes here `<https://wiki.libsdl.org/MigrationGuide#input>`_

In pygame 2, the mouse wheel functionality can be used by listening for the 
``pygame.MOUSEWHEEL`` type of an event (Bear in mind they still emit 
``pygame.MOUSEBUTTONDOWN`` events like in pygame 1.x, as well).
When this event is triggered, a developer can access the appropriate ``Event`` object 
with ``pygame.event.get()``. The object can be used to access data about the mouse 
scroll, such as ``which`` (it will tell you what exact mouse device trigger the event).

.. code-block:: python
   :caption: Code example of mouse scroll (tested on 2.0.0.dev7)
   :name: test.py

   # Taken from husano896's PR thread (slightly modified)
   import pygame
   from pygame.locals import *
   pygame.init()
   screen = pygame.display.set_mode((640, 480))
   clock = pygame.time.Clock()
   
   def main():
      while True:
         for event in pygame.event.get():
               if event.type == QUIT:
                  pygame.quit()
                  return
               elif event.type == MOUSEWHEEL:
                  print(event) 
                  print(event.x, event.y)
                  print(event.flipped)
                  print(event.which)
                  # can access properties with 
                  # proper notation(ex: event.y)
         clock.tick(60)

   # Execute game:
   main()

.. function:: get_pressed

   | :sl:`get the state of the mouse buttons`
   | :sg:`get_pressed(num_buttons=3) -> (button1, button2, button3)`
   | :sg:`get_pressed(num_buttons=5) -> (button1, button2, button3, button4, button5)`

   Returns a sequence of booleans representing the state of all the mouse
   buttons. A true value means the mouse is currently being pressed at the time
   of the call.

   Note, to get all of the mouse events it is better to use either 
   ``pygame.event.wait()`` or ``pygame.event.get()`` and check all of those 
   events to see if they are ``MOUSEBUTTONDOWN``, ``MOUSEBUTTONUP``, or
   ``MOUSEMOTION``.

   Note, that on ``X11`` some X servers use middle button emulation. When you
   click both buttons ``1`` and ``3`` at the same time a ``2`` button event 
   can be emitted.

   Note, remember to call ``pygame.event.get()`` before this function.
   Otherwise it will not work as expected.

   To support five button mice, an optional parameter ``num_buttons`` has been 
   added in pygame 2. When this is set to ``5``, ``button4`` and ``button5`` 
   are added to the returned tuple. Only ``3`` and ``5`` are valid values 
   for this parameter.
   
   .. versionchanged:: 2.0.0 ``num_buttons`` argument added

   .. ## pygame.mouse.get_pressed ##

.. function:: get_pos

   | :sl:`get the mouse cursor position`
   | :sg:`get_pos() -> (x, y)`

   Returns the ``x`` and ``y`` position of the mouse cursor. The position is
   relative to the top-left corner of the display. The cursor position can be
   located outside of the display window, but is always constrained to the
   screen.

   .. ## pygame.mouse.get_pos ##

.. function:: get_rel

   | :sl:`get the amount of mouse movement`
   | :sg:`get_rel() -> (x, y)`

   Returns the amount of movement in ``x`` and ``y`` since the previous call to
   this function. The relative movement of the mouse cursor is constrained to
   the edges of the screen, but see the virtual input mouse mode for a way
   around this. Virtual input mode is described at the top of the page.

   .. ## pygame.mouse.get_rel ##

.. function:: set_pos

   | :sl:`set the mouse cursor position`
   | :sg:`set_pos([x, y]) -> None`

   Set the current mouse position to arguments given. If the mouse cursor is
   visible it will jump to the new coordinates. Moving the mouse will generate
   a new ``pygame.MOUSEMOTION`` event.

   .. ## pygame.mouse.set_pos ##

.. function:: set_visible

   | :sl:`hide or show the mouse cursor`
   | :sg:`set_visible(bool) -> bool`

   If the bool argument is true, the mouse cursor will be visible. This will
   return the previous visible state of the cursor.

   .. ## pygame.mouse.set_visible ##

.. function:: get_visible

   | :sl:`get the current visibility state of the mouse cursor`
   | :sg:`get_visible() -> bool`

   Get the current visibility state of the mouse cursor. ``True`` if the mouse is
   visible, ``False`` otherwise.

   .. versionadded:: 2.0.0

   .. ## pygame.mouse.get_visible ##

.. function:: get_focused

   | :sl:`check if the display is receiving mouse input`
   | :sg:`get_focused() -> bool`

   Returns true when pygame is receiving mouse input events (or, in windowing
   terminology, is "active" or has the "focus").

   This method is most useful when working in a window. By contrast, in
   full-screen mode, this method always returns true.

   Note: under ``MS`` Windows, the window that has the mouse focus also has the
   keyboard focus. But under X-Windows, one window can receive mouse events and
   another receive keyboard events. ``pygame.mouse.get_focused()`` indicates
   whether the pygame window receives mouse events.

   .. ## pygame.mouse.get_focused ##

.. function:: set_cursor

   | :sl:`set the mouse cursor to a new cursor`
   | :sg:`set_cursor(pygame.cursors.Cursor) -> None`
   | :sg:`set_cursor(size, hotspot, xormasks, andmasks) -> None`
   | :sg:`set_cursor(hotspot, surface) -> None`
   | :sg:`set_cursor(constant) -> None`

   Set the mouse cursor to something new. This function accepts either an explicit
   ``Cursor`` object or arguments to create a ``Cursor`` object.

   See :class:`pygame.cursors.Cursor` for help creating cursors and for examples.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.set_cursor ##


.. function:: get_cursor

   | :sl:`get the current mouse cursor`
   | :sg:`get_cursor() -> pygame.cursors.Cursor`

   Get the information about the mouse system cursor. The return value contains
   the same data as the arguments passed into :func:`pygame.mouse.set_cursor()`.

   .. note:: Code that unpacked a get_cursor() call into 
             ``size, hotspot, xormasks, andmasks`` will still work,
	     assuming the call returns an old school type cursor.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.get_cursor ##

.. ## pygame.mouse ##


--- Contenu du fichier : mixer.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer`
===================

.. module:: pygame.mixer
   :synopsis: pygame module for loading and playing sounds

| :sl:`pygame module for loading and playing sounds`

This module contains classes for loading Sound objects and controlling
playback. The mixer module is optional and depends on SDL_mixer. Your program
should test that :mod:`pygame.mixer` is available and initialized before using
it.

The mixer module has a limited number of channels for playback of sounds.
Usually programs tell pygame to start playing audio and it selects an available
channel automatically. The default is 8 simultaneous channels, but complex
programs can get more precise control over the number of channels and their
use.

All sound playback is mixed in background threads. When you begin to play a
Sound object, it will return immediately while the sound continues to play. A
single Sound object can also be actively played back multiple times.

The mixer also has a special streaming channel. This is for music playback and
is accessed through the :mod:`pygame.mixer.music` module. Consider using this
module for playing long running music. Unlike mixer module, the music module
streams the music from the files without loading music at once into memory.

The mixer module must be initialized like other pygame modules, but it has some
extra conditions. The ``pygame.mixer.init()`` function takes several optional
arguments to control the playback rate and sample size. Pygame will default to
reasonable values, but pygame cannot perform Sound resampling, so the mixer
should be initialized to match the values of your audio resources.

``NOTE``: For less laggy sound use a smaller buffer size. The default
is set to reduce the chance of scratchy sounds on some computers. You can
change the default buffer by calling :func:`pygame.mixer.pre_init` before
:func:`pygame.mixer.init` or :func:`pygame.init` is called. For example:
``pygame.mixer.pre_init(44100,-16,2, 1024)``


.. function:: init

   | :sl:`initialize the mixer module`
   | :sg:`init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Initialize the mixer module for Sound loading and playback. The default
   arguments can be overridden to provide specific audio mixing. Keyword
   arguments are accepted. For backwards compatibility, argument values of 
   0 are replaced with the startup defaults, except for ``allowedchanges``,
   where -1 is used. (startup defaults may be changed by a :func:`pre_init` call).

   The size argument represents how many bits are used for each audio sample.
   If the value is negative then signed sample values will be used. Positive
   values mean unsigned audio samples will be used. An invalid value raises an
   exception.

   The channels argument is used to specify whether to use mono or stereo. 1
   for mono and 2 for stereo.

   The buffer argument controls the number of internal samples used in the
   sound mixer. The default value should work for most cases. It can be lowered
   to reduce latency, but sound dropout may occur. It can be raised to larger
   values to ensure playback never skips, but it will impose latency on sound
   playback. The buffer size must be a power of two (if not it is rounded up to
   the next nearest power of 2).

   Some platforms require the :mod:`pygame.mixer` module to be initialized
   after the display modules have initialized. The top level ``pygame.init()``
   takes care of this automatically, but cannot pass any arguments to the mixer
   init. To solve this, mixer has a function ``pygame.mixer.pre_init()`` to set
   the proper defaults before the toplevel init is used.

   When using allowedchanges=0 it will convert the samples at runtime to match
   what the hardware supports. For example a sound card may not
   support 16bit sound samples, so instead it will use 8bit samples internally.
   If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will
   change to the closest that SDL2 supports.

   Apart from 0, allowedchanged accepts the following constants ORed together:

      - AUDIO_ALLOW_FREQUENCY_CHANGE
      - AUDIO_ALLOW_FORMAT_CHANGE
      - AUDIO_ALLOW_CHANNELS_CHANGE
      - AUDIO_ALLOW_ANY_CHANGE

   It is safe to call this more than once, but after the mixer is initialized
   you cannot change the playback arguments without first calling
   ``pygame.mixer.quit()``.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionchanged:: 2.0.0 ``size`` can be 32 (32-bit floats).
   .. versionchanged:: 2.0.0 ``channels`` can also be 4 or 6.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.init ##

.. function:: pre_init

   | :sl:`preset the mixer init arguments`
   | :sg:`pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Call pre_init to change the defaults used when the real
   ``pygame.mixer.init()`` is called. Keyword arguments are accepted. The best
   way to set custom mixer playback values is to call
   ``pygame.mixer.pre_init()`` before calling the top level ``pygame.init()``.
   For backwards compatibility, argument values of 0 are replaced with the
   startup defaults, except for ``allowedchanges``, where -1 is used.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.pre_init ##

.. function:: quit

   | :sl:`uninitialize the mixer`
   | :sg:`quit() -> None`

   This will uninitialize :mod:`pygame.mixer`. All playback will stop and any
   loaded Sound objects may not be compatible with the mixer if it is
   reinitialized later.

   .. ## pygame.mixer.quit ##

.. function:: get_init

   | :sl:`test if the mixer is initialized`
   | :sg:`get_init() -> (frequency, format, channels)`

   If the mixer is initialized, this returns the playback arguments it is
   using. If the mixer has not been initialized this returns ``None``.

   .. ## pygame.mixer.get_init ##

.. function:: stop

   | :sl:`stop playback of all sound channels`
   | :sg:`stop() -> None`

   This will stop all playback of all active mixer channels.

   .. ## pygame.mixer.stop ##

.. function:: pause

   | :sl:`temporarily stop playback of all sound channels`
   | :sg:`pause() -> None`

   This will temporarily stop all playback on the active mixer channels. The
   playback can later be resumed with ``pygame.mixer.unpause()``

   .. ## pygame.mixer.pause ##

.. function:: unpause

   | :sl:`resume paused playback of sound channels`
   | :sg:`unpause() -> None`

   This will resume all active sound channels after they have been paused.

   .. ## pygame.mixer.unpause ##

.. function:: fadeout

   | :sl:`fade out the volume on all sounds before stopping`
   | :sg:`fadeout(time) -> None`

   This will fade out the volume on all active channels over the time argument
   in milliseconds. After the sound is muted the playback will stop.

   .. ## pygame.mixer.fadeout ##

.. function:: set_num_channels

   | :sl:`set the total number of playback channels`
   | :sg:`set_num_channels(count) -> None`

   Sets the number of available channels for the mixer. The default value is 8.
   The value can be increased or decreased. If the value is decreased, sounds
   playing on the truncated channels are stopped.

   .. ## pygame.mixer.set_num_channels ##

.. function:: get_num_channels

   | :sl:`get the total number of playback channels`
   | :sg:`get_num_channels() -> count`

   Returns the number of currently active playback channels.

   .. ## pygame.mixer.get_num_channels ##

.. function:: set_reserved

   | :sl:`reserve channels from being automatically used`
   | :sg:`set_reserved(count) -> count`

   The mixer can reserve any number of channels that will not be automatically
   selected for playback by Sounds. This means that whenever you play a Sound 
   without specifying a channel, a reserved channel will never be used. If sounds
   are currently playing on the reserved channels they will not be stopped.

   This allows the application to reserve a specific number of channels for
   important sounds that must not be dropped or have a guaranteed channel to
   play on.

   Will return number of channels actually reserved, this may be less than requested
   depending on the number of channels previously allocated.

   .. ## pygame.mixer.set_reserved ##

.. function:: find_channel

   | :sl:`find an unused channel`
   | :sg:`find_channel(force=False) -> Channel`

   This will find and return an inactive Channel object. If there are no
   inactive Channels this function will return ``None``. If there are no
   inactive channels and the force argument is ``True``, this will find the
   Channel with the longest running Sound and return it.

   .. ## pygame.mixer.find_channel ##

.. function:: get_busy

   | :sl:`test if any sound is being mixed`
   | :sg:`get_busy() -> bool`

   Returns ``True`` if the mixer is busy mixing any channels. If the mixer is
   idle then this return ``False``.

   .. ## pygame.mixer.get_busy ##

.. function:: get_sdl_mixer_version

   | :sl:`get the mixer's SDL version`
   | :sg:`get_sdl_mixer_version() -> (major, minor, patch)`
   | :sg:`get_sdl_mixer_version(linked=True) -> (major, minor, patch)`

   :param bool linked: if ``True`` (default) the linked version number is
      returned, otherwise the compiled version number is returned

   :returns: the mixer's SDL library version number (linked or compiled
      depending on the ``linked`` parameter) as a tuple of 3 integers
      ``(major, minor, patch)``
   :rtype: tuple

   .. note::
      The linked and compile version numbers should be the same.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.get_sdl_mixer_version ##

.. class:: Sound

   | :sl:`Create a new Sound object from a file or buffer object`
   | :sg:`Sound(filename) -> Sound`
   | :sg:`Sound(file=filename) -> Sound`
   | :sg:`Sound(file=pathlib_path) -> Sound`
   | :sg:`Sound(buffer) -> Sound`
   | :sg:`Sound(buffer=buffer) -> Sound`
   | :sg:`Sound(object) -> Sound`
   | :sg:`Sound(file=object) -> Sound`
   | :sg:`Sound(array=object) -> Sound`

   Load a new sound buffer from a filename, a python file object or a readable
   buffer object. Limited resampling will be performed to help the sample match
   the initialize arguments for the mixer. A Unicode string can only be a file
   pathname. A bytes object can be either a pathname or a buffer object.
   Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may
   guess wrong. If the array keyword is used, the object is expected to export 
   a new buffer interface (The object is checked for a buffer interface first.)

   The Sound object represents actual sound sample data. Methods that change
   the state of the Sound object will the all instances of the Sound playback.
   A Sound object also exports a new buffer interface.

   The Sound can be loaded from an ``OGG`` audio file or from an uncompressed
   ``WAV``.

   Note: The buffer will be copied internally, no data will be shared between
   it and the Sound object.

   For now buffer and array support is consistent with ``sndarray.make_sound``
   for NumPy arrays, in that sample sign and byte order are ignored. This
   will change, either by correctly handling sign and byte order, or by raising
   an exception when different. Also, source samples are truncated to fit the
   audio sample size. This will not change.

   .. versionadded:: 1.8 ``pygame.mixer.Sound(buffer)``
   .. versionadded:: 1.9.2
      :class:`pygame.mixer.Sound` keyword arguments and array interface support
   .. versionadded:: 2.0.1 pathlib.Path support on Python 3.

   .. method:: play

      | :sl:`begin sound playback`
      | :sg:`play(loops=0, maxtime=0, fade_ms=0) -> Channel`

      Begin playback of the Sound (i.e., on the computer's speakers) on an
      available Channel. This will forcibly select a Channel, so playback may
      cut off a currently playing sound if necessary.

      The loops argument controls how many times the sample will be repeated
      after being played the first time. A value of 5 means that the sound will
      be played once, then repeated five times, and so is played a total of six
      times. The default value (zero) means the Sound is not repeated, and so
      is only played once. If loops is set to -1 the Sound will loop
      indefinitely (though you can still call ``stop()`` to stop it).

      The maxtime argument can be used to stop playback after a given number of
      milliseconds.

      The fade_ms argument will make the sound start playing at 0 volume and
      fade up to full volume over the time given. The sample may end before the
      fade-in is complete.

      This returns the Channel object for the channel that was selected.

      .. ## Sound.play ##

   .. method:: stop

      | :sl:`stop sound playback`
      | :sg:`stop() -> None`

      This will stop the playback of this Sound on any active Channels.

      .. ## Sound.stop ##

   .. method:: fadeout

      | :sl:`stop sound playback after fading out`
      | :sg:`fadeout(time) -> None`

      This will stop playback of the sound after fading it out over the time
      argument in milliseconds. The Sound will fade and stop on all actively
      playing channels.

      .. ## Sound.fadeout ##

   .. method:: set_volume

      | :sl:`set the playback volume for this Sound`
      | :sg:`set_volume(value) -> None`

      This will set the playback volume (loudness) for this Sound. This will
      immediately affect the Sound if it is playing. It will also affect any
      future playback of this Sound.

      :param float value: volume in the range of 0.0 to 1.0 (inclusive)

         | If value < 0.0, the volume will not be changed
         | If value > 1.0, the volume will be set to 1.0

      .. ## Sound.set_volume ##

   .. method:: get_volume

      | :sl:`get the playback volume`
      | :sg:`get_volume() -> value`

      Return a value from 0.0 to 1.0 representing the volume for this Sound.

      .. ## Sound.get_volume ##

   .. method:: get_num_channels

      | :sl:`count how many times this Sound is playing`
      | :sg:`get_num_channels() -> count`

      Return the number of active channels this sound is playing on.

      .. ## Sound.get_num_channels ##

   .. method:: get_length

      | :sl:`get the length of the Sound`
      | :sg:`get_length() -> seconds`

      Return the length of this Sound in seconds.

      .. ## Sound.get_length ##

   .. method:: get_raw

      | :sl:`return a bytestring copy of the Sound samples.`
      | :sg:`get_raw() -> bytes`

      Return a copy of the Sound object buffer as a bytes.

      .. versionadded:: 1.9.2

      .. ## Sound.get_raw ##

   .. ## pygame.mixer.Sound ##

.. class:: Channel

   | :sl:`Create a Channel object for controlling playback`
   | :sg:`Channel(id) -> Channel`

   Return a Channel object for one of the current channels. The id must be a
   value from 0 to the value of ``pygame.mixer.get_num_channels()``.

   The Channel object can be used to get fine control over the playback of
   Sounds. A channel can only playback a single Sound at time. Using channels
   is entirely optional since pygame can manage them by default.

   .. method:: play

      | :sl:`play a Sound on a specific Channel`
      | :sg:`play(Sound, loops=0, maxtime=0, fade_ms=0) -> None`

      This will begin playback of a Sound on a specific Channel. If the Channel
      is currently playing any other Sound it will be stopped.

      The loops argument has the same meaning as in ``Sound.play()``: it is the
      number of times to repeat the sound after the first time. If it is 3, the
      sound will be played 4 times (the first time, then three more). If loops
      is -1 then the playback will repeat indefinitely.

      As in ``Sound.play()``, the maxtime argument can be used to stop playback
      of the Sound after a given number of milliseconds.

      As in ``Sound.play()``, the fade_ms argument can be used fade in the
      sound.

      .. ## Channel.play ##

   .. method:: stop

      | :sl:`stop playback on a Channel`
      | :sg:`stop() -> None`

      Stop sound playback on a channel. After playback is stopped the channel
      becomes available for new Sounds to play on it.

      .. ## Channel.stop ##

   .. method:: pause

      | :sl:`temporarily stop playback of a channel`
      | :sg:`pause() -> None`

      Temporarily stop the playback of sound on a channel. It can be resumed at
      a later time with ``Channel.unpause()``

      .. ## Channel.pause ##

   .. method:: unpause

      | :sl:`resume pause playback of a channel`
      | :sg:`unpause() -> None`

      Resume the playback on a paused channel.

      .. ## Channel.unpause ##

   .. method:: fadeout

      | :sl:`stop playback after fading channel out`
      | :sg:`fadeout(time) -> None`

      Stop playback of a channel after fading out the sound over the given time
      argument in milliseconds.

      .. ## Channel.fadeout ##

   .. method:: set_volume

      | :sl:`set the volume of a playing channel`
      | :sg:`set_volume(value) -> None`
      | :sg:`set_volume(left, right) -> None`

      Set the volume (loudness) of a playing sound. When a channel starts to
      play its volume value is reset. This only affects the current sound. The
      value argument is between 0.0 and 1.0.

      If one argument is passed, it will be the volume of both speakers. If two
      arguments are passed and the mixer is in stereo mode, the first argument
      will be the volume of the left speaker and the second will be the volume
      of the right speaker. (If the second argument is ``None``, the first
      argument will be the volume of both speakers.)

      If the channel is playing a Sound on which ``set_volume()`` has also been
      called, both calls are taken into account. For example:

      ::

          sound = pygame.mixer.Sound("s.wav")
          channel = s.play()      # Sound plays at full volume by default
          sound.set_volume(0.9)   # Now plays at 90% of full volume.
          sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
          channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).

      .. ## Channel.set_volume ##

   .. method:: get_volume

      | :sl:`get the volume of the playing channel`
      | :sg:`get_volume() -> value`

      Return the volume of the channel for the current playing sound. This does
      not take into account stereo separation used by
      :meth:`Channel.set_volume`. The Sound object also has its own volume
      which is mixed with the channel.

      .. ## Channel.get_volume ##

   .. method:: get_busy

      | :sl:`check if the channel is active`
      | :sg:`get_busy() -> bool`

      Returns ``True`` if the channel is actively mixing sound. If the channel
      is idle this returns ``False``.

      .. ## Channel.get_busy ##

   .. method:: get_sound

      | :sl:`get the currently playing Sound`
      | :sg:`get_sound() -> Sound`

      Return the actual Sound object currently playing on this channel. If the
      channel is idle ``None`` is returned.

      .. ## Channel.get_sound ##

   .. method:: queue

      | :sl:`queue a Sound object to follow the current`
      | :sg:`queue(Sound) -> None`

      When a Sound is queued on a Channel, it will begin playing immediately
      after the current Sound is finished. Each channel can only have a single
      Sound queued at a time. The queued Sound will only play if the current
      playback finished automatically. It is cleared on any other call to
      ``Channel.stop()`` or ``Channel.play()``.

      If there is no sound actively playing on the Channel then the Sound will
      begin playing immediately.

      .. ## Channel.queue ##

   .. method:: get_queue

      | :sl:`return any Sound that is queued`
      | :sg:`get_queue() -> Sound`

      If a Sound is already queued on this channel it will be returned. Once
      the queued sound begins playback it will no longer be on the queue.

      .. ## Channel.get_queue ##

   .. method:: set_endevent

      | :sl:`have the channel send an event when playback stops`
      | :sg:`set_endevent() -> None`
      | :sg:`set_endevent(type) -> None`

      When an endevent is set for a channel, it will send an event to the
      pygame queue every time a sound finishes playing on that channel (not
      just the first time). Use ``pygame.event.get()`` to retrieve the endevent
      once it's sent.

      Note that if you called ``Sound.play(n)`` or ``Channel.play(sound,n)``,
      the end event is sent only once: after the sound has been played "n+1"
      times (see the documentation of Sound.play).

      If ``Channel.stop()`` or ``Channel.play()`` is called while the sound was
      still playing, the event will be posted immediately.

      The type argument will be the event id sent to the queue. This can be any
      valid event type, but a good choice would be a value between
      ``pygame.locals.USEREVENT`` and ``pygame.locals.NUMEVENTS``. If no type
      argument is given then the Channel will stop sending endevents.

      .. ## Channel.set_endevent ##

   .. method:: get_endevent

      | :sl:`get the event a channel sends when playback stops`
      | :sg:`get_endevent() -> type`

      Returns the event type to be sent every time the Channel finishes
      playback of a Sound. If there is no endevent the function returns
      ``pygame.NOEVENT``.

      .. ## Channel.get_endevent ##

   .. ## pygame.mixer.Channel ##

.. ## pygame.mixer ##


--- Contenu du fichier : music.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer.music`
=========================

.. module:: pygame.mixer.music
   :synopsis: pygame module for controlling streamed audio

| :sl:`pygame module for controlling streamed audio`

The music module is closely tied to :mod:`pygame.mixer`. Use the music module
to control the playback of music in the sound mixer.

The difference between the music playback and regular Sound playback is that
the music is streamed, and never actually loaded all at once. The mixer system
only supports a single music stream at once.

On older pygame versions, ``MP3`` support was limited under Mac and Linux. This
changed in pygame ``v2.0.2`` which got improved MP3 support. Consider using
``OGG`` file format for music as that can give slightly better compression than
MP3 in most cases.

.. function:: load

   | :sl:`Load a music file for playback`
   | :sg:`load(filename) -> None`
   | :sg:`load(fileobj, namehint="") -> None`

   This will load a music filename/file object and prepare it for playback. If
   a music stream is already playing it will be stopped. This does not start
   the music playing.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`load(fileobj, "ogg")`.

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.load ##

.. function:: unload

   | :sl:`Unload the currently loaded music to free up resources`
   | :sg:`unload() -> None`

   This closes resources like files for any music that may be loaded.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.music.load ##


.. function:: play

   | :sl:`Start the playback of the music stream`
   | :sg:`play(loops=0, start=0.0, fade_ms=0) -> None`

   This will play the loaded music stream. If the music is already playing it
   will be restarted.
   
   ``loops`` is an optional integer argument, which is ``0`` by default, which 
   indicates how many times to repeat the music. The music repeats indefinitely if 
   this argument is set to ``-1``. 
   
   ``start`` is an optional float argument, which is ``0.0`` by default, which 
   denotes the position in time from which the music starts playing. The starting 
   position depends on the format of the music played. ``MP3`` and ``OGG`` use 
   the position as time in seconds. For ``MP3`` files the start time position
   selected may not be accurate as things like variable bit rate encoding and ID3
   tags can throw off the timing calculations. For ``MOD``  music it is the pattern 
   order number. Passing a start position will raise a NotImplementedError if 
   the start position cannot be set.

   ``fade_ms`` is an optional integer argument, which is ``0`` by default,
   which denotes the period of time (in milliseconds) over which the music
   will fade up from volume level ``0.0`` to full volume (or the volume level
   previously set by :func:`set_volume`). The sample may end before the fade-in
   is complete. If the music is already streaming ``fade_ms`` is ignored.
   
   .. versionchanged:: 2.0.0 Added optional ``fade_ms`` argument

   .. ## pygame.mixer.music.play ##

.. function:: rewind

   | :sl:`restart music`
   | :sg:`rewind() -> None`

   Resets playback of the current music to the beginning. If :func:`pause` has
   previously been used to pause the music, the music will remain paused.
   
   .. note:: :func:`rewind` supports a limited number of file types and notably
             ``WAV`` files are NOT supported. For unsupported file types use :func:`play`
             which will restart the music that's already playing (note that this
             will start the music playing again even if previously paused).

   .. ## pygame.mixer.music.rewind ##

.. function:: stop

   | :sl:`stop the music playback`
   | :sg:`stop() -> None`

   Stops the music playback if it is currently playing.
   endevent will be triggered, if set.
   It won't unload the music.

   .. ## pygame.mixer.music.stop ##

.. function:: pause

   | :sl:`temporarily stop music playback`
   | :sg:`pause() -> None`

   Temporarily stop playback of the music stream. It can be resumed with the
   :func:`unpause` function.

   .. ## pygame.mixer.music.pause ##

.. function:: unpause

   | :sl:`resume paused music`
   | :sg:`unpause() -> None`

   This will resume the playback of a music stream after it has been paused.

   .. ## pygame.mixer.music.unpause ##

.. function:: fadeout

   | :sl:`stop music playback after fading out`
   | :sg:`fadeout(time) -> None`

   Fade out and stop the currently playing music.

   The ``time`` argument denotes the integer milliseconds for which the 
   fading effect is generated.

   Note, that this function blocks until the music has faded out. Calls 
   to :func:`fadeout` and :func:`set_volume` will have no effect during 
   this time. If an event was set using :func:`set_endevent` it will be 
   called after the music has faded.

   .. ## pygame.mixer.music.fadeout ##

.. function:: set_volume

   | :sl:`set the music volume`
   | :sg:`set_volume(volume) -> None`

   Set the volume of the music playback.
   
   The ``volume`` argument is a float between ``0.0`` and ``1.0`` that sets 
   the volume level. When new music is loaded the volume is reset to full
   volume. If ``volume`` is a negative value it will be ignored and the
   volume will remain set at the current level. If the ``volume`` argument
   is greater than ``1.0``, the volume will be set to ``1.0``.

   .. ## pygame.mixer.music.set_volume ##

.. function:: get_volume

   | :sl:`get the music volume`
   | :sg:`get_volume() -> value`

   Returns the current volume for the mixer. The value will be between ``0.0`` 
   and ``1.0``.

   .. ## pygame.mixer.music.get_volume ##

.. function:: get_busy

   | :sl:`check if the music stream is playing`
   | :sg:`get_busy() -> bool`

   Returns True when the music stream is actively playing. When the music is
   idle this returns False. In pygame 2.0.1 and above this function returns
   False when the music is paused. In pygame 1 it returns True when the music
   is paused.

   .. versionchanged:: 2.0.1 Returns False when music paused.

   .. ## pygame.mixer.music.get_busy ##

.. function:: set_pos

   | :sl:`set position to play from`
   | :sg:`set_pos(pos) -> None`

   This sets the position in the music file where playback will start.
   The meaning of "pos", a float (or a number that can be converted to a float),
   depends on the music format.
   
   For ``MOD`` files, pos is the integer pattern number in the module.
   For ``OGG`` it is the absolute position, in seconds, from
   the beginning of the sound. For ``MP3`` files, it is the relative position,
   in seconds, from the current position. For absolute positioning in an ``MP3``
   file, first call :func:`rewind`.

   Other file formats are unsupported. Newer versions of SDL_mixer have
   better positioning support than earlier ones. An SDLError is raised if a
   particular format does not support positioning.

   Function :func:`set_pos` calls underlining SDL_mixer function
   ``Mix_SetMusicPosition``.

   .. versionadded:: 1.9.2

   .. ## pygame.mixer.music.set_pos ##

.. function:: get_pos

   | :sl:`get the music play time`
   | :sg:`get_pos() -> time`

   This gets the number of milliseconds that the music has been playing for.
   The returned time only represents how long the music has been playing; it
   does not take into account any starting position offsets.

   .. ## pygame.mixer.music.get_pos ##

.. function:: queue

   | :sl:`queue a sound file to follow the current`
   | :sg:`queue(filename) -> None`
   | :sg:`queue(fileobj, namehint="", loops=0) -> None`

   This will load a sound file and queue it. A queued sound file will begin as
   soon as the current sound naturally ends. Only one sound can be queued at a
   time. Queuing a new sound while another sound is queued will result in the
   new sound becoming the queued sound. Also, if the current sound is ever
   stopped or changed, the queued sound will be lost.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`queue(fileobj, "ogg")`.

   The following example will play music by Bach six times, then play music by
   Mozart once:

   ::

       pygame.mixer.music.load('bach.ogg')
       pygame.mixer.music.play(5)        # Plays six times, not five!
       pygame.mixer.music.queue('mozart.ogg')

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.queue ##

.. function:: set_endevent

   | :sl:`have the music send an event when playback stops`
   | :sg:`set_endevent() -> None`
   | :sg:`set_endevent(type) -> None`

   This causes pygame to signal (by means of the event queue) when the music is
   done playing. The argument determines the type of event that will be queued.

   The event will be queued every time the music finishes, not just the first
   time. To stop the event from being queued, call this method with no
   argument.

   .. ## pygame.mixer.music.set_endevent ##

.. function:: get_endevent

   | :sl:`get the event a channel sends when playback stops`
   | :sg:`get_endevent() -> type`

   Returns the event type to be sent every time the music finishes playback. If
   there is no endevent the function returns ``pygame.NOEVENT``.

   .. ## pygame.mixer.music.get_endevent ##

.. ## pygame.mixer.music ##


--- Contenu du fichier : sndarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.sndarray`
======================

.. module:: pygame.sndarray
   :synopsis: pygame module for accessing sound sample data

| :sl:`pygame module for accessing sound sample data`

Functions to convert between NumPy arrays and Sound objects. This
module will only be functional when pygame can use the external NumPy
package. If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule``
object.

Sound data is made of thousands of samples per second, and each sample is the
amplitude of the wave at a particular moment in time. For example, in 22-kHz
format, element number 5 of the array is the amplitude of the wave after
5/22000 seconds.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Each sample is an 8-bit or 16-bit integer, depending on the data format. A
stereo sound file has two values per sample, while a mono sound file only has
one.

.. function:: array

   | :sl:`copy Sound samples into an array`
   | :sg:`array(Sound) -> array`

   Creates a new array for the sound data and copies the samples. The array
   will always be in the format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.array ##

.. function:: samples

   | :sl:`reference Sound samples into an array`
   | :sg:`samples(Sound) -> array`

   Creates a new array that directly references the samples in a Sound object.
   Modifying the array will change the Sound. The array will always be in the
   format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.samples ##

.. function:: make_sound

   | :sl:`convert an array into a Sound object`
   | :sg:`make_sound(array) -> Sound`

   Create a new playable Sound object from an array. The mixer module must be
   initialized and the array format must be similar to the mixer audio format.

   .. ## pygame.sndarray.make_sound ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for sound arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions. The
   only supported arraytype is ``'numpy'``. Other values will raise ValueError.
   Using this function will raise a ``DeprecationWarning``.
   .. ## pygame.sndarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.sndarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytypes ##

.. ## pygame.sndarray ##


--- Contenu du fichier : time.rst.txt ---
.. include:: common.txt

:mod:`pygame.time`
==================

.. module:: pygame.time
   :synopsis: pygame module for monitoring time

| :sl:`pygame module for monitoring time`

Times in pygame are represented in milliseconds (1/1000 seconds). Most
platforms have a limited time resolution of around 10 milliseconds. This
resolution, in milliseconds, is given in the ``TIMER_RESOLUTION`` constant.

.. function:: get_ticks

   | :sl:`get the time in milliseconds`
   | :sg:`get_ticks() -> milliseconds`

   Return the number of milliseconds since ``pygame.init()`` was called. Before
   pygame is initialized this will always be 0.

   .. ## pygame.time.get_ticks ##

.. function:: wait

   | :sl:`pause the program for an amount of time`
   | :sg:`wait(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function sleeps the
   process to share the processor with other programs. A program that waits for
   even a few milliseconds will consume very little processor time. It is
   slightly less accurate than the ``pygame.time.delay()`` function.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.wait ##

.. function:: delay

   | :sl:`pause the program for an amount of time`
   | :sg:`delay(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function will use the
   processor (rather than sleeping) in order to make the delay more accurate
   than ``pygame.time.wait()``.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.delay ##

.. function:: set_timer

   | :sl:`repeatedly create an event on the event queue`
   | :sg:`set_timer(event, millis) -> None`
   | :sg:`set_timer(event, millis, loops=0) -> None`

   Set an event to appear on the event queue every given number of milliseconds.
   The first event will not appear until the amount of time has passed.

   The ``event`` attribute can be a ``pygame.event.Event`` object or an integer
   type that denotes an event.

   ``loops`` is an integer that denotes the number of events posted. If 0 (default)
   then the events will keep getting posted, unless explicitly stopped.

   To disable the timer for such an event, call the function again with the same
   event argument with ``millis`` argument set to 0.

   It is also worth mentioning that a particular event type can only be put on a
   timer once. In other words, there cannot be two timers for the same event type.
   Setting an event timer for a particular event discards the old one for that
   event type.

   ``loops`` replaces the ``once`` argument, and this does not break backward
   compatibility

   .. versionadded:: 2.0.0.dev3 once argument added.
   .. versionchanged:: 2.0.1 event argument supports ``pygame.event.Event`` object
   .. versionadded:: 2.0.1 added loops argument to replace once argument

   .. ## pygame.time.set_timer ##

.. class:: Clock

   | :sl:`create an object to help track time`
   | :sg:`Clock() -> Clock`

   Creates a new Clock object that can be used to track an amount of time. The
   clock also provides several functions to help control a game's framerate.

   .. method:: tick

      | :sl:`update the clock`
      | :sg:`tick(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick(40)`` once per frame, the program will never run at more
      than 40 frames per second.

      Note that this function uses SDL_Delay function which is not accurate on
      every platform, but does not use much CPU. Use tick_busy_loop if you want
      an accurate timer, and don't mind chewing CPU.

      .. ## Clock.tick ##

   .. method:: tick_busy_loop

      | :sl:`update the clock`
      | :sg:`tick_busy_loop(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick_busy_loop(40)`` once per frame, the program will never run at
      more than 40 frames per second.

      Note that this function uses :func:`pygame.time.delay`, which uses lots
      of CPU in a busy loop to make sure that timing is more accurate.

      .. versionadded:: 1.8

      .. ## Clock.tick_busy_loop ##

   .. method:: get_time

      | :sl:`time used in the previous tick`
      | :sg:`get_time() -> milliseconds`

      The number of milliseconds that passed between the previous two calls to
      ``Clock.tick()``.

      .. ## Clock.get_time ##

   .. method:: get_rawtime

      | :sl:`actual time used in the previous tick`
      | :sg:`get_rawtime() -> milliseconds`

      Similar to ``Clock.get_time()``, but does not include any time used
      while ``Clock.tick()`` was delaying to limit the framerate.

      .. ## Clock.get_rawtime ##

   .. method:: get_fps

      | :sl:`compute the clock framerate`
      | :sg:`get_fps() -> float`

      Compute your game's framerate (in frames per second). It is computed by
      averaging the last ten calls to ``Clock.tick()``.

      .. ## Clock.get_fps ##

   .. ## pygame.time.Clock ##

.. ## pygame.time ##


--- Contenu du fichier : surfarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.surfarray`
=======================

.. module:: pygame.surfarray
   :synopsis: pygame module for accessing surface pixel data using array interfaces

| :sl:`pygame module for accessing surface pixel data using array interfaces`

Functions to convert between NumPy arrays and Surface objects. This module
will only be functional when pygame can use the external NumPy package.
If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule`` object.

Every pixel is stored as a single integer value to represent the red, green,
and blue colors. The 8-bit images use a value that looks into a colormap. Pixels
with higher depth use a bit packing process to place three or four values into
a single number.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Arrays that treat the pixels as a single integer are referred to as 2D arrays.
This module can also separate the red, green, and blue color values into
separate indices. These types of arrays are referred to as 3D arrays, and the
last index is 0 for red, 1 for green, and 2 for blue.

The pixels of a 2D array as returned by :func:`array2d` and :func:`pixels2d`
are mapped to the specific surface. Use :meth:`pygame.Surface.unmap_rgb`
to convert to a color, and :meth:`pygame.Surface.map_rgb` to get the surface
specific pixel value of a color. Integer pixel values can only be used directly
between surfaces with matching pixel layouts (see :class:`pygame.Surface`).

All functions that refer to "array" will copy the surface information to a new
numpy array. All functions that refer to "pixels" will directly reference the
pixels from the surface and any changes performed to the array will make changes
in the surface. As this last functions share memory with the surface, this one
will be locked during the lifetime of the array.

.. function:: array2d

   | :sl:`Copy pixels into a 2d array`
   | :sg:`array2d(Surface) -> array`

   Copy the :meth:`mapped <pygame.Surface.map_rgb>` (raw) pixels from a Surface
   into a 2D array.
   The bit depth of the surface will control the size of the integer values,
   and will work for any type of pixel format.

   This function will temporarily lock the Surface as pixels are copied
   (see the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array2d ##

.. function:: pixels2d

   | :sl:`Reference pixels into a 2d array`
   | :sg:`pixels2d(Surface) -> array`

   Create a new 2D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit
   depths can.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels2d ##

.. function:: array3d

   | :sl:`Copy pixels into a 3d array`
   | :sg:`array3d(Surface) -> array`

   Copy the pixels from a Surface into a 3D array. The bit depth of the surface
   will control the size of the integer values, and will work for any type of
   pixel format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array3d ##

.. function:: pixels3d

   | :sl:`Reference pixels into a 3d array`
   | :sg:`pixels3d(Surface) -> array`

   Create a new 3D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This will only work on Surfaces that have 24-bit or 32-bit formats. Lower
   pixel formats cannot be referenced.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels3d ##

.. function:: array_alpha

   | :sl:`Copy pixel alphas into a 2d array`
   | :sg:`array_alpha(Surface) -> array`

   Copy the pixel alpha values (degree of transparency) from a Surface into a
   2D array. This will work for any type of Surface format. Surfaces without a
   pixel alpha will return an array with all opaque values.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array_alpha ##

.. function:: pixels_alpha

   | :sl:`Reference pixel alphas into a 2d array`
   | :sg:`pixels_alpha(Surface) -> array`

   Create a new 2D array that directly references the alpha values (degree of
   transparency) in a Surface. Any changes to the array will affect the pixels
   in the Surface. This is a fast operation since no data is copied.

   This can only work on 32-bit Surfaces with a per-pixel alpha value.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_alpha ##

.. function:: array_red

   | :sl:`Copy red pixels into a 2d array`
   | :sg:`array_red(Surface) -> array`

   Copy the pixel red values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_red ##

.. function:: pixels_red

   | :sl:`Reference pixel red into a 2d array.`
   | :sg:`pixels_red (Surface) -> array`

   Create a new 2D array that directly references the red values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_red ##

.. function:: array_green

   | :sl:`Copy green pixels into a 2d array`
   | :sg:`array_green(Surface) -> array`

   Copy the pixel green values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_green ##

.. function:: pixels_green

   | :sl:`Reference pixel green into a 2d array.`
   | :sg:`pixels_green (Surface) -> array`

   Create a new 2D array that directly references the green values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_green ##

.. function:: array_blue

   | :sl:`Copy blue pixels into a 2d array`
   | :sg:`array_blue(Surface) -> array`

   Copy the pixel blue values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_blue ##

.. function:: pixels_blue

   | :sl:`Reference pixel blue into a 2d array.`
   | :sg:`pixels_blue (Surface) -> array`

   Create a new 2D array that directly references the blue values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_blue ##

.. function:: array_colorkey

   | :sl:`Copy the colorkey values into a 2d array`
   | :sg:`array_colorkey(Surface) -> array`

   Create a new array with the colorkey transparency value from each pixel. If
   the pixel matches the colorkey it will be fully transparent; otherwise it
   will be fully opaque.

   This will work on any type of Surface format. If the image has no colorkey a
   solid opaque array will be returned.

   This function will temporarily lock the Surface as pixels are copied.

   .. ## pygame.surfarray.array_colorkey ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format on the array.
   The array can be 2D or 3D with any sized integer values. Function
   make_surface uses the array struct interface to acquire array properties,
   so is not limited to just NumPy arrays. See :mod:`pygame.pixelcopy`.

   New in pygame 1.9.2: array struct interface support.

   .. ## pygame.surfarray.make_surface ##

.. function:: blit_array

   | :sl:`Blit directly from a array values`
   | :sg:`blit_array(Surface, array) -> None`

   Directly copy values from an array into a Surface. This is faster than
   converting the array into a Surface and blitting. The array must be the same
   dimensions as the Surface and will completely replace all pixel values. Only
   integer, ASCII character and record arrays are accepted.

   This function will temporarily lock the Surface as the new values are
   copied.

   .. ## pygame.surfarray.blit_array ##

.. function:: map_array

   | :sl:`Map a 3d array into a 2d array`
   | :sg:`map_array(Surface, array3d) -> array2d`

   Convert a 3D array into a 2D array. This will use the given Surface format
   to control the conversion. Palette surface formats are supported for NumPy
   arrays.

   .. ## pygame.surfarray.map_array ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for surface arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions.
   The only supported arraytype is ``'numpy'``. Other values will raise
   ValueError. Using this function will raise a ``DeprecationWarning``.

   .. ## pygame.surfarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.surfarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytypes ##

.. ## pygame.surfarray ##


--- Contenu du fichier : sdl2_video.rst.txt ---
.. include:: common.txt

:mod:`pygame.sdl2_video`
========================

.. module:: pygame._sdl2.video
   :synopsis: Experimental pygame module for porting new SDL video systems

.. warning::
	This module isn't ready for prime time yet, it's still in development.
        These docs are primarily meant to help the pygame developers and super-early adopters
        who are in communication with the developers. This API will change.

| :sl:`Experimental pygame module for porting new SDL video systems`

.. class:: Window

   | :sl:`pygame object that represents a window`
   | :sg:`Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -> Window`

   .. classmethod:: from_display_module
   
      | :sl:`Creates window using window created by pygame.display.set_mode().`
      | :sg:`from_display_module() -> Window`

   .. classmethod:: from_window

      | :sl:`Create Window from another window. Could be from another UI toolkit.`
      | :sg:`from_window(other) -> Window`

   .. attribute:: grab

      | :sl:`Gets or sets whether the mouse is confined to the window.`
      | :sg:`grab -> bool`

   .. attribute:: relative_mouse

      | :sl:`Gets or sets the window's relative mouse motion state.`
      | :sg:`relative_mouse -> bool`

   .. method:: set_windowed

      | :sl:`Enable windowed mode (exit fullscreen).`
      | :sg:`set_windowed() -> None`

   .. method:: set_fullscreen

      | :sl:`Enter fullscreen.`
      | :sg:`set_fullscreen(desktop=False) -> None`

   .. attribute:: title

      | :sl:`Gets or sets whether the window title.`
      | :sg:`title -> string`

   .. method:: destroy

      | :sl:`Destroys the window.`
      | :sg:`destroy() -> None`

   .. method:: hide

      | :sl:`Hide the window.`
      | :sg:`hide() -> None`

   .. method:: show

      | :sl:`Show the window.`
      | :sg:`show() -> None`

   .. method:: focus

      | :sl:`Raise the window above other windows and set the input focus. The "input_only" argument is only supported on X11.`
      | :sg:`focus(input_only=False) -> None`

   .. method:: restore

      | :sl:`Restore the size and position of a minimized or maximized window.`
      | :sg:`restore() -> None`

   .. method:: maximize

      | :sl:`Maximize the window.`
      | :sg:`maximize() -> None`

   .. method:: minimize

      | :sl:`Minimize the window.`
      | :sg:`maximize() -> None`

   .. attribute:: resizable

      | :sl:`Gets and sets whether the window is resizable.`
      | :sg:`resizable -> bool`

   .. attribute:: borderless

      | :sl:`Add or remove the border from the window.`
      | :sg:`borderless -> bool`

   .. method:: set_icon

      | :sl:`Set the icon for the window.`
      | :sg:`set_icon(surface) -> None`

   .. attribute:: id

      | :sl:`Get the unique window ID. *Read-only*`
      | :sg:`id -> int`

   .. attribute:: size

      | :sl:`Gets and sets the window size.`
      | :sg:`size -> (int, int)`

   .. attribute:: position

      | :sl:`Gets and sets the window position.`
      | :sg:`position -> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED`	

   .. attribute:: opacity

      | :sl:`Gets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).`
      | :sg:`opacity -> float`

   .. attribute:: display_index

      | :sl:`Get the index of the display that owns the window. *Read-only*`
      | :sg:`display_index -> int`

   .. method:: set_modal_for

      | :sl:`Set the window as a modal for a parent window. This function is only supported on X11.`
      | :sg:`set_modal_for(Window) -> None`

.. class:: Texture	

   | :sl:`pygame object that representing a Texture.`
   | :sg:`Texture(renderer, size, depth=0, static=False, streaming=False, target=False) -> Texture`

   .. staticmethod:: from_surface

      | :sl:`Create a texture from an existing surface.`
      | :sg:`from_surface(renderer, surface) -> Texture`

   .. attribute:: renderer

      | :sl:`Gets the renderer associated with the Texture. *Read-only*`
      | :sg:`renderer -> Renderer`

   .. attribute:: width

      | :sl:`Gets the width of the Texture. *Read-only*`
      | :sg:`width -> int`

   .. attribute:: height

      | :sl:`Gets the height of the Texture. *Read-only*`
      | :sg:`height -> int`

   .. attribute:: alpha

      | :sl:`Gets and sets an additional alpha value multiplied into render copy operations.`
      | :sg:`alpha -> int`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Texture.`
      | :sg:`blend_mode -> int`

   .. attribute:: color

      | :sl:`Gets and sets an additional color value multiplied into render copy operations.`
      | :sg:`color -> color`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the texture.`
      | :sg:`get_rect(**kwargs) -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the texture to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None`

   .. method:: update

      | :sl:`Update the texture with a Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`update(surface, area=None) -> None`

.. class:: Image

   | :sl:`Easy way to use a portion of a Texture without worrying about srcrect all the time.`
   | :sg:`Image(textureOrImage, srcrect=None) -> Image`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the Image.`
      | :sg:`get_rect() -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the Image to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None) -> None`

   .. attribute:: angle

      | :sl:`Gets and sets the angle the Image draws itself with.`
      | :sg:`angle -> float`

   .. attribute:: origin

      | :sl:`Gets and sets the origin. Origin=None means the Image will be rotated around its center.`
      | :sg:`origin -> (float, float) or None.`

   .. attribute:: flip_x

      | :sl:`Gets and sets whether the Image is flipped on the x axis.`
      | :sg:`flip_x -> bool`

   .. attribute:: flip_y

      | :sl:`Gets and sets whether the Image is flipped on the y axis.`
      | :sg:`flip_y -> bool`

   .. attribute:: color

      | :sl:`Gets and sets the Image color modifier.`
      | :sg:`color -> Color`

   .. attribute:: alpha

      | :sl:`Gets and sets the Image alpha modifier.`
      | :sg:`alpha -> float`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Image.`
      | :sg:`blend_mode -> int`

   .. attribute:: texture

      | :sl:`Gets and sets the Texture the Image is based on.`
      | :sg:`texture -> Texture`

   .. attribute:: srcrect

      | :sl:`Gets and sets the Rect the Image is based on.`
      | :sg:`srcrect -> Rect`

.. class:: Renderer

   | :sl:`Create a 2D rendering context for a window.`
   | :sg:`Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer`

   .. classmethod:: from_window

      | :sl:`Easy way to create a Renderer.`
      | :sg:`from_window(window) -> Renderer`

   .. attribute:: draw_blend_mode

      | :sl:`Gets and sets the blend mode used by the drawing functions.`
      | :sg:`draw_blend_mode -> int`   

   .. attribute:: draw_color

      | :sl:`Gets and sets the color used by the drawing functions.`
      | :sg:`draw_color -> Color`

   .. method:: clear

      | :sl:`Clear the current rendering target with the drawing color.`
      | :sg:`clear() -> None`

   .. method:: present

      | :sl:`Updates the screen with any new rendering since previous call.`
      | :sg:`present() -> None`	

   .. method:: get_viewport

      | :sl:`Returns the drawing area on the target.`
      | :sg:`get_viewport() -> Rect`

   .. method:: set_viewport

      | :sl:`Set the drawing area on the target. If area is None, the entire target will be used.`
      | :sg:`set_viewport(area) -> None`

   .. attribute:: logical_size

      | :sl:`Gets and sets the logical size.`
      | :sg:`logical_size -> (int width, int height)`

   .. attribute:: scale

      | :sl:`Gets and sets the scale.`
      | :sg:`scale -> (float x_scale, float y_scale)`

   .. attribute:: target

      | :sl:`Gets and sets the render target. None represents the default target (the renderer).`
      | :sg:`target -> Texture or None`

   .. method:: blit

      | :sl:`For compatibility purposes. Textures created by different Renderers cannot be shared!`
      | :sg:`blit(source, dest, area=None, special_flags=0)-> Rect`

   .. method:: draw_line

      | :sl:`Draws a line.`
      | :sg:`draw_line(p1, p2) -> None`

   .. method:: draw_point

      | :sl:`Draws a point.`
      | :sg:`draw_point(point) -> None`

   .. method:: draw_rect

      | :sl:`Draws a rectangle.`
      | :sg:`draw_rect(rect)-> None`

   .. method:: fill_rect

      | :sl:`Fills a rectangle.`
      | :sg:`fill_rect(rect)-> None`

   .. method:: to_surface

      | :sl:`Read pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`to_surface(surface=None, area=None)-> Surface`

--- Contenu du fichier : font.rst.txt ---
.. include:: common.txt

:mod:`pygame.font`
==================

.. module:: pygame.font
   :synopsis: pygame module for loading and rendering fonts

| :sl:`pygame module for loading and rendering fonts`

The font module allows for rendering TrueType fonts into Surface objects.
This module is built on top of the SDL_ttf library, which comes with all
normal pygame installations.

Most of the work done with fonts are done by using the actual Font objects.
The module by itself only has routines to support the creation of Font objects
with :func:`pygame.font.Font`.

You can load fonts from the system by using the :func:`pygame.font.SysFont`
function. There are a few other functions to help look up the system fonts.

Pygame comes with a builtin default font, freesansbold. This can always be
accessed by passing ``None`` as the font name.

Before pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character
('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf
2.0.15 accepts any valid UCS-4 / UTF-32 character 
(like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')).
More about this in :func:`Font.render`.

Before pygame 2.0.3, this character space restriction can be avoided by
using the  :mod:`pygame.freetype` based ``pygame.ftfont`` to emulate the Font
module. This can be used by defining the environment variable PYGAME_FREETYPE
before the first import of :mod:`pygame`. Since the problem ``pygame.ftfont``
solves no longer exists, it will likely be removed in the future.

.. function:: init

   | :sl:`initialize the font module`
   | :sg:`init() -> None`

   This method is called automatically by ``pygame.init()``. It initializes the
   font module. The module must be initialized before any other functions will
   work.

   It is safe to call this function more than once.

   .. ## pygame.font.init ##

.. function:: quit

   | :sl:`uninitialize the font module`
   | :sg:`quit() -> None`

   Manually uninitialize SDL_ttf's font system. This is called automatically by
   ``pygame.quit()``.

   It is safe to call this function even if font is currently not initialized.

   .. ## pygame.font.quit ##

.. function:: get_init

   | :sl:`true if the font module is initialized`
   | :sg:`get_init() -> bool`

   Test if the font module is initialized or not.

   .. ## pygame.font.get_init ##

.. function:: get_default_font

   | :sl:`get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the system font. This is not the full path to the
   file. This file can usually be found in the same directory as the font
   module, but it can also be bundled in separate archives.

   .. ## pygame.font.get_default_font ##

.. function:: get_sdl_ttf_version

   | :sl:`gets SDL_ttf version`
   | :sg:`get_sdl_ttf_version(linked=True) -> (major, minor, patch)`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave get_sdl_ttf_version feedback with authors <https://github.com/pygame/pygame/pull/3095>`_

   Returns a tuple of integers that identify SDL_ttf's version.
   SDL_ttf is the underlying font rendering library, written in C,
   on which pygame's font module depends. If 'linked' is True (the default), 
   the function returns the version of the linked TTF library. 
   Otherwise this function returns the version of TTF pygame was compiled with

   .. versionadded:: 2.1.3

   .. ## pygame.font.get_sdl_ttf_version ##

.. function:: get_fonts

   | :sl:`get all available fonts`
   | :sg:`get_fonts() -> list of strings`

   Returns a list of all the fonts available on the system. The names of the
   fonts will be set to lowercase with all spaces and punctuation removed. This
   works on most systems, but some will return an empty list if they cannot
   find fonts.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.get_fonts ##

.. function:: match_font

   | :sl:`find a specific font on the system`
   | :sg:`match_font(name, bold=False, italic=False) -> path`

   Returns the full path to a font file on the system. If bold or italic are
   set to true, this will attempt to find the correct family of font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.
   If none of the given names are found, None is returned.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   Example:

   ::

       print pygame.font.match_font('bitstreamverasans')
       # output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf
       # (but only if you have Vera on your system)

   .. ## pygame.font.match_font ##

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested bold and italic flags. Pygame uses a small set of common
   font aliases. If the specific font you ask for is not available, a reasonable
   alternative may be used. If a suitable system font is not found this will
   fall back on loading the default pygame font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.SysFont ##

.. class:: Font

   | :sl:`create a new Font object from a file`
   | :sg:`Font(file_path=None, size=12) -> Font`
   | :sg:`Font(file_path, size) -> Font`
   | :sg:`Font(pathlib.Path, size) -> Font`
   | :sg:`Font(object, size) -> Font`

   Load a new font from a given filename or a python file object. The size is
   the height of the font in pixels. If the filename is ``None`` the pygame
   default font will be loaded. If a font cannot be loaded from the arguments
   given an exception will be raised. Once the font is created the size cannot
   be changed. If no arguments are given then the default font will be used and
   a font size of 12 is used.

   Font objects are mainly used to render text into new Surface objects. The
   render can emulate bold or italic features, but it is better to load from a
   font with actual italic or bold glyphs.

   .. attribute:: bold

      | :sl:`Gets or sets whether the font should be rendered in (faked) bold.`
      | :sg:`bold -> bool`

      Whether the font should be rendered in bold.

      When set to True, this enables the bold rendering of text. This
      is a fake stretching of the font that doesn't look good on many
      font types. If possible load the font from a real bold font
      file. While bold, the font will have a different width than when
      normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.bold ##

   .. attribute:: italic

      | :sl:`Gets or sets whether the font should be rendered in (faked) italics.`
      | :sg:`italic -> bool`

      Whether the font should be rendered in italic.

      When set to True, this enables fake rendering of italic
      text. This is a fake skewing of the font that doesn't look good
      on many font types. If possible load the font from a real italic
      font file. While italic the font will have a different width
      than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.italic ##

   .. attribute:: underline

      | :sl:`Gets or sets whether the font should be rendered with an underline.`
      | :sg:`underline -> bool`

      Whether the font should be rendered in underline.

      When set to True, all rendered fonts will include an
      underline. The underline is always one pixel thick, regardless
      of font size. This can be mixed with the bold, italic and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.underline ##
   
   .. attribute:: strikethrough

      | :sl:`Gets or sets whether the font should be rendered with a strikethrough.`
      | :sg:`strikethrough -> bool`

      Whether the font should be rendered with a strikethrough.

      When set to True, all rendered fonts will include an
      strikethrough. The strikethrough is always one pixel thick,
      regardless of font size. This can be mixed with the bold,
      italic and underline modes.

      .. versionadded:: 2.1.3

      .. ## Font.strikethrough ##

   .. method:: render

      | :sl:`draw text on a new Surface`
      | :sg:`render(text, antialias, color, background=None) -> Surface`

      This creates a new Surface with the specified text rendered on it. 
      :mod:`pygame.font` provides no way to directly draw text on an existing
      Surface: instead you must use :func:`Font.render` to create an image
      (Surface) of the text, then blit this image onto another Surface.

      The text can only be a single line: newline characters are not rendered.
      Null characters ('\x00') raise a TypeError. Both Unicode and char (byte)
      strings are accepted. For Unicode strings only UCS-2 characters
      ('\\u0001' to '\\uFFFF') were previously supported and any greater
      unicode codepoint would raise a UnicodeError. Now, characters in the
      UCS-4 range are supported. For char strings a ``LATIN1`` encoding is
      assumed. The antialias argument is a boolean: if True the characters
      will have smooth edges. The color argument is the color of the text
      [e.g.: (0,0,255) for blue]. The optional background argument is a color
      to use for the text background. If no background is passed the area
      outside the text will be transparent.

      The Surface returned will be of the dimensions required to hold the text.
      (the same as those returned by :func:`Font.size`). If an empty string is passed
      for the text, a blank surface will be returned that is zero pixel wide and
      the height of the font.

      Depending on the type of background and antialiasing used, this returns
      different types of Surfaces. For performance reasons, it is good to know
      what type of image will be used. If antialiasing is not used, the return
      image will always be an 8-bit image with a two-color palette. If the
      background is transparent a colorkey will be set. Antialiased images are
      rendered to 24-bit ``RGB`` images. If the background is transparent a
      pixel alpha will be included.

      Optimization: if you know that the final destination for the text (on the
      screen) will always have a solid background, and the text is antialiased,
      you can improve performance by specifying the background color. This will
      cause the resulting image to maintain transparency information by
      colorkey rather than (much less efficient) alpha values.

      If you render '\\n' an unknown char will be rendered. Usually a
      rectangle. Instead you need to handle newlines yourself.

      Font rendering is not thread safe: only a single thread can render text
      at any time.

      .. versionchanged:: 2.0.3 Rendering UCS4 unicode works and does not
        raise an exception. Use `if hasattr(pygame.font, "UCS4"):` to see if
        pygame supports rendering UCS4 unicode including more languages and
        emoji.

      .. ## Font.render ##

   .. method:: size

      | :sl:`determine the amount of space needed to render text`
      | :sg:`size(text) -> (width, height)`

      Returns the dimensions needed to render the text. This can be used to
      help determine the positioning needed for text before it is rendered. It
      can also be used for word wrapping and other layout effects.

      Be aware that most fonts use kerning which adjusts the widths for
      specific letter pairs. For example, the width for "ae" will not always
      match the width for "a" + "e".

      .. ## Font.size ##

   .. method:: set_underline

      | :sl:`control if text is rendered with an underline`
      | :sg:`set_underline(bool) -> None`

      When enabled, all rendered fonts will include an underline. The underline
      is always one pixel thick, regardless of font size. This can be mixed
      with the bold, italic and strikethrough modes.

      .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.set_underline ##

   .. method:: get_underline

      | :sl:`check if text will be rendered with an underline`
      | :sg:`get_underline() -> bool`

      Return True when the font underline is enabled.

       .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.get_underline ##
   
   .. method:: set_strikethrough

      | :sl:`control if text is rendered with a strikethrough`
      | :sg:`set_strikethrough(bool) -> None`

      When enabled, all rendered fonts will include a strikethrough. The
      strikethrough is always one pixel thick, regardless of font size.
      This can be mixed with the bold, italic and underline modes.

      .. note:: This is the same as the :attr:`strikethrough` attribute.
      
      .. versionadded:: 2.1.3

      .. ## Font.set_strikethrough ##

   .. method:: get_strikethrough

      | :sl:`check if text will be rendered with a strikethrough`
      | :sg:`get_strikethrough() -> bool`

      Return True when the font strikethrough is enabled.

       .. note:: This is the same as the :attr:`strikethrough` attribute.
       
       .. versionadded:: 2.1.3

      .. ## Font.get_strikethrough ##

   .. method:: set_bold

      | :sl:`enable fake rendering of bold text`
      | :sg:`set_bold(bool) -> None`

      Enables the bold rendering of text. This is a fake stretching of the font
      that doesn't look good on many font types. If possible load the font from
      a real bold font file. While bold, the font will have a different width
      than when normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.set_bold ##

   .. method:: get_bold

      | :sl:`check if text will be rendered bold`
      | :sg:`get_bold() -> bool`

      Return True when the font bold rendering mode is enabled.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.get_bold ##

   .. method:: set_italic

      | :sl:`enable fake rendering of italic text`
      | :sg:`set_italic(bool) -> None`

      Enables fake rendering of italic text. This is a fake skewing of the font
      that doesn't look good on many font types. If possible load the font from
      a real italic font file. While italic the font will have a different
      width than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.set_italic ##

   .. method:: metrics

      | :sl:`gets the metrics for each character in the passed string`
      | :sg:`metrics(text) -> list`

      The list contains tuples for each character, which contain the minimum
      ``X`` offset, the maximum ``X`` offset, the minimum ``Y`` offset, the
      maximum ``Y`` offset and the advance offset (bearing plus width) of the
      character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy,
      advance), ...]. None is entered in the list for each unrecognized
      character.

      .. ## Font.metrics ##

   .. method:: get_italic

      | :sl:`check if the text will be rendered italic`
      | :sg:`get_italic() -> bool`

      Return True when the font italic rendering mode is enabled.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.get_italic ##

   .. method:: get_linesize

      | :sl:`get the line space of the font text`
      | :sg:`get_linesize() -> int`

      Return the height in pixels for a line of text with the font. When
      rendering multiple lines of text this is the recommended amount of space
      between lines.

      .. ## Font.get_linesize ##

   .. method:: get_height

      | :sl:`get the height of the font`
      | :sg:`get_height() -> int`

      Return the height in pixels of the actual rendered text. This is the
      average size for each glyph in the font.

      .. ## Font.get_height ##

   .. method:: get_ascent

      | :sl:`get the ascent of the font`
      | :sg:`get_ascent() -> int`

      Return the height in pixels for the font ascent. The ascent is the number
      of pixels from the font baseline to the top of the font.

      .. ## Font.get_ascent ##

   .. method:: get_descent

      | :sl:`get the descent of the font`
      | :sg:`get_descent() -> int`

      Return the height in pixels for the font descent. The descent is the
      number of pixels from the font baseline to the bottom of the font.

      .. ## Font.get_descent ##

   .. method:: set_script

      | :sl:`set the script code for text shaping`
      | :sg:`set_script(str) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave feedback with authors <https://github.com/pygame/pygame/pull/3330>`_

      Sets the script used by harfbuzz text shaping, taking a 4 character
      script code as input. For example, Hindi is written in the Devanagari
      script, for which the script code is `"Deva"`. See the full list of
      script codes in `ISO 15924 <https://www.unicode.org/iso15924/iso15924-codes.html>`_.

      This method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the
      method will raise a pygame.error.

      .. versionadded:: 2.2.0

      .. ## Font.set_script ## 

   .. ## pygame.font.Font ##

.. ## pygame.font ##


--- Contenu du fichier : sprite.rst.txt ---
.. include:: common.txt

:mod:`pygame.sprite`
====================

.. module:: pygame.sprite
   :synopsis: pygame module with basic game object classes

| :sl:`pygame module with basic game object classes`

This module contains several simple classes to be used within games. There is
the main Sprite class and several Group classes that contain Sprites. The use
of these classes is entirely optional when using pygame. The classes are fairly
lightweight and only provide a starting place for the code that is common to
most games.

The Sprite class is intended to be used as a base class for the different types
of objects in the game. There is also a base Group class that simply stores
sprites. A game could create new types of Group classes that operate on
specially customized Sprite instances they contain.

The basic Group class can draw the Sprites it contains to a Surface. The
``Group.draw()`` method requires that each Sprite have a ``Surface.image``
attribute and a ``Surface.rect``. The ``Group.clear()`` method requires these
same attributes, and can be used to erase all the Sprites with background.
There are also more advanced Groups: ``pygame.sprite.RenderUpdates()`` and
``pygame.sprite.OrderedUpdates()``.

Lastly, this module contains several collision functions. These help find
sprites inside multiple groups that have intersecting bounding rectangles. To
find the collisions, the Sprites are required to have a ``Surface.rect``
attribute assigned.

The groups are designed for high efficiency in removing and adding Sprites to
them. They also allow cheap testing to see if a Sprite already exists in a
Group. A given Sprite can exist in any number of groups. A game could use some
groups to control object rendering, and a completely separate set of groups to
control interaction or player movement. Instead of adding type attributes or
bools to a derived Sprite class, consider keeping the Sprites inside organized
Groups. This will allow for easier lookup later in the game.

Sprites and Groups manage their relationships with the ``add()`` and
``remove()`` methods. These methods can accept a single or multiple targets for
membership. The default initializers for these classes also takes a single or
list of targets for initial membership. It is safe to repeatedly add and remove
the same Sprite from a Group.

While it is possible to design sprite and group classes that don't derive from
the Sprite and AbstractGroup classes below, it is strongly recommended that you
extend those when you add a Sprite or Group class.

Sprites are not thread safe. So lock them yourself if using threads.

.. class:: Sprite

   | :sl:`Simple base class for visible game objects.`
   | :sg:`Sprite(*groups) -> Sprite`

   The base class for visible game objects. Derived classes will want to
   override the ``Sprite.update()`` and assign a ``Sprite.image`` and
   ``Sprite.rect`` attributes. The initializer can accept any number of Group
   instances to be added to.

   When subclassing the Sprite, be sure to call the base initializer before
   adding the Sprite to Groups. For example:

   .. code-block:: python
   
       class Block(pygame.sprite.Sprite):
            
           # Constructor. Pass in the color of the block, 
           # and its x and y position
           def __init__(self, color, width, height):
              # Call the parent class (Sprite) constructor
              pygame.sprite.Sprite.__init__(self) 
        
              # Create an image of the block, and fill it with a color.
              # This could also be an image loaded from the disk.
              self.image = pygame.Surface([width, height])
              self.image.fill(color)
        
              # Fetch the rectangle object that has the dimensions of the image
              # Update the position of this object by setting the values of rect.x and rect.y
              self.rect = self.image.get_rect()   
      
   .. method:: update

      | :sl:`method to control sprite behavior`
      | :sg:`update(*args, **kwargs) -> None`

      The default implementation of this method does nothing; it's just a
      convenient "hook" that you can override. This method is called by
      ``Group.update()`` with whatever arguments you give it.

      There is no need to use this method if not using the convenience method
      by the same name in the Group class.

      .. ## Sprite.update ##

   .. method:: add

      | :sl:`add the sprite to groups`
      | :sg:`add(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be added to the Groups it is not already a member of.

      .. ## Sprite.add ##

   .. method:: remove

      | :sl:`remove the sprite from groups`
      | :sg:`remove(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be removed from the Groups it is currently a member of.

      .. ## Sprite.remove ##

   .. method:: kill

      | :sl:`remove the Sprite from all Groups`
      | :sg:`kill() -> None`

      The Sprite is removed from all the Groups that contain it. This won't
      change anything about the state of the Sprite. It is possible to continue
      to use the Sprite after this method has been called, including adding it
      to Groups.

      .. ## Sprite.kill ##

   .. method:: alive

      | :sl:`does the sprite belong to any groups`
      | :sg:`alive() -> bool`

      Returns True when the Sprite belongs to one or more Groups.

      .. ## Sprite.alive ##

   .. method:: groups

      | :sl:`list of Groups that contain this Sprite`
      | :sg:`groups() -> group_list`

      Return a list of all the Groups that contain this Sprite.

      .. ## Sprite.groups ##

   .. ## pygame.sprite.Sprite ##

.. class:: WeakSprite

   | :sl:`A subclass of Sprite that references its Groups weakly. This means that any group this belongs to that is not referenced anywhere else is garbage collected automatically.`
   | :sg:`WeakSprite(*groups) -> WeakSprite`

.. class:: DirtySprite

   | :sl:`A subclass of Sprite with more attributes and features.`
   | :sg:`DirtySprite(*groups) -> DirtySprite`

   Extra DirtySprite attributes with their default values:

   dirty = 1

   ::

       if set to 1, it is repainted and then set to 0 again
       if set to 2 then it is always dirty ( repainted each frame,
       flag is not reset)
       0 means that it is not dirty and therefore not repainted again

   blendmode = 0

   ::

       its the special_flags argument of blit, blendmodes

   source_rect = None

   ::

       source rect to use, remember that it is relative to
       topleft (0,0) of self.image

   visible = 1

   ::

       normally 1, if set to 0 it will not be repainted
       (you must set it dirty too to be erased from screen)

   layer = 0

   ::

       (READONLY value, it is read when adding it to the
       LayeredDirty, for details see doc of LayeredDirty)

   .. ##  ##

   .. ## pygame.sprite.DirtySprite ##

.. class:: Group

   | :sl:`A container class to hold and manage multiple Sprite objects.`
   | :sg:`Group(*sprites) -> Group`

   A simple container for Sprite objects. This class can be inherited to create
   containers with more specific behaviors. The constructor takes any number of
   Sprite arguments to add to the Group. The group supports the following
   standard Python operations:

   ::

       in      test if a Sprite is contained
       len     the number of Sprites contained
       bool    test if any Sprites are contained
       iter    iterate through all the Sprites

   The Sprites in the Group are ordered only on python 3.6 and higher.
   Below python 3.6 drawing and iterating over the Sprites is in no particular order.

   .. method:: sprites

      | :sl:`list of the Sprites this Group contains`
      | :sg:`sprites() -> sprite_list`

      Return a list of all the Sprites this group contains. You can also get an
      iterator from the group, but you cannot iterate over a Group while
      modifying it.

      .. ## Group.sprites ##

   .. method:: copy

      | :sl:`duplicate the Group`
      | :sg:`copy() -> Group`

      Creates a new Group with all the same Sprites as the original. If you
      have subclassed Group, the new object will have the same (sub-)class as
      the original. This only works if the derived class's constructor takes
      the same arguments as the Group class's.

      .. ## Group.copy ##

   .. method:: add

      | :sl:`add Sprites to this Group`
      | :sg:`add(*sprites) -> None`

      Add any number of Sprites to this Group. This will only add Sprites that
      are not already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.add ##

   .. method:: remove

      | :sl:`remove Sprites from the Group`
      | :sg:`remove(*sprites) -> None`

      Remove any number of Sprites from the Group. This will only remove
      Sprites that are already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.remove ##

   .. method:: has

      | :sl:`test if a Group contains Sprites`
      | :sg:`has(*sprites) -> bool`

      Return True if the Group contains all of the given sprites. This is
      similar to using the "in" operator on the Group ("if sprite in group:
      ..."), which tests if a single Sprite belongs to a Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.has ##

   .. method:: update

      | :sl:`call the update method on contained Sprites`
      | :sg:`update(*args, **kwargs) -> None`

      Calls the ``update()`` method on all Sprites in the Group. The base
      Sprite class has an update method that takes any number of arguments and
      does nothing. The arguments passed to ``Group.update()`` will be passed
      to each Sprite.

      There is no way to get the return value from the ``Sprite.update()``
      methods.

      .. ## Group.update ##

   .. method:: draw

      | :sl:`blit the Sprite images`
      | :sg:`draw(Surface, bgsurf=None, special_flags=0) -> List[Rect]`

      Draws the contained Sprites to the Surface argument. This uses the
      ``Sprite.image`` attribute for the source surface, and ``Sprite.rect``
      for the position. ``special_flags`` is passed to ``Surface.blit()``.
      ``bgsurf`` is unused in this method but ``LayeredDirty.draw()`` uses
      it.

      The Group does not keep sprites in any order, so the draw order is
      arbitrary.

      .. ## Group.draw ##

   .. method:: clear

      | :sl:`draw a background over the Sprites`
      | :sg:`clear(Surface_dest, background) -> None`

      Erases the Sprites used in the last ``Group.draw()`` call. The
      destination Surface is cleared by filling the drawn Sprite positions with
      the background.

      The background is usually a Surface image the same dimensions as the
      destination Surface. However, it can also be a callback function that
      takes two arguments; the destination Surface and an area to clear. The
      background callback function will be called several times each clear.

      Here is an example callback that will clear the Sprites with solid red:

      ::

          def clear_callback(surf, rect):
              color = 255, 0, 0
              surf.fill(color, rect)

      .. ## Group.clear ##

   .. method:: empty

      | :sl:`remove all Sprites`
      | :sg:`empty() -> None`

      Removes all Sprites from this Group.

      .. ## Group.empty ##

   .. ## pygame.sprite.Group ##

.. class:: WeakDirtySprite

   | :sl:`A subclass of WeakSprite and DirtySprite that combines the benefits of both classes.`
   | :sg:`WeakDirtySprite(*groups) -> WeakDirtySprite`

.. class:: RenderPlain

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderClear

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderUpdates

   | :sl:`Group sub-class that tracks dirty updates.`
   | :sg:`RenderUpdates(*sprites) -> RenderUpdates`

   This class is derived from ``pygame.sprite.Group()``. It has an extended
   ``draw()`` method that tracks the changed areas of the screen.

   .. method:: draw

      | :sl:`blit the Sprite images and track changed areas`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      Draws all the Sprites to the surface, the same as ``Group.draw()``. This
      method also returns a list of Rectangular areas on the screen that have
      been changed. The returned changes include areas of the screen that have
      been affected by previous ``Group.clear()`` calls. ``special_flags`` is
      passed to ``Surface.blit()``.

      The returned Rect list should be passed to ``pygame.display.update()``.
      This will help performance on software driven display modes. This type of
      updating is usually only helpful on destinations with non-animating
      backgrounds.

      .. ## RenderUpdates.draw ##

   .. ## pygame.sprite.RenderUpdates ##

.. function:: OrderedUpdates

   | :sl:`RenderUpdates sub-class that draws Sprites in order of addition.`
   | :sg:`OrderedUpdates(*sprites) -> OrderedUpdates`

   This class derives from ``pygame.sprite.RenderUpdates()``. It maintains the
   order in which the Sprites were added to the Group for rendering. This makes
   adding and removing Sprites from the Group a little slower than regular
   Groups.

   .. ## pygame.sprite.OrderedUpdates ##

.. class:: LayeredUpdates

   | :sl:`LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.`
   | :sg:`LayeredUpdates(*sprites, **kwargs) -> LayeredUpdates`

   This group is fully compatible with :class:`pygame.sprite.Sprite`.

   You can set the default layer through kwargs using 'default_layer' and an
   integer for the layer. The default layer is 0.

   If the sprite you add has an attribute _layer then that layer will be used.
   If the \**kwarg contains 'layer' then the sprites passed will be added to
   that layer (overriding the ``sprite.layer`` attribute). If neither sprite
   has attribute layer nor \**kwarg then the default layer is used to add the
   sprites.

   .. versionadded:: 1.8

   .. method:: add

      | :sl:`add a sprite or sequence of sprites to a group`
      | :sg:`add(*sprites, **kwargs) -> None`

      If the ``sprite(s)`` have an attribute layer then that is used for the
      layer. If \**kwargs contains 'layer' then the ``sprite(s)`` will be added
      to that argument (overriding the sprite layer attribute). If neither is
      passed then the ``sprite(s)`` will be added to the default layer.

      .. ## LayeredUpdates.add ##

   .. method:: sprites

      | :sl:`returns a ordered list of sprites (first back, last top).`
      | :sg:`sprites() -> sprites`

      .. ## LayeredUpdates.sprites ##

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      .. ## LayeredUpdates.draw ##

   .. method:: get_sprites_at

      | :sl:`returns a list with all sprites at that position.`
      | :sg:`get_sprites_at(pos) -> colliding_sprites`

      Bottom sprites first, top last.

      .. ## LayeredUpdates.get_sprites_at ##

   .. method:: get_sprite

      | :sl:`returns the sprite at the index idx from the groups sprites`
      | :sg:`get_sprite(idx) -> sprite`

      Raises IndexOutOfBounds if the idx is not within range.

      .. ## LayeredUpdates.get_sprite ##

   .. method:: remove_sprites_of_layer

      | :sl:`removes all sprites from a layer and returns them as a list.`
      | :sg:`remove_sprites_of_layer(layer_nr) -> sprites`

      .. ## LayeredUpdates.remove_sprites_of_layer ##

   .. method:: layers

      | :sl:`returns a list of layers defined (unique), sorted from bottom up.`
      | :sg:`layers() -> layers`

      .. ## LayeredUpdates.layers ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredUpdates.change_layer ##

   .. method:: get_layer_of_sprite

      | :sl:`returns the layer that sprite is currently in.`
      | :sg:`get_layer_of_sprite(sprite) -> layer`

      If the sprite is not found then it will return the default layer.

      .. ## LayeredUpdates.get_layer_of_sprite ##

   .. method:: get_top_layer

      | :sl:`returns the top layer`
      | :sg:`get_top_layer() -> layer`

      .. ## LayeredUpdates.get_top_layer ##

   .. method:: get_bottom_layer

      | :sl:`returns the bottom layer`
      | :sg:`get_bottom_layer() -> layer`

      .. ## LayeredUpdates.get_bottom_layer ##

   .. method:: move_to_front

      | :sl:`brings the sprite to front layer`
      | :sg:`move_to_front(sprite) -> None`

      Brings the sprite to front, changing sprite layer to topmost layer (added
      at the end of that layer).

      .. ## LayeredUpdates.move_to_front ##

   .. method:: move_to_back

      | :sl:`moves the sprite to the bottom layer`
      | :sg:`move_to_back(sprite) -> None`

      Moves the sprite to the bottom layer, moving it behind all other layers
      and adding one additional layer.

      .. ## LayeredUpdates.move_to_back ##

   .. method:: get_top_sprite

      | :sl:`returns the topmost sprite`
      | :sg:`get_top_sprite() -> Sprite`

      .. ## LayeredUpdates.get_top_sprite ##

   .. method:: get_sprites_from_layer

      | :sl:`returns all sprites from a layer, ordered by how they where added`
      | :sg:`get_sprites_from_layer(layer) -> sprites`

      Returns all sprites from a layer, ordered by how they where added. It
      uses linear search and the sprites are not removed from layer.

      .. ## LayeredUpdates.get_sprites_from_layer ##

   .. method:: switch_layer

      | :sl:`switches the sprites from layer1 to layer2`
      | :sg:`switch_layer(layer1_nr, layer2_nr) -> None`

      The layers number must exist, it is not checked.

      .. ## LayeredUpdates.switch_layer ##

   .. ## pygame.sprite.LayeredUpdates ##

.. class:: LayeredDirty

   | :sl:`LayeredDirty group is for DirtySprite objects.  Subclasses LayeredUpdates.`
   | :sg:`LayeredDirty(*sprites, **kwargs) -> LayeredDirty`

   This group requires :class:`pygame.sprite.DirtySprite` or any sprite that
   has the following attributes:

   ::

       image, rect, dirty, visible, blendmode (see doc of DirtySprite).

   It uses the dirty flag technique and is therefore faster than the
   :class:`pygame.sprite.RenderUpdates` if you have many static sprites. It
   also switches automatically between dirty rect update and full screen
   drawing, so you do not have to worry what would be faster.

   Same as for the :class:`pygame.sprite.Group`. You can specify some
   additional attributes through kwargs:

   ::

       _use_update: True/False   default is False
       _default_layer: default layer where sprites without a layer are added.
       _time_threshold: threshold time for switching between dirty rect mode
           and fullscreen mode, defaults to 1000./80  == 1000./fps

   .. versionadded:: 1.8

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=None) -> Rect_list`

      You can pass the background too. If a background is already set, then the
      bgsurf argument has no effect. If present, the ``special_flags`` argument is
      always passed to ``Surface.blit()``, overriding ``DirtySprite.blendmode``. 
      If ``special_flags`` is not present, ``DirtySprite.blendmode`` is passed
      to the ``Surface.blit()`` instead.

      .. ## LayeredDirty.draw ##

   .. method:: clear

      | :sl:`used to set background`
      | :sg:`clear(surface, bgd) -> None`

      .. ## LayeredDirty.clear ##

   .. method:: repaint_rect

      | :sl:`repaints the given area`
      | :sg:`repaint_rect(screen_rect) -> None`

      screen_rect is in screen coordinates.

      .. ## LayeredDirty.repaint_rect ##

   .. method:: set_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`set_clip(screen_rect=None) -> None`

      .. ## LayeredDirty.set_clip ##

   .. method:: get_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`get_clip() -> Rect`

      .. ## LayeredDirty.get_clip ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredDirty.change_layer ##

   .. method:: set_timing_treshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_treshold(time_ms) -> None`

      DEPRECATED: Use set_timing_threshold() instead.

      .. deprecated:: 2.1.1

      .. ## LayeredDirty.set_timing_treshold ##

   .. method:: set_timing_threshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_threshold(time_ms) -> None`

      Defaults to 1000.0 / 80.0. This means that the screen will be painted
      using the flip method rather than the update method if the update
      method is taking so long to update the screen that the frame rate falls
      below 80 frames per second.

      .. versionadded:: 2.1.1

      :raises TypeError: if ``time_ms`` is not int or float

      .. ## LayeredDirty.set_timing_threshold ##

   .. ## pygame.sprite.LayeredDirty ##

.. function:: GroupSingle

   | :sl:`Group container that holds a single sprite.`
   | :sg:`GroupSingle(sprite=None) -> GroupSingle`

   The GroupSingle container only holds a single Sprite. When a new Sprite is
   added, the old one is removed.

   There is a special property, ``GroupSingle.sprite``, that accesses the
   Sprite that this Group contains. It can be None when the Group is empty. The
   property can also be assigned to add a Sprite into the GroupSingle
   container.

   .. ## pygame.sprite.GroupSingle ##

.. function:: spritecollide

   | :sl:`Find sprites in a group that intersect another sprite.`
   | :sg:`spritecollide(sprite, group, dokill, collided = None) -> Sprite_list`

   Return a list containing all Sprites in a Group that intersect with another
   Sprite. Intersection is determined by comparing the ``Sprite.rect``
   attribute of each Sprite.

   The dokill argument is a bool. If set to True, all Sprites that collide will
   be removed from the Group.

   The collided argument is a callback function used to calculate if two
   sprites are colliding. it should take two sprites as values, and return a
   bool value indicating if they are colliding. If collided is not passed, all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   collided callables:

   ::

       collide_rect, collide_rect_ratio, collide_circle,
       collide_circle_ratio, collide_mask

   Example:
   
   .. code-block:: python

    # See if the Sprite block has collided with anything in the Group block_list
    # The True flag will remove the sprite in block_list
    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)  
     
    # Check the list of colliding sprites, and add one to the score for each one
    for block in blocks_hit_list:
        score +=1
       
   .. ## pygame.sprite.spritecollide ##

.. function:: collide_rect

   | :sl:`Collision detection between two sprites, using rects.`
   | :sg:`collide_rect(left, right) -> bool`

   Tests for collision between two sprites. Uses the pygame rect colliderect
   function to calculate the collision. Intended to be passed as a collided
   callback function to the \*collide functions. Sprites must have a "rect"
   attributes.

   .. versionadded:: 1.8

   .. ## pygame.sprite.collide_rect ##

.. function:: collide_rect_ratio

   | :sl:`Collision detection between two sprites, using rects scaled to a ratio.`
   | :sg:`collide_rect_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites rects.

   Is created with a ratio, the instance is then intended to be passed as a
   collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_rect_ratio ##

.. function:: collide_circle

   | :sl:`Collision detection between two sprites, using circles.`
   | :sg:`collide_circle(left, right) -> bool`

   Tests for collision between two sprites, by testing to see if two circles
   centered on the sprites overlap. If the sprites have a "radius" attribute,
   that is used to create the circle, otherwise a circle is created that is big
   enough to completely enclose the sprites rect as given by the "rect"
   attribute. Intended to be passed as a collided callback function to the
   \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle ##

.. function:: collide_circle_ratio

   | :sl:`Collision detection between two sprites, using circles scaled to a ratio.`
   | :sg:`collide_circle_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites radius.

   Is created with a floating point ratio, the instance is then intended to be
   passed as a collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   The created callable tests for collision between two sprites, by testing to
   see if two circles centered on the sprites overlap, after scaling the
   circles radius by the stored ratio. If the sprites have a "radius"
   attribute, that is used to create the circle, otherwise a circle is created
   that is big enough to completely enclose the sprites rect as given by the
   "rect" attribute. Intended to be passed as a collided callback function to
   the \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle_ratio ##

.. function:: collide_mask

   | :sl:`Collision detection between two sprites, using masks.`
   | :sg:`collide_mask(sprite1, sprite2) -> (int, int)`
   | :sg:`collide_mask(sprite1, sprite2) -> None`

   Tests for collision between two sprites, by testing if their bitmasks
   overlap (uses :func:`pygame.mask.Mask.overlap`). If the sprites have a
   ``mask`` attribute, it is used as the mask, otherwise a mask is created from
   the sprite's ``image`` (uses :func:`pygame.mask.from_surface`). Sprites must
   have a ``rect`` attribute; the ``mask`` attribute is optional.

   The first point of collision between the masks is returned. The collision
   point is offset from ``sprite1``'s mask's topleft corner (which is always
   (0, 0)). The collision point is a position within the mask and is not
   related to the actual screen position of ``sprite1``.

   This function is intended to be passed as a ``collided`` callback function
   to the group collide functions (see :meth:`spritecollide`,
   :meth:`groupcollide`, :meth:`spritecollideany`).

   .. note::
      To increase performance, create and set a ``mask`` attribute for all
      sprites that will use this function to check for collisions. Otherwise,
      each time this function is called it will create new masks.

   .. note::
      A new mask needs to be recreated each time a sprite's image is changed
      (e.g. if a new image is used or the existing image is rotated).

   ::

      # Example of mask creation for a sprite.
      sprite.mask = pygame.mask.from_surface(sprite.image)

   :returns: first point of collision between the masks or ``None`` if no
      collision
   :rtype: tuple(int, int) or NoneType

   .. versionadded:: 1.8.0

   .. ## pygame.sprite.collide_mask ##

.. function:: groupcollide

   | :sl:`Find all sprites that collide between two groups.`
   | :sg:`groupcollide(group1, group2, dokill1, dokill2, collided = None) -> Sprite_dict`

   This will find collisions between all the Sprites in two groups.
   Collision is determined by comparing the ``Sprite.rect`` attribute of
   each Sprite or by using the collided function if it is not None.

   Every Sprite inside group1 is added to the return dictionary. The value for
   each item is the list of Sprites in group2 that intersect.

   If either dokill argument is True, the colliding Sprites will be removed
   from their respective Group.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.groupcollide ##

.. function:: spritecollideany

   | :sl:`Simple test if a sprite intersects anything in a group.`
   | :sg:`spritecollideany(sprite, group, collided = None) -> Sprite` Collision with the returned sprite.
   | :sg:`spritecollideany(sprite, group, collided = None) -> None` No collision

   If the sprite collides with any single sprite in the group, a single
   sprite from the group is returned.  On no collision None is returned.

   If you don't need all the features of the ``pygame.sprite.spritecollide()`` function, this
   function will be a bit quicker.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.spritecollideany ##

.. ##  ##

.. ## pygame.sprite ##


--- Contenu du fichier : color.rst.txt ---
.. include:: common.txt

:mod:`pygame.Color`
===================

.. currentmodule:: pygame

.. class:: Color

   | :sl:`pygame object for color representations`
   | :sg:`Color(r, g, b) -> Color`
   | :sg:`Color(r, g, b, a=255) -> Color`
   | :sg:`Color(color_value) -> Color`

   The ``Color`` class represents ``RGBA`` color values using a value range of
   0 to 255 inclusive. It allows basic arithmetic operations — binary
   operations ``+``, ``-``, ``*``, ``//``, ``%``, and unary operation ``~`` — to
   create new colors, supports conversions to other color spaces such as ``HSV``
   or ``HSL`` and lets you adjust single color channels.
   Alpha defaults to 255 (fully opaque) when not given.
   The arithmetic operations and ``correct_gamma()`` method preserve subclasses.
   For the binary operators, the class of the returned color is that of the
   left hand color object of the operator.

   Color objects support equality comparison with other color objects and 3 or
   4 element tuples of integers. There was a bug in pygame 1.8.1
   where the default alpha was 0, not 255 like previously.

   Color objects export the C level array interface. The interface exports a
   read-only one dimensional unsigned byte array of the same assigned length
   as the color. The new buffer interface is also exported, with the same
   characteristics as the array interface.

   The floor division, ``//``, and modulus, ``%``, operators do not raise
   an exception for division by zero. Instead, if a color, or alpha, channel
   in the right hand color is 0, then the result is 0. For example: ::

       # These expressions are True
       Color(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)
       Color(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)

   Use ``int(color)`` to return the immutable integer value of the color,
   usable as a ``dict`` key. This integer value differs from the mapped
   pixel values of :meth:`pygame.Surface.get_at_mapped`,
   :meth:`pygame.Surface.map_rgb` and :meth:`pygame.Surface.unmap_rgb`.
   It can be passed as a ``color_value`` argument to :class:`Color`
   (useful with sets).

   See :doc:`color_list` for samples of the available named colors.

   :param int r: red value in the range of 0 to 255 inclusive
   :param int g: green value in the range of 0 to 255 inclusive
   :param int b: blue value in the range of 0 to 255 inclusive
   :param int a: (optional) alpha value in the range of 0 to 255 inclusive,
      default is 255
   :param color_value: color value (see note below for the supported formats)

      .. note::
         Supported ``color_value`` formats:
            | - **Color object:** clones the given :class:`Color` object
            | - **Color name: str:** name of the color to use, e.g. ``'red'``
              (all the supported name strings can be found in the
               :doc:`color_list`, with sample swatches)
            | - **HTML color format str:** ``'#rrggbbaa'`` or ``'#rrggbb'``,
              where rr, gg, bb, and aa are 2-digit hex numbers in the range
              of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF
              if not provided
            | - **hex number str:** ``'0xrrggbbaa'`` or ``'0xrrggbb'``, where
              rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00
              to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not
              provided
            | - **int:** int value of the color to use, using hex numbers can
              make this parameter more readable, e.g. ``0xrrggbbaa``, where rr,
              gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to
              0xFF inclusive, note that the aa (alpha) value is not optional for
              the int format and must be provided
            | - **tuple/list of int color values:** ``(R, G, B, A)`` or
              ``(R, G, B)``, where R, G, B, and A are int values in the range of
              0 to 255 inclusive, the A (alpha) value defaults to 255 if not
              provided

   :type color_value: Color or str or int or tuple(int, int, int, [int]) or
      list(int, int, int, [int])

   :returns: a newly created :class:`Color` object
   :rtype: Color

   .. versionchanged:: 2.0.0
      Support for tuples, lists, and :class:`Color` objects when creating
      :class:`Color` objects.
   .. versionchanged:: 1.9.2 Color objects export the C level array interface.
   .. versionchanged:: 1.9.0 Color objects support 4-element tuples of integers.
   .. versionchanged:: 1.8.1 New implementation of the class.

   .. attribute:: r

      | :sl:`Gets or sets the red value of the Color.`
      | :sg:`r -> int`

      The red value of the Color.

      .. ## Color.r ##

   .. attribute:: g

      | :sl:`Gets or sets the green value of the Color.`
      | :sg:`g -> int`

      The green value of the Color.

      .. ## Color.g ##

   .. attribute:: b

      | :sl:`Gets or sets the blue value of the Color.`
      | :sg:`b -> int`

      The blue value of the Color.

      .. ## Color.b ##

   .. attribute:: a

      | :sl:`Gets or sets the alpha value of the Color.`
      | :sg:`a -> int`

      The alpha value of the Color.

      .. ## Color.a ##

   .. attribute:: cmy

      | :sl:`Gets or sets the CMY representation of the Color.`
      | :sg:`cmy -> tuple`

      The ``CMY`` representation of the Color. The ``CMY`` components are in
      the ranges ``C`` = [0, 1], ``M`` = [0, 1], ``Y`` = [0, 1]. Note that this
      will not return the absolutely exact ``CMY`` values for the set ``RGB``
      values in all cases. Due to the ``RGB`` mapping from 0-255 and the
      ``CMY`` mapping from 0-1 rounding errors may cause the ``CMY`` values to
      differ slightly from what you might expect.

      .. ## Color.cmy ##

   .. attribute:: hsva

      | :sl:`Gets or sets the HSVA representation of the Color.`
      | :sg:`hsva -> tuple`

      The ``HSVA`` representation of the Color. The ``HSVA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``V`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSV`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSV`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSV`` values to differ slightly from what you might expect.

      .. ## Color.hsva ##

   .. attribute:: hsla

      | :sl:`Gets or sets the HSLA representation of the Color.`
      | :sg:`hsla -> tuple`

      The ``HSLA`` representation of the Color. The ``HSLA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``L`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSL`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSL`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSL`` values to differ slightly from what you might expect.

      .. ## Color.hsla ##

   .. attribute:: i1i2i3

      | :sl:`Gets or sets the I1I2I3 representation of the Color.`
      | :sg:`i1i2i3 -> tuple`

      The ``I1I2I3`` representation of the Color. The ``I1I2I3`` components are
      in the ranges ``I1`` = [0, 1], ``I2`` = [-0.5, 0.5], ``I3`` = [-0.5,
      0.5]. Note that this will not return the absolutely exact ``I1I2I3``
      values for the set ``RGB`` values in all cases. Due to the ``RGB``
      mapping from 0-255 and the ``I1I2I3`` mapping from 0-1 rounding errors
      may cause the ``I1I2I3`` values to differ slightly from what you might
      expect.

      .. ## Color.i1i2i3 ##

   .. method:: normalize

      | :sl:`Returns the normalized RGBA values of the Color.`
      | :sg:`normalize() -> tuple`

      Returns the normalized ``RGBA`` values of the Color as floating point
      values.

      .. ## Color.normalize ##

   .. method:: correct_gamma

      | :sl:`Applies a certain gamma value to the Color.`
      | :sg:`correct_gamma (gamma) -> Color`

      Applies a certain gamma value to the Color and returns a new Color with
      the adjusted ``RGBA`` values.

      .. ## Color.correct_gamma ##

   .. method:: set_length

      | :sl:`Set the number of elements in the Color to 1,2,3, or 4.`
      | :sg:`set_length(len) -> None`

      DEPRECATED: You may unpack the values you need like so, 
      ``r, g, b, _ = pygame.Color(100, 100, 100)``
      If you only want r, g and b
      Or 
      ``r, g, *_ = pygame.Color(100, 100, 100)`` 
      if you only want r and g

      The default Color length is 4. Colors can have lengths 1,2,3 or 4. This
      is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to
      get the length of a Color do ``len(acolor)``.

      .. deprecated:: 2.1.3
      .. versionadded:: 1.9.0

      .. ## Color.set_length ##

   .. method:: grayscale

      | :sl:`returns the grayscale of a Color`
      | :sg:`grayscale() -> Color`

      Returns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..

      .. ## Color.grayscale ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given Color.`
      | :sg:`lerp(Color, float) -> Color`

      Returns a Color which is a linear interpolation between self and the
      given Color in RGBA space. The second parameter determines how far
      between self and other the result is going to be.
      It must be a value between 0 and 1 where 0 means self and 1 means
      other will be returned.

      .. versionadded:: 2.0.1

      .. ## Color.lerp ##

   .. method:: premul_alpha

      | :sl:`returns a Color where the r,g,b components have been multiplied by the alpha.`
      | :sg:`premul_alpha() -> Color`

      Returns a new Color where each of the red, green and blue colour
      channels have been multiplied by the alpha channel of the original
      color. The alpha channel remains unchanged.

      This is useful when working with the ``BLEND_PREMULTIPLIED`` blending mode
      flag for :meth:`pygame.Surface.blit()`, which assumes that all surfaces using
      it are using pre-multiplied alpha colors.

      .. versionadded:: 2.0.0

      .. ## Color.premul_alpha ##

   .. method:: update

      | :sl:`Sets the elements of the color`
      | :sg:`update(r, g, b) -> None`
      | :sg:`update(r, g, b, a=255) -> None`
      | :sg:`update(color_value) -> None`

      Sets the elements of the color. See parameters for :meth:`pygame.Color` for the
      parameters of this function. If the alpha value was not set it will not change.

      .. versionadded:: 2.0.1

      .. ## Color.update ##
   .. ## pygame.Color ##


--- Contenu du fichier : transform.rst.txt ---
.. include:: common.txt

:mod:`pygame.transform`
=======================

.. module:: pygame.transform
   :synopsis: pygame module to transform surfaces

| :sl:`pygame module to transform surfaces`

A Surface transform is an operation that moves or resizes the pixels. All these
functions take a Surface to operate on and return a new Surface with the
results.

Some of the transforms are considered destructive. These means every time they
are performed they lose pixel data. Common examples of this are resizing and
rotating. For this reason, it is better to re-transform the original surface
than to keep transforming an image multiple times. (For example, suppose you
are animating a bouncing spring which expands and contracts. If you applied the
size changes incrementally to the previous images, you would lose detail.
Instead, always begin with the original image and scale to the desired size.)

.. versionchanged:: 2.0.2 transform functions now support keyword arguments.

.. function:: flip

   | :sl:`flip vertically and horizontally`
   | :sg:`flip(surface, flip_x, flip_y) -> Surface`

   This can flip a Surface either vertically, horizontally, or both.
   The arguments ``flip_x`` and ``flip_y`` are booleans that control whether
   to flip each axis. Flipping a Surface is non-destructive and returns a new
   Surface with the same dimensions.

   .. ## pygame.transform.flip ##

.. function:: scale

   | :sl:`resize to new resolution`
   | :sg:`scale(surface, size, dest_surface=None) -> Surface`

   Resizes the Surface to a new size, given as (width, height). 
   This is a fast scale operation that does not sample the results.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be the same size as the size (width, height) passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale ##

.. function:: scale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`scale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave scale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`scale()`, but scales by some factor, rather than taking
   the new size explicitly. For example, :code:`transform.scale_by(surf, 3)`
   will triple the size of the surface in both dimensions. Optionally, the
   scale factor can be a sequence of two numbers, controlling x and y scaling
   separately. For example, :code:`transform.scale_by(surf, (2, 1))` doubles
   the image width but keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.scale_by ##

.. function:: rotate

   | :sl:`rotate an image`
   | :sg:`rotate(surface, angle) -> Surface`

   Unfiltered counterclockwise rotation. The angle argument represents degrees
   and can be any floating point value. Negative angle amounts will rotate
   clockwise.

   Unless rotating by 90 degree increments, the image will be padded larger to
   hold the new size. If the image has pixel alphas, the padded area will be
   transparent. Otherwise pygame will pick a color that matches the Surface
   colorkey or the topleft pixel value.

   .. ## pygame.transform.rotate ##

.. function:: rotozoom

   | :sl:`filtered scale and rotation`
   | :sg:`rotozoom(surface, angle, scale) -> Surface`

   This is a combined scale and rotation transform. The resulting Surface will
   be a filtered 32-bit Surface. The scale argument is a floating point value
   that will be multiplied by the current resolution. The angle argument is a
   floating point value that represents the counterclockwise degrees to rotate.
   A negative rotation angle will rotate clockwise.

   .. ## pygame.transform.rotozoom ##

.. function:: scale2x

   | :sl:`specialized image doubler`
   | :sg:`scale2x(surface, dest_surface=None) -> Surface`

   This will return a new image that is double the size of the original. It
   uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of
   bitmap graphics.

   This really only has an effect on simple images with solid colors. On
   photographic and antialiased images it will look like a regular unfiltered
   scale.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be twice the size of the source surface passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale2x ##

.. function:: smoothscale

   | :sl:`scale a surface to an arbitrary size smoothly`
   | :sg:`smoothscale(surface, size, dest_surface=None) -> Surface`

   Uses one of two different algorithms for scaling each dimension of the input
   surface as required. For shrinkage, the output pixels are area averages of
   the colors they cover. For expansion, a bilinear filter is used. For the
   x86-64 and i686 architectures, optimized ``MMX`` routines are included and
   will run much faster than other machine types. The size is a 2 number
   sequence for (width, height). This function only works for 24-bit or 32-bit
   surfaces. An exception will be thrown if the input surface bit depth is less
   than 24.

   .. versionadded:: 1.8

   .. ## pygame.transform.smoothscale ##

.. function:: smoothscale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`smoothscale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave smoothscale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`smoothscale()`, but scales by some factor, rather than
   taking the new size explicitly. For example,
   :code:`transform.smoothscale_by(surf, 3)` will triple the size of the
   surface in both dimensions. Optionally, the scale factor can be a sequence
   of two numbers, controlling x and y scaling separately. For example,
   :code:`transform.smoothscale_by(surf, (2, 1))` doubles the image width but
   keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.smoothscale_by ##

.. function:: get_smoothscale_backend

   | :sl:`return smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`get_smoothscale_backend() -> string`

   Shows whether or not smoothscale is using ``MMX`` or ``SSE`` acceleration.
   If no acceleration is available then "GENERIC" is returned. For a x86
   processor the level of acceleration to use is determined at runtime.

   This function is provided for pygame testing and debugging.

   .. ## pygame.transform.get_smoothscale_backend ##

.. function:: set_smoothscale_backend

   | :sl:`set smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`set_smoothscale_backend(backend) -> None`

   Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'
   turns off acceleration. 'MMX' uses ``MMX`` instructions only. 'SSE' allows
   ``SSE`` extensions as well. A value error is raised if type is not
   recognized or not supported by the current processor.

   This function is provided for pygame testing and debugging. If smoothscale
   causes an invalid instruction error then it is a pygame/SDL bug that should
   be reported. Use this function as a temporary fix only.

   .. ## pygame.transform.set_smoothscale_backend ##

.. function:: chop

   | :sl:`gets a copy of an image with an interior area removed`
   | :sg:`chop(surface, rect) -> Surface`

   Extracts a portion of an image. All vertical and horizontal pixels
   surrounding the given rectangle area are removed. The corner areas (diagonal
   to the rect) are then brought together. (The original image is not altered
   by this operation.)

   ``NOTE``: If you want a "crop" that returns the part of an image within a
   rect, you can blit with a rect to a new surface or copy a subsurface.

   .. ## pygame.transform.chop ##

.. function:: laplacian

   | :sl:`find edges in a surface`
   | :sg:`laplacian(surface, dest_surface=None) -> Surface`

   Finds the edges in a surface using the laplacian algorithm.

   .. versionadded:: 1.8

   .. ## pygame.transform.laplacian ##

.. function:: average_surfaces

   | :sl:`find the average surface from many surfaces.`
   | :sg:`average_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface`

   Takes a sequence of surfaces and returns a surface with average colors from
   each of the surfaces.

   palette_colors - if true we average the colors in palette, otherwise we
   average the pixel values. This is useful if the surface is actually
   greyscale colors, and not palette colors.

   Note, this function currently does not handle palette using surfaces
   correctly.

   .. versionadded:: 1.8
   .. versionadded:: 1.9 ``palette_colors`` argument

   .. ## pygame.transform.average_surfaces ##

.. function:: average_color

   | :sl:`finds the average color of a surface`
   | :sg:`average_color(surface, rect=None, consider_alpha=False) -> Color`

   Finds the average color of a Surface or a region of a surface specified by a
   Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is
   taken into account (removing the black artifacts).

   .. versionadded:: 2.1.2 ``consider_alpha`` argument

   .. ## pygame.transform.average_color ##

.. function:: grayscale

   | :sl:`grayscale a surface`
   | :sg:`grayscale(surface, dest_surface=None) -> Surface`

   Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.

   An optional destination surface can be passed which is faster than creating a new Surface.
   This destination surface must have the same dimensions (width, height) and depth as the source Surface.

   .. ## pygame.transform.grayscale ##

.. function:: threshold

   | :sl:`finds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.`
   | :sg:`threshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -> num_threshold_pixels`

   This versatile function can be used for find colors in a 'surf' close to a 'search_color'
   or close to colors in a separate 'search_surf'.

   It can also be used to transfer pixels into a 'dest_surf' that match or don't match.

   By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the
   threshold are changed to set_color. If inverse_set is optionally set to True,
   the pixels that ARE within the threshold are changed to set_color.

   If the optional 'search_surf' surface is given, it is used to threshold against
   rather than the specified 'set_color'. That is, it will find each pixel in the
   'surf' that is within the 'threshold' of the pixel at the same coordinates
   of the 'search_surf'.

   :param dest_surf: Surface we are changing. See 'set_behavior'.
    Should be None if counting (set_behavior is 0).
   :type dest_surf: pygame.Surface or None

   :param pygame.Surface surf: Surface we are looking at.

   :param pygame.Color search_color: Color we are searching for.

   :param pygame.Color threshold: Within this distance from search_color (or search_surf).
     You can use a threshold of (r,g,b,a) where the r,g,b can have different
     thresholds. So you could use an r threshold of 40 and a blue threshold of 2
     if you like.

   :param set_color: Color we set in dest_surf.
   :type set_color: pygame.Color or None

   :param int set_behavior:
    - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.
    - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.
    - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.

   :param search_surf:
    - search_surf=None (default). Search against 'search_color' instead.
    - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.
   :type search_surf: pygame.Surface or None

   :param bool inverse_set:
     - False, default. Pixels outside of threshold are changed.
     - True, Pixels within threshold are changed.

   :rtype: int
   :returns: The number of pixels that are within the 'threshold' in 'surf'
     compared to either 'search_color' or `search_surf`.

   :Examples:

   See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/main/test/transform_test.py

   .. literalinclude:: ../../../test/transform_test.py
      :pyobject: TransformModuleTest.test_threshold_dest_surf_not_change


   .. versionadded:: 1.8
   .. versionchanged:: 1.9.4
      Fixed a lot of bugs and added keyword arguments. Test your code.

   .. ## pygame.transform.threshold ##

.. ## pygame.transform ##


--- Contenu du fichier : examples.rst.txt ---
.. include:: common.txt

:mod:`pygame.examples`
======================

.. module:: pygame.examples
   :synopsis: module of example programs

| :sl:`module of example programs`

These examples should help get you started with pygame. Here is a brief rundown
of what you get. The source code for these examples is in the public domain.
Feel free to use for your own projects.

There are several ways to run the examples. First they can be run as
stand-alone programs. Second they can be imported and their ``main()`` methods
called (see below). Finally, the easiest way is to use the python -m option:

::

   python -m pygame.examples.<example name> <example arguments>

eg:

::

   python -m pygame.examples.scaletest someimage.png

Resources such as images and sounds for the examples are found in the 
pygame/examples/data subdirectory.

You can find where the example files are installed by using the following
commands inside the python interpreter.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.__file__
   '/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'

On each OS and version of Python the location will be slightly different.
For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/'
On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'


You can also run the examples in the python interpreter by calling each modules main() function.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.main()


We're always on the lookout for more examples and/or example requests. Code
like this is probably the best way to start getting involved with python
gaming.

examples as a package is new to pygame 1.9.0. But most of the examples came with
pygame much earlier.

.. function:: aliens.main

   | :sl:`play the full aliens example`
   | :sg:`aliens.main() -> None`

   This started off as a port of the ``SDL`` demonstration, Aliens. Now it has
   evolved into something sort of resembling fun. This demonstrates a lot of
   different uses of sprites and optimized blitting. Also transparency,
   colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is
   117! goodluck)

   .. ## pygame.examples.aliens.main ##

.. function:: stars.main

   | :sl:`run a simple starfield example`
   | :sg:`stars.main() -> None`

   A simple starfield example. You can change the center of perspective by
   leftclicking the mouse on the screen.

   .. ## pygame.examples.stars.main ##

.. function:: chimp.main

   | :sl:`hit the moving chimp`
   | :sg:`chimp.main() -> None`

   This simple example is derived from the line-by-line tutorial that comes
   with pygame. It is based on a 'popular' web banner. Note there are comments
   here, but for the full explanation, follow along in the tutorial.

   .. ## pygame.examples.chimp.main ##

.. function:: moveit.main

   | :sl:`display animated objects on the screen`
   | :sg:`moveit.main() -> None`

   This is the full and final example from the Pygame Tutorial, "How Do I Make
   It Move". It creates 10 objects and animates them on the screen.

   Note it's a bit scant on error checking, but it's easy to read. :]
   Fortunately, this is python, and we needn't wrestle with a pile of error
   codes.

   .. ## pygame.examples.moveit.main ##

.. function:: fonty.main

   | :sl:`run a font rendering example`
   | :sg:`fonty.main() -> None`

   Super quick, super simple application demonstrating the different ways to
   render fonts with the font module

   .. ## pygame.examples.fonty.main ##

.. function:: freetype_misc.main

   | :sl:`run a FreeType rendering example`
   | :sg:`freetype_misc.main() -> None`

   A showcase of rendering features the :class:`pygame.freetype.Font`
   class provides in addition to those available with :class:`pygame.font.Font`.
   It is a demonstration of direct to surface rendering, with vertical text
   and rotated text, opaque text and semi transparent text, horizontally
   stretched text and vertically stretched text.

   .. ## pygame.examples.fonty.main ##

.. function:: vgrade.main

   | :sl:`display a vertical gradient`
   | :sg:`vgrade.main() -> None`

   Demonstrates creating a vertical gradient with pixelcopy and NumPy python.
   The app will create a new gradient every half second and report the time
   needed to create and display the image. If you're not prepared to start
   working with the NumPy arrays, don't worry about the source for this one :]

   .. ## pygame.examples.vgrade.main ##

.. function:: eventlist.main

   | :sl:`display pygame events`
   | :sg:`eventlist.main() -> None`

   Eventlist is a sloppy style of pygame, but is a handy tool for learning
   about pygame events and input. At the top of the screen are the state of
   several device values, and a scrolling list of events are displayed on the
   bottom.

   This is not quality 'ui' code at all, but you can see how to implement very
   non-interactive status displays, or even a crude text output control.

   .. ## pygame.examples.eventlist.main ##

.. function:: arraydemo.main

   | :sl:`show various surfarray effects`
   | :sg:`arraydemo.main(arraytype=None) -> None`

   Another example filled with various surfarray effects. It requires the
   surfarray and image modules to be installed. This little demo can also make
   a good starting point for any of your own tests with surfarray

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.arraydemo.main ##

.. function:: sound.main

   | :sl:`load and play a sound`
   | :sg:`sound.main(file_path=None) -> None`

   Extremely basic testing of the mixer module. Load a sound and play it. All
   from the command shell, no graphics.

   If provided, use the audio file 'file_path', otherwise use a default file.

   ``sound.py`` optional command line argument: an audio file

   .. ## pygame.examples.sound.main ##

.. function:: sound_array_demos.main

   | :sl:`play various sndarray effects`
   | :sg:`sound_array_demos.main(arraytype=None) -> None`


   Uses sndarray and NumPy to create offset faded copies of the
   original sound. Currently it just uses hardcoded values for the number of
   echoes and the delay. Easy for you to recreate as needed.

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.sound_array_demos.main ##

.. function:: liquid.main

   | :sl:`display an animated liquid effect`
   | :sg:`liquid.main() -> None`

   This example was created in a quick comparison with the BlitzBasic gaming
   language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).

   .. ## pygame.examples.liquid.main ##

.. function:: glcube.main

   | :sl:`display an animated 3D cube using OpenGL`
   | :sg:`glcube.main() -> None`

   Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.

   .. ## pygame.examples.glcube.main ##

.. function:: scrap_clipboard.main

   | :sl:`access the clipboard`
   | :sg:`scrap_clipboard.main() -> None`

   A simple demonstration example for the clipboard support.

   .. ## pygame.examples.scrap_clipboard.main ##

.. function:: mask.main

   | :sl:`display multiple images bounce off each other using collision detection`
   | :sg:`mask.main(*args) -> None`

   Positional arguments:

   ::

       one or more image file names.

   This ``pygame.masks`` demo will display multiple moving sprites bouncing off
   each other. More than one sprite image can be provided.

   If run as a program then ``mask.py`` takes one or more image files as
   command line arguments.

   .. ## pygame.examples.mask.main ##

.. function:: testsprite.main

   | :sl:`show lots of sprites moving around`
   | :sg:`testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = [640, 480], use_alpha = False, flags = 0) -> None`

   Optional keyword arguments:

   ::

       update_rects - use the RenderUpdate sprite group class
       use_static - include non-moving images
       use_FastRenderGroup - Use the FastRenderGroup sprite group
       screen_dims - pygame window dimensions
       use_alpha - use alpha blending
       flags - additional display mode flags

   Like the ``testsprite.c`` that comes with SDL, this pygame version shows
   lots of sprites moving around.

   If run as a stand-alone program then no command line arguments are taken.

   .. ## pygame.examples.testsprite.main ##

.. function:: headless_no_windows_needed.main

   | :sl:`write an image file that is smoothscaled copy of an input file`
   | :sg:`headless_no_windows_needed.main(fin, fout, w, h) -> None`

   arguments:

   ::

       fin - name of an input image file
       fout - name of the output file to create/overwrite
       w, h - size of the rescaled image, as integer width and height

   How to use pygame with no windowing system, like on headless servers.

   Thumbnail generation with scaling is an example of what you can do with
   pygame.

   ``NOTE``: the pygame scale function uses MMX/SSE if available, and can be
   run in multiple threads.

   If ``headless_no_windows_needed.py`` is run as a program it takes the
   following command line arguments:

   ::

       -scale inputimage outputimage new_width new_height
       eg. -scale in.png outpng 50 50

   .. ## pygame.examples.headless_no_windows_needed.main ##

.. function:: joystick.main

   | :sl:`demonstrate joystick functionality`
   | :sg:`joystick.main() -> None`

   A demo showing full joystick support.

   .. versionadded:: 2.0.2

   .. ## pygame.examples.joystick.main ##

.. function:: blend_fill.main

   | :sl:`demonstrate the various surface.fill method blend options`
   | :sg:`blend_fill.main() -> None`

   A interactive demo that lets one choose which BLEND_xxx option to apply to a
   surface.

   .. ## pygame.examples.blend_fill.main ##

.. function:: blit_blends.main

   | :sl:`uses alternative additive fill to that of surface.fill`
   | :sg:`blit_blends.main() -> None`

   Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat
   like blend_fill.

   .. ## pygame.examples.blit_blends.main ##

.. function:: cursors.main

   | :sl:`display two different custom cursors`
   | :sg:`cursors.main() -> None`

   Display an arrow or circle with crossbar cursor.

   .. ## pygame.examples.cursors.main ##

.. function:: pixelarray.main

   | :sl:`display various pixelarray generated effects`
   | :sg:`pixelarray.main() -> None`

   Display various pixelarray generated effects.

   .. ## pygame.examples.pixelarray.main ##

.. function:: scaletest.main

   | :sl:`interactively scale an image using smoothscale`
   | :sg:`scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -> None`

   arguments:

   ::

       imagefile - file name of source image (required)
       convert_alpha - use convert_alpha() on the surf (default False)
       run_speed_test - (default False)

   A smoothscale example that resized an image on the screen. Vertical and
   horizontal arrow keys are used to change the width and height of the
   displayed image. If the convert_alpha option is True then the source image
   is forced to have source alpha, whether or not the original images does. If
   run_speed_test is True then a background timing test is performed instead of
   the interactive scaler.

   If ``scaletest.py`` is run as a program then the command line options are:

   ::

       ImageFile [-t] [-convert_alpha]
       [-t] = Run Speed Test
       [-convert_alpha] = Use convert_alpha() on the surf.

   .. ## pygame.examples.scaletest.main ##

.. function:: midi.main

   | :sl:`run a midi example`
   | :sg:`midi.main(mode='output', device_id=None) -> None`

   Arguments:

   ::

       mode - if 'output' run a midi keyboard output example
                 'input' run a midi event logger input example
                 'list' list available midi devices
              (default 'output')
       device_id - midi device number; if None then use the default midi input or
                   output device for the system

   The output example shows how to translate mouse clicks or computer keyboard
   events into midi notes. It implements a rudimentary button widget and state
   machine.

   The input example shows how to translate midi input to pygame events.

   With the use of a virtual midi patch cord the output and input examples can
   be run as separate processes and connected so the keyboard output is
   displayed on a console.

   new to pygame 1.9.0

   .. ## pygame.examples.midi.main ##

.. function:: scroll.main

   | :sl:`run a Surface.scroll example that shows a magnified image`
   | :sg:`scroll.main(image_file=None) -> None`

   This example shows a scrollable image that has a zoom factor of eight. It
   uses the :meth:`Surface.scroll() <pygame.Surface.scroll>`
   function to shift the image on the display surface.
   A clip rectangle protects a margin area. If called as a function,
   the example accepts an optional image file path. If run as a program it
   takes an optional file path command line argument. If no file is provided a
   default image file is used.

   When running click on a black triangle to move one pixel in the direction
   the triangle points. Or use the arrow keys. Close the window or press
   ``ESC`` to quit.

   .. ## pygame.examples.scroll.main ##

.. function:: camera.main

   | :sl:`display video captured live from an attached camera`
   | :sg:`camera.main() -> None`

   A simple live video player, it uses the first available camera it finds on
   the system.

   .. ## pygame.examples.camera.main ##

.. function:: playmus.main

   | :sl:`play an audio file`
   | :sg:`playmus.main(file_path) -> None`

   A simple music player with window and keyboard playback control. Playback can
   be paused and rewound to the beginning.

   .. ## pygame.examples.playmus.main ##

.. ## pygame.examples ##


--- Contenu du fichier : testmail.txt ---
alice.johnson@example.com
bob.smith@example.net
carol.martin@example.org
david.lee@example.co
emma.white@example.edu
frank.taylor@example.biz
grace.wilson@example.info
hank.moore@example.tv
isabella.jones@example.museum
jackson.brown@example.asia

--- Contenu du fichier : write.txt ---
TESTAAAAAJORDAN LE MEILLEUR ? OQFJPOJFAAAFSEFSELM,GNKSEst-ce que tout fonctionne ? test [F test2

--- Contenu du fichier : data.txt ---
i'm trying open file in the another file 

--- Contenu du fichier : final.txt ---




--- Contenu du fichier : top_level.txt ---
pygame


--- Contenu du fichier : entry_points.txt ---
[pyinstaller40]
hook-dirs = pygame.__pyinstaller:get_hook_dirs


--- Contenu du fichier : vendor.txt ---
CacheControl==0.14.0
distlib==0.3.8
distro==1.9.0
msgpack==1.0.8
packaging==24.1
platformdirs==4.2.2
pyproject-hooks==1.0.0
requests==2.32.3
    certifi==2024.7.4
    idna==3.7
    urllib3==1.26.18
rich==13.7.1
    pygments==2.18.0
    typing_extensions==4.12.2
resolvelib==1.0.1
setuptools==70.3.0
tomli==2.0.1
truststore==0.9.1


--- Contenu du fichier : AUTHORS.txt ---
@Switch01
A_Rog
Aakanksha Agrawal
Abhinav Sagar
ABHYUDAY PRATAP SINGH
abs51295
AceGentile
Adam Chainz
Adam Tse
Adam Wentz
admin
Adolfo Ochagavía
Adrien Morison
Agus
ahayrapetyan
Ahilya
AinsworthK
Akash Srivastava
Alan Yee
Albert Tugushev
Albert-Guan
albertg
Alberto Sottile
Aleks Bunin
Ales Erjavec
Alethea Flowers
Alex Gaynor
Alex Grönholm
Alex Hedges
Alex Loosley
Alex Morega
Alex Stachowiak
Alexander Shtyrov
Alexandre Conrad
Alexey Popravka
Aleš Erjavec
Alli
Ami Fischman
Ananya Maiti
Anatoly Techtonik
Anders Kaseorg
Andre Aguiar
Andreas Lutro
Andrei Geacar
Andrew Gaul
Andrew Shymanel
Andrey Bienkowski
Andrey Bulgakov
Andrés Delfino
Andy Freeland
Andy Kluger
Ani Hayrapetyan
Aniruddha Basak
Anish Tambe
Anrs Hu
Anthony Sottile
Antoine Musso
Anton Ovchinnikov
Anton Patrushev
Antonio Alvarado Hernandez
Antony Lee
Antti Kaihola
Anubhav Patel
Anudit Nagar
Anuj Godase
AQNOUCH Mohammed
AraHaan
arena
arenasys
Arindam Choudhury
Armin Ronacher
Arnon Yaari
Artem
Arun Babu Neelicattu
Ashley Manton
Ashwin Ramaswami
atse
Atsushi Odagiri
Avinash Karhana
Avner Cohen
Awit (Ah-Wit) Ghirmai
Baptiste Mispelon
Barney Gale
barneygale
Bartek Ogryczak
Bastian Venthur
Ben Bodenmiller
Ben Darnell
Ben Hoyt
Ben Mares
Ben Rosser
Bence Nagy
Benjamin Peterson
Benjamin VanEvery
Benoit Pierre
Berker Peksag
Bernard
Bernard Tyers
Bernardo B. Marques
Bernhard M. Wiedemann
Bertil Hatt
Bhavam Vidyarthi
Blazej Michalik
Bogdan Opanchuk
BorisZZZ
Brad Erickson
Bradley Ayers
Branch Vincent
Brandon L. Reiss
Brandt Bucher
Brannon Dorsey
Brett Randall
Brett Rosen
Brian Cristante
Brian Rosner
briantracy
BrownTruck
Bruno Oliveira
Bruno Renié
Bruno S
Bstrdsmkr
Buck Golemon
burrows
Bussonnier Matthias
bwoodsend
c22
Caleb Martinez
Calvin Smith
Carl Meyer
Carlos Liam
Carol Willing
Carter Thayer
Cass
Chandrasekhar Atina
Charlie Marsh
Chih-Hsuan Yen
Chris Brinker
Chris Hunt
Chris Jerdonek
Chris Kuehl
Chris Markiewicz
Chris McDonough
Chris Pawley
Chris Pryer
Chris Wolfe
Christian Clauss
Christian Heimes
Christian Oudard
Christoph Reiter
Christopher Hunt
Christopher Snyder
chrysle
cjc7373
Clark Boylan
Claudio Jolowicz
Clay McClure
Cody
Cody Soyland
Colin Watson
Collin Anderson
Connor Osborn
Cooper Lees
Cooper Ry Lees
Cory Benfield
Cory Wright
Craig Kerstiens
Cristian Sorinel
Cristina
Cristina Muñoz
ctg123
Curtis Doty
cytolentino
Daan De Meyer
Dale
Damian
Damian Quiroga
Damian Shaw
Dan Black
Dan Savilonis
Dan Sully
Dane Hillard
daniel
Daniel Collins
Daniel Hahler
Daniel Holth
Daniel Jost
Daniel Katz
Daniel Shaulov
Daniele Esposti
Daniele Nicolodi
Daniele Procida
Daniil Konovalenko
Danny Hermes
Danny McClanahan
Darren Kavanagh
Dav Clark
Dave Abrahams
Dave Jones
David Aguilar
David Black
David Bordeynik
David Caro
David D Lowe
David Evans
David Hewitt
David Linke
David Poggi
David Poznik
David Pursehouse
David Runge
David Tucker
David Wales
Davidovich
ddelange
Deepak Sharma
Deepyaman Datta
Denise Yu
dependabot[bot]
derwolfe
Desetude
Devesh Kumar Singh
devsagul
Diego Caraballo
Diego Ramirez
DiegoCaraballo
Dimitri Merejkowsky
Dimitri Papadopoulos
Dirk Stolle
Dmitry Gladkov
Dmitry Volodin
Domen Kožar
Dominic Davis-Foster
Donald Stufft
Dongweiming
doron zarhi
Dos Moonen
Douglas Thor
DrFeathers
Dustin Ingram
Dustin Rodrigues
Dwayne Bailey
Ed Morley
Edgar Ramírez
Edgar Ramírez Mondragón
Ee Durbin
Efflam Lemaillet
efflamlemaillet
Eitan Adler
ekristina
elainechan
Eli Schwartz
Elisha Hollander
Ellen Marie Dash
Emil Burzo
Emil Styrke
Emmanuel Arias
Endoh Takanao
enoch
Erdinc Mutlu
Eric Cousineau
Eric Gillingham
Eric Hanchrow
Eric Hopper
Erik M. Bray
Erik Rose
Erwin Janssen
Eugene Vereshchagin
everdimension
Federico
Felipe Peter
Felix Yan
fiber-space
Filip Kokosiński
Filipe Laíns
Finn Womack
finnagin
Flavio Amurrio
Florian Briand
Florian Rathgeber
Francesco
Francesco Montesano
Fredrik Orderud
Frost Ming
Gabriel Curio
Gabriel de Perthuis
Garry Polley
gavin
gdanielson
Geoffrey Sneddon
George Song
Georgi Valkov
Georgy Pchelkin
ghost
Giftlin Rajaiah
gizmoguy1
gkdoc
Godefroid Chapelle
Gopinath M
GOTO Hayato
gousaiyang
gpiks
Greg Roodt
Greg Ward
Guilherme Espada
Guillaume Seguin
gutsytechster
Guy Rozendorn
Guy Tuval
gzpan123
Hanjun Kim
Hari Charan
Harsh Vardhan
harupy
Harutaka Kawamura
hauntsaninja
Henrich Hartzer
Henry Schreiner
Herbert Pfennig
Holly Stotelmyer
Honnix
Hsiaoming Yang
Hugo Lopes Tavares
Hugo van Kemenade
Hugues Bruant
Hynek Schlawack
Ian Bicking
Ian Cordasco
Ian Lee
Ian Stapleton Cordasco
Ian Wienand
Igor Kuzmitshov
Igor Sobreira
Ikko Ashimine
Ilan Schnell
Illia Volochii
Ilya Baryshev
Inada Naoki
Ionel Cristian Mărieș
Ionel Maries Cristian
Itamar Turner-Trauring
Ivan Pozdeev
J. Nick Koston
Jacob Kim
Jacob Walls
Jaime Sanz
jakirkham
Jakub Kuczys
Jakub Stasiak
Jakub Vysoky
Jakub Wilk
James Cleveland
James Curtin
James Firth
James Gerity
James Polley
Jan Pokorný
Jannis Leidel
Jarek Potiuk
jarondl
Jason Curtis
Jason R. Coombs
JasonMo
JasonMo1
Jay Graves
Jean Abou Samra
Jean-Christophe Fillion-Robin
Jeff Barber
Jeff Dairiki
Jeff Widman
Jelmer Vernooĳ
jenix21
Jeremy Fleischman
Jeremy Stanley
Jeremy Zafran
Jesse Rittner
Jiashuo Li
Jim Fisher
Jim Garrison
Jinzhe Zeng
Jiun Bae
Jivan Amara
Joe Bylund
Joe Michelini
John Paton
John Sirois
John T. Wodder II
John-Scott Atlakson
johnthagen
Jon Banafato
Jon Dufresne
Jon Parise
Jonas Nockert
Jonathan Herbert
Joonatan Partanen
Joost Molenaar
Jorge Niedbalski
Joseph Bylund
Joseph Long
Josh Bronson
Josh Cannon
Josh Hansen
Josh Schneier
Joshua
Juan Luis Cano Rodríguez
Juanjo Bazán
Judah Rand
Julian Berman
Julian Gethmann
Julien Demoor
Jussi Kukkonen
jwg4
Jyrki Pulliainen
Kai Chen
Kai Mueller
Kamal Bin Mustafa
kasium
kaustav haldar
keanemind
Keith Maxwell
Kelsey Hightower
Kenneth Belitzky
Kenneth Reitz
Kevin Burke
Kevin Carter
Kevin Frommelt
Kevin R Patterson
Kexuan Sun
Kit Randel
Klaas van Schelven
KOLANICH
konstin
kpinc
Krishna Oza
Kumar McMillan
Kuntal Majumder
Kurt McKee
Kyle Persohn
lakshmanaram
Laszlo Kiss-Kollar
Laurent Bristiel
Laurent LAPORTE
Laurie O
Laurie Opperman
layday
Leon Sasson
Lev Givon
Lincoln de Sousa
Lipis
lorddavidiii
Loren Carvalho
Lucas Cimon
Ludovic Gasc
Luis Medel
Lukas Geiger
Lukas Juhrich
Luke Macken
Luo Jiebin
luojiebin
luz.paz
László Kiss Kollár
M00nL1ght
Marc Abramowitz
Marc Tamlyn
Marcus Smith
Mariatta
Mark Kohler
Mark McLoughlin
Mark Williams
Markus Hametner
Martey Dodoo
Martin Fischer
Martin Häcker
Martin Pavlasek
Masaki
Masklinn
Matej Stuchlik
Mathew Jennings
Mathieu Bridon
Mathieu Kniewallner
Matt Bacchi
Matt Good
Matt Maker
Matt Robenolt
Matt Wozniski
matthew
Matthew Einhorn
Matthew Feickert
Matthew Gilliard
Matthew Hughes
Matthew Iversen
Matthew Treinish
Matthew Trumbell
Matthew Willson
Matthias Bussonnier
mattip
Maurits van Rees
Max W Chase
Maxim Kurnikov
Maxime Rouyrre
mayeut
mbaluna
mdebi
memoselyk
meowmeowcat
Michael
Michael Aquilina
Michael E. Karpeles
Michael Klich
Michael Mintz
Michael Williamson
michaelpacer
Michał Górny
Mickaël Schoentgen
Miguel Araujo Perez
Mihir Singh
Mike
Mike Hendricks
Min RK
MinRK
Miro Hrončok
Monica Baluna
montefra
Monty Taylor
morotti
mrKazzila
Muha Ajjan
Nadav Wexler
Nahuel Ambrosini
Nate Coraor
Nate Prewitt
Nathan Houghton
Nathaniel J. Smith
Nehal J Wani
Neil Botelho
Nguyễn Gia Phong
Nicholas Serra
Nick Coghlan
Nick Stenning
Nick Timkovich
Nicolas Bock
Nicole Harris
Nikhil Benesch
Nikhil Ladha
Nikita Chepanov
Nikolay Korolev
Nipunn Koorapati
Nitesh Sharma
Niyas Sait
Noah
Noah Gorny
Nowell Strite
NtaleGrey
nvdv
OBITORASU
Ofek Lev
ofrinevo
Oliver Freund
Oliver Jeeves
Oliver Mannion
Oliver Tonnhofer
Olivier Girardot
Olivier Grisel
Ollie Rutherfurd
OMOTO Kenji
Omry Yadan
onlinejudge95
Oren Held
Oscar Benjamin
Oz N Tiram
Pachwenko
Patrick Dubroy
Patrick Jenkins
Patrick Lawson
patricktokeeffe
Patrik Kopkan
Paul Ganssle
Paul Kehrer
Paul Moore
Paul Nasrat
Paul Oswald
Paul van der Linden
Paulus Schoutsen
Pavel Safronov
Pavithra Eswaramoorthy
Pawel Jasinski
Paweł Szramowski
Pekka Klärck
Peter Gessler
Peter Lisák
Peter Shen
Peter Waller
Petr Viktorin
petr-tik
Phaneendra Chiruvella
Phil Elson
Phil Freo
Phil Pennock
Phil Whelan
Philip Jägenstedt
Philip Molloy
Philippe Ombredanne
Pi Delport
Pierre-Yves Rofes
Pieter Degroote
pip
Prabakaran Kumaresshan
Prabhjyotsing Surjit Singh Sodhi
Prabhu Marappan
Pradyun Gedam
Prashant Sharma
Pratik Mallya
pre-commit-ci[bot]
Preet Thakkar
Preston Holmes
Przemek Wrzos
Pulkit Goyal
q0w
Qiangning Hong
Qiming Xu
Quentin Lee
Quentin Pradet
R. David Murray
Rafael Caricio
Ralf Schmitt
Ran Benita
Razzi Abuissa
rdb
Reece Dunham
Remi Rampin
Rene Dudfield
Riccardo Magliocchetti
Riccardo Schirone
Richard Jones
Richard Si
Ricky Ng-Adam
Rishi
rmorotti
RobberPhex
Robert Collins
Robert McGibbon
Robert Pollak
Robert T. McGibbon
robin elisha robinson
Roey Berman
Rohan Jain
Roman Bogorodskiy
Roman Donchenko
Romuald Brunet
ronaudinho
Ronny Pfannschmidt
Rory McCann
Ross Brattain
Roy Wellington Ⅳ
Ruairidh MacLeod
Russell Keith-Magee
Ryan Shepherd
Ryan Wooden
ryneeverett
S. Guliaev
Sachi King
Salvatore Rinchiera
sandeepkiran-js
Sander Van Balen
Savio Jomton
schlamar
Scott Kitterman
Sean
seanj
Sebastian Jordan
Sebastian Schaetz
Segev Finer
SeongSoo Cho
Sergey Vasilyev
Seth Michael Larson
Seth Woodworth
Shahar Epstein
Shantanu
shenxianpeng
shireenrao
Shivansh-007
Shixian Sheng
Shlomi Fish
Shovan Maity
Simeon Visser
Simon Cross
Simon Pichugin
sinoroc
sinscary
snook92
socketubs
Sorin Sbarnea
Srinivas Nyayapati
Stavros Korokithakis
Stefan Scherfke
Stefano Rivera
Stephan Erb
Stephen Rosen
stepshal
Steve (Gadget) Barnes
Steve Barnes
Steve Dower
Steve Kowalik
Steven Myint
Steven Silvester
stonebig
studioj
Stéphane Bidoul
Stéphane Bidoul (ACSONE)
Stéphane Klein
Sumana Harihareswara
Surbhi Sharma
Sviatoslav Sydorenko
Sviatoslav Sydorenko (Святослав Сидоренко)
Swat009
Sylvain
Takayuki SHIMIZUKAWA
Taneli Hukkinen
tbeswick
Thiago
Thijs Triemstra
Thomas Fenzl
Thomas Grainger
Thomas Guettler
Thomas Johansson
Thomas Kluyver
Thomas Smith
Thomas VINCENT
Tim D. Smith
Tim Gates
Tim Harder
Tim Heap
tim smith
tinruufu
Tobias Hermann
Tom Forbes
Tom Freudenheim
Tom V
Tomas Hrnciar
Tomas Orsava
Tomer Chachamu
Tommi Enenkel | AnB
Tomáš Hrnčiar
Tony Beswick
Tony Narlock
Tony Zhaocheng Tan
TonyBeswick
toonarmycaptain
Toshio Kuratomi
toxinu
Travis Swicegood
Tushar Sadhwani
Tzu-ping Chung
Valentin Haenel
Victor Stinner
victorvpaulo
Vikram - Google
Viktor Szépe
Ville Skyttä
Vinay Sajip
Vincent Philippon
Vinicyus Macedo
Vipul Kumar
Vitaly Babiy
Vladimir Fokow
Vladimir Rutsky
W. Trevor King
Wil Tan
Wilfred Hughes
William Edwards
William ML Leslie
William T Olson
William Woodruff
Wilson Mo
wim glenn
Winson Luk
Wolfgang Maier
Wu Zhenyu
XAMES3
Xavier Fernandez
Xianpeng Shen
xoviat
xtreak
YAMAMOTO Takashi
Yen Chi Hsuan
Yeray Diaz Diaz
Yoval P
Yu Jian
Yuan Jing Vincent Yan
Yusuke Hayashi
Zearin
Zhiping Deng
ziebam
Zvezdan Petkovic
Łukasz Langa
Роман Донченко
Семён Марьясин


--- Contenu du fichier : top_level.txt ---
pip


--- Contenu du fichier : LICENSE.txt ---
Copyright (c) 2008-present The pip developers (see AUTHORS.txt file)

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


--- Contenu du fichier : entry_points.txt ---
[console_scripts]
pip = pip._internal.cli.main:main
pip3 = pip._internal.cli.main:main


--- Contenu du fichier : LGPL.txt ---
		  GNU LESSER GENERAL PUBLIC LICENSE
		       Version 2.1, February 1999

 Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
 as the successor of the GNU Library Public License, version 2, hence
 the version number 2.1.]

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software--to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software packages--typically libraries--of the
Free Software Foundation and other authors who decide to use it.  You
can use it too, but we suggest you first think carefully about whether
this license or the ordinary General Public License is the better
strategy to use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of
it in new free programs; and that you are informed that you can do
these things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the "Lesser" General Public License because it
does Less to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

		  GNU LESSER GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License Agreement applies to any software library or other
program which contains a notice placed by the copyright holder or
other authorized party saying it may be distributed under the terms of
this Lesser General Public License (also called "this License").
Each licensee is addressed as "you".

  A "library" means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The "Library", below, refers to any such software library or work
which has been distributed under these terms.  A "work based on the
Library" means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term "modification".)

  "Source code" for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.
  
  1. You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

  2. You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) The modified work must itself be a software library.

    b) You must cause the files modified to carry prominent notices
    stating that you changed the files and the date of any change.

    c) You must cause the whole of the work to be licensed at no
    charge to all third parties under the terms of this License.

    d) If a facility in the modified Library refers to a function or a
    table of data to be supplied by an application program that uses
    the facility, other than as an argument passed when the facility
    is invoked, then you must make a good faith effort to ensure that,
    in the event an application does not supply such function or
    table, the facility still operates, and performs whatever part of
    its purpose remains meaningful.

    (For example, a function in a library to compute square roots has
    a purpose that is entirely well-defined independent of the
    application.  Therefore, Subsection 2d requires that any
    application-supplied function or table used by this function must
    be optional: if the application does not supply it, the square
    root function must still compute square roots.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a "work that uses the Library".  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a "work that uses the Library" with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a "work that uses the
library".  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a "work that uses the Library" uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or
link a "work that uses the Library" with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

    a) Accompany the work with the complete corresponding
    machine-readable source code for the Library including whatever
    changes were used in the work (which must be distributed under
    Sections 1 and 2 above); and, if the work is an executable linked
    with the Library, with the complete machine-readable "work that
    uses the Library", as object code and/or source code, so that the
    user can modify the Library and then relink to produce a modified
    executable containing the modified Library.  (It is understood
    that the user who changes the contents of definitions files in the
    Library will not necessarily be able to recompile the application
    to use the modified definitions.)

    b) Use a suitable shared library mechanism for linking with the
    Library.  A suitable mechanism is one that (1) uses at run time a
    copy of the library already present on the user's computer system,
    rather than copying library functions into the executable, and (2)
    will operate properly with a modified version of the library, if
    the user installs one, as long as the modified version is
    interface-compatible with the version that the work was made with.

    c) Accompany the work with a written offer, valid for at
    least three years, to give the same user the materials
    specified in Subsection 6a, above, for a charge no more
    than the cost of performing this distribution.

    d) If distribution of the work is made by offering access to copy
    from a designated place, offer equivalent access to copy the above
    specified materials from the same place.

    e) Verify that the user has already received a copy of these
    materials or that you have already sent this user a copy.

  For an executable, the required form of the "work that uses the
Library" must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies
the executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

  7. You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

    a) Accompany the combined library with a copy of the same work
    based on the Library, uncombined with any other library
    facilities.  This must be distributed under the terms of the
    Sections above.

    b) Give prominent notice with the combined library of the fact
    that part of it is a work based on the Library, and explaining
    where to find the accompanying uncombined form of the same work.

  8. You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

  9. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

  11. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

  13. The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
"any later version", you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

			    NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

		     END OF TERMS AND CONDITIONS

           How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

    <one line to give the library's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the library, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the
  library `Frob' (a library for tweaking knobs) written by James Random Hacker.

  <signature of Ty Coon>, 1 April 1990
  Ty Coon, President of Vice

That's all there is to it!




--- Contenu du fichier : filepaths.rst.txt ---
File Path Function Arguments
============================

A pygame function or method which takes a file path argument will accept
either a Unicode or a byte (8-bit or ASCII character) string.
Unicode strings are translated to Python's default filesystem encoding,
as returned by sys.getfilesystemencoding().  A Unicode code point
above U+FFFF (``\uFFFF``) can be coded directly with a 32-bit escape sequences
(``\Uxxxxxxxx``), even for Python interpreters built with an UCS-2
(16-bit character) Unicode type.  Byte strings are passed
to the operating system unchanged.

Null characters (``\x00``) are not permitted in the path, raising an exception.
An exception is also raised if an Unicode file path cannot be encoded.
How UTF-16 surrogate codes are handled is Python-interpreter-dependent.
Use UTF-32 code points and 32-bit escape sequences instead.
The exception types are function-dependent.


--- Contenu du fichier : c_api.rst.txt ---
pygame C API
============

.. toctree::
   :maxdepth: 1
   :glob:

   c_api/slots.rst
   c_api/base.rst
   c_api/bufferproxy.rst
   c_api/color.rst
   c_api/display.rst
   c_api/event.rst
   c_api/freetype.rst
   c_api/mixer.rst
   c_api/rect.rst
   c_api/rwobject.rst
   c_api/surface.rst
   c_api/surflock.rst
   c_api/version.rst


src_c/include/ contains header files for applications
that use the pygame C API, while src_c/ contains
headers used by pygame internally.


--- Contenu du fichier : index.rst.txt ---
Pygame Front Page
=================

.. toctree::
   :maxdepth: 2
   :glob:
   :hidden:

   ref/*
   tut/*
   tut/en/**/*
   tut/ko/**/*
   c_api
   filepaths
   logos

Quick start
-----------

Welcome to pygame! Once you've got pygame installed (:code:`pip install pygame` or
:code:`pip3 install pygame` for most people), the next question is how to get a game
loop running. Pygame, unlike some other libraries, gives you full control of program
execution. That freedom means it is easy to mess up in your initial steps.

Here is a good example of a basic setup (opens the window, updates the screen, and handles events)--

.. literalinclude:: ref/code_examples/base_script.py

Here is a slightly more fleshed out example, which shows you how to move something
(a circle in this case) around on screen--

.. literalinclude:: ref/code_examples/base_script_example.py

For more in depth reference, check out the :ref:`tutorials-reference-label`
section below, check out a video tutorial (`I'm a fan of this one
<https://www.youtube.com/watch?v=AY9MnQ4x3zk>`_), or reference the API
documentation by module.

Documents
---------

`Readme`_
  Basic information about pygame: what it is, who is involved, and where to find it.

`Install`_
  Steps needed to compile pygame on several platforms.
  Also help on finding and installing prebuilt binaries for your system.

:doc:`filepaths`
  How pygame handles file system paths.

:doc:`Pygame Logos <logos>`
   The logos of Pygame in different resolutions.


`LGPL License`_
  This is the license pygame is distributed under.
  It provides for pygame to be distributed with open source and commercial software.
  Generally, if pygame is not changed, it can be used with any type of program.

.. _tutorials-reference-label:

Tutorials
---------

:doc:`Introduction to Pygame <tut/PygameIntro>`
  An introduction to the basics of pygame.
  This is written for users of Python and appeared in volume two of the Py magazine.

:doc:`Import and Initialize <tut/ImportInit>`
  The beginning steps on importing and initializing pygame.
  The pygame package is made of several modules.
  Some modules are not included on all platforms.

:doc:`How do I move an Image? <tut/MoveIt>`
  A basic tutorial that covers the concepts behind 2D computer animation.
  Information about drawing and clearing objects to make them appear animated.

:doc:`Chimp Tutorial, Line by Line <tut/ChimpLineByLine>`
  The pygame examples include a simple program with an interactive fist and a chimpanzee.
  This was inspired by the annoying flash banner of the early 2000s.
  This tutorial examines every line of code used in the example.

:doc:`Sprite Module Introduction <tut/SpriteIntro>`
  Pygame includes a higher level sprite module to help organize games.
  The sprite module includes several classes that help manage details found in almost all games types.
  The Sprite classes are a bit more advanced than the regular pygame modules,
  and need more understanding to be properly used.

:doc:`Surfarray Introduction <tut/SurfarrayIntro>`
  Pygame used the NumPy python module to allow efficient per pixel effects on images.
  Using the surface arrays is an advanced feature that allows custom effects and filters.
  This also examines some of the simple effects from the pygame example, arraydemo.py.

:doc:`Camera Module Introduction <tut/CameraIntro>`
  Pygame, as of 1.9, has a camera module that allows you to capture images,
  watch live streams, and do some basic computer vision.
  This tutorial covers those use cases.

:doc:`Newbie Guide <tut/newbieguide>`
  A list of thirteen helpful tips for people to get comfortable using pygame.

:doc:`Making Games Tutorial <tut/MakeGames>`
  A large tutorial that covers the bigger topics needed to create an entire game.

:doc:`Display Modes <tut/DisplayModes>`
  Getting a display surface for the screen.

:doc:`한국어 튜토리얼 (Korean Tutorial) <tut/ko/빨간블록 검은블록/개요>`
  빨간블록 검은블록


Reference
---------

:ref:`genindex`
  A list of all functions, classes, and methods in the pygame package.

:doc:`ref/bufferproxy`
  An array protocol view of surface pixels

:doc:`ref/color`
  Color representation.

:doc:`ref/cursors`
  Loading and compiling cursor images.

:doc:`ref/display`
  Configure the display surface.

:doc:`ref/draw`
  Drawing simple shapes like lines and ellipses to surfaces.

:doc:`ref/event`
  Manage the incoming events from various input devices and the windowing platform.

:doc:`ref/examples`
  Various programs demonstrating the use of individual pygame modules.

:doc:`ref/font`
  Loading and rendering TrueType fonts.

:doc:`ref/freetype`
  Enhanced pygame module for loading and rendering font faces.

:doc:`ref/gfxdraw`
  Anti-aliasing draw functions.

:doc:`ref/image`
  Loading, saving, and transferring of surfaces.

:doc:`ref/joystick`
  Manage the joystick devices.

:doc:`ref/key`
  Manage the keyboard device.

:doc:`ref/locals`
  Pygame constants.

:doc:`ref/mixer`
  Load and play sounds

:doc:`ref/mouse`
  Manage the mouse device and display.

:doc:`ref/music`
  Play streaming music tracks.

:doc:`ref/pygame`
  Top level functions to manage pygame.

:doc:`ref/pixelarray`
  Manipulate image pixel data.

:doc:`ref/rect`
  Flexible container for a rectangle.

:doc:`ref/scrap`
  Native clipboard access.

:doc:`ref/sndarray`
  Manipulate sound sample data.

:doc:`ref/sprite`
  Higher level objects to represent game images.

:doc:`ref/surface`
  Objects for images and the screen.

:doc:`ref/surfarray`
  Manipulate image pixel data.

:doc:`ref/tests`
  Test pygame.

:doc:`ref/time`
  Manage timing and framerate.

:doc:`ref/transform`
  Resize and move images.

:doc:`pygame C API <c_api>`
  The C api shared amongst pygame extension modules.

:ref:`search`
  Search pygame documents by keyword.

.. _Readme: ../wiki/about

.. _Install: ../wiki/GettingStarted#Pygame%20Installation

.. _LGPL License: LGPL.txt


--- Contenu du fichier : logos.rst.txt ---
*************************************************
  Pygame Logos Page
*************************************************

Pygame Logos
============

These logos are available for use in your own game projects.
Please put them up wherever you see fit. The logo was created
by TheCorruptor on July 29, 2001 and upscaled by Mega_JC on
August 29, 2021.

.. container:: fullwidth

    .. image:: _static/pygame_logo.png

    | `pygame_logo.svg <_static/pygame_logo.svg>`_
    | `pygame_logo.png <_static/pygame_logo.png>`_ - 1561 x 438

    .. image:: _static/pygame_lofi.png

    | `pygame_lofi.svg <_static/pygame_lofi.svg>`_
    | `pygame_lofi.png <_static/pygame_lofi.png>`_ - 1561 x 438

    .. image:: _static/pygame_powered.png

    | `pygame_powered.svg <_static/pygame_powered.svg>`_
    | `pygame_powered.png <_static/pygame_powered.png>`_ - 1617 x 640

    .. image:: _static/pygame_tiny.png

    | `pygame_tiny.png <_static/pygame_tiny.png>`_ - 214 x 60

    .. image:: _static/pygame_powered_lowres.png

    | `pygame_powered_lowres.png <_static/pygame_powered_lowres.png>`_ - 101 x 40


There is a higher resolution layered photoshop image
available `here <https://www.pygame.org/ftp/pygame_logo.psd>`_. *(1.3 MB)*

Legacy logos
------------

.. container:: fullwidth

    `legacy_logos.zip <_static/legacy_logos.zip>`_ - 50.1 KB

--- Contenu du fichier : key.rst.txt ---
.. include:: common.txt

:mod:`pygame.key`
=================

.. module:: pygame.key
   :synopsis: pygame module to work with the keyboard

| :sl:`pygame module to work with the keyboard`

This module contains functions for dealing with the keyboard.

The :mod:`pygame.event` queue gets ``pygame.KEYDOWN`` and ``pygame.KEYUP``
events when the keyboard buttons are pressed and released. Both events have
``key`` and ``mod`` attributes.

   * ``key``: an :ref:`integer ID <key-constants-label>` representing every key
     on the keyboard
   * ``mod``: a bitmask of all the :ref:`modifier keys <key-modifiers-label>`
     that were in a pressed state when the event occurred

The ``pygame.KEYDOWN`` event has the additional attributes ``unicode`` and
``scancode``.

   * ``unicode``: a single character string that is the fully translated
     character entered, this takes into account the shift and composition keys
   * ``scancode``: the platform-specific key code, which could be different from
     keyboard to keyboard, but is useful for key selection of weird keys like
     the multimedia keys

.. versionadded:: 2.0.0
    The ``pygame.TEXTINPUT`` event is preferred to the ``unicode`` attribute
    of ``pygame.KEYDOWN``. The attribute ``text`` contains the input.


.. _key-constants-label:

The following is a list of all the constants (from :mod:`pygame.locals`) used to
represent keyboard keys.

Portability note: The integers for key constants differ between pygame 1 and 2.
Always use key constants (``K_a``) rather than integers directly (``97``) so
that your key handling code works well on both pygame 1 and pygame 2.


::

      pygame
      Constant      ASCII   Description
      ---------------------------------
      K_BACKSPACE   \b      backspace
      K_TAB         \t      tab
      K_CLEAR               clear
      K_RETURN      \r      return
      K_PAUSE               pause
      K_ESCAPE      ^[      escape
      K_SPACE               space
      K_EXCLAIM     !       exclaim
      K_QUOTEDBL    "       quotedbl
      K_HASH        #       hash
      K_DOLLAR      $       dollar
      K_AMPERSAND   &       ampersand
      K_QUOTE               quote
      K_LEFTPAREN   (       left parenthesis
      K_RIGHTPAREN  )       right parenthesis
      K_ASTERISK    *       asterisk
      K_PLUS        +       plus sign
      K_COMMA       ,       comma
      K_MINUS       -       minus sign
      K_PERIOD      .       period
      K_SLASH       /       forward slash
      K_0           0       0
      K_1           1       1
      K_2           2       2
      K_3           3       3
      K_4           4       4
      K_5           5       5
      K_6           6       6
      K_7           7       7
      K_8           8       8
      K_9           9       9
      K_COLON       :       colon
      K_SEMICOLON   ;       semicolon
      K_LESS        <       less-than sign
      K_EQUALS      =       equals sign
      K_GREATER     >       greater-than sign
      K_QUESTION    ?       question mark
      K_AT          @       at
      K_LEFTBRACKET [       left bracket
      K_BACKSLASH   \       backslash
      K_RIGHTBRACKET ]      right bracket
      K_CARET       ^       caret
      K_UNDERSCORE  _       underscore
      K_BACKQUOTE   `       grave
      K_a           a       a
      K_b           b       b
      K_c           c       c
      K_d           d       d
      K_e           e       e
      K_f           f       f
      K_g           g       g
      K_h           h       h
      K_i           i       i
      K_j           j       j
      K_k           k       k
      K_l           l       l
      K_m           m       m
      K_n           n       n
      K_o           o       o
      K_p           p       p
      K_q           q       q
      K_r           r       r
      K_s           s       s
      K_t           t       t
      K_u           u       u
      K_v           v       v
      K_w           w       w
      K_x           x       x
      K_y           y       y
      K_z           z       z
      K_DELETE              delete
      K_KP0                 keypad 0
      K_KP1                 keypad 1
      K_KP2                 keypad 2
      K_KP3                 keypad 3
      K_KP4                 keypad 4
      K_KP5                 keypad 5
      K_KP6                 keypad 6
      K_KP7                 keypad 7
      K_KP8                 keypad 8
      K_KP9                 keypad 9
      K_KP_PERIOD   .       keypad period
      K_KP_DIVIDE   /       keypad divide
      K_KP_MULTIPLY *       keypad multiply
      K_KP_MINUS    -       keypad minus
      K_KP_PLUS     +       keypad plus
      K_KP_ENTER    \r      keypad enter
      K_KP_EQUALS   =       keypad equals
      K_UP                  up arrow
      K_DOWN                down arrow
      K_RIGHT               right arrow
      K_LEFT                left arrow
      K_INSERT              insert
      K_HOME                home
      K_END                 end
      K_PAGEUP              page up
      K_PAGEDOWN            page down
      K_F1                  F1
      K_F2                  F2
      K_F3                  F3
      K_F4                  F4
      K_F5                  F5
      K_F6                  F6
      K_F7                  F7
      K_F8                  F8
      K_F9                  F9
      K_F10                 F10
      K_F11                 F11
      K_F12                 F12
      K_F13                 F13
      K_F14                 F14
      K_F15                 F15
      K_NUMLOCK             numlock
      K_CAPSLOCK            capslock
      K_SCROLLOCK           scrollock
      K_RSHIFT              right shift
      K_LSHIFT              left shift
      K_RCTRL               right control
      K_LCTRL               left control
      K_RALT                right alt
      K_LALT                left alt
      K_RMETA               right meta
      K_LMETA               left meta
      K_LSUPER              left Windows key
      K_RSUPER              right Windows key
      K_MODE                mode shift
      K_HELP                help
      K_PRINT               print screen
      K_SYSREQ              sysrq
      K_BREAK               break
      K_MENU                menu
      K_POWER               power
      K_EURO                Euro
      K_AC_BACK             Android back button


.. _key-modifiers-label:

The keyboard also has a list of modifier states (from :mod:`pygame.locals`) that
can be assembled by bitwise-ORing them together.

::

      pygame
      Constant      Description
      -------------------------
      KMOD_NONE     no modifier keys pressed
      KMOD_LSHIFT   left shift
      KMOD_RSHIFT   right shift
      KMOD_SHIFT    left shift or right shift or both
      KMOD_LCTRL    left control
      KMOD_RCTRL    right control
      KMOD_CTRL     left control or right control or both
      KMOD_LALT     left alt
      KMOD_RALT     right alt
      KMOD_ALT      left alt or right alt or both
      KMOD_LMETA    left meta
      KMOD_RMETA    right meta
      KMOD_META     left meta or right meta or both
      KMOD_CAPS     caps lock
      KMOD_NUM      num lock
      KMOD_MODE     AltGr


The modifier information is contained in the ``mod`` attribute of the
``pygame.KEYDOWN`` and ``pygame.KEYUP`` events. The ``mod`` attribute is a
bitmask of all the modifier keys that were in a pressed state when the event
occurred. The modifier information can be decoded using a bitwise AND (except
for ``KMOD_NONE``, which should be compared using equals ``==``). For example:

::

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN or event.type == pygame.KEYUP:
            if event.mod == pygame.KMOD_NONE:
                print('No modifier keys were in a pressed state when this '
                      'event occurred.')
            else:
                if event.mod & pygame.KMOD_LSHIFT:
                    print('Left shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_RSHIFT:
                    print('Right shift was in a pressed state when this event '
                          'occurred.')
                if event.mod & pygame.KMOD_SHIFT:
                    print('Left shift or right shift or both were in a '
                          'pressed state when this event occurred.')



.. function:: get_focused

   | :sl:`true if the display is receiving keyboard input from the system`
   | :sg:`get_focused() -> bool`

   Returns ``True`` when the display window has keyboard focus from the
   system. If the display needs to ensure it does not lose keyboard focus, it
   can use :func:`pygame.event.set_grab()` to grab all input.

   .. ## pygame.key.get_focused ##

.. function:: get_pressed

   | :sl:`get the state of all keyboard buttons`
   | :sg:`get_pressed() -> bools`

   Returns a sequence of boolean values representing the state of every key on
   the keyboard. Use the key constant values to index the array. A ``True``
   value means that the button is pressed.

   .. note::
      Getting the list of pushed buttons with this function is not the proper
      way to handle text entry from the user. There is no way to know the order
      of keys pressed, and rapidly pushed keys can be completely unnoticed
      between two calls to ``pygame.key.get_pressed()``. There is also no way to
      translate these pushed keys into a fully translated character value. See
      the ``pygame.KEYDOWN`` events on the :mod:`pygame.event` queue for this
      functionality.
   
   .. versionadded:: 2.2.0
      The collection of bools returned by ``get_pressed`` can not be iterated
      over because the indexes of the internal tuple does not correspond to the 
      keycodes.

   .. versionadded:: 2.5.0
      Iteration over the collection of bools returned by ``get_pressed`` is now
      restored. However it still does not make sense to iterate over it. Currently.

   .. ## pygame.key.get_pressed ##

.. function:: get_mods

   | :sl:`determine which modifier keys are being held`
   | :sg:`get_mods() -> int`

   Returns a single integer representing a bitmask of all the modifier keys
   being held. Using bitwise operators you can test if specific
   :ref:`modifier keys <key-modifiers-label>` are pressed.

   .. ## pygame.key.get_mods ##

.. function:: set_mods

   | :sl:`temporarily set which modifier keys are pressed`
   | :sg:`set_mods(int) -> None`

   Create a bitmask of the :ref:`modifier key constants <key-modifiers-label>`
   you want to impose on your program.

   .. ## pygame.key.set_mods ##

.. function:: set_repeat

   | :sl:`control how held keys are repeated`
   | :sg:`set_repeat() -> None`
   | :sg:`set_repeat(delay) -> None`
   | :sg:`set_repeat(delay, interval) -> None`

   When the keyboard repeat is enabled, keys that are held down will generate
   multiple ``pygame.KEYDOWN`` events. The ``delay`` parameter is the number of
   milliseconds before the first repeated ``pygame.KEYDOWN`` event will be sent.
   After that, another ``pygame.KEYDOWN`` event will be sent every ``interval``
   milliseconds. If a ``delay`` value is provided and an ``interval`` value is
   not provided or is 0, then the ``interval`` will be set to the same value as
   ``delay``.

   To disable key repeat call this function with no arguments or with ``delay``
   set to 0.

   When pygame is initialized the key repeat is disabled.

   :raises ValueError: if ``delay`` or ``interval`` is < 0

   .. versionchanged:: 2.0.0 A ``ValueError`` is now raised (instead of a
      ``pygame.error``) if ``delay`` or ``interval`` is < 0.

   .. ## pygame.key.set_repeat ##

.. function:: get_repeat

   | :sl:`see how held keys are repeated`
   | :sg:`get_repeat() -> (delay, interval)`

   Get the ``delay`` and ``interval`` keyboard repeat values. Refer to
   :func:`pygame.key.set_repeat()` for a description of these values.

   .. versionadded:: 1.8

   .. ## pygame.key.get_repeat ##

.. function:: name

   | :sl:`get the name of a key identifier`
   | :sg:`name(key, use_compat=True) -> str`

   Get the descriptive name of the button from a keyboard button id constant.
   Returns an empty string (``""``) if the key is not found.

   If ``use_compat`` argument is ``True`` (which is the default), this function
   returns the legacy name of a key where applicable. The return value is
   expected to be the same across different pygame versions (provided the
   corresponding key constant exists and is unique). If the return value is
   passed to the ``key_code`` function, the original constant will be returned.

   **Experimental:** ``use_compat`` parameter still in development for testing and feedback. It may change.
   `Please leave use_compat feedback with authors <https://github.com/pygame/pygame/pull/3312>`_

   If this argument is ``False``, the returned name may be prettier to display
   and may cover a wider range of keys than with ``use_compat``, but there are
   no guarantees that this name will be the same across different pygame
   versions. If the name returned is passed to the ``key_code`` function, the
   original constant is returned back (this is an implementation detail which
   may change later, do not rely on this)

   .. versionchanged:: 2.1.3 Added ``use_compat`` argument and guaranteed API stability for it

   .. ## pygame.key.name ##

.. function:: key_code

   | :sl:`get the key identifier from a key name`
   | :sg:`key_code(name=string) -> int`

   Get the key identifier code from the descriptive name of the key. This
   returns an integer matching one of the K_* keycodes. For example:

   ::

        >>> pygame.key.key_code("return") == pygame.K_RETURN
        True
        >>> pygame.key.key_code("0") == pygame.K_0
        True
        >>> pygame.key.key_code("space") == pygame.K_SPACE
        True

   :raises ValueError: if the key name is not known.

   .. versionadded:: 2.0.0

   .. ## pygame.key.key_code ##

.. function:: start_text_input

   | :sl:`start handling Unicode text input events`
   | :sg:`start_text_input() -> None`

   Start receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If applicable, show the on-screen keyboard or IME editor.

   For many languages, key presses will automatically generate a
   corresponding ``pygame.TEXTINPUT`` event. Special keys like
   escape or function keys, and certain key combinations will not
   generate ``pygame.TEXTINPUT`` events.

   In other languages, entering a single symbol may require multiple
   key presses, or a language-specific user interface. In this case,
   ``pygame.TEXTINPUT`` events are preferable to ``pygame.KEYDOWN``
   events for text input.

   A ``pygame.TEXTEDITING`` event is received when an IME composition
   is started or changed. It contains the composition ``text``, ``length``,
   and editing ``start`` position within the composition (attributes
   ``text``, ``length``, and ``start``, respectively).
   When the composition is committed (or non-IME input is received),
   a ``pygame.TEXTINPUT`` event is generated.

   Text input events handling is on by default.

   .. versionadded:: 2.0.0

   .. ## pygame.key.start_text_input ##

.. function:: stop_text_input

   | :sl:`stop handling Unicode text input events`
   | :sg:`stop_text_input() -> None`

   Stop receiving ``pygame.TEXTEDITING`` and ``pygame.TEXTINPUT``
   events. If an on-screen keyboard or IME editor was shown with
   ``pygame.key.start_text_input()``, hide it again.

   Text input events handling is on by default.

   To avoid triggering the IME editor or the on-screen keyboard
   when the user is holding down a key during gameplay, text input
   should be disabled once text entry is finished, or when the user
   clicks outside of a text box.

   .. versionadded:: 2.0.0

   .. ## pygame.key.stop_text_input ##

.. function:: set_text_input_rect

   | :sl:`controls the position of the candidate list`
   | :sg:`set_text_input_rect(Rect) -> None`

   This sets the rectangle used for typing with an IME.
   It controls where the candidate list will open, if supported.

   .. versionadded:: 2.0.0

   .. ## pygame.key.set_text_input_rect ##

.. ## pygame.key ##


--- Contenu du fichier : pixelarray.rst.txt ---
.. include:: common.txt

:class:`pygame.PixelArray`
==========================

.. currentmodule:: pygame

.. class:: PixelArray

   | :sl:`pygame object for direct pixel access of surfaces`
   | :sg:`PixelArray(Surface) -> PixelArray`

   The PixelArray wraps a Surface and provides direct access to the
   surface's pixels. A pixel array can be one or two dimensional.
   A two dimensional array, like its surface, is indexed [column, row].
   Pixel arrays support slicing, both for returning a subarray or
   for assignment. A pixel array sliced on a single column or row
   returns a one dimensional pixel array. Arithmetic and other operations
   are not supported. A pixel array can be safely assigned to itself.
   Finally, pixel arrays export an array struct interface, allowing
   them to interact with :mod:`pygame.pixelcopy` methods and NumPy
   arrays.

   A PixelArray pixel item can be assigned a raw integer values, a
   :class:`pygame.Color` instance, or a (r, g, b[, a]) tuple.

   ::

     pxarray[x, y] = 0xFF00FF
     pxarray[x, y] = pygame.Color(255, 0, 255)
     pxarray[x, y] = (255, 0, 255)

   However, only a pixel's integer value is returned. So, to compare a pixel
   to a particular color the color needs to be first mapped using
   the :meth:`Surface.map_rgb()` method of the Surface object for which the
   PixelArray was created.

   ::

     pxarray = pygame.PixelArray(surface)
     # Check, if the first pixel at the topleft corner is blue
     if pxarray[0, 0] == surface.map_rgb((0, 0, 255)):
         ...

   When assigning to a range of of pixels, a non tuple sequence of colors or
   a PixelArray can be used as the value. For a sequence, the length must
   match the PixelArray width.

   ::

     pxarray[a:b] = 0xFF00FF                   # set all pixels to 0xFF00FF
     pxarray[a:b] = (0xFF00FF, 0xAACCEE, ... ) # first pixel = 0xFF00FF,
                                               # second pixel  = 0xAACCEE, ...
     pxarray[a:b] = [(255, 0, 255), (170, 204, 238), ...] # same as above
     pxarray[a:b] = [(255, 0, 255), 0xAACCEE, ...]        # same as above
     pxarray[a:b] = otherarray[x:y]            # slice sizes must match

   For PixelArray assignment, if the right hand side array has a row length
   of 1, then the column is broadcast over the target array's rows. An
   array of height 1 is broadcast over the target's columns, and is equivalent
   to assigning a 1D PixelArray.

   Subscript slices can also be used to assign to a rectangular subview of
   the target PixelArray.

   ::

     # Create some new PixelArray objects providing a different view
     # of the original array/surface.
     newarray = pxarray[2:4, 3:5]
     otherarray = pxarray[::2, ::2]

   Subscript slices can also be used to do fast rectangular pixel manipulations
   instead of iterating over the x or y axis. The

   ::

     pxarray[::2, :] = (0, 0, 0)               # Make even columns black.
     pxarray[::2] = (0, 0, 0)                  # Same as [::2, :]

   During its lifetime, the PixelArray locks the surface, thus you explicitly
   have to close() it once its not used any more and the surface should perform
   operations in the same scope. It is best to use it as a context manager
   using the with PixelArray(surf) as pixel_array: style. So it works on pypy too.

   A simple ``:`` slice index for the column can be omitted.

   ::

     pxarray[::2, ...] = (0, 0, 0)             # Same as pxarray[::2, :]
     pxarray[...] = (255, 0, 0)                # Same as pxarray[:]

   A note about PixelArray to PixelArray assignment, for arrays with an
   item size of 3 (created from 24 bit surfaces) pixel values are translated
   from the source to the destinations format. The red, green, and blue
   color elements of each pixel are shifted to match the format of the
   target surface. For all other pixel sizes no such remapping occurs.
   This should change in later pygame releases, where format conversions
   are performed for all pixel sizes. To avoid code breakage when full mapped
   copying is implemented it is suggested PixelArray to PixelArray copies be
   only between surfaces of identical format.

   .. versionadded:: 1.9.4

    - close() method was added. For explicitly cleaning up.
    - being able to use PixelArray as a context manager for cleanup.
    - both of these are useful for when working without reference counting (pypy).

   .. versionadded:: 1.9.2

    - array struct interface
    - transpose method
    - broadcasting for a length 1 dimension

   .. versionchanged:: 1.9.2

    - A 2D PixelArray can have a length 1 dimension.
      Only an integer index on a 2D PixelArray returns a 1D array.
    - For assignment, a tuple can only be a color. Any other sequence type
      is a sequence of colors.


   .. versionadded: 1.8.0
      Subscript support

   .. versionadded: 1.8.1
      Methods :meth:`make_surface`, :meth:`replace`, :meth:`extract`, and
      :meth:`compare`

   .. versionadded: 1.9.2
      Properties :attr:`itemsize`, :attr:`ndim`, :attr:`shape`,
      and :attr:`strides`

   .. versionadded: 1.9.2
      Array struct interface

   .. versionadded: 1.9.4
      Methods :meth:`close`

   .. attribute:: surface

      | :sl:`Gets the Surface the PixelArray uses.`
      | :sg:`surface -> Surface`

      The Surface the PixelArray was created for.

      .. ## PixelArray.surface ##

   .. attribute:: itemsize

      | :sl:`Returns the byte size of a pixel array item`
      | :sg:`itemsize -> int`

      This is the same as :meth:`Surface.get_bytesize` for the
      pixel array's surface.

      .. versionadded:: 1.9.2

   .. attribute:: ndim

      | :sl:`Returns the number of dimensions.`
      | :sg:`ndim -> int`

      A pixel array can be 1 or 2 dimensional.

      .. versionadded:: 1.9.2

   .. attribute:: shape

      | :sl:`Returns the array size.`
      | :sg:`shape -> tuple of int's`

      A tuple or length :attr:`ndim` giving the length of each
      dimension. Analogous to :meth:`Surface.get_size`.

      .. versionadded:: 1.9.2

   .. attribute:: strides

      | :sl:`Returns byte offsets for each array dimension.`
      | :sg:`strides -> tuple of int's`

      A tuple or length :attr:`ndim` byte counts. When a stride is
      multiplied by the corresponding index it gives the offset
      of that index from the start of the array. A stride is negative
      for an array that has is inverted (has a negative step).

      .. versionadded:: 1.9.2

   .. method:: make_surface

      | :sl:`Creates a new Surface from the current PixelArray.`
      | :sg:`make_surface() -> Surface`

      Creates a new Surface from the current PixelArray. Depending on the
      current PixelArray the size, pixel order etc. will be different from the
      original Surface.

      ::

        # Create a new surface flipped around the vertical axis.
        sf = pxarray[:,::-1].make_surface ()

      .. versionadded:: 1.8.1

      .. ## PixelArray.make_surface ##

   .. method:: replace

      | :sl:`Replaces the passed color in the PixelArray with another one.`
      | :sg:`replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -> None`

      Replaces the pixels with the passed color in the PixelArray by changing
      them them to the passed replacement color.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      replacement to take pixels with a similar, but not exactly identical
      color, into account as well.

      This is an in place operation that directly affects the pixels of the
      PixelArray.

      .. versionadded:: 1.8.1

      .. ## PixelArray.replace ##

   .. method:: extract

      | :sl:`Extracts the passed color from the PixelArray.`
      | :sg:`extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Extracts the passed color by changing all matching pixels to white, while
      non-matching pixels are changed to black. This returns a new PixelArray
      with the black/white color mask.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as threshold for the color detection. This causes the
      extraction to take pixels with a similar, but not exactly identical
      color, into account as well.

      .. versionadded:: 1.8.1

      .. ## PixelArray.extract ##

   .. method:: compare

      | :sl:`Compares the PixelArray with another one.`
      | :sg:`compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray`

      Compares the contents of the PixelArray with those from the passed in
      PixelArray. It returns a new PixelArray with a black/white color mask
      that indicates the differences (black) of both arrays. Both PixelArray
      objects must have identical bit depths and dimensions.

      It uses a simple weighted Euclidean distance formula to calculate the
      distance between the colors. The distance space ranges from 0.0 to 1.0
      and is used as a threshold for the color detection. This causes the
      comparison to mark pixels with a similar, but not exactly identical
      color, as white.

      .. versionadded:: 1.8.1

      .. ## PixelArray.compare ##

   .. method:: transpose

      | :sl:`Exchanges the x and y axis.`
      | :sg:`transpose() -> PixelArray`

      This method returns a new view of the pixel array with the rows and
      columns swapped. So for a (w, h) sized array a (h, w) slice is returned.
      If an array is one dimensional, then a length 1 x dimension is added,
      resulting in a 2D pixel array.

      .. versionadded:: 1.9.2

      .. ## PixelArray.transpose ##

   .. method:: close

      | :sl:`Closes the PixelArray, and releases Surface lock.`
      | :sg:`close() -> PixelArray`

      This method is for explicitly closing the PixelArray, and releasing
      a lock on the Surface.

      .. versionadded:: 1.9.4

      .. ## PixelArray.close ##


   .. ## pygame.PixelArray ##


--- Contenu du fichier : freetype.rst.txt ---
.. include:: common.txt

:mod:`pygame.freetype`
======================

.. module:: pygame.freetype
   :synopsis: Enhanced pygame module for loading and rendering computer fonts

| :sl:`Enhanced pygame module for loading and rendering computer fonts`

The ``pygame.freetype`` module is a replacement for :mod:`pygame.font`.
It has all of the functionality of the original, plus many new features.
Yet is has absolutely no dependencies on the SDL_ttf library.
It is implemented directly on the FreeType 2 library.
The ``pygame.freetype`` module is not itself backward compatible with
:mod:`pygame.font`.
Instead, use the ``pygame.ftfont`` module as a drop-in replacement
for :mod:`pygame.font`.

All font file formats supported by FreeType can be rendered by
``pygame.freetype``, namely ``TTF``, Type1, ``CFF``, OpenType,
``SFNT``, ``PCF``, ``FNT``, ``BDF``, ``PFR`` and Type42 fonts.
All glyphs having UTF-32 code points are accessible
(see :attr:`Font.ucs4`).

Most work on fonts is done using :class:`Font` instances.
The module itself only has routines for initialization and creation
of :class:`Font` objects.
You can load fonts from the system using the :func:`SysFont` function.

Extra support of bitmap fonts is available. Available bitmap sizes can
be listed (see :meth:`Font.get_sizes`). For bitmap only fonts :class:`Font`
can set the size for you (see the :attr:`Font.size` property).

For now undefined character codes are replaced with the ``.notdef``
(not defined) character.
How undefined codes are handled may become configurable in a future release.

Pygame comes with a built-in default font. This can always be accessed by
passing None as the font name to the :class:`Font` constructor.

Extra rendering features available to :class:`pygame.freetype.Font`
are direct to surface rendering (see :meth:`Font.render_to`), character kerning
(see :attr:`Font.kerning`), vertical layout (see :attr:`Font.vertical`),
rotation of rendered text (see :attr:`Font.rotation`),
and the strong style (see :attr:`Font.strong`).
Some properties are configurable, such as
strong style strength (see :attr:`Font.strength`) and underline positioning
(see :attr:`Font.underline_adjustment`). Text can be positioned by the upper
right corner of the text box or by the text baseline (see :attr:`Font.origin`).
Finally, a font's vertical and horizontal size can be adjusted separately
(see :attr:`Font.size`).
The :any:`pygame.examples.freetype_misc <pygame.examples.freetype_misc.main>`
example shows these features in use.

The pygame package does not import ``freetype`` automatically when
loaded. This module must be imported explicitly to be used. ::

   import pygame
   import pygame.freetype

.. versionadded:: 1.9.2 :mod:`freetype`


.. function:: get_error

   | :sl:`Return the latest FreeType error`
   | :sg:`get_error() -> str`
   | :sg:`get_error() -> None`

   Return a description of the last error which occurred in the FreeType2
   library, or ``None`` if no errors have occurred.

.. function:: get_version

   | :sl:`Return the FreeType version`
   | :sg:`get_version(linked=True) -> (int, int, int)`

   Returns the version of the FreeType library in use by this module. ``linked=True``
   is the default behavior and returns the linked version of FreeType and ``linked=False``
   returns the compiled version of FreeType.

   Note that the ``freetype`` module depends on the FreeType 2 library.
   It will not compile with the original FreeType 1.0. Hence, the first element
   of the tuple will always be "2".

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

.. function:: init

   | :sl:`Initialize the underlying FreeType library.`
   | :sg:`init(cache_size=64, resolution=72) -> None`

   This function initializes the underlying FreeType library and must be
   called before trying to use any of the functionality of the ``freetype``
   module.

   However, :func:`pygame.init()` will automatically call this function
   if the ``freetype`` module is already imported. It is safe to call this
   function more than once.

   Optionally, you may specify a default *cache_size* for the Glyph cache: the
   maximum number of glyphs that will be cached at any given time by the
   module. Exceedingly small values will be automatically tuned for
   performance. Also a default pixel *resolution*, in dots per inch, can
   be given to adjust font scaling.

.. function:: quit

   | :sl:`Shut down the underlying FreeType library.`
   | :sg:`quit() -> None`

   This function closes the ``freetype`` module. After calling this
   function, you should not invoke any class, method or function related to the
   ``freetype`` module as they are likely to fail or might give unpredictable
   results. It is safe to call this function even if the module hasn't been
   initialized yet.

.. function:: get_init

   | :sl:`Returns True if the FreeType module is currently initialized.`
   | :sg:`get_init() -> bool`

   Returns ``True`` if the ``pygame.freetype`` module is currently initialized.

   .. versionadded:: 1.9.5

.. function:: was_init

   | :sl:`DEPRECATED: Use get_init() instead.`
   | :sg:`was_init() -> bool`

   DEPRECATED: Returns ``True`` if the ``pygame.freetype`` module is currently
   initialized. Use ``get_init()`` instead.

.. function:: get_cache_size

   | :sl:`Return the glyph case size`
   | :sg:`get_cache_size() -> long`

   See :func:`pygame.freetype.init()`.

.. function:: get_default_resolution

   | :sl:`Return the default pixel size in dots per inch`
   | :sg:`get_default_resolution() -> long`

   Returns the default pixel size, in dots per inch, for the module.
   The default is 72 DPI.

.. function:: set_default_resolution

   | :sl:`Set the default pixel size in dots per inch for the module`
   | :sg:`set_default_resolution([resolution])`

   Set the default pixel size, in dots per inch, for the module. If the
   optional argument is omitted or zero the resolution is reset to 72 DPI.

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested *bold* and *italic* flags. Pygame uses a small set of
   common font aliases. If the specific font you ask for is not available, a
   reasonable alternative may be used. If a suitable system font is not found
   this will fall back on loading the default pygame font.

   The font *name* can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

.. function:: get_default_font

   | :sl:`Get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the default pygame font. This is not the full path
   to the file. The file is usually in the same directory as the font module,
   but can also be bundled in a separate archive.

.. class:: Font

   | :sl:`Create a new Font instance from a supported font file.`
   | :sg:`Font(file, size=0, font_index=0, resolution=0, ucs4=False) -> Font`
   | :sg:`Font(pathlib.Path) -> Font`

   Argument *file* can be either a string representing the font's filename, a
   file-like object containing the font, or None; if None, a default,
   Pygame, font is used.

   .. _freetype-font-size-argument:

   Optionally, a *size* argument may be specified to set the default size in
   points, which determines the size of the rendered characters.
   The size can also be passed explicitly to each method call.
   Because of the way the caching   system works, specifying a default size on
   the constructor doesn't imply a performance gain over manually passing
   the size on each function call. If the font is bitmap and no *size*
   is given, the default size is set to the first available size for the font.

   If the font file has more than one font, the font to load can be chosen with
   the *index* argument. An exception is raised for an out-of-range font index
   value.

   The optional *resolution* argument sets the pixel size, in dots per inch,
   for use in scaling glyphs for this Font instance. If 0 then the default
   module value, set by :func:`init`, is used. The Font object's
   resolution can only be changed by re-initializing the Font instance.

   The optional *ucs4* argument, an integer, sets the default text translation
   mode: 0 (False) recognize UTF-16 surrogate pairs, any other value (True),
   to treat Unicode text as UCS-4, with no surrogate pairs. See
   :attr:`Font.ucs4`.

   .. attribute:: name

      | :sl:`Proper font name.`
      | :sg:`name -> string`

      Read only. Returns the real (long) name of the font, as
      recorded in the font file.

   .. attribute:: path

      | :sl:`Font file path`
      | :sg:`path -> unicode`

      Read only. Returns the path of the loaded font file

   .. attribute:: size

      | :sl:`The default point size used in rendering`
      | :sg:`size -> float`
      | :sg:`size -> (float, float)`

      Get or set the default size for text metrics and rendering. It can be
      a single point size, given as a Python ``int`` or ``float``, or a
      font ppem (width, height) ``tuple``. Size values are non-negative.
      A zero size or width represents an undefined size. In this case
      the size must be given as a method argument, or an exception is
      raised. A zero width but non-zero height is a ValueError.

      For a scalable font, a single number value is equivalent to a tuple
      with width equal height. A font can be stretched vertically with
      height set greater than width, or horizontally with width set
      greater than height. For embedded bitmaps, as listed by :meth:`get_sizes`,
      use the nominal width and height to select an available size.

      Font size differs for a non-scalable, bitmap, font. During a
      method call it must match one of the available sizes returned by
      method :meth:`get_sizes`. If not, an exception is raised.
      If the size is a single number, the size is first matched against the
      point size value. If no match, then the available size with the
      same nominal width and height is chosen.

   .. method:: get_rect

      | :sl:`Return the size and offset of rendered text`
      | :sg:`get_rect(text, style=STYLE_DEFAULT, rotation=0, size=0) -> rect`

      Gets the final dimensions and origin, in pixels, of *text* using the
      optional *size* in points, *style*, and *rotation*. For other
      relevant render properties, and for any optional argument not given,
      the default values set for the :class:`Font` instance are used.

      Returns a :class:`Rect <pygame.Rect>` instance containing the
      width and height of the text's bounding box and the position of the
      text's origin.
      The origin is useful in aligning separately rendered pieces of text.
      It gives the baseline position and bearing at the start of the text.
      See the :meth:`render_to` method for an example.

      If *text* is a char (byte) string, its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will return the bounding
      rectangle for the text passed to a previous :meth:`get_rect`,
      :meth:`render`, :meth:`render_to`, :meth:`render_raw`, or
      :meth:`render_raw_to` call. See :meth:`render_to` for more
      details.

   .. method:: get_metrics

      | :sl:`Return the glyph metrics for the given text`
      | :sg:`get_metrics(text, size=0) -> [(...), ...]`

      Returns the glyph metrics for each character in *text*.

      The glyph metrics are returned as a list of tuples. Each tuple gives
      metrics of a single character glyph. The glyph metrics are:

      ::

          (min_x, max_x, min_y, max_y, horizontal_advance_x, horizontal_advance_y)

      The bounding box min_x, max_x, min_y, and max_y values are returned as
      grid-fitted pixel coordinates of type int. The advance values are
      float values.

      The calculations are done using the font's default size in points.
      Optionally you may specify another point size with the *size* argument.

      The metrics are adjusted for the current rotation, strong, and oblique
      settings.

      If text is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. attribute:: height

      | :sl:`The unscaled height of the font in font units`
      | :sg:`height -> int`

      Read only. Gets the height of the font. This is the average value of all
      glyphs in the font.

   .. attribute:: ascender

      | :sl:`The unscaled ascent of the font in font units`
      | :sg:`ascender -> int`

      Read only. Return the number of units from the font's baseline to
      the top of the bounding box.

   .. attribute:: descender

      | :sl:`The unscaled descent of the font in font units`
      | :sg:`descender -> int`

      Read only. Return the height in font units for the font descent.
      The descent is the number of units from the font's baseline to the
      bottom of the bounding box.

   .. method:: get_sized_ascender

      | :sl:`The scaled ascent of the font in pixels`
      | :sg:`get_sized_ascender(<size>=0) -> int`

      Return the number of units from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_descender

      | :sl:`The scaled descent of the font in pixels`
      | :sg:`get_sized_descender(<size>=0) -> int`

      Return the number of pixels from the font's baseline to the top of the
      bounding box. It is not adjusted for strong or rotation.

   .. method:: get_sized_height

      | :sl:`The scaled height of the font in pixels`
      | :sg:`get_sized_height(<size>=0) -> int`

      Returns the height of the font. This is the average value of all
      glyphs in the font. It is not adjusted for strong or rotation.

   .. method:: get_sized_glyph_height

      | :sl:`The scaled bounding box height of the font in pixels`
      | :sg:`get_sized_glyph_height(<size>=0) -> int`

      Return the glyph bounding box height of the font in pixels.
      This is the average value of all glyphs in the font.
      It is not adjusted for strong or rotation.

   .. method:: get_sizes

      | :sl:`return the available sizes of embedded bitmaps`
      | :sg:`get_sizes() -> [(int, int, int, float, float), ...]`
      | :sg:`get_sizes() -> []`

      Returns a list of tuple records, one for each point size
      supported. Each tuple containing the point size, the height in pixels,
      width in pixels, horizontal ppem (nominal width) in fractional pixels,
      and vertical ppem (nominal height) in fractional pixels.

   .. method:: render

      | :sl:`Return rendered text as a surface`
      | :sg:`render(text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> (Surface, Rect)`

      Returns a new :class:`Surface <pygame.Surface>`,
      with the text rendered to it
      in the color given by 'fgcolor'. If no foreground color is given,
      the default foreground color, :attr:`fgcolor <Font.fgcolor>` is used.
      If ``bgcolor`` is given, the surface
      will be filled with this color. When no background color is given,
      the surface background is transparent, zero alpha. Normally the returned
      surface has a 32 bit pixel size. However, if ``bgcolor`` is ``None``
      and anti-aliasing is disabled a monochrome 8 bit colorkey surface,
      with colorkey set for the background color, is returned.

      The return value is a tuple: the new surface and the bounding
      rectangle giving the size and origin of the rendered text.

      If an empty string is passed for text then the returned Rect is zero
      width and the height of the font.

      Optional *fgcolor*, *style*, *rotation*, and *size* arguments override
      the default values set for the :class:`Font` instance.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

      Optionally, *text* can be ``None``, which will render the text
      passed to a previous :meth:`get_rect`, :meth:`render`, :meth:`render_to`,
      :meth:`render_raw`, or :meth:`render_raw_to` call.
      See :meth:`render_to` for details.

   .. method:: render_to

      | :sl:`Render text onto an existing surface`
      | :sg:`render_to(surf, dest, text, fgcolor=None, bgcolor=None, style=STYLE_DEFAULT, rotation=0, size=0) -> Rect`

      Renders the string *text* to the :mod:`pygame.Surface` *surf*,
      at position *dest*, a (x, y) surface coordinate pair.
      If either x or y is not an integer it is converted to one if possible.
      Any sequence where the first two items are x and y positional elements
      is accepted, including a :class:`Rect <pygame.Rect>` instance.
      As with :meth:`render`,
      optional *fgcolor*, *style*, *rotation*, and *size* argument are
      available.

      If a background color *bgcolor* is given, the text bounding box is
      first filled with that color. The text is blitted next.
      Both the background fill and text rendering involve full alpha blits.
      That is, the alpha values of the foreground, background, and destination
      target surface all affect the blit.

      The return value is a rectangle giving the size and position of the
      rendered text within the surface.

      If an empty string is passed for text then the returned
      :class:`Rect <pygame.Rect>` is zero width and the height of the font.
      The rect will test False.

      Optionally, *text* can be set ``None``, which will re-render text
      passed to a previous :meth:`render_to`, :meth:`get_rect`, :meth:`render`,
      :meth:`render_raw`, or :meth:`render_raw_to` call. Primarily, this
      feature is an aid to using :meth:`render_to` in combination with
      :meth:`get_rect`. An example: ::

          def word_wrap(surf, text, font, color=(0, 0, 0)):
              font.origin = True
              words = text.split(' ')
              width, height = surf.get_size()
              line_spacing = font.get_sized_height() + 2
              x, y = 0, line_spacing
              space = font.get_rect(' ')
              for word in words:
                  bounds = font.get_rect(word)
                  if x + bounds.width + bounds.x >= width:
                      x, y = 0, y + line_spacing
                  if x + bounds.width + bounds.x >= width:
                      raise ValueError("word too wide for the surface")
                  if y + bounds.height - bounds.y >= height:
                      raise ValueError("text to long for the surface")
                  font.render_to(surf, (x, y), None, color)
                  x += bounds.width + space.width
              return x, y

      When :meth:`render_to` is called with the same
      font properties ― :attr:`size`, :attr:`style`, :attr:`strength`,
      :attr:`wide`, :attr:`antialiased`, :attr:`vertical`, :attr:`rotation`,
      :attr:`kerning`, and :attr:`use_bitmap_strikes` ― as :meth:`get_rect`,
      :meth:`render_to` will use the layout calculated by :meth:`get_rect`.
      Otherwise, :meth:`render_to` will recalculate the layout if called
      with a text string or one of the above properties has changed
      after the :meth:`get_rect` call.

      If *text* is a char (byte) string, then its encoding is assumed to be
      ``LATIN1``.

   .. method:: render_raw

      | :sl:`Return rendered text as a string of bytes`
      | :sg:`render_raw(text, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> (bytes, (int, int))`

      Like :meth:`render` but with the pixels returned as a byte string
      of 8-bit gray-scale values. The foreground color is 255, the
      background 0, useful as an alpha mask for a foreground pattern.

   .. method:: render_raw_to

      | :sl:`Render text into an array of ints`
      | :sg:`render_raw_to(array, text, dest=None, style=STYLE_DEFAULT, rotation=0, size=0, invert=False) -> Rect`

      Render to an array object exposing an array struct interface. The array
      must be two dimensional with integer items. The default *dest* value,
      ``None``, is equivalent to position (0, 0). See :meth:`render_to`.
      As with the other render methods, *text* can be ``None`` to
      render a text string passed previously to another method.

      The return value is a :func:`pygame.Rect` giving the size and position of
      the rendered text.

   .. attribute:: style

      | :sl:`The font's style flags`
      | :sg:`style -> int`

      Gets or sets the default style of the Font. This default style will be
      used for all text rendering and size calculations unless overridden
      specifically a render or :meth:`get_rect` call.
      The style value may be a bit-wise OR of one or more of the following
      constants:

      ::

          STYLE_NORMAL
          STYLE_UNDERLINE
          STYLE_OBLIQUE
          STYLE_STRONG
          STYLE_WIDE
          STYLE_DEFAULT

      These constants may be found on the FreeType constants module.
      Optionally, the default style can be modified or obtained accessing the
      individual style attributes (underline, oblique, strong).

      The ``STYLE_OBLIQUE`` and ``STYLE_STRONG`` styles are for
      scalable fonts only. An attempt to set either for a bitmap font raises
      an AttributeError. An attempt to set either for an inactive font,
      as returned by ``Font.__new__()``, raises a RuntimeError.

      Assigning ``STYLE_DEFAULT`` to the :attr:`style` property leaves
      the property unchanged, as this property defines the default.
      The :attr:`style` property will never return ``STYLE_DEFAULT``.

   .. attribute:: underline

      | :sl:`The state of the font's underline style flag`
      | :sg:`underline -> bool`

      Gets or sets whether the font will be underlined when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: strong

      | :sl:`The state of the font's strong style flag`
      | :sg:`strong -> bool`

      Gets or sets whether the font will be bold when drawing text. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the 'style' parameter.

   .. attribute:: oblique

      | :sl:`The state of the font's oblique style flag`
      | :sg:`oblique -> bool`

      Gets or sets whether the font will be rendered as oblique. This
      default style value will be used for all text rendering and size
      calculations unless overridden specifically in a render or
      :meth:`get_rect` call, via the *style* parameter.

      The oblique style is only supported for scalable (outline) fonts.
      An attempt to set this style on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, setting this property raises a RuntimeError.

   .. attribute:: wide

      | :sl:`The state of the font's wide style flag`
      | :sg:`wide -> bool`

      Gets or sets whether the font will be stretched horizontally
      when drawing text. It produces a result similar to
      :class:`pygame.font.Font`'s bold. This style not available for
      rotated text.

   .. attribute:: strength

      | :sl:`The strength associated with the strong or wide font styles`
      | :sg:`strength -> float`

      The amount by which a font glyph's size is enlarged for the
      strong or wide transformations, as a fraction of the untransformed
      size. For the wide style only the horizontal dimension is
      increased. For strong text both the horizontal and vertical
      dimensions are enlarged. A wide style of strength 0.08333 ( 1/12 ) is
      equivalent to the :class:`pygame.font.Font` bold style.
      The default is 0.02778 ( 1/36 ).

      The strength style is only supported for scalable (outline) fonts.
      An attempt to set this property on a bitmap font will raise an
      AttributeError. If the font object is inactive, as returned by
      ``Font.__new__()``, assignment to this property raises a RuntimeError.

   .. attribute:: underline_adjustment

      | :sl:`Adjustment factor for the underline position`
      | :sg:`underline_adjustment -> float`

      Gets or sets a factor which, when positive, is multiplied with the
      font's underline offset to adjust the underline position. A negative
      value turns an underline into a strike-through or overline. It is
      multiplied with the ascender. Accepted values range between -2.0 and 2.0
      inclusive. A value of 0.5 closely matches Tango underlining. A value of
      1.0 mimics :class:`pygame.font.Font` underlining.

   .. attribute:: fixed_width

      | :sl:`Gets whether the font is fixed-width`
      | :sg:`fixed_width -> bool`

      Read only. Returns ``True`` if the font contains fixed-width
      characters (for example Courier, Bitstream Vera Sans Mono, Andale Mono).

   .. attribute:: fixed_sizes

      | :sl:`the number of available bitmap sizes for the font`
      | :sg:`fixed_sizes -> int`

      Read only. Returns the number of point sizes for which the font contains
      bitmap character images. If zero then the font is not a bitmap font.
      A scalable font may contain pre-rendered point sizes as strikes.

   .. attribute:: scalable

      | :sl:`Gets whether the font is scalable`
      | :sg:`scalable -> bool`

      Read only. Returns ``True`` if the font contains outline glyphs.
      If so, the point size is not limited to available bitmap sizes.

   .. attribute:: use_bitmap_strikes

      | :sl:`allow the use of embedded bitmaps in an outline font file`
      | :sg:`use_bitmap_strikes -> bool`

      Some scalable fonts include embedded bitmaps for particular point
      sizes. This property controls whether or not those bitmap strikes
      are used. Set it ``False`` to disable the loading of any bitmap
      strike. Set it ``True``, the default, to permit bitmap strikes
      for a non-rotated render with no style other than :attr:`wide` or
      :attr:`underline`. This property is ignored for bitmap fonts.

      See also :attr:`fixed_sizes` and :meth:`get_sizes`.

   .. attribute:: antialiased

      | :sl:`Font anti-aliasing mode`
      | :sg:`antialiased -> bool`

      Gets or sets the font's anti-aliasing mode. This defaults to
      ``True`` on all fonts, which are rendered with full 8 bit blending.

      Set to ``False`` to do monochrome rendering. This should
      provide a small speed gain and reduce cache memory size.

   .. attribute:: kerning

      | :sl:`Character kerning mode`
      | :sg:`kerning -> bool`

      Gets or sets the font's kerning mode. This defaults to ``False``
      on all fonts, which will be rendered without kerning.

      Set to ``True`` to add kerning between character pairs, if supported
      by the font, when positioning glyphs.

   .. attribute:: vertical

      | :sl:`Font vertical mode`
      | :sg:`vertical -> bool`

      Gets or sets whether the characters are laid out vertically rather
      than horizontally. May be useful when rendering Kanji or some other
      vertical script.

      Set to ``True`` to switch to a vertical text layout. The default
      is ``False``, place horizontally.

      Note that the :class:`Font` class does not automatically determine
      script orientation. Vertical layout must be selected explicitly.

      Also note that several font formats (especially bitmap based ones) don't
      contain the necessary metrics to draw glyphs vertically, so drawing in
      those cases will give unspecified results.

   .. attribute:: rotation

      | :sl:`text rotation in degrees counterclockwise`
      | :sg:`rotation -> int`

      Gets or sets the baseline angle of the rendered text. The angle is
      represented as integer degrees. The default angle is 0, with horizontal
      text rendered along the X-axis, and vertical text along the Y-axis.
      A positive value rotates these axes counterclockwise that many degrees.
      A negative angle corresponds to a clockwise rotation. The rotation
      value is normalized to a value within the range 0 to 359 inclusive
      (eg. 390 -> 390 - 360 -> 30, -45 -> 360 + -45 -> 315,
      720 -> 720 - (2 * 360) -> 0).

      Only scalable (outline) fonts can be rotated. An attempt to change
      the rotation of a bitmap font raises an AttributeError.
      An attempt to change the rotation of an inactive font instance, as
      returned by ``Font.__new__()``, raises a RuntimeError.

   .. attribute:: fgcolor

      | :sl:`default foreground color`
      | :sg:`fgcolor -> Color`

      Gets or sets the default glyph rendering color. It is initially opaque
      black ― (0, 0, 0, 255). Applies to :meth:`render` and :meth:`render_to`.

   .. attribute:: bgcolor

      | :sl:`default background color`
      | :sg:`bgcolor -> Color`

      Gets or sets the default background rendering color. Initially it is
      unset and text will render with a transparent background by default.
      Applies to :meth:`render` and :meth:`render_to`.

   .. versionadded:: 2.0.0

   .. attribute:: origin

      | :sl:`Font render to text origin mode`
      | :sg:`origin -> bool`

      If set ``True``, :meth:`render_to` and :meth:`render_raw_to` will
      take the *dest* position to be that of the text origin, as opposed to
      the top-left corner of the bounding box. See :meth:`get_rect` for
      details.

   .. attribute:: pad

      | :sl:`padded boundary mode`
      | :sg:`pad -> bool`

      If set ``True``, then the text boundary rectangle will be inflated
      to match that of :class:`font.Font <pygame.font.Font>`.
      Otherwise, the boundary rectangle is just large enough for the text.

   .. attribute:: ucs4

      | :sl:`Enable UCS-4 mode`
      | :sg:`ucs4 -> bool`

      Gets or sets the decoding of Unicode text. By default, the
      freetype module performs UTF-16 surrogate pair decoding on Unicode text.
      This allows 32-bit escape sequences ('\Uxxxxxxxx') between 0x10000 and
      0x10FFFF to represent their corresponding UTF-32 code points on Python
      interpreters built with a UCS-2 Unicode type (on Windows, for instance).
      It also means character values within the UTF-16 surrogate area (0xD800
      to 0xDFFF) are considered part of a surrogate pair. A malformed surrogate
      pair will raise a UnicodeEncodeError. Setting ucs4 ``True`` turns
      surrogate pair decoding off, allowing access the full UCS-4 character
      range to a Python interpreter built with four-byte Unicode character
      support.

   .. attribute:: resolution

      | :sl:`Pixel resolution in dots per inch`
      | :sg:`resolution -> int`

      Read only. Gets pixel size used in scaling font glyphs for this
      :class:`Font` instance.


--- Contenu du fichier : image.rst.txt ---
.. include:: common.txt

:mod:`pygame.image`
===================

.. module:: pygame.image
   :synopsis: pygame module for loading and saving images

| :sl:`pygame module for image transfer`

The image module contains functions for loading and saving pictures, as well as
transferring Surfaces to formats usable by other packages.

Note that there is no Image class; an image is loaded as a Surface object. The
Surface class allows manipulation (drawing lines, setting pixels, capturing
regions, etc.).

In the vast majority of installations, pygame is built to support extended
formats, using the SDL_Image library behind the scenes. However, some
installations may only support uncompressed ``BMP`` images. With full image
support, the :func:`pygame.image.load()` function can load the following
formats.

   * ``BMP``

   * ``GIF`` (non-animated)

   * ``JPEG``

   * ``LBM`` (and ``PBM``, ``PGM``, ``PPM``)

   * ``PCX``

   * ``PNG``
   
   * ``PNM``

   * ``SVG`` (limited support, using Nano SVG)

   * ``TGA`` (uncompressed)

   * ``TIFF``

   * ``WEBP``

   * ``XPM``
   
   
.. versionadded:: 2.0 Loading SVG, WebP, PNM

Saving images only supports a limited set of formats. You can save to the
following formats.

   * ``BMP``

   * ``JPEG``

   * ``PNG``

   * ``TGA``
   

``JPEG`` and ``JPG``, as well as ``TIF`` and ``TIFF`` refer to the same file format

.. versionadded:: 1.8 Saving PNG and JPEG files.


.. function:: load

   | :sl:`load new image from a file (or file-like object)`
   | :sg:`load(filename) -> Surface`
   | :sg:`load(fileobj, namehint="") -> Surface`

   Load an image from a file source. You can pass either a filename, a Python
   file-like object, or a pathlib.Path.

   Pygame will automatically determine the image type (e.g., ``GIF`` or bitmap)
   and create a new Surface object from the data. In some cases it will need to
   know the file extension (e.g., ``GIF`` images should end in ".gif"). If you
   pass a raw file-like object, you may also want to pass the original filename
   as the namehint argument.

   The returned Surface will contain the same color format, colorkey and alpha
   transparency as the file it came from. You will often want to call
   :func:`pygame.Surface.convert()` with no arguments, to create a copy that
   will draw more quickly on the screen.

   For alpha transparency, like in .png images, use the
   :func:`pygame.Surface.convert_alpha()` method after loading so that the
   image has per pixel transparency.

   Pygame may not always be built to support all image formats. At minimum it
   will support uncompressed ``BMP``. If :func:`pygame.image.get_extended()`
   returns ``True``, you should be able to load most images (including PNG, JPG
   and GIF).

   You should use :func:`os.path.join()` for compatibility.

   ::

     eg. asurf = pygame.image.load(os.path.join('data', 'bla.png'))

   .. ## pygame.image.load ##

.. function:: save

   | :sl:`save an image to file (or file-like object)`
   | :sg:`save(Surface, filename) -> None`
   | :sg:`save(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``BMP``, ``TGA``, ``PNG``, or
   ``JPEG`` image. If the filename extension is unrecognized it will default to
   ``TGA``. Both ``TGA``, and ``BMP`` file formats create uncompressed files.
   You can pass a filename, a pathlib.Path or a Python file-like object.
   For file-like object, the image is saved to ``TGA`` format unless
   a namehint with a recognizable extension is passed in.

   .. note:: When saving to a file-like object, it seems that for most formats,
             the object needs to be flushed after saving to it to make loading
             from it possible.

   .. versionchanged:: 1.8 Saving PNG and JPEG files.
   .. versionchanged:: 2.0.0
                       The ``namehint`` parameter was added to make it possible
                       to save other formats than ``TGA`` to a file-like object.
                       Saving to a file-like object with JPEG is possible.

   .. ## pygame.image.save ##

.. function:: get_sdl_image_version

   | :sl:`get version number of the SDL_Image library being used`
   | :sg:`get_sdl_image_version(linked=True) -> None`
   | :sg:`get_sdl_image_version(linked=True) -> (major, minor, patch)`

   If pygame is built with extended image formats, then this function will
   return the SDL_Image library's version number as a tuple of 3 integers
   ``(major, minor, patch)``. If not, then it will return ``None``.

   ``linked=True`` is the default behavior and the function will return the
   version of the library that Pygame is linked against, while ``linked=False``
   will return the version of the library that Pygame is compiled against.

   .. versionadded:: 2.0.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added and default behavior changed from returning compiled version to returning linked version

   .. ## pygame.image.get_sdl_image_version ##

.. function:: get_extended

   | :sl:`test if extended image formats can be loaded`
   | :sg:`get_extended() -> bool`

   If pygame is built with extended image formats this function will return
   True. It is still not possible to determine which formats will be available,
   but generally you will be able to load them all.

   .. ## pygame.image.get_extended ##

.. function:: tostring

   | :sl:`transfer image to byte buffer`
   | :sg:`tostring(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first

   .. note:: it is preferred to use :func:`tobytes` as of pygame 2.1.3

   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.tostring ##

.. function:: tobytes

   | :sl:`transfer image to byte buffer`
   | :sg:`tobytes(Surface, format, flipped=False) -> bytes`

   Creates a string of bytes that can be transferred with the ``fromstring``
   or ``frombytes`` methods in other Python imaging packages. Some Python
   image packages prefer their images in bottom-to-top format (PyOpenGL for
   example). If you pass ``True`` for the flipped argument, the byte buffer
   will be vertically flipped.

   The format argument is a string of one of the following values. Note that
   only 8-bit Surfaces can use the "P" format. The other formats will work for
   any Surface. Also note that other Python image packages support more formats
   than pygame.

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first
      
      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped      

      * ``RGBA_PREMULT``, 32-bit image with colors scaled by alpha channel

      * ``ARGB_PREMULT``, 32-bit image with colors scaled by alpha channel, alpha channel first
   
   .. note:: this function is an alias for :func:`tostring`. The use of this
             function is recommended over :func:`tostring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.tobytes ##


.. function:: fromstring

   | :sl:`create new Surface from a byte buffer`
   | :sg:`fromstring(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tostring()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: it is preferred to use :func:`frombytes` as of pygame 2.1.3

   .. ## pygame.image.fromstring ##

.. function:: frombytes

   | :sl:`create new Surface from a byte buffer`
   | :sg:`frombytes(bytes, size, format, flipped=False) -> Surface`

   This function takes arguments similar to :func:`pygame.image.tobytes()`.
   The size argument is a pair of numbers representing the width and height.
   Once the new Surface is created it is independent from the memory of the
   bytes passed in.

   The bytes and format passed must compute to the exact size of image
   specified. Otherwise a ``ValueError`` will be raised.

   See the :func:`pygame.image.frombuffer()` method for a potentially faster
   way to transfer images into pygame.

   .. note:: this function is an alias for :func:`fromstring`. The use of this
             function is recommended over :func:`fromstring` as of pygame 2.1.3.
             This function was introduced so it matches nicely with other 
             libraries (PIL, numpy, etc), and with people's expectations.

   .. versionadded:: 2.1.3 

   .. ## pygame.image.frombytes ##

.. function:: frombuffer

   | :sl:`create a new Surface that shares data inside a bytes buffer`
   | :sg:`frombuffer(buffer, size, format) -> Surface`

   Create a new Surface that shares pixel data directly from a buffer. This
   buffer can be bytes, a bytearray, a memoryview, a
   :class:`pygame.BufferProxy`, or any object that supports the buffer protocol.
   This method takes similar arguments to :func:`pygame.image.fromstring()`, but
   is unable to vertically flip the source data.

   This will run much faster than :func:`pygame.image.fromstring`, since no
   pixel data must be allocated and copied.

   It accepts the following 'format' arguments:

      * ``P``, 8-bit palettized Surfaces

      * ``RGB``, 24-bit image

      * ``BGR``, 24-bit image, red and blue channels swapped.

      * ``RGBX``, 32-bit image with unused space

      * ``RGBA``, 32-bit image with an alpha channel

      * ``ARGB``, 32-bit image with alpha channel first

      * ``BGRA``, 32-bit image with alpha channel, red and blue channels swapped
  
   .. versionadded:: 2.1.3 BGRA format
   .. ## pygame.image.frombuffer ##

.. function:: load_basic

   | :sl:`load new BMP image from a file (or file-like object)`
   | :sg:`load_basic(file) -> Surface`

   Load an image from a file source. You can pass either a filename or a Python
   file-like object, or a pathlib.Path.

   This function only supports loading "basic" image format, ie ``BMP``
   format.
   This function is always available, no matter how pygame was built.

   .. ## pygame.image.load_basic ##

.. function:: load_extended

   | :sl:`load an image from a file (or file-like object)`
   | :sg:`load_extended(filename) -> Surface`
   | :sg:`load_extended(fileobj, namehint="") -> Surface`

   This function is similar to :func:`pygame.image.load()`, except that this
   function can only be used if pygame was built with extended image format
   support.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.load_extended ##

.. function:: save_extended

   | :sl:`save a png/jpg image to file (or file-like object)`
   | :sg:`save_extended(Surface, filename) -> None`
   | :sg:`save_extended(Surface, fileobj, namehint="") -> None`

   This will save your Surface as either a ``PNG`` or ``JPEG`` image.

   In case the image is being saved to a file-like object, this function
   uses the namehint argument to determine the format of the file being
   saved. Saves to ``JPEG`` in case the namehint was not specified while
   saving to a file-like object.

   .. versionchanged:: 2.0.1
                       This function is always available, but raises an
                       ``NotImplementedError`` if extended image formats are
                       not supported.
                       Previously, this function may or may not be
                       available, depending on the state of extended image
                       format support.

   .. ## pygame.image.save_extended ##

.. ## pygame.image ##


--- Contenu du fichier : draw.rst.txt ---
.. include:: common.txt

:mod:`pygame.draw`
==================

.. module:: pygame.draw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

Draw several simple shapes to a surface. These functions will work for
rendering to any format of surface.

Most of the functions take a width argument to represent the size of stroke
(thickness) around the edge of the shape. If a width of 0 is passed the shape
will be filled (solid).

All the drawing functions respect the clip area for the surface and will be
constrained to that area. The functions return a rectangle representing the
bounding area of changed pixels. This bounding rectangle is the 'minimum'
bounding box that encloses the affected area.

All the drawing functions accept a color argument that can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)
   - an integer value that has been mapped to the surface's pixel format
     (see :func:`pygame.Surface.map_rgb` and :func:`pygame.Surface.unmap_rgb`)

A color's alpha value will be written directly into the surface (if the
surface contains pixel alphas), but the draw function will not draw
transparently.

These functions temporarily lock the surface they are operating on. Many
sequential drawing calls can be sped up by locking and unlocking the surface
object around the draw calls (see :func:`pygame.Surface.lock` and
:func:`pygame.Surface.unlock`).

.. note ::
   See the :mod:`pygame.gfxdraw` module for alternative draw methods.


.. function:: rect

   | :sl:`draw a rectangle`
   | :sg:`rect(surface, color, rect) -> Rect`
   | :sg:`rect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect`

   Draws a rectangle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to draw, position and dimensions
   :param int width: (optional) used for line thickness or to indicate that
      the rectangle is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the rectangle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |
      
      .. versionchanged:: 2.1.1 
          Drawing rects with width now draws the width correctly inside the 
          rect's area, rather than using an internal call to draw.lines(), 
          which had half the width spill outside the rect area.

   :param int border_radius: (optional) used for drawing rectangle with rounded corners.
      The supported range is [0, min(height, width) / 2], with 0 representing a rectangle
      without rounded corners.
   :param int border_top_left_radius: (optional) used for setting the value of top left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_top_right_radius: (optional) used for setting the value of top right
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_left_radius: (optional) used for setting the value of bottom left
      border. If you don't set this value, it will use the border_radius value.
   :param int border_bottom_right_radius: (optional) used for setting the value of bottom right
      border. If you don't set this value, it will use the border_radius value.

         | if ``border_radius < 1`` it will draw rectangle without rounded corners
         | if any of border radii has the value ``< 0`` it will use value of the border_radius
         | If sum of radii on the same side of the rectangle is greater than the rect size the radii
         | will get scaled

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. note::
      The :func:`pygame.Surface.fill()` method works just as well for drawing
      filled rectangles and can be hardware accelerated on some platforms.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
   .. versionchanged:: 2.0.0.dev8 Added support for border radius.

   .. ## pygame.draw.rect ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, color, points) -> Rect`
   | :sg:`polygon(surface, color, points, width=0) -> Rect`

   Draws a polygon on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param points: a sequence of 3 or more (x, y) coordinates that make up the
      vertices of the polygon, each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats,
      e.g. ``[(x1, y1), (x2, y2), (x3, y3)]``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness or to indicate that
      the polygon is to be filled

         | if width == 0, (default) fill the polygon
         | if width > 0, used for line thickness
         | if width < 0, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will grow
            outside the original boundary of the polygon. For more details on
            how the thickness for edge lines grow, refer to the ``width`` notes
            of the :func:`pygame.draw.line` function.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. note::
       For an aapolygon, use :func:`aalines()` with ``closed=True``.

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.polygon ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, color, center, radius) -> Rect`
   | :sg:`circle(surface, color, center, radius, width=0, draw_top_right=None, draw_top_left=None, draw_bottom_left=None, draw_bottom_right=None) -> Rect`

   Draws a circle on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param center: center point of the circle as a sequence of 2 ints/floats,
      e.g. ``(x, y)``
   :type center: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param radius: radius of the circle, measured from the ``center`` parameter,
      nothing will be drawn if the ``radius`` is less than 1
   :type radius: int or float
   :param int width: (optional) used for line thickness or to indicate that
      the circle is to be filled

         | if ``width == 0``, (default) fill the circle
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward.
   :param bool draw_top_right: (optional) if this is set to True then the top right corner
      of the circle will be drawn
   :param bool draw_top_left: (optional) if this is set to True then the top left corner
      of the circle will be drawn
   :param bool draw_bottom_left: (optional) if this is set to True then the bottom left corner
      of the circle will be drawn
   :param bool draw_bottom_right: (optional) if this is set to True then the bottom right corner
      of the circle will be drawn

         | if any of the draw_circle_part is True then it will draw all circle parts that have the True
         | value, otherwise it will draw the entire circle.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``center`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``center`` is not a sequence of two numbers
   :raises TypeError: if ``radius`` is not a number

   .. versionchanged:: 2.0.0 Added support for keyword arguments.
      Nothing is drawn when the radius is 0 (a pixel at the ``center`` coordinates
      used to be drawn when the radius equaled 0).
      Floats, and Vector2 are accepted for the ``center`` param.
      The drawing algorithm was improved to look more like a circle.
   .. versionchanged:: 2.0.0.dev8 Added support for drawing circle quadrants.

   .. ## pygame.draw.circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, color, rect) -> Rect`
   | :sg:`ellipse(surface, color, rect, width=0) -> Rect`

   Draws an ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse, the ellipse will be centered inside the rectangle and bounded
      by it
   :param int width: (optional) used for line thickness or to indicate that
      the ellipse is to be filled (not to be confused with the width value
      of the ``rect`` parameter)

         | if ``width == 0``, (default) fill the ellipse
         | if ``width > 0``, used for line thickness
         | if ``width < 0``, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.ellipse ##

.. function:: arc

   | :sl:`draw an elliptical arc`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle) -> Rect`
   | :sg:`arc(surface, color, rect, start_angle, stop_angle, width=1) -> Rect`

   Draws an elliptical arc on the given surface.

   The two angle arguments are given in radians and indicate the start and stop
   positions of the arc. The arc is drawn in a counterclockwise direction from
   the ``start_angle`` to the ``stop_angle``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param Rect rect: rectangle to indicate the position and dimensions of the
      ellipse which the arc will be based on, the ellipse will be centered
      inside the rectangle
   :param float start_angle: start angle of the arc in radians
   :param float stop_angle: stop angle of the arc in
      radians

         | if ``start_angle < stop_angle``, the arc is drawn in a
            counterclockwise direction from the ``start_angle`` to the
            ``stop_angle``
         | if ``start_angle > stop_angle``, tau (tau == 2 * pi) will be added
            to the ``stop_angle``, if the resulting stop angle value is greater
            than the ``start_angle`` the above ``start_angle < stop_angle`` case
            applies, otherwise nothing will be drawn
         | if ``start_angle == stop_angle``, nothing will be drawn
         |

   :param int width: (optional) used for line thickness (not to be confused
      with the width value of the ``rect`` parameter)

         | if ``width == 0``, nothing will be drawn
         | if ``width > 0``, (default is 1) used for line thickness
         | if ``width < 0``, same as ``width == 0``

         .. note::
            When using ``width`` values ``> 1``, the edge lines will only grow
            inward from the original boundary of the ``rect`` parameter.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the given ``rect``
      parameter and its width and height will be 0
   :rtype: Rect

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.arc ##

.. function:: line

   | :sl:`draw a straight line`
   | :sg:`line(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`line(surface, color, start_pos, end_pos, width=1) -> Rect`

   Draws a straight line on the given surface. There are no endcaps. For thick
   lines the ends are squared off.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1``, lines will grow as follows.

            For odd ``width`` values, the thickness of each line grows with the
            original line being in the center.

            For even ``width`` values, the thickness of each line grows with the
            original line being offset from the center (as there is no exact
            center line drawn). As a result, lines with a slope < 1
            (horizontal-ish) will have 1 more pixel of thickness below the
            original line (in the y direction). Lines with a slope >= 1
            (vertical-ish) will have 1 more pixel of thickness to the right of
            the original line (in the x direction).

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.line ##

.. function:: lines

   | :sl:`draw multiple contiguous straight line segments`
   | :sg:`lines(surface, color, closed, points) -> Rect`
   | :sg:`lines(surface, color, closed, points, width=1) -> Rect`

   Draws a sequence of contiguous straight lines on the given surface. There are
   no endcaps or miter joints. For thick lines the ends are squared off.
   Drawing thick lines with sharp corners can have undesired looking results.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int width: (optional) used for line thickness

         | if width >= 1, used for line thickness (default is 1)
         | if width < 1, nothing will be drawn
         |

         .. note::
            When using ``width`` values ``> 1`` refer to the ``width`` notes
            of :func:`line` for details on how thick lines grow.

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.lines ##

.. function:: aaline

   | :sl:`draw a straight antialiased line`
   | :sg:`aaline(surface, color, start_pos, end_pos) -> Rect`
   | :sg:`aaline(surface, color, start_pos, end_pos, blend=1) -> Rect`

   Draws a straight antialiased line on the given surface.

   The line has a thickness of one pixel and the endpoints have a height and
   width of one pixel each.

   The way a line and its endpoints are drawn:
      If both endpoints are equal, only a single pixel is drawn (after
      rounding floats to nearest integer).

      Otherwise if the line is not steep (i.e. if the length along the x-axis
      is greater than the height along the y-axis):

         For each endpoint:

            If ``x``, the endpoint's x-coordinate, is a whole number find
            which pixels would be covered by it and draw them.

            Otherwise:

               Calculate the position of the nearest point with a whole number
               for its x-coordinate, when extending the line past the
               endpoint.

               Find which pixels would be covered and how much by that point.

               If the endpoint is the left one, multiply the coverage by (1 -
               the decimal part of ``x``).

               Otherwise multiply the coverage by the decimal part of ``x``.

               Then draw those pixels.

               *e.g.:*
                  | The left endpoint of the line ``((1, 1.3), (5, 3))`` would
                    cover 70% of the pixel ``(1, 1)`` and 30% of the pixel
                    ``(1, 2)`` while the right one would cover 100% of the
                    pixel ``(5, 3)``.
                  | The left endpoint of the line ``((1.2, 1.4), (4.6, 3.1))``
                    would cover 56% *(i.e. 0.8 * 70%)* of the pixel ``(1, 1)``
                    and 24% *(i.e. 0.8 * 30%)* of the pixel ``(1, 2)`` while
                    the right one would cover 42% *(i.e. 0.6 * 70%)* of the
                    pixel ``(5, 3)`` and 18% *(i.e. 0.6 * 30%)* of the pixel
                    ``(5, 4)`` while the right

         Then for each point between the endpoints, along the line, whose
         x-coordinate is a whole number:

            Find which pixels would be covered and how much by that point and
            draw them.

            *e.g.:*
               | The points along the line ``((1, 1), (4, 2.5))`` would be
                 ``(2, 1.5)`` and ``(3, 2)`` and would cover 50% of the pixel
                 ``(2, 1)``, 50% of the pixel ``(2, 2)`` and 100% of the pixel
                 ``(3, 2)``.
               | The points along the line ``((1.2, 1.4), (4.6, 3.1))`` would
                 be ``(2, 1.8)`` (covering 20% of the pixel ``(2, 1)`` and 80%
                 of the pixel ``(2, 2)``), ``(3, 2.3)`` (covering 70% of the
                 pixel ``(3, 2)`` and 30% of the pixel ``(3, 3)``) and ``(4,
                 2.8)`` (covering 20% of the pixel ``(2, 1)`` and 80% of the
                 pixel ``(2, 2)``)

      Otherwise do the same for steep lines as for non-steep lines except
      along the y-axis instead of the x-axis (using ``y`` instead of ``x``,
      top instead of left and bottom instead of right).

   .. note::
      Regarding float values for coordinates, a point with coordinate
      consisting of two whole numbers is considered being right in the center
      of said pixel (and having a height and width of 1 pixel would therefore
      completely cover it), while a point with coordinate where one (or both)
      of the numbers have non-zero decimal parts would be partially covering
      two (or four if both numbers have decimal parts) adjacent pixels, *e.g.*
      the point ``(1.4, 2)`` covers 60% of the pixel ``(1, 2)`` and 40% of the
      pixel ``(2,2)``.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param start_pos: start position of the line, (x, y)
   :type start_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param end_pos: end position of the line, (x, y)
   :type end_pos: tuple(int or float, int or float) or
      list(int or float, int or float) or Vector2(int or float, int or float)
   :param int blend: (optional) (deprecated) if non-zero (default) the line will be blended
      with the surface's existing pixel shades, otherwise it will overwrite them

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the ``start_pos`` parameter value (float
      values will be truncated) and its width and height will be 0
   :rtype: Rect

   :raises TypeError: if ``start_pos`` or ``end_pos`` is not a sequence of
      two numbers

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aaline ##

.. function:: aalines

   | :sl:`draw multiple contiguous straight antialiased line segments`
   | :sg:`aalines(surface, color, closed, points) -> Rect`
   | :sg:`aalines(surface, color, closed, points, blend=1) -> Rect`

   Draws a sequence of contiguous straight antialiased lines on the given
   surface.

   :param Surface surface: surface to draw on
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or int or tuple(int, int, int, [int])
   :param bool closed: if ``True`` an additional line segment is drawn between
      the first and last points in the ``points`` sequence
   :param points: a sequence of 2 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats and adjacent
      coordinates will be connected by a line segment, e.g. for the
      points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will be drawn
      from ``(x1, y1)`` to ``(x2, y2)`` and from ``(x2, y2)`` to ``(x3, y3)``,
      additionally if the ``closed`` parameter is ``True`` another line segment
      will be drawn from ``(x3, y3)`` to ``(x1, y1)``
   :type points: tuple(coordinate) or list(coordinate)
   :param int blend: (optional) (deprecated) if non-zero (default) each line will be blended
      with the surface's existing pixel shades, otherwise the pixels will be
      overwritten

   :returns: a rect bounding the changed pixels, if nothing is drawn the
      bounding rect's position will be the position of the first point in the
      ``points`` parameter (float values will be truncated) and its width and
      height will be 0
   :rtype: Rect

   :raises ValueError: if ``len(points) < 2`` (must have at least 2 points)
   :raises TypeError: if ``points`` is not a sequence or ``points`` does not
      contain number pairs

   .. versionchanged:: 2.0.0 Added support for keyword arguments.

   .. ## pygame.draw.aalines ##

.. ## pygame.draw ##

.. figure:: code_examples/draw_module_example.png
   :alt: draw module example

   Example code for draw module.

.. literalinclude:: code_examples/draw_module_example.py



--- Contenu du fichier : rect.rst.txt ---
.. include:: common.txt

:mod:`pygame.Rect`
==================

.. currentmodule:: pygame

.. class:: Rect

   | :sl:`pygame object for storing rectangular coordinates`
   | :sg:`Rect(left, top, width, height) -> Rect`
   | :sg:`Rect((left, top), (width, height)) -> Rect`
   | :sg:`Rect(object) -> Rect`

   Pygame uses Rect objects to store and manipulate rectangular areas. A Rect
   can be created from a combination of left, top, width, and height values.
   Rects can also be created from Python objects that are already a Rect or
   have an attribute named "rect".

   Any Pygame function that requires a Rect argument also accepts any of these
   values to construct a Rect. This makes it easier to create Rects on the fly
   as arguments for functions.

   The Rect functions that change the position or size of a Rect return a new
   copy of the Rect with the affected changes. The original Rect is not
   modified. Some methods have an alternate "in-place" version that returns
   None but affects the original Rect. These "in-place" methods are denoted
   with the "ip" suffix.

   The Rect object has several virtual attributes which can be used to move and
   align the Rect:

   ::

       x,y
       top, left, bottom, right
       topleft, bottomleft, topright, bottomright
       midtop, midleft, midbottom, midright
       center, centerx, centery
       size, width, height
       w,h

   All of these attributes can be assigned to:

   ::

       rect1.right = 10
       rect2.center = (20,30)

   Assigning to size, width or height changes the dimensions of the rectangle;
   all other assignments move the rectangle without resizing it. Notice that
   some attributes are integers and others are pairs of integers.

   If a Rect has a nonzero width or height, it will return ``True`` for a
   nonzero test. Some methods return a Rect with 0 size to represent an invalid
   rectangle. A Rect with a 0 size will not collide when using collision
   detection methods (e.g. :meth:`collidepoint`, :meth:`colliderect`, etc.).

   The coordinates for Rect objects are all integers. The size values can be
   programmed to have negative values, but these are considered illegal Rects
   for most operations.

   There are several collision tests between other rectangles. Most python
   containers can be searched for collisions against a single Rect.

   The area covered by a Rect does not include the right- and bottom-most edge
   of pixels. If one Rect's bottom border is another Rect's top border (i.e.,
   rect1.bottom=rect2.top), the two meet exactly on the screen but do not
   overlap, and ``rect1.colliderect(rect2)`` returns false.

   The Rect object is also iterable:

   ::

      r = Rect(0, 1, 2, 3)
      x, y, w, h = r

   .. versionadded:: 1.9.2
      The Rect class can be subclassed. Methods such as ``copy()`` and ``move()``
      will recognize this and return instances of the subclass.
      However, the subclass's ``__init__()`` method is not called,
      and ``__new__()`` is assumed to take no arguments. So these methods should be
      overridden if any extra attributes need to be copied.

   .. method:: copy

      | :sl:`copy the rectangle`
      | :sg:`copy() -> Rect`

      Returns a new rectangle having the same position and size as the original.

      New in pygame 1.9

      .. ## Rect.copy ##

   .. method:: move

      | :sl:`moves the rectangle`
      | :sg:`move(x, y) -> Rect`

      Returns a new rectangle that is moved by the given offset. The x and y
      arguments can be any integer value, positive or negative.

      .. ## Rect.move ##

   .. method:: move_ip

      | :sl:`moves the rectangle, in place`
      | :sg:`move_ip(x, y) -> None`

      Same as the ``Rect.move()`` method, but operates in place.

      .. ## Rect.move_ip ##

   .. method:: inflate

      | :sl:`grow or shrink the rectangle size`
      | :sg:`inflate(x, y) -> Rect`

      Returns a new rectangle with the size changed by the given offset. The
      rectangle remains centered around its current center. Negative values
      will shrink the rectangle. Note, uses integers, if the offset given is
      too small(< 2 > -2), center will be off.

      .. ## Rect.inflate ##

   .. method:: inflate_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`inflate_ip(x, y) -> None`

      Same as the ``Rect.inflate()`` method, but operates in place.

      .. ## Rect.inflate_ip ##

   .. method:: scale_by

      | :sl:`scale the rectangle by given a multiplier`
      | :sg:`scale_by(scalar) -> Rect`
      | :sg:`scale_by(scalex, scaley) -> Rect`

      Returns a new rectangle with the size scaled by the given multipliers.
      The rectangle remains centered around its current center. A single 
      scalar or separate width and height scalars are allowed. Values above
      one will increase the size of the rectangle, whereas values between
      zero and one will decrease the size of the rectangle.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by ##

   .. method:: scale_by_ip

      | :sl:`grow or shrink the rectangle size, in place`
      | :sg:`scale_by_ip(scalar) -> None`
      | :sg:`scale_by_ip(scalex, scaley) -> None`

      Same as the ``Rect.scale_by()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.scale_by_ip ##

   .. method:: update

      | :sl:`sets the position and size of the rectangle`
      | :sg:`update(left, top, width, height) -> None`
      | :sg:`update((left, top), (width, height)) -> None`
      | :sg:`update(object) -> None`

      Sets the position and size of the rectangle, in place. See
      parameters for :meth:`pygame.Rect` for the parameters of this function.

      .. versionadded:: 2.0.1

      .. ## Rect.update ##

   .. method:: clamp

      | :sl:`moves the rectangle inside another`
      | :sg:`clamp(Rect) -> Rect`

      Returns a new rectangle that is moved to be completely inside the
      argument Rect. If the rectangle is too large to fit inside, it is
      centered inside the argument Rect, but its size is not changed.

      .. ## Rect.clamp ##

   .. method:: clamp_ip

      | :sl:`moves the rectangle inside another, in place`
      | :sg:`clamp_ip(Rect) -> None`

      Same as the ``Rect.clamp()`` method, but operates in place.

      .. ## Rect.clamp_ip ##

   .. method:: clip

      | :sl:`crops a rectangle inside another`
      | :sg:`clip(Rect) -> Rect`

      Returns a new rectangle that is cropped to be completely inside the
      argument Rect. If the two rectangles do not overlap to begin with, a Rect
      with 0 size is returned.

      .. ## Rect.clip ##

   .. method:: clipline

      | :sl:`crops a line inside a rectangle`
      | :sg:`clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(x1, y1, x2, y2) -> ()`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1), (x2, y2)) -> ()`
      | :sg:`clipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline((x1, y1, x2, y2)) -> ()`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))`
      | :sg:`clipline(((x1, y1), (x2, y2))) -> ()`

      Returns the coordinates of a line that is cropped to be completely inside
      the rectangle. If the line does not overlap the rectangle, then an empty
      tuple is returned.

      The line to crop can be any of the following formats (floats can be used
      in place of ints, but they will be truncated):

         - four ints
         - 2 lists/tuples/Vector2s of 2 ints
         - a list/tuple of four ints
         - a list/tuple of 2 lists/tuples/Vector2s of 2 ints

      :returns: a tuple with the coordinates of the given line cropped to be
         completely inside the rectangle is returned, if the given line does
         not overlap the rectangle, an empty tuple is returned
      :rtype: tuple(tuple(int, int), tuple(int, int)) or ()

      :raises TypeError: if the line coordinates are not given as one of the
         above described line formats

      .. note ::
         This method can be used for collision detection between a rect and a
         line. See example code below.

      .. note ::
         The ``rect.bottom`` and ``rect.right`` attributes of a
         :mod:`pygame.Rect` always lie one pixel outside of its actual border.

      ::

         # Example using clipline().
         clipped_line = rect.clipline(line)

         if clipped_line:
             # If clipped_line is not an empty tuple then the line
             # collides/overlaps with the rect. The returned value contains
             # the endpoints of the clipped line.
             start, end = clipped_line
             x1, y1 = start
             x2, y2 = end
         else:
             print("No clipping. The line is fully outside the rect.")

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. versionadded:: 2.0.0

      .. ## Rect.clipline ##

   .. method:: union

      | :sl:`joins two rectangles into one`
      | :sg:`union(Rect) -> Rect`

      Returns a new rectangle that completely covers the area of the two
      provided rectangles. There may be area inside the new Rect that is not
      covered by the originals.

      .. ## Rect.union ##

   .. method:: union_ip

      | :sl:`joins two rectangles into one, in place`
      | :sg:`union_ip(Rect) -> None`

      Same as the ``Rect.union()`` method, but operates in place.

      .. ## Rect.union_ip ##

   .. method:: unionall

      | :sl:`the union of many rectangles`
      | :sg:`unionall(Rect_sequence) -> Rect`

      Returns the union of one rectangle with a sequence of many rectangles.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall ##

   .. method:: unionall_ip

      | :sl:`the union of many rectangles, in place`
      | :sg:`unionall_ip(Rect_sequence) -> None`

      The same as the ``Rect.unionall()`` method, but operates in place.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.unionall_ip ##

   .. method:: fit

      | :sl:`resize and move a rectangle with aspect ratio`
      | :sg:`fit(Rect) -> Rect`

      Returns a new rectangle that is moved and resized to fit another. The
      aspect ratio of the original Rect is preserved, so the new rectangle may
      be smaller than the target in either width or height.

      .. ## Rect.fit ##

   .. method:: normalize

      | :sl:`correct negative sizes`
      | :sg:`normalize() -> None`

      This will flip the width or height of a rectangle if it has a negative
      size. The rectangle will remain in the same place, with only the sides
      swapped.

      .. ## Rect.normalize ##

   .. method:: contains

      | :sl:`test if one rectangle is inside another`
      | :sg:`contains(Rect) -> bool`

      Returns true when the argument is completely inside the Rect.

      .. ## Rect.contains ##

   .. method:: collidepoint

      | :sl:`test if a point is inside a rectangle`
      | :sg:`collidepoint(x, y) -> bool`
      | :sg:`collidepoint((x,y)) -> bool`

      Returns true if the given point is inside the rectangle. A point along
      the right or bottom edge is not considered to be inside the rectangle.

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.collidepoint ##

   .. method:: colliderect

      | :sl:`test if two rectangles overlap`
      | :sg:`colliderect(Rect) -> bool`

      Returns true if any portion of either rectangle overlap (except the
      top+bottom or left+right edges).

      .. note ::
         For collision detection between a rect and a line the :meth:`clipline`
         method can be used.

      .. ## Rect.colliderect ##

   .. method:: collidelist

      | :sl:`test if one rectangle in a list intersects`
      | :sg:`collidelist(list) -> index`

      Test whether the rectangle collides with any in a sequence of rectangles.
      The index of the first collision found is returned. If no collisions are
      found an index of -1 is returned.

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelist ##

   .. method:: collidelistall

      | :sl:`test if all rectangles in a list intersect`
      | :sg:`collidelistall(list) -> indices`

      Returns a list of all the indices that contain rectangles that collide
      with the Rect. If no intersecting rectangles are found, an empty list is
      returned.

      Not only Rects are valid arguments, but these are all valid calls:

      .. code-block:: python
    
          Rect = pygame.Rect
          r = Rect(0, 0, 10, 10)
          
          list_of_rects = [Rect(1, 1, 1, 1), Rect(2, 2, 2, 2)]
          indices0 = r.collidelistall(list_of_rects)
          
          list_of_lists = [[1, 1, 1, 1], [2, 2, 2, 2]]
          indices1 = r.collidelistall(list_of_lists)
          
          list_of_tuples = [(1, 1, 1, 1), (2, 2, 2, 2)]
          indices2 = r.collidelistall(list_of_tuples)
          
          list_of_double_tuples = [((1, 1), (1, 1)), ((2, 2), (2, 2))]
          indices3 = r.collidelistall(list_of_double_tuples)
          
          class ObjectWithRectAttribute(object):
              def __init__(self, r):
                  self.rect = r
          
          list_of_object_with_rect_attribute = [
              ObjectWithRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices4 = r.collidelistall(list_of_object_with_rect_attribute)
          
          class ObjectWithCallableRectAttribute(object):
              def __init__(self, r):
                  self._rect = r
          
              def rect(self):
                  return self._rect
          
          list_of_object_with_callable_rect = [
              ObjectWithCallableRectAttribute(Rect(1, 1, 1, 1)),
              ObjectWithCallableRectAttribute(Rect(2, 2, 2, 2)),
          ]
          indices5 = r.collidelistall(list_of_object_with_callable_rect)

      .. versionchanged:: 2.5.0 Added support for keyword arguments.

      .. ## Rect.collidelistall ##

   .. method:: collideobjects

      | :sl:`test if any object in a list intersects`
      | :sg:`collideobjects(rect_list) -> object`
      | :sg:`collideobjects(obj_list, key=func) -> object`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjects feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Test whether the rectangle collides with any object in the sequence.
      The object of the first collision found is returned. If no collisions are
      found then ``None`` is returned

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjects(rects)  # -> <rect(1, 1, 10, 10)>
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
          ]

          # collision = r.collideobjects(objects) # this does not work because the items in the list are no Rect like object
          collision = r.collideobjects(
              objects, key=lambda o: o.collision_box
          )  # -> <ObjectWithSomRectAttribute("B", [1, 1, 10, 10], [300, 300, 50, 50])>
          print(collision)

          screen_rect = r.collideobjects(objects, key=lambda o: o.draw_rect)  # -> None
          print(screen_rect)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjects ##

   .. method:: collideobjectsall

      | :sl:`test if all objects in a list intersect`
      | :sg:`collideobjectsall(rect_list) -> objects`
      | :sg:`collideobjectsall(obj_list, key=func) -> objects`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave collideobjectsall feedback with authors <https://github.com/pygame/pygame/pull/3026>`_

      Returns a list of all the objects that contain rectangles that collide
      with the Rect. If no intersecting objects are found, an empty list is
      returned.

      If key is given, then it should be a method taking an object from the list
      as input and returning a rect like object e.g. ``lambda obj: obj.rectangle``.
      If an object has multiple attributes of type Rect then key could return one
      of them.

      .. code-block:: python

          r = Rect(1, 1, 10, 10)

          rects = [
              Rect(1, 1, 10, 10),
              Rect(5, 5, 10, 10),
              Rect(15, 15, 1, 1),
              Rect(2, 2, 1, 1),
          ]

          result = r.collideobjectsall(
              rects
          )  # -> [<rect(1, 1, 10, 10)>, <rect(5, 5, 10, 10)>, <rect(2, 2, 1, 1)>]
          print(result)

          class ObjectWithSomRectAttribute:
              def __init__(self, name, collision_box, draw_rect):
                  self.name = name
                  self.draw_rect = draw_rect
                  self.collision_box = collision_box

              def __repr__(self):
                  return f'<{self.__class__.__name__}("{self.name}", {list(self.collision_box)}, {list(self.draw_rect)})>'

          objects = [
              ObjectWithSomRectAttribute("A", Rect(1, 1, 10, 10), Rect(300, 300, 50, 50)),
              ObjectWithSomRectAttribute("B", Rect(5, 5, 10, 10), Rect(200, 500, 50, 50)),
              ObjectWithSomRectAttribute("C", Rect(15, 15, 1, 1), Rect(150, 150, 50, 50)),
          ]

          # collisions = r.collideobjectsall(objects) # this does not work because ObjectWithSomRectAttribute is not a Rect like object
          collisions = r.collideobjectsall(
              objects, key=lambda o: o.collision_box
          )  # -> [<ObjectWithSomRectAttribute("A", [1, 1, 10, 10], [300, 300, 50, 50])>, <ObjectWithSomRectAttribute("B", [5, 5, 10, 10], [200, 500, 50, 50])>]
          print(collisions)

          screen_rects = r.collideobjectsall(objects, key=lambda o: o.draw_rect)  # -> []
          print(screen_rects)

      .. versionadded:: 2.1.3

      .. ## Rect.collideobjectsall ##

   .. method:: collidedict

      | :sl:`test if one rectangle in a dictionary intersects`
      | :sg:`collidedict(dict) -> (key, value)`
      | :sg:`collidedict(dict) -> None`
      | :sg:`collidedict(dict, use_values=0) -> (key, value)`
      | :sg:`collidedict(dict, use_values=0) -> None`

      Returns the first key and value pair that intersects with the calling
      Rect object. If no collisions are found, ``None`` is returned. If
      ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedict({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedict ##

   .. method:: collidedictall

      | :sl:`test if all rectangles in a dictionary intersect`
      | :sg:`collidedictall(dict) -> [(key, value), ...]`
      | :sg:`collidedictall(dict, use_values=0) -> [(key, value), ...]`

      Returns a list of all the key and value pairs that intersect with the
      calling Rect object. If no collisions are found an empty list is returned.
      If ``use_values`` is 0 (default) then the dict's keys will be used in the
      collision detection, otherwise the dict's values will be used.

      .. note ::
         Rect objects cannot be used as keys in a dictionary (they are not
         hashable), so they must be converted to a tuple.
         e.g. ``rect.collidedictall({tuple(key_rect) : value})``

      .. versionchanged:: 2.5.0 Added support for keyword arguments.
      
      .. ## Rect.collidedictall ##

   .. ## pygame.Rect ##


--- Contenu du fichier : surface.rst.txt ---
.. include:: common.txt

:mod:`pygame.Surface`
=====================

.. currentmodule:: pygame

.. class:: Surface

   | :sl:`pygame object for representing images`
   | :sg:`Surface((width, height), flags=0, depth=0, masks=None) -> Surface`
   | :sg:`Surface((width, height), flags=0, Surface) -> Surface`

   A pygame Surface is used to represent any image. The Surface has a fixed
   resolution and pixel format. Surfaces with 8-bit pixels use a color palette
   to map to 24-bit color.

   Call :meth:`pygame.Surface()` to create a new image object. The Surface will
   be cleared to all black. The only required arguments are the sizes. With no
   additional arguments, the Surface will be created in a format that best
   matches the display Surface.

   The pixel format can be controlled by passing the bit depth or an existing
   Surface. The flags argument is a bitmask of additional features for the
   surface. You can pass any combination of these flags:

   ::

     HWSURFACE    (obsolete in pygame 2) creates the image in video memory
     SRCALPHA     the pixel format will include a per-pixel alpha

   Both flags are only a request, and may not be possible for all displays and
   formats.

   Advance users can combine a set of bitmasks with a depth value. The masks
   are a set of 4 integers representing which bits in a pixel will represent
   each color. Normal Surfaces should not require the masks argument.

   Surfaces can have many extra attributes like alpha planes, colorkeys, source
   rectangle clipping. These functions mainly effect how the Surface is blitted
   to other Surfaces. The blit routines will attempt to use hardware
   acceleration when possible, otherwise they will use highly optimized
   software blitting methods.

   There are three types of transparency supported in pygame: colorkeys,
   surface alphas, and pixel alphas. Surface alphas can be mixed with
   colorkeys, but an image with per pixel alphas cannot use the other modes.
   Colorkey transparency makes a single color value transparent. Any pixels
   matching the colorkey will not be drawn. The surface alpha value is a single
   value that changes the transparency for the entire image. A surface alpha of
   255 is opaque, and a value of 0 is completely transparent.

   Per pixel alphas are different because they store a transparency value for
   every pixel. This allows for the most precise transparency effects, but it
   also the slowest. Per pixel alphas cannot be mixed with surface alpha and
   colorkeys.

   There is support for pixel access for the Surfaces. Pixel access on hardware
   surfaces is slow and not recommended. Pixels can be accessed using the
   :meth:`get_at()` and :meth:`set_at()` functions. These methods are fine for
   simple access, but will be considerably slow when doing of pixel work with
   them. If you plan on doing a lot of pixel level work, it is recommended to
   use a :class:`pygame.PixelArray`, which gives an array like view of the
   surface. For involved mathematical manipulations try the
   :mod:`pygame.surfarray` module (It's quite quick, but requires NumPy.)

   Any functions that directly access a surface's pixel data will need that
   surface to be lock()'ed. These functions can :meth:`lock()` and
   :meth:`unlock()` the surfaces themselves without assistance. But, if a
   function will be called many times, there will be a lot of overhead for
   multiple locking and unlocking of the surface. It is best to lock the
   surface manually before making the function call many times, and then
   unlocking when you are finished. All functions that need a locked surface
   will say so in their docs. Remember to leave the Surface locked only while
   necessary.

   Surface pixels are stored internally as a single number that has all the
   colors encoded into it. Use the :meth:`map_rgb()` and
   :meth:`unmap_rgb()` to convert between individual red, green, and blue
   values into a packed integer for that Surface.

   Surfaces can also reference sections of other Surfaces. These are created
   with the :meth:`subsurface()` method. Any change to either Surface will
   effect the other.

   Each Surface contains a clipping area. By default the clip area covers the
   entire Surface. If it is changed, all drawing operations will only effect
   the smaller area.

   .. method:: blit

      | :sl:`draw one image onto another`
      | :sg:`blit(source, dest, area=None, special_flags=0) -> Rect`

      Draws a source Surface onto this Surface. The draw can be positioned with
      the dest argument. The dest argument can either be a pair of coordinates representing the position of
      the upper left corner of the blit or a Rect, where the upper left corner of the rectangle will be used as the
      position for the blit. The size of the destination rectangle does not
      effect the blit.

      An optional area rectangle can be passed as well. This represents a
      smaller portion of the source Surface to draw.

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      .. versionadded:: 1.9.2
         Optional ``special_flags``: ``BLEND_PREMULTIPLIED``

      .. versionadded:: 2.0.0
         Optional ``special_flags``:  ``BLEND_ALPHA_SDL2`` - Uses the SDL2 blitter for alpha blending,
         this gives different results than the default blitter, which is modelled after SDL1, due to
         different approximations used for the alpha blending formula. The SDL2 blitter also supports
         RLE on alpha blended surfaces which the pygame one does not.

      The return rectangle is the area of the affected pixels, excluding any
      pixels outside the destination Surface, or outside the clipping area.

      Pixel alphas will be ignored when blitting to an 8 bit Surface.

      For a surface with colorkey or blanket alpha, a blit to self may give
      slightly different colors than a non self-blit.

      .. ## Surface.blit ##

   .. method:: blits

      | :sl:`draw many images onto another`
      | :sg:`blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None`
      | :sg:`blits(((source, dest, area), ...)) -> [Rect, ...]`
      | :sg:`blits(((source, dest, area, special_flags), ...)) -> [Rect, ...]`

      Draws many surfaces onto this Surface. It takes a sequence as input,
      with each of the elements corresponding to the ones of :meth:`blit()`.
      It needs at minimum a sequence of (source, dest).

      :param blit_sequence: a sequence of surfaces and arguments to blit them,
         they correspond to the :meth:`blit()` arguments
      :param doreturn: if ``True``, return a list of rects of the areas changed,
         otherwise return ``None``

      :returns: a list of rects of the areas changed if ``doreturn`` is
         ``True``, otherwise ``None``
      :rtype: list or None

      New in pygame 1.9.4.

      .. ## Surface.blits ##


   .. method:: convert

      | :sl:`change the pixel format of an image`
      | :sg:`convert(Surface=None) -> Surface`
      | :sg:`convert(depth, flags=0) -> Surface`
      | :sg:`convert(masks, flags=0) -> Surface`

      Creates a new copy of the Surface with the pixel format changed. The new
      pixel format can be determined from another existing Surface. Otherwise
      depth, flags, and masks arguments can be used, similar to the
      :meth:`pygame.Surface()` call.

      If no arguments are passed the new Surface will have the same pixel
      format as the display Surface. This is always the fastest format for
      blitting. It is a good idea to convert all Surfaces before they are
      blitted many times.

      The converted Surface will have no pixel alphas. They will be stripped if
      the original had them. See :meth:`convert_alpha()` for preserving or
      creating per-pixel alphas.

      The new copy will have the same class as the copied surface. This lets
      as Surface subclass inherit this method without the need to override,
      unless subclass specific instance attributes also need copying.

      .. ## Surface.convert ##

   .. method:: convert_alpha

      | :sl:`change the pixel format of an image including per pixel alphas`
      | :sg:`convert_alpha(Surface) -> Surface`
      | :sg:`convert_alpha() -> Surface`

      Creates a new copy of the surface with the desired pixel format. The new
      surface will be in a format suited for quick blitting to the given format
      with per pixel alpha. If no surface is given, the new surface will be
      optimized for blitting to the current display.

      Unlike the :meth:`convert()` method, the pixel format for the new
      image will not be exactly the same as the requested source, but it will
      be optimized for fast alpha blitting to the destination.

      As with :meth:`convert()` the returned surface has the same class as
      the converted surface.

      .. ## Surface.convert_alpha ##

   .. method:: copy

      | :sl:`create a new copy of a Surface`
      | :sg:`copy() -> Surface`

      Makes a duplicate copy of a Surface. The new surface will have the same
      pixel formats, color palettes, transparency settings, and class as the
      original. If a Surface subclass also needs to copy any instance specific
      attributes then it should override ``copy()``.

      .. ## Surface.copy ##

   .. method:: fill

      | :sl:`fill Surface with a solid color`
      | :sg:`fill(color, rect=None, special_flags=0) -> Rect`

      Fill the Surface with a solid color. If no rect argument is given the
      entire Surface will be filled. The rect argument will limit the fill to a
      specific area. The fill will also be contained by the Surface clip area.

      The color argument can be either a ``RGB`` sequence, a ``RGBA`` sequence
      or a mapped color index. If using ``RGBA``, the Alpha (A part of
      ``RGBA``) is ignored unless the surface uses per pixel alpha (Surface has
      the ``SRCALPHA`` flag).

      .. versionadded:: 1.8
         Optional ``special_flags``: ``BLEND_ADD``, ``BLEND_SUB``,
         ``BLEND_MULT``, ``BLEND_MIN``, ``BLEND_MAX``.

      .. versionadded:: 1.8.1
         Optional ``special_flags``: ``BLEND_RGBA_ADD``, ``BLEND_RGBA_SUB``,
         ``BLEND_RGBA_MULT``, ``BLEND_RGBA_MIN``, ``BLEND_RGBA_MAX``
         ``BLEND_RGB_ADD``, ``BLEND_RGB_SUB``, ``BLEND_RGB_MULT``,
         ``BLEND_RGB_MIN``, ``BLEND_RGB_MAX``.

      This will return the affected Surface area.

      .. ## Surface.fill ##

   .. method:: scroll

      | :sl:`Shift the surface image in place`
      | :sg:`scroll(dx=0, dy=0) -> None`

      Move the image by dx pixels right and dy pixels down. dx and dy may be
      negative for left and up scrolls respectively. Areas of the surface that
      are not overwritten retain their original pixel values. Scrolling is
      contained by the Surface clip area. It is safe to have dx and dy values
      that exceed the surface size.

      .. versionadded:: 1.9

      .. ## Surface.scroll ##

   .. method:: set_colorkey

      | :sl:`Set the transparent colorkey`
      | :sg:`set_colorkey(Color, flags=0) -> None`
      | :sg:`set_colorkey(None) -> None`

      Set the current color key for the Surface. When blitting this Surface
      onto a destination, any pixels that have the same color as the colorkey
      will be transparent. The color can be an ``RGB`` color or a mapped color
      integer. If ``None`` is passed, the colorkey will be unset.

      The colorkey will be ignored if the Surface is formatted to use per pixel
      alpha values. The colorkey can be mixed with the full Surface alpha
      value.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_colorkey ##

   .. method:: get_colorkey

      | :sl:`Get the current transparent colorkey`
      | :sg:`get_colorkey() -> RGB or None`

      Return the current colorkey value for the Surface. If the colorkey is not
      set then ``None`` is returned.

      .. ## Surface.get_colorkey ##

   .. method:: set_alpha

      | :sl:`set the alpha value for the full Surface image`
      | :sg:`set_alpha(value, flags=0) -> None`
      | :sg:`set_alpha(None) -> None`

      Set the current alpha value for the Surface. When blitting this Surface
      onto a destination, the pixels will be drawn slightly transparent. The
      alpha value is an integer from 0 to 255, 0 is fully transparent and 255
      is fully opaque. If ``None`` is passed for the alpha value, then alpha
      blending will be disabled, including per-pixel alpha.

      This value is different than the per pixel Surface alpha. For a surface
      with per pixel alpha, blanket alpha is ignored and ``None`` is returned.

      .. versionchanged:: 2.0 per-surface alpha can be combined with per-pixel
                          alpha.

      The optional flags argument can be set to ``pygame.RLEACCEL`` to provide
      better performance on non accelerated displays. An ``RLEACCEL`` Surface
      will be slower to modify, but quicker to blit as a source.

      .. ## Surface.set_alpha ##

   .. method:: get_alpha

      | :sl:`get the current Surface transparency value`
      | :sg:`get_alpha() -> int_value`

      Return the current alpha value for the Surface.

      .. ## Surface.get_alpha ##

   .. method:: lock

      | :sl:`lock the Surface memory for pixel access`
      | :sg:`lock() -> None`

      Lock the pixel data of a Surface for access. On accelerated Surfaces, the
      pixel data may be stored in volatile video memory or nonlinear compressed
      forms. When a Surface is locked the pixel memory becomes available to
      access by regular software. Code that reads or writes pixel values will
      need the Surface to be locked.

      Surfaces should not remain locked for more than necessary. A locked
      Surface can often not be displayed or managed by pygame.

      Not all Surfaces require locking. The :meth:`mustlock()` method can
      determine if it is actually required. There is no performance penalty for
      locking and unlocking a Surface that does not need it.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.lock ##

   .. method:: unlock

      | :sl:`unlock the Surface memory from pixel access`
      | :sg:`unlock() -> None`

      Unlock the Surface pixel data after it has been locked. The unlocked
      Surface can once again be drawn and managed by pygame. See the
      :meth:`lock()` documentation for more details.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      It is safe to nest locking and unlocking calls. The surface will only be
      unlocked after the final lock is released.

      .. ## Surface.unlock ##

   .. method:: mustlock

      | :sl:`test if the Surface requires locking`
      | :sg:`mustlock() -> bool`

      Returns ``True`` if the Surface is required to be locked to access pixel
      data. Usually pure software Surfaces do not require locking. This method
      is rarely needed, since it is safe and quickest to just lock all Surfaces
      as needed.

      All pygame functions will automatically lock and unlock the Surface data
      as needed. If a section of code is going to make calls that will
      repeatedly lock and unlock the Surface many times, it can be helpful to
      wrap the block inside a lock and unlock pair.

      .. ## Surface.mustlock ##

   .. method:: get_locked

      | :sl:`test if the Surface is current locked`
      | :sg:`get_locked() -> bool`

      Returns ``True`` when the Surface is locked. It doesn't matter how many
      times the Surface is locked.

      .. ## Surface.get_locked ##

   .. method:: get_locks

      | :sl:`Gets the locks for the Surface`
      | :sg:`get_locks() -> tuple`

      Returns the currently existing locks for the Surface.

      .. ## Surface.get_locks ##

   .. method:: get_at

      | :sl:`get the color value at a single pixel`
      | :sg:`get_at((x, y)) -> Color`

      Return a copy of the ``RGBA`` Color value at the given pixel. If the
      Surface has no per pixel alpha, then the alpha value will always be 255
      (opaque). If the pixel position is outside the area of the Surface an
      ``IndexError`` exception will be raised.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation. It is better to use methods which
      operate on many pixels at a time like with the blit, fill and draw
      methods - or by using :mod:`pygame.surfarray`/:mod:`pygame.PixelArray`.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9
         Returning a Color instead of tuple. Use ``tuple(surf.get_at((x,y)))``
         if you want a tuple, and not a Color. This should only matter if
         you want to use the color as a key in a dict.

      .. ## Surface.get_at ##

   .. method:: set_at

      | :sl:`set the color value for a single pixel`
      | :sg:`set_at((x, y), Color) -> None`

      Set the ``RGBA`` or mapped integer color value for a single pixel. If the
      Surface does not have per pixel alphas, the alpha value is ignored.
      Setting pixels outside the Surface area or outside the Surface clipping
      will have no effect.

      Getting and setting pixels one at a time is generally too slow to be used
      in a game or realtime situation.

      This function will temporarily lock and unlock the Surface as needed.

      .. note:: If the surface is palettized, the pixel color will be set to the
                most similar color in the palette.

      .. ## Surface.set_at ##

   .. method:: get_at_mapped

      | :sl:`get the mapped color value at a single pixel`
      | :sg:`get_at_mapped((x, y)) -> Color`

      Return the integer value of the given pixel. If the pixel position is
      outside the area of the Surface an ``IndexError`` exception will be
      raised.

      This method is intended for pygame unit testing. It unlikely has any use
      in an application.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.9.2

      .. ## Surface.get_at_mapped ##

   .. method:: get_palette

      | :sl:`get the color index palette for an 8-bit Surface`
      | :sg:`get_palette() -> [RGB, RGB, RGB, ...]`

      Return a list of up to 256 color elements that represent the indexed
      colors used in an 8-bit Surface. The returned list is a copy of the
      palette, and changes will have no effect on the Surface.

      Returning a list of ``Color(with length 3)`` instances instead of tuples.

      .. versionadded:: 1.9

      .. ## Surface.get_palette ##

   .. method:: get_palette_at

      | :sl:`get the color for a single entry in a palette`
      | :sg:`get_palette_at(index) -> RGB`

      Returns the red, green, and blue color values for a single index in a
      Surface palette. The index should be a value from 0 to 255.

      .. versionadded:: 1.9
         Returning ``Color(with length 3)`` instance instead of a tuple.

      .. ## Surface.get_palette_at ##

   .. method:: set_palette

      | :sl:`set the color palette for an 8-bit Surface`
      | :sg:`set_palette([RGB, RGB, RGB, ...]) -> None`

      Set the full palette for an 8-bit Surface. This will replace the colors in
      the existing palette. A partial palette can be passed and only the first
      colors in the original palette will be changed.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette ##

   .. method:: set_palette_at

      | :sl:`set the color for a single index in an 8-bit Surface palette`
      | :sg:`set_palette_at(index, RGB) -> None`

      Set the palette value for a single entry in a Surface palette. The index
      should be a value from 0 to 255.

      This function has no effect on a Surface with more than 8-bits per pixel.

      .. ## Surface.set_palette_at ##

   .. method:: map_rgb

      | :sl:`convert a color into a mapped color value`
      | :sg:`map_rgb(Color) -> mapped_int`

      Convert an ``RGBA`` color into the mapped integer value for this Surface.
      The returned integer will contain no more bits than the bit depth of the
      Surface. Mapped color values are not often used inside pygame, but can be
      passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.map_rgb ##

   .. method:: unmap_rgb

      | :sl:`convert a mapped integer color value into a Color`
      | :sg:`unmap_rgb(mapped_int) -> Color`

      Convert an mapped integer color into the ``RGB`` color components for
      this Surface. Mapped color values are not often used inside pygame, but
      can be passed to most functions that require a Surface and a color.

      See the Surface object documentation for more information about colors
      and pixel formats.

      .. ## Surface.unmap_rgb ##

   .. method:: set_clip

      | :sl:`set the current clipping area of the Surface`
      | :sg:`set_clip(rect) -> None`
      | :sg:`set_clip(None) -> None`

      Each Surface has an active clipping area. This is a rectangle that
      represents the only pixels on the Surface that can be modified. If
      ``None`` is passed for the rectangle the full Surface will be available
      for changes.

      The clipping area is always restricted to the area of the Surface itself.
      If the clip rectangle is too large it will be shrunk to fit inside the
      Surface.

      .. ## Surface.set_clip ##

   .. method:: get_clip

      | :sl:`get the current clipping area of the Surface`
      | :sg:`get_clip() -> Rect`

      Return a rectangle of the current clipping area. The Surface will always
      return a valid rectangle that will never be outside the bounds of the
      image. If the Surface has had ``None`` set for the clipping area, the
      Surface will return a rectangle with the full area of the Surface.

      .. ## Surface.get_clip ##

   .. method:: subsurface

      | :sl:`create a new surface that references its parent`
      | :sg:`subsurface(Rect) -> Surface`

      Returns a new Surface that shares its pixels with its new parent. The new
      Surface is considered a child of the original. Modifications to either
      Surface pixels will effect each other. Surface information like clipping
      area and color keys are unique to each Surface.

      The new Surface will inherit the palette, color key, and alpha settings
      from its parent.

      It is possible to have any number of subsurfaces and subsubsurfaces on
      the parent. It is also possible to subsurface the display Surface if the
      display mode is not hardware accelerated.

      See :meth:`get_offset()` and :meth:`get_parent()` to learn more
      about the state of a subsurface.

      A subsurface will have the same class as the parent surface.

      .. ## Surface.subsurface ##

   .. method:: get_parent

      | :sl:`find the parent of a subsurface`
      | :sg:`get_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then ``None`` will be returned.

      .. ## Surface.get_parent ##

   .. method:: get_abs_parent

      | :sl:`find the top level parent of a subsurface`
      | :sg:`get_abs_parent() -> Surface`

      Returns the parent Surface of a subsurface. If this is not a subsurface
      then this surface will be returned.

      .. ## Surface.get_abs_parent ##

   .. method:: get_offset

      | :sl:`find the position of a child subsurface inside a parent`
      | :sg:`get_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of a parent. If the
      Surface is not a subsurface this will return (0, 0).

      .. ## Surface.get_offset ##

   .. method:: get_abs_offset

      | :sl:`find the absolute position of a child subsurface inside its top level parent`
      | :sg:`get_abs_offset() -> (x, y)`

      Get the offset position of a child subsurface inside of its top level
      parent Surface. If the Surface is not a subsurface this will return (0,
      0).

      .. ## Surface.get_abs_offset ##

   .. method:: get_size

      | :sl:`get the dimensions of the Surface`
      | :sg:`get_size() -> (width, height)`

      Return the width and height of the Surface in pixels.

      .. ## Surface.get_size ##

   .. method:: get_width

      | :sl:`get the width of the Surface`
      | :sg:`get_width() -> width`

      Return the width of the Surface in pixels.

      .. ## Surface.get_width ##

   .. method:: get_height

      | :sl:`get the height of the Surface`
      | :sg:`get_height() -> height`

      Return the height of the Surface in pixels.

      .. ## Surface.get_height ##

   .. method:: get_rect

      | :sl:`get the rectangular area of the Surface`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new rectangle covering the entire surface. This rectangle will
      always start at (0, 0) with a width and height the same size as the image.

      You can pass keyword argument values to this function. These named values
      will be applied to the attributes of the Rect before it is returned. An
      example would be ``mysurf.get_rect(center=(100, 100))`` to create a
      rectangle for the Surface centered at a given position.

      .. ## Surface.get_rect ##

   .. method:: get_bitsize

      | :sl:`get the bit depth of the Surface pixel format`
      | :sg:`get_bitsize() -> int`

      Returns the number of bits used to represent each pixel. This value may
      not exactly fill the number of bytes used per pixel. For example a 15 bit
      Surface still requires a full 2 bytes.

      .. ## Surface.get_bitsize ##

   .. method:: get_bytesize

      | :sl:`get the bytes used per Surface pixel`
      | :sg:`get_bytesize() -> int`

      Return the number of bytes used per pixel.

      .. ## Surface.get_bytesize ##

   .. method:: get_flags

      | :sl:`get the additional flags used for the Surface`
      | :sg:`get_flags() -> int`

      Returns a set of current Surface features. Each feature is a bit in the
      flags bitmask. Typical flags are ``RLEACCEL``, ``SRCALPHA``, and
      ``SRCCOLORKEY``.

      Here is a more complete list of flags. A full list can be found in
      ``SDL_video.h``

      ::

        SWSURFACE      0x00000000    # Surface is in system memory
        HWSURFACE      0x00000001    # (obsolete in pygame 2) Surface is in video memory
        ASYNCBLIT      0x00000004    # (obsolete in pygame 2) Use asynchronous blits if possible

      See :func:`pygame.display.set_mode()` for flags exclusive to the
      display surface.

      Used internally (read-only)

      ::

        HWACCEL        0x00000100    # Blit uses hardware acceleration
        SRCCOLORKEY    0x00001000    # Blit uses a source color key
        RLEACCELOK     0x00002000    # Private flag
        RLEACCEL       0x00004000    # Surface is RLE encoded
        SRCALPHA       0x00010000    # Blit uses source alpha blending
        PREALLOC       0x01000000    # Surface uses preallocated memory

      .. ## Surface.get_flags ##

   .. method:: get_pitch

      | :sl:`get the number of bytes used per Surface row`
      | :sg:`get_pitch() -> int`

      Return the number of bytes separating each row in the Surface. Surfaces
      in video memory are not always linearly packed. Subsurfaces will also
      have a larger pitch than their real width.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_pitch ##

   .. method:: get_masks

      | :sl:`the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`get_masks() -> (R, G, B, A)`

      Returns the bitmasks used to isolate each color in a mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_masks ##

   .. method:: set_masks

      | :sl:`set the bitmasks needed to convert between a color and a mapped integer`
      | :sg:`set_masks((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the masks are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_masks ##

   .. method:: get_shifts

      | :sl:`the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`get_shifts() -> (R, G, B, A)`

      Returns the pixel shifts need to convert between each color and a mapped
      integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_shifts ##

   .. method:: set_shifts

      | :sl:`sets the bit shifts needed to convert between a color and a mapped integer`
      | :sg:`set_shifts((r,g,b,a)) -> None`

      This is not needed for normal pygame usage.

      .. note:: Starting in pygame 2.0, the shifts are read-only and
         accordingly this method will raise a TypeError if called.

      .. deprecated:: 2.0.0

      .. versionadded:: 1.8.1

      .. ## Surface.set_shifts ##

   .. method:: get_losses

      | :sl:`the significant bits used to convert between a color and a mapped integer`
      | :sg:`get_losses() -> (R, G, B, A)`

      Return the least significant number of bits stripped from each color in a
      mapped integer.

      This value is not needed for normal pygame usage.

      .. ## Surface.get_losses ##

   .. method:: get_bounding_rect

      | :sl:`find the smallest rect containing data`
      | :sg:`get_bounding_rect(min_alpha = 1) -> Rect`

      Returns the smallest rectangular region that contains all the pixels in
      the surface that have an alpha value greater than or equal to the minimum
      alpha value.

      This function will temporarily lock and unlock the Surface as needed.

      .. versionadded:: 1.8

      .. ## Surface.get_bounding_rect ##

   .. method:: get_view

      | :sl:`return a buffer view of the Surface's pixels.`
      | :sg:`get_view(<kind>='2') -> BufferProxy`

      Return an object which exports a surface's internal pixel buffer as
      a C level array struct, Python level array interface or a C level
      buffer interface. The new buffer protocol is supported.

      The kind argument is the length 1 string '0', '1', '2', '3',
      'r', 'g', 'b', or 'a'. The letters are case insensitive;
      'A' will work as well. The argument can be either a Unicode or byte (char)
      string. The default is '2'.

      '0' returns a contiguous unstructured bytes view. No surface shape
      information is given. A ``ValueError`` is raised if the surface's pixels
      are discontinuous.

      '1' returns a (surface-width * surface-height) array of continuous
      pixels. A ``ValueError`` is raised if the surface pixels are
      discontinuous.

      '2' returns a (surface-width, surface-height) array of raw pixels.
      The pixels are surface-bytesize-d unsigned integers. The pixel format is
      surface specific. The 3 byte unsigned integers of 24 bit surfaces are
      unlikely accepted by anything other than other pygame functions.

      '3' returns a (surface-width, surface-height, 3) array of ``RGB`` color
      components. Each of the red, green, and blue components are unsigned
      bytes. Only 24-bit and 32-bit surfaces are supported. The color
      components must be in either ``RGB`` or ``BGR`` order within the pixel.

      'r' for red, 'g' for green, 'b' for blue, and 'a' for alpha return a
      (surface-width, surface-height) view of a single color component within a
      surface: a color plane. Color components are unsigned bytes. Both 24-bit
      and 32-bit surfaces support 'r', 'g', and 'b'. Only 32-bit surfaces with
      ``SRCALPHA`` support 'a'.

      The surface is locked only when an exposed interface is accessed.
      For new buffer interface accesses, the surface is unlocked once the
      last buffer view is released. For array interface and old buffer
      interface accesses, the surface remains locked until the BufferProxy
      object is released.

      .. versionadded:: 1.9.2

   .. method:: get_buffer

      | :sl:`acquires a buffer object for the pixels of the Surface.`
      | :sg:`get_buffer() -> BufferProxy`

      Return a buffer object for the pixels of the Surface. The buffer can be
      used for direct pixel access and manipulation. Surface pixel data is
      represented as an unstructured block of memory, with a start address
      and length in bytes. The data need not be contiguous. Any gaps are
      included in the length, but otherwise ignored.

      This method implicitly locks the Surface. The lock will be released when
      the returned :mod:`pygame.BufferProxy` object is garbage collected.

      .. versionadded:: 1.8

      .. ## Surface.get_buffer ##

   .. attribute:: _pixels_address

      | :sl:`pixel buffer address`
      | :sg:`_pixels_address -> int`

      The starting address of the surface's raw pixel bytes.

      .. versionadded:: 1.9.2

   .. method:: premul_alpha

      | :sl:`returns a copy of the surface with the RGB channels pre-multiplied by the alpha channel.`
      | :sg:`premul_alpha() -> Surface`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave premul_alpha feedback with authors <https://github.com/pygame/pygame/pull/3276>`_

      Returns a copy of the initial surface with the red, green and blue color channels multiplied
      by the alpha channel. This is intended to make it easier to work with the BLEND_PREMULTIPLED
      blend mode flag of the blit() method. Surfaces which have called this method will only look
      correct after blitting if the BLEND_PREMULTIPLED special flag is used.

      It is worth noting that after calling this method, methods that return the colour of a pixel
      such as get_at() will return the alpha multiplied colour values. It is not possible to fully
      reverse an alpha multiplication of the colours in a surface as integer colour channel data
      is generally reduced by the operation (e.g. 255 x 0 = 0, from there it is not possible to reconstruct
      the original 255 from just the two remaining zeros in the colour and alpha channels).

      If you call this method, and then call it again, it will multiply the colour channels by the alpha channel
      twice. There are many possible ways to obtain a surface with the colour channels pre-multiplied by the
      alpha channel in pygame, and it is not possible to tell the difference just from the information in the pixels.
      It is completely possible to have two identical surfaces - one intended for pre-multiplied alpha blending and
      one intended for normal blending. For this reason we do not store state on surfaces intended for pre-multiplied
      alpha blending.

      Surfaces without an alpha channel cannot use this method and will return an error if you use
      it on them. It is best used on 32 bit surfaces (the default on most platforms) as the blitting
      on these surfaces can be accelerated by SIMD versions of the pre-multiplied blitter.

      In general pre-multiplied alpha blitting is faster then 'straight alpha' blitting and produces
      superior results when blitting an alpha surface onto another surface with alpha - assuming both
      surfaces contain pre-multiplied alpha colours.

      .. versionadded:: 2.2.0

      .. ## Surface.premul_alpha ##

   .. ## pygame.Surface ##




--- Contenu du fichier : scrap.rst.txt ---
.. include:: common.txt

:mod:`pygame.scrap`
===================

.. module:: pygame.scrap
   :synopsis: pygame module for clipboard support.

| :sl:`pygame module for clipboard support.`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The scrap module is for transferring data to/from the clipboard. This allows
for cutting and pasting data between pygame and other applications. Some basic
data (MIME) types are defined and registered:

::

   pygame         string
  constant        value        description
  --------------------------------------------------
  SCRAP_TEXT   "text/plain"    plain text
  SCRAP_BMP    "image/bmp"     BMP encoded image data
  SCRAP_PBM    "image/pbm"     PBM encoded image data
  SCRAP_PPM    "image/ppm"     PPM encoded image data

``pygame.SCRAP_PPM``, ``pygame.SCRAP_PBM`` and ``pygame.SCRAP_BMP`` are
suitable for surface buffers to be shared with other applications.
``pygame.SCRAP_TEXT`` is an alias for the plain text clipboard type.

Depending on the platform, additional types are automatically registered when
data is placed into the clipboard to guarantee a consistent sharing behaviour
with other applications. The following listed types can be used as strings to
be passed to the respective :mod:`pygame.scrap` module functions.

For **Windows** platforms, these additional types are supported automatically
and resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "audio/wav"                  WAV encoded audio
  "image/tiff"                 TIFF encoded image data

For **X11** platforms, these additional types are supported automatically and
resolve to their internal definitions:

::

  "text/plain;charset=utf-8"   UTF-8 encoded text
  "UTF8_STRING"                UTF-8 encoded text
  "COMPOUND_TEXT"              COMPOUND text

User defined types can be used, but the data might not be accessible by other
applications unless they know what data type to look for.
Example: Data placed into the clipboard by
``pygame.scrap.put("my_data_type", byte_data)`` can only be accessed by
applications which query the clipboard for the ``"my_data_type"`` data type.

For an example of how the scrap module works refer to the examples page
(:func:`pygame.examples.scrap_clipboard.main`) or the code directly in GitHub
(`pygame/examples/scrap_clipboard.py <https://github.com/pygame/pygame/blob/main/examples/scrap_clipboard.py>`_).

.. versionadded:: 1.8

.. note::
   The scrap module is currently only supported for Windows, X11 and Mac OS X.
   On Mac OS X only text works at the moment - other types may be supported in
   future releases.

.. function:: init

   | :sl:`Initializes the scrap module.`
   | :sg:`init() -> None`

   Initialize the scrap module.

   :raises pygame.error: if unable to initialize scrap module

   .. note:: The scrap module requires :func:`pygame.display.set_mode()` be
      called before being initialized.

   .. ## pygame.scrap.init ##

.. function:: get_init

   | :sl:`Returns True if the scrap module is currently initialized.`
   | :sg:`get_init() -> bool`

   Gets the scrap module's initialization state.

   :returns: ``True`` if the :mod:`pygame.scrap` module is currently
      initialized, ``False`` otherwise
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.scrap.get_init ##

.. function:: get

   | :sl:`Gets the data for the specified type from the clipboard.`
   | :sg:`get(type) -> bytes | None`

   Retrieves the data for the specified type from the clipboard. The data is
   returned as a byte string and might need further processing (such as
   decoding to Unicode).

   :param string type: data type to retrieve from the clipboard

   :returns: data (bytes object) for the given type identifier or ``None`` if
      no data for the given type is available
   :rtype: bytes | None

   ::

     text = pygame.scrap.get(pygame.SCRAP_TEXT)
     if text:
         print("There is text in the clipboard.")
     else:
         print("There does not seem to be text in the clipboard.")

   .. ## pygame.scrap.get ##

.. function:: get_types

   | :sl:`Gets a list of the available clipboard types.`
   | :sg:`get_types() -> list`

   Gets a list of data type string identifiers for the data currently
   available on the clipboard. Each identifier can be used in the
   :func:`pygame.scrap.get()` method to get the clipboard content of the
   specific type.

   :returns: list of strings of the available clipboard data types, if there
      is no data in the clipboard an empty list is returned
   :rtype: list

   ::

     for t in pygame.scrap.get_types():
         if "text" in t:
             # There is some content with the word "text" in its type string.
             print(pygame.scrap.get(t))

   .. ## pygame.scrap.get_types ##

.. function:: put

   | :sl:`Places data into the clipboard.`
   | :sg:`put(type, data) -> None`

   Places data for a given clipboard type into the clipboard. The data must
   be a string buffer. The type is a string identifying the type of data to be
   placed into the clipboard. This can be one of the predefined
   ``pygame.SCRAP_PBM``, ``pygame.SCRAP_PPM``, ``pygame.SCRAP_BMP`` or
   ``pygame.SCRAP_TEXT`` values or a user defined string identifier.

   :param string type: type identifier of the data to be placed into the
      clipboard
   :param data: data to be place into the clipboard, a bytes object
   :type data: bytes

   :raises pygame.error: if unable to put the data into the clipboard

   ::

     with open("example.bmp", "rb") as fp:
         pygame.scrap.put(pygame.SCRAP_BMP, fp.read())
     # The image data is now on the clipboard for other applications to access
     # it.
     pygame.scrap.put(pygame.SCRAP_TEXT, b"A text to copy")
     pygame.scrap.put("Plain text", b"Data for user defined type 'Plain text'")

   .. ## pygame.scrap.put ##

.. function:: contains

   | :sl:`Checks whether data for a given type is available in the clipboard.`
   | :sg:`contains(type) -> bool`

   Checks whether data for the given type is currently available in the
   clipboard.

   :param string type: data type to check availability of

   :returns: ``True`` if data for the passed type is available in the
      clipboard, ``False`` otherwise
   :rtype: bool

   ::

     if pygame.scrap.contains(pygame.SCRAP_TEXT):
         print("There is text in the clipboard.")
     if pygame.scrap.contains("own_data_type"):
         print("There is stuff in the clipboard.")

   .. ## pygame.scrap.contains ##

.. function:: lost

   | :sl:`Indicates if the clipboard ownership has been lost by the pygame application.`
   | :sg:`lost() -> bool`

   Indicates if the clipboard ownership has been lost by the pygame
   application.

   :returns: ``True``, if the clipboard ownership has been lost by the pygame
      application, ``False`` if the pygame application still owns the clipboard
   :rtype: bool

   ::

     if pygame.scrap.lost():
         print("The clipboard is in use by another application.")

   .. ## pygame.scrap.lost ##

.. function:: set_mode

   | :sl:`Sets the clipboard access mode.`
   | :sg:`set_mode(mode) -> None`

   Sets the access mode for the clipboard. This is only of interest for X11
   environments where clipboard modes ``pygame.SCRAP_SELECTION`` (for mouse
   selections) and ``pygame.SCRAP_CLIPBOARD`` (for the clipboard) are
   available. Setting the mode to ``pygame.SCRAP_SELECTION`` in other
   environments will not change the mode from ``pygame.SCRAP_CLIPBOARD``.

   :param mode: access mode, supported values are ``pygame.SCRAP_CLIPBOARD``
      and ``pygame.SCRAP_SELECTION`` (``pygame.SCRAP_SELECTION`` only has an
      effect when used on X11 platforms)

   :raises ValueError: if the ``mode`` parameter is not
      ``pygame.SCRAP_CLIPBOARD`` or ``pygame.SCRAP_SELECTION``

   .. ## pygame.scrap.set_mode ##

.. ## pygame.scrap ##


--- Contenu du fichier : display.rst.txt ---
.. include:: common.txt

:mod:`pygame.display`
=====================

.. module:: pygame.display
   :synopsis: pygame module to control the display window and screen

| :sl:`pygame module to control the display window and screen`

This module offers control over the pygame display. Pygame has a single display
Surface that is either contained in a window or runs full screen. Once you
create the display you treat it as a regular Surface. Changes are not
immediately visible onscreen; you must choose one of the two flipping functions
to update the actual display.

The origin of the display, where x = 0 and y = 0, is the top left of the
screen. Both axes increase positively towards the bottom right of the screen.

The pygame display can actually be initialized in one of several modes. By
default, the display is a basic software driven framebuffer. You can request
special modules like automatic scaling or OpenGL support. These are
controlled by flags passed to ``pygame.display.set_mode()``.

Pygame can only have a single display active at any time. Creating a new one
with ``pygame.display.set_mode()`` will close the previous display. To detect
the number and size of attached screens, you can use
``pygame.display.get_desktop_sizes`` and then select appropriate window size
and display index to pass to ``pygame.display.set_mode()``.

For backward compatibility ``pygame.display`` allows precise control over
the pixel format or display resolutions. This used to be necessary with old
graphics cards and CRT screens, but is usually not needed any more. Use the
functions ``pygame.display.mode_ok()``, ``pygame.display.list_modes()``, and
``pygame.display.Info()`` to query detailed information about the display.

Once the display Surface is created, the functions from this module affect the
single existing display. The Surface becomes invalid if the module is
uninitialized. If a new display mode is set, the existing Surface will
automatically switch to operate on the new display.

When the display mode is set, several events are placed on the pygame event
queue. ``pygame.QUIT`` is sent when the user has requested the program to
shut down. The window will receive ``pygame.ACTIVEEVENT`` events as the display
gains and loses input focus. If the display is set with the
``pygame.RESIZABLE`` flag, ``pygame.VIDEORESIZE`` events will be sent when the
user adjusts the window dimensions. Hardware displays that draw direct to the
screen will get ``pygame.VIDEOEXPOSE`` events when portions of the window must
be redrawn.

A new windowevent API was introduced in pygame 2.0.1. Check event module docs
for more information on that

Some display environments have an option for automatically stretching all
windows. When this option is enabled, this automatic stretching distorts the
appearance of the pygame window. In the pygame examples directory, there is
example code (prevent_display_stretching.py) which shows how to disable this
automatic stretching of the pygame display on Microsoft Windows (Vista or newer
required).

.. function:: init

   | :sl:`Initialize the display module`
   | :sg:`init() -> None`

   Initializes the pygame display module. The display module cannot do anything
   until it is initialized. This is usually handled for you automatically when
   you call the higher level ``pygame.init()``.

   Pygame will select from one of several internal display backends when it is
   initialized. The display mode will be chosen depending on the platform and
   permissions of current user. Before the display module is initialized the
   environment variable ``SDL_VIDEODRIVER`` can be set to control which backend
   is used. The systems with multiple choices are listed here.

   ::

      Windows : windib, directx
      Unix    : x11, dga, fbcon, directfb, ggi, vgl, svgalib, aalib

   On some platforms it is possible to embed the pygame display into an already
   existing window. To do this, the environment variable ``SDL_WINDOWID`` must
   be set to a string containing the window id or handle. The environment
   variable is checked when the pygame display is initialized. Be aware that
   there can be many strange side effects when running in an embedded display.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.init ##

.. function:: quit

   | :sl:`Uninitialize the display module`
   | :sg:`quit() -> None`

   This will shut down the entire display module. This means any active
   displays will be closed. This will also be handled automatically when the
   program exits.

   It is harmless to call this more than once, repeated calls have no effect.

   .. ## pygame.display.quit ##

.. function:: get_init

   | :sl:`Returns True if the display module has been initialized`
   | :sg:`get_init() -> bool`

   Returns True if the :mod:`pygame.display` module is currently initialized.

   .. ## pygame.display.get_init ##

.. function:: set_mode

   | :sl:`Initialize a window or screen for display`
   | :sg:`set_mode(size=(0, 0), flags=0, depth=0, display=0, vsync=0) -> Surface`

   This function will create a display Surface. The arguments passed in are
   requests for a display type. The actual created display will be the best
   possible match supported by the system.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   The size argument is a pair of numbers representing the width and
   height. The flags argument is a collection of additional options. The depth
   argument represents the number of bits to use for color.

   The Surface that gets returned can be drawn to like a regular Surface but
   changes will eventually be seen on the monitor.

   If no size is passed or is set to ``(0, 0)`` and pygame uses ``SDL``
   version 1.2.10 or above, the created Surface will have the same size as the
   current screen resolution. If only the width or height are set to ``0``, the
   Surface will have the same width or height as the screen resolution. Using a
   ``SDL`` version prior to 1.2.10 will raise an exception.

   It is usually best to not pass the depth argument. It will default to the
   best and fastest color depth for the system. If your game requires a
   specific color format you can control the depth with this argument. Pygame
   will emulate an unavailable color depth which can be slow.

   When requesting fullscreen display modes, sometimes an exact match for the
   requested size cannot be made. In these situations pygame will select
   the closest compatible match. The returned surface will still always match
   the requested size.

   On high resolution displays(4k, 1080p) and tiny graphics games (640x480)
   show up very small so that they are unplayable. SCALED scales up the window
   for you. The game thinks it's a 640x480 window, but really it can be bigger.
   Mouse events are scaled for you, so your game doesn't need to do it. Note
   that SCALED is considered an experimental API and may change in future
   releases.

   The flags argument controls which type of display you want. There are
   several to choose from, and you can even combine multiple types using the
   bitwise or operator, (the pipe "|" character). Here are the display
   flags you will want to choose from:

   ::

      pygame.FULLSCREEN    create a fullscreen display
      pygame.DOUBLEBUF     only applicable with OPENGL
      pygame.HWSURFACE     (obsolete in pygame 2) hardware accelerated, only in FULLSCREEN
      pygame.OPENGL        create an OpenGL-renderable display
      pygame.RESIZABLE     display window should be resizeable
      pygame.NOFRAME       display window will have no border or controls
      pygame.SCALED        resolution depends on desktop size and scale graphics
      pygame.SHOWN         window is opened in visible mode (default)
      pygame.HIDDEN        window is opened in hidden mode


   .. versionadded:: 2.0.0 ``SCALED``, ``SHOWN`` and ``HIDDEN``

   By setting the ``vsync`` parameter to ``1``, it is possible to get a display
   with vertical sync, but you are not guaranteed to get one. The request only
   works at all for calls to ``set_mode()`` with the ``pygame.OPENGL`` or
   ``pygame.SCALED`` flags set, and is still not guaranteed even with one of
   those set. What you get depends on the hardware and driver configuration
   of the system pygame is running on. Here is an example usage of a call
   to ``set_mode()`` that may give you a display with vsync:

   ::

     flags = pygame.OPENGL | pygame.FULLSCREEN
     window_surface = pygame.display.set_mode((1920, 1080), flags, vsync=1)

   Vsync behaviour is considered experimental, and may change in future releases.

   .. versionadded:: 2.0.0 ``vsync``

   Basic example:

   ::

        # Open a window on the screen
        screen_width=700
        screen_height=400
        screen=pygame.display.set_mode([screen_width, screen_height])

   The display index ``0`` means the default display is used. If no display
   index argument is provided, the default display can be overridden with an
   environment variable.


   .. versionchanged:: 1.9.5 ``display`` argument added

   .. versionchanged:: 2.1.3
      pygame now ensures that subsequent calls to this function clears the
      window to black. On older versions, this was an implementation detail
      on the major platforms this function was tested with.

   .. ## pygame.display.set_mode ##

.. function:: get_surface

   | :sl:`Get a reference to the currently set display surface`
   | :sg:`get_surface() -> Surface`

   Return a reference to the currently set display Surface. If no display mode
   has been set this will return None.

   .. ## pygame.display.get_surface ##

.. function:: flip

   | :sl:`Update the full display Surface to the screen`
   | :sg:`flip() -> None`

   This will update the contents of the entire display. If your display mode is
   using the flags ``pygame.HWSURFACE`` and ``pygame.DOUBLEBUF`` on pygame 1,
   this will wait for a vertical retrace and swap the surfaces.

   When using an ``pygame.OPENGL`` display mode this will perform a gl buffer
   swap.

   .. ## pygame.display.flip ##

.. function:: update

   | :sl:`Update portions of the screen for software displays`
   | :sg:`update(rectangle=None) -> None`
   | :sg:`update(rectangle_list) -> None`

   This function is like an optimized version of ``pygame.display.flip()`` for
   software displays. It allows only a portion of the screen to be updated,
   instead of the entire area. If no argument is passed it updates the entire
   Surface area like ``pygame.display.flip()``.

   Note that calling ``display.update(None)`` means no part of the window is
   updated. Whereas ``display.update()`` means the whole window is updated.

   You can pass the function a single rectangle, or a sequence of rectangles.
   It is more efficient to pass many rectangles at once than to call update
   multiple times with single or a partial list of rectangles. If passing a
   sequence of rectangles it is safe to include None values in the list, which
   will be skipped.

   This call cannot be used on ``pygame.OPENGL`` displays and will generate an
   exception.

   .. ## pygame.display.update ##

.. function:: get_driver

   | :sl:`Get the name of the pygame display backend`
   | :sg:`get_driver() -> name`

   Pygame chooses one of many available display backends when it is
   initialized. This returns the internal name used for the display backend.
   This can be used to provide limited information about what display
   capabilities might be accelerated. See the ``SDL_VIDEODRIVER`` flags in
   ``pygame.display.set_mode()`` to see some of the common options.

   .. ## pygame.display.get_driver ##

.. function:: Info

   | :sl:`Create a video display information object`
   | :sg:`Info() -> VideoInfo`

   Creates a simple object containing several attributes to describe the
   current graphics environment. If this is called before
   ``pygame.display.set_mode()`` some platforms can provide information about
   the default display mode. This can also be called after setting the display
   mode to verify specific display options were satisfied. The VidInfo object
   has several attributes:

   ::

     hw:         1 if the display is hardware accelerated
     wm:         1 if windowed display modes can be used
     video_mem:  The megabytes of video memory on the display. This is 0 if
                 unknown
     bitsize:    Number of bits used to store each pixel
     bytesize:   Number of bytes used to store each pixel
     masks:      Four values used to pack RGBA values into pixels
     shifts:     Four values used to pack RGBA values into pixels
     losses:     Four values used to pack RGBA values into pixels
     blit_hw:    1 if hardware Surface blitting is accelerated
     blit_hw_CC: 1 if hardware Surface colorkey blitting is accelerated
     blit_hw_A:  1 if hardware Surface pixel alpha blitting is accelerated
     blit_sw:    1 if software Surface blitting is accelerated
     blit_sw_CC: 1 if software Surface colorkey blitting is accelerated
     blit_sw_A:  1 if software Surface pixel alpha blitting is accelerated
     current_h, current_w:  Height and width of the current video mode, or
                 of the desktop mode if called before the display.set_mode
                 is called. (current_h, current_w are available since
                 SDL 1.2.10, and pygame 1.8.0). They are -1 on error, or if
                 an old SDL is being used.

   .. ## pygame.display.Info ##

.. function:: get_wm_info

   | :sl:`Get information about the current windowing system`
   | :sg:`get_wm_info() -> dict`

   Creates a dictionary filled with string keys. The strings and values are
   arbitrarily created by the system. Some systems may have no information and
   an empty dictionary will be returned. Most platforms will return a "window"
   key with the value set to the system id for the current display.

   .. versionadded:: 1.7.1

   .. ## pygame.display.get_wm_info ##

.. function:: get_desktop_sizes

   | :sl:`Get sizes of active desktops`
   | :sg:`get_desktop_sizes() -> list`

   This function returns the sizes of the currently configured
   virtual desktops as a list of (x, y) tuples of integers.

   The length of the list is not the same as the number of attached monitors,
   as a desktop can be mirrored across multiple monitors. The desktop sizes
   do not indicate the maximum monitor resolutions supported by the hardware,
   but the desktop size configured in the operating system.

   In order to fit windows into the desktop as it is currently configured, and
   to respect the resolution configured by the operating system in fullscreen
   mode, this function *should* be used to replace many use cases of
   ``pygame.display.list_modes()`` whenever applicable.

   .. versionadded:: 2.0.0

.. function:: list_modes

   | :sl:`Get list of available fullscreen modes`
   | :sg:`list_modes(depth=0, flags=pygame.FULLSCREEN, display=0) -> list`

   This function returns a list of possible sizes for a specified color
   depth. The return value will be an empty list if no display modes are
   available with the given arguments. A return value of ``-1`` means that
   any requested size should work (this is likely the case for windowed
   modes). Mode sizes are sorted from biggest to smallest.

   If depth is ``0``, the current/best color depth for the display is used.
   The flags defaults to ``pygame.FULLSCREEN``, but you may need to add
   additional flags for specific fullscreen modes.

   The display index ``0`` means the default display is used.

   Since pygame 2.0, ``pygame.display.get_desktop_sizes()`` has taken over
   some use cases from ``pygame.display.list_modes()``:

   To find a suitable size for non-fullscreen windows, it is preferable to
   use ``pygame.display.get_desktop_sizes()`` to get the size of the *current*
   desktop, and to then choose a smaller window size. This way, the window is
   guaranteed to fit, even when the monitor is configured to a lower resolution
   than the maximum supported by the hardware.

   To avoid changing the physical monitor resolution, it is also preferable to
   use ``pygame.display.get_desktop_sizes()`` to determine the fullscreen
   resolution. Developers are strongly advised to default to the current
   physical monitor resolution unless the user explicitly requests a different
   one (e.g. in an options menu or configuration file).

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.list_modes ##

.. function:: mode_ok

   | :sl:`Pick the best color depth for a display mode`
   | :sg:`mode_ok(size, flags=0, depth=0, display=0) -> depth`

   This function uses the same arguments as ``pygame.display.set_mode()``. It
   is used to determine if a requested display mode is available. It will
   return ``0`` if the display mode cannot be set. Otherwise it will return a
   pixel depth that best matches the display asked for.

   Usually the depth argument is not passed, but some platforms can support
   multiple display depths. If passed it will hint to which depth is a better
   match.

   The function will return ``0`` if the passed display flags cannot be set.

   The display index ``0`` means the default display is used.

   .. versionchanged:: 1.9.5 ``display`` argument added

   .. ## pygame.display.mode_ok ##

.. function:: gl_get_attribute

   | :sl:`Get the value for an OpenGL flag for the current display`
   | :sg:`gl_get_attribute(flag) -> value`

   After calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   it is a good idea to check the value of any requested OpenGL attributes. See
   ``pygame.display.gl_set_attribute()`` for a list of valid flags.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.gl_get_attribute ##

.. function:: gl_set_attribute

   | :sl:`Request an OpenGL display attribute for the display mode`
   | :sg:`gl_set_attribute(flag, value) -> None`

   When calling ``pygame.display.set_mode()`` with the ``pygame.OPENGL`` flag,
   Pygame automatically handles setting the OpenGL attributes like color and
   double-buffering. OpenGL offers several other attributes you may want control
   over. Pass one of these attributes as the flag, and its appropriate value.
   This must be called before ``pygame.display.set_mode()``.

   Many settings are the requested minimum. Creating a window with an OpenGL context
   will fail if OpenGL cannot provide the requested attribute, but it may for example
   give you a stencil buffer even if you request none, or it may give you a larger
   one than requested.

   The ``OPENGL`` flags are:

   ::

     GL_ALPHA_SIZE, GL_DEPTH_SIZE, GL_STENCIL_SIZE, GL_ACCUM_RED_SIZE,
     GL_ACCUM_GREEN_SIZE,  GL_ACCUM_BLUE_SIZE, GL_ACCUM_ALPHA_SIZE,
     GL_MULTISAMPLEBUFFERS, GL_MULTISAMPLESAMPLES, GL_STEREO

   :const:`GL_MULTISAMPLEBUFFERS`

     Whether to enable multisampling anti-aliasing.
     Defaults to 0 (disabled).

     Set ``GL_MULTISAMPLESAMPLES`` to a value
     above 0 to control the amount of anti-aliasing.
     A typical value is 2 or 3.

   :const:`GL_STENCIL_SIZE`

     Minimum bit size of the stencil buffer. Defaults to 0.

   :const:`GL_DEPTH_SIZE`

     Minimum bit size of the depth buffer. Defaults to 16.

   :const:`GL_STEREO`

     1 enables stereo 3D. Defaults to 0.

   :const:`GL_BUFFER_SIZE`

     Minimum bit size of the frame buffer. Defaults to 0.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. versionadded:: 2.0.0 Additional attributes:

   ::

     GL_ACCELERATED_VISUAL,
     GL_CONTEXT_MAJOR_VERSION, GL_CONTEXT_MINOR_VERSION,
     GL_CONTEXT_FLAGS, GL_CONTEXT_PROFILE_MASK,
     GL_SHARE_WITH_CURRENT_CONTEXT,
     GL_CONTEXT_RELEASE_BEHAVIOR,
     GL_FRAMEBUFFER_SRGB_CAPABLE

   :const:`GL_CONTEXT_PROFILE_MASK`

     Sets the OpenGL profile to one of these values:

     ::

       GL_CONTEXT_PROFILE_CORE             disable deprecated features
       GL_CONTEXT_PROFILE_COMPATIBILITY    allow deprecated features
       GL_CONTEXT_PROFILE_ES               allow only the ES feature
                                           subset of OpenGL

   :const:`GL_ACCELERATED_VISUAL`

     Set to 1 to require hardware acceleration, or 0 to force software render.
     By default, both are allowed.

   .. ## pygame.display.gl_set_attribute ##

.. function:: get_active

   | :sl:`Returns True when the display is active on the screen`
   | :sg:`get_active() -> bool`

   Returns True when the display Surface is considered actively
   renderable on the screen and may be visible to the user.  This is
   the default state immediately after ``pygame.display.set_mode()``.
   This method may return True even if the application is fully hidden
   behind another application window.

   This will return False if the display Surface has been iconified or
   minimized (either via ``pygame.display.iconify()`` or via an OS
   specific method such as the minimize-icon available on most
   desktops).

   The method can also return False for other reasons without the
   application being explicitly iconified or minimized by the user.  A
   notable example being if the user has multiple virtual desktops and
   the display Surface is not on the active virtual desktop.

   .. note:: This function returning True is unrelated to whether the
       application has input focus.  Please see
       ``pygame.key.get_focused()`` and ``pygame.mouse.get_focused()``
       for APIs related to input focus.

   .. ## pygame.display.get_active ##

.. function:: iconify

   | :sl:`Iconify the display surface`
   | :sg:`iconify() -> bool`

   Request the window for the display surface be iconified or hidden. Not all
   systems and displays support an iconified display. The function will return
   True if successful.

   When the display is iconified ``pygame.display.get_active()`` will return
   ``False``. The event queue should receive an ``ACTIVEEVENT`` event when the
   window has been iconified. Additionally, the event queue also receives a
   ``WINDOWEVENT_MINIMIZED`` event when the window has been iconified on pygame 2.

   .. ## pygame.display.iconify ##

.. function:: toggle_fullscreen

   | :sl:`Switch between fullscreen and windowed displays`
   | :sg:`toggle_fullscreen() -> int`

   Switches the display window between windowed and fullscreen modes.
   Display driver support is not great when using pygame 1, but with
   pygame 2 it is the most reliable method to switch to and from fullscreen.

   Supported display drivers in pygame 1:

    * x11 (Linux/Unix)
    * wayland (Linux/Unix)

   Supported display drivers in pygame 2:

    * windows (Windows)
    * x11 (Linux/Unix)
    * wayland (Linux/Unix)
    * cocoa (OSX/Mac)

   .. Note:: :func:`toggle_fullscreen` doesn't work on Windows
             unless the window size is in :func:`pygame.display.list_modes()` or
             the window is created with the flag ``pygame.SCALED``.
             See `issue #2380 <https://github.com/pygame/pygame/issues/2380>`_.

   .. ## pygame.display.toggle_fullscreen ##

.. function:: set_gamma

   | :sl:`Change the hardware gamma ramps`
   | :sg:`set_gamma(red, green=None, blue=None) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma values on the display hardware. If the
   green and blue arguments are not passed, they will both be the same as red.
   Not all systems and hardware support gamma ramps, if the function succeeds
   it will return ``True``.

   A gamma value of ``1.0`` creates a linear color table. Lower values will
   darken the display and higher values will brighten.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma ##

.. function:: set_gamma_ramp

   | :sl:`Change the hardware gamma ramps with a custom lookup`
   | :sg:`set_gamma_ramp(red, green, blue) -> bool`

   DEPRECATED: This functionality will go away in SDL3.

   Set the red, green, and blue gamma ramps with an explicit lookup table. Each
   argument should be sequence of 256 integers. The integers should range
   between ``0`` and ``0xffff``. Not all systems and hardware support gamma
   ramps, if the function succeeds it will return ``True``.

   .. deprecated:: 2.2.0

   .. ## pygame.display.set_gamma_ramp ##

.. function:: set_icon

   | :sl:`Change the system image for the display window`
   | :sg:`set_icon(Surface) -> None`

   Sets the runtime icon the system will use to represent the display window.
   All windows default to a simple pygame logo for the window icon.

   Note that calling this function implicitly initializes ``pygame.display``, if
   it was not initialized before.

   You can pass any surface, but most systems want a smaller image around
   32x32. The image can have colorkey transparency which will be passed to the
   system.

   Some systems do not allow the window icon to change after it has been shown.
   This function can be called before ``pygame.display.set_mode()`` to create
   the icon before the display mode is set.

   .. ## pygame.display.set_icon ##

.. function:: set_caption

   | :sl:`Set the current window caption`
   | :sg:`set_caption(title, icontitle=None) -> None`

   If the display has a window title, this function will change the name on the
   window. In pygame 1.x, some systems supported an alternate shorter title to
   be used for minimized displays, but in pygame 2 ``icontitle`` does nothing.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   
   .. ## pygame.display.set_caption ##

.. function:: get_caption

   | :sl:`Get the current window caption`
   | :sg:`get_caption() -> (title, icontitle)`

   Returns the title and icontitle for the display window. In pygame 2.x
   these will always be the same value.

   .. ## pygame.display.get_caption ##

.. function:: set_palette

   | :sl:`Set the display color palette for indexed displays`
   | :sg:`set_palette(palette=None) -> None`

   This will change the video display color palette for 8-bit displays. This
   does not change the palette for the actual display Surface, only the palette
   that is used to display the Surface. If no palette argument is passed, the
   system default palette will be restored. The palette is a sequence of
   ``RGB`` triplets.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.

   .. ## pygame.display.set_palette ##

.. function:: get_num_displays

   | :sl:`Return the number of displays`
   | :sg:`get_num_displays() -> int`

   Returns the number of available displays. This is always 1 if
   :func:`pygame.get_sdl_version()` returns a major version number below 2.

   .. versionadded:: 1.9.5

   .. ## pygame.display.get_num_displays ##

.. function:: get_window_size

   | :sl:`Return the size of the window or screen`
   | :sg:`get_window_size() -> tuple`

   Returns the size of the window initialized with :func:`pygame.display.set_mode()`.
   This may differ from the size of the display surface if ``SCALED`` is used.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_window_size ##

.. function:: get_allow_screensaver

   | :sl:`Return whether the screensaver is allowed to run.`
   | :sg:`get_allow_screensaver() -> bool`

   Return whether screensaver is allowed to run whilst the app is running.
   Default is ``False``.
   By default pygame does not allow the screensaver during game play.

   .. note:: Some platforms do not have a screensaver or support
             disabling the screensaver.  Please see
             :func:`pygame.display.set_allow_screensaver()` for
             caveats with screensaver support.

   .. versionadded:: 2.0.0

   .. ## pygame.display.get_allow_screensaver ##

.. function:: set_allow_screensaver

   | :sl:`Set whether the screensaver may run`
   | :sg:`set_allow_screensaver(bool) -> None`

   Change whether screensavers should be allowed whilst the app is running.
   The default value of the argument to the function is True.
   By default pygame does not allow the screensaver during game play.

   If the screensaver has been disallowed due to this function, it will automatically
   be allowed to run when :func:`pygame.quit()` is called.

   It is possible to influence the default value via the environment variable
   ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER``, which can be set to either ``0`` (disable)
   or ``1`` (enable).

   .. note:: Disabling screensaver is subject to platform support.
             When platform support is absent, this function will
             silently appear to work even though the screensaver state
             is unchanged.  The lack of feedback is due to SDL not
             providing any supported method for determining whether
             it supports changing the screensaver state.
             ``SDL_HINT_VIDEO_ALLOW_SCREENSAVER`` is available in SDL 2.0.2 or later.
             SDL1.2 does not implement this.

   .. versionadded:: 2.0.0


   .. ## pygame.display.set_allow_screensaver ##

.. ## pygame.display ##


--- Contenu du fichier : event.rst.txt ---
.. include:: common.txt

:mod:`pygame.event`
===================

.. module:: pygame.event
   :synopsis: pygame module for interacting with events and queues

| :sl:`pygame module for interacting with events and queues`

Pygame handles all its event messaging through an event queue. The routines in
this module help you manage that event queue. The input queue is heavily
dependent on the :mod:`pygame.display` module. If the display has not been
initialized and a video mode not set, the event queue may not work properly.

The event queue has an upper limit on the number of events it can hold. When
the queue becomes full new events are quietly dropped. To prevent lost events,
especially input events which signal a quit command, your program must handle
events every frame (with ``pygame.event.get()``, ``pygame.event.pump()``,
``pygame.event.wait()``, ``pygame.event.peek()`` or ``pygame.event.clear()``)
and process them. Not handling events may cause your system to decide your
program has locked up. To speed up queue processing use
:func:`pygame.event.set_blocked()` to limit which events get queued.

To get the state of various input devices, you can forego the event queue and
access the input devices directly with their appropriate modules:
:mod:`pygame.mouse`, :mod:`pygame.key`, and :mod:`pygame.joystick`. If you use
this method, remember that pygame requires some form of communication with the
system window manager and other parts of the platform. To keep pygame in sync
with the system, you will need to call :func:`pygame.event.pump()` to keep
everything current. Usually, this should be called once per game loop.
Note: Joysticks will not send any events until the device has been initialized.

The event queue contains :class:`pygame.event.Event` event objects.
There are a variety of ways to access the queued events, from simply
checking for the existence of events, to grabbing them directly off the stack.
The event queue also offers some simple filtering which can slightly help
performance by blocking certain event types from the queue. Use
:func:`pygame.event.set_allowed()` and :func:`pygame.event.set_blocked()` to
change this filtering. By default, all event types can be placed on the queue.

All :class:`pygame.event.Event` instances contain an event type identifier
and attributes specific to that event type. The event type identifier is
accessible as the :attr:`pygame.event.Event.type` property. Any of the
event specific attributes can be accessed through the
:attr:`pygame.event.Event.__dict__` attribute or directly as an attribute
of the event object (as member lookups are passed through to the object's
dictionary values). The event object has no method functions. Users can create
their own new events with the :func:`pygame.event.Event()` function.

The event type identifier is in between the values of ``NOEVENT`` and
``NUMEVENTS``. User defined events should have a value in the inclusive range
of ``USEREVENT`` to ``NUMEVENTS - 1``. User defined events can get a custom
event number with :func:`pygame.event.custom_type()`. 
It is recommended all user events follow this system.

Events support equality and inequality comparisons. Two events are equal if
they are the same type and have identical attribute values.

While debugging and experimenting, you can print an event object for a quick
display of its type and members. The function :func:`pygame.event.event_name()`
can be used to get a string representing the name of the event type.

Events that come from the system will have a guaranteed set of member
attributes based on the type. The following is a list of event types with their
specific attributes.

::

    QUIT              none
    ACTIVEEVENT       gain, state
    KEYDOWN           key, mod, unicode, scancode
    KEYUP             key, mod, unicode, scancode
    MOUSEMOTION       pos, rel, buttons, touch
    MOUSEBUTTONUP     pos, button, touch
    MOUSEBUTTONDOWN   pos, button, touch
    JOYAXISMOTION     joy (deprecated), instance_id, axis, value
    JOYBALLMOTION     joy (deprecated), instance_id, ball, rel
    JOYHATMOTION      joy (deprecated), instance_id, hat, value
    JOYBUTTONUP       joy (deprecated), instance_id, button
    JOYBUTTONDOWN     joy (deprecated), instance_id, button
    VIDEORESIZE       size, w, h
    VIDEOEXPOSE       none
    USEREVENT         code

.. versionchanged:: 2.0.0 The ``joy`` attribute was deprecated, ``instance_id`` was added.

.. versionchanged:: 2.0.1 The ``unicode`` attribute was added to ``KEYUP`` event.

Note that ``ACTIVEEVENT``, ``VIDEORESIZE`` and ``VIDEOEXPOSE`` are considered
as "legacy" events, the use of pygame2 ``WINDOWEVENT`` API is recommended over
the use of this older API.

You can also find a list of constants for keyboard keys
:ref:`here <key-constants-label>`.

A keyboard event occurs when a key is pressed (``KEYDOWN``) and when a key is released (``KEYUP``) 
The ``key`` attribute of keyboard events contains the value of what key was pressed or released.
The ``mod`` attribute contains information about the state of keyboard modifiers (SHIFT, CTRL, ALT, etc.).
The ``unicode`` attribute stores the 16-bit unicode value of the key that was pressed or released.
The ``scancode`` attribute represents the physical location of a key on the keyboard.

The ``ACTIVEEVENT`` contains information about the application gaining or losing focus. The ``gain`` attribute
will be 1 if the mouse enters the window, otherwise ``gain`` will be 0.  The ``state`` attribute will have a 
value of ``SDL_APPMOUSEFOCUS`` if mouse focus was gained/lost, ``SDL_APPINPUTFOCUS`` if the application loses
or gains keyboard focus, or ``SDL_APPACTIVE`` if the application is minimized (``gain`` will be 0) or restored.

|

When compiled with SDL2, pygame has these additional events and their
attributes.

::

    AUDIODEVICEADDED   which, iscapture (SDL backend >= 2.0.4)
    AUDIODEVICEREMOVED which, iscapture (SDL backend >= 2.0.4)
    FINGERMOTION       touch_id, finger_id, x, y, dx, dy
    FINGERDOWN         touch_id, finger_id, x, y, dx, dy
    FINGERUP           touch_id, finger_id, x, y, dx, dy
    MOUSEWHEEL         which, flipped, x, y, touch, precise_x, precise_y
    MULTIGESTURE       touch_id, x, y, pinched, rotated, num_fingers
    TEXTEDITING        text, start, length
    TEXTINPUT          text

.. versionadded:: 1.9.5

.. versionchanged:: 2.0.2 Fixed amount horizontal scroll (x, positive to the right and negative to the left).

.. versionchanged:: 2.0.2 The ``touch`` attribute was added to all the ``MOUSE`` events.

The ``touch`` attribute of ``MOUSE`` events indicates whether or not the events were generated
by a touch input device, and not a real mouse. You might want to ignore such events, if your application
already handles ``FINGERMOTION``, ``FINGERDOWN`` and ``FINGERUP`` events.

.. versionadded:: 2.1.3 Added ``precise_x`` and ``precise_y`` to ``MOUSEWHEEL`` events

``MOUSEWHEEL`` event occurs whenever the mouse wheel is moved. 
The ``which`` attribute determines if the event was generated from a touch input device vs an actual 
mousewheel. 
The ``preciseX`` attribute contains a float with the amount scrolled horizontally (positive to the right,
negative to the left).
The ``preciseY`` attribute contains a float with the amount scrolled vertically (positive away from user,
negative towards user).
The ``flipped`` attribute determines if the values in x and y will be opposite or not. If ``SDL_MOUSEWHEEL_FLIPPED``
is defined, the direction of x and y will be opposite.

``TEXTEDITING`` event is triggered when a user activates an input method via hotkey or selecting an 
input method in a GUI and starts typing

The ``which`` attribute for ``AUDIODEVICE*`` events is an integer representing the index for new audio 
devices that are added. ``AUDIODEVICE*`` events are used to update audio settings or device list. 

|

Many new events were introduced in pygame 2.

pygame can recognize text or files dropped in its window. If a file
is dropped, ``DROPFILE`` event will be sent, ``file`` will be its path.
The ``DROPTEXT`` event is only supported on X11.

``MIDIIN`` and ``MIDIOUT`` are events reserved for :mod:`pygame.midi` use.
``MIDI*`` events differ from ``AUDIODEVICE*`` events in that AUDIODEVICE 
events are triggered when there is a state change related to an audio 
input/output device. 

pygame 2 also supports controller hot-plugging

::

   Event name               Attributes and notes

   DROPFILE                 file
   DROPBEGIN                (SDL backend >= 2.0.5)
   DROPCOMPLETE             (SDL backend >= 2.0.5)
   DROPTEXT                 text (SDL backend >= 2.0.5)
   MIDIIN
   MIDIOUT
   CONTROLLERDEVICEADDED    device_index
   JOYDEVICEADDED           device_index
   CONTROLLERDEVICEREMOVED  instance_id
   JOYDEVICEREMOVED         instance_id
   CONTROLLERDEVICEREMAPPED instance_id
   KEYMAPCHANGED            (SDL backend >= 2.0.4)
   CLIPBOARDUPDATE
   RENDER_TARGETS_RESET     (SDL backend >= 2.0.2)
   RENDER_DEVICE_RESET      (SDL backend >= 2.0.4)
   LOCALECHANGED            (SDL backend >= 2.0.14)

Also in this version, ``instance_id`` attributes were added to joystick events,
and the ``joy`` attribute was deprecated.

``KEYMAPCHANGED`` is a type of an event sent when keymap changes due to a 
system event such as an input language or keyboard layout change.

``CLIPBOARDUPDATE`` is an event sent when clipboard changes. This can still
be considered as an experimental feature, some kinds of clipboard changes might
not trigger this event.

``LOCALECHANGED`` is an event sent when user locale changes

.. versionadded:: 2.0.0

.. versionadded:: 2.1.3 ``KEYMAPCHANGED``, ``CLIPBOARDUPDATE``, 
   ``RENDER_TARGETS_RESET``, ``RENDER_DEVICE_RESET`` and ``LOCALECHANGED``

|

Since pygame 2.0.1, there are a new set of events, called window events.
Here is a list of all window events, along with a short description

::

   Event type                Short description

   WINDOWSHOWN            Window became shown
   WINDOWHIDDEN           Window became hidden
   WINDOWEXPOSED          Window got updated by some external event
   WINDOWMOVED            Window got moved
   WINDOWRESIZED          Window got resized
   WINDOWSIZECHANGED      Window changed its size
   WINDOWMINIMIZED        Window was minimized
   WINDOWMAXIMIZED        Window was maximized
   WINDOWRESTORED         Window was restored
   WINDOWENTER            Mouse entered the window
   WINDOWLEAVE            Mouse left the window
   WINDOWFOCUSGAINED      Window gained focus
   WINDOWFOCUSLOST        Window lost focus
   WINDOWCLOSE            Window was closed
   WINDOWTAKEFOCUS        Window was offered focus (SDL backend >= 2.0.5)
   WINDOWHITTEST          Window has a special hit test (SDL backend >= 2.0.5)
   WINDOWICCPROFCHANGED   Window ICC profile changed (SDL backend >= 2.0.18)
   WINDOWDISPLAYCHANGED   Window moved on a new display (SDL backend >= 2.0.18)


``WINDOWMOVED``, ``WINDOWRESIZED`` and ``WINDOWSIZECHANGED`` have ``x`` and
``y`` attributes, ``WINDOWDISPLAYCHANGED`` has a ``display_index`` attribute.
All windowevents have a ``window`` attribute.

.. versionadded:: 2.0.1

.. versionadded:: 2.1.3 ``WINDOWICCPROFCHANGED`` and ``WINDOWDISPLAYCHANGED``

|

On Android, the following events can be generated

::

   Event type                 Short description

   APP_TERMINATING           OS is terminating the application
   APP_LOWMEMORY             OS is low on memory, try to free memory if possible
   APP_WILLENTERBACKGROUND   Application is entering background
   APP_DIDENTERBACKGROUND    Application entered background
   APP_WILLENTERFOREGROUND   Application is entering foreground
   APP_DIDENTERFOREGROUND    Application entered foreground

.. versionadded:: 2.1.3

|

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system. If you are not using other event functions in your
   game, you should call ``pygame.event.pump()`` to allow pygame to handle
   internal actions.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.event` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.pump ##

.. function:: get

   | :sl:`get events from the queue`
   | :sg:`get(eventtype=None) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True) -> Eventlist`
   | :sg:`get(eventtype=None, pump=True, exclude=None) -> Eventlist`

   This will get all the messages and remove them from the queue. If a type or
   sequence of types is given only those messages will be removed from the
   queue and returned.

   If a type or sequence of types is passed in the ``exclude`` argument
   instead, then all only *other* messages will be removed from the queue. If
   an ``exclude`` parameter is passed, the ``eventtype`` parameter *must* be
   None.

   If you are only taking specific events from the queue, be aware that the
   queue could eventually fill up with the events you are not interested.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument
   .. versionchanged:: 2.0.2 Added ``exclude`` argument

   .. ## pygame.event.get ##

.. function:: poll

   | :sl:`get a single event from the queue`
   | :sg:`poll() -> Event instance`

   Returns a single event from the queue. If the event queue is empty an event
   of type ``pygame.NOEVENT`` will be returned immediately. The returned event
   is removed from the queue.

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.poll ##

.. function:: wait

   | :sl:`wait for a single event from the queue`
   | :sg:`wait() -> Event instance`
   | :sg:`wait(timeout) -> Event instance`

   Returns a single event from the queue. If the queue is empty this function
   will wait until one is created. From pygame 2.0.0, if a ``timeout`` argument
   is given, the function will return an event of type ``pygame.NOEVENT`` 
   if no events enter the queue in ``timeout`` milliseconds. The event is removed
   from the queue once it has been returned. While the program is waiting it will
   sleep in an idle state. This is important for programs that want to share the
   system with other applications.

   .. versionchanged:: 2.0.0.dev13 Added ``timeout`` argument

   .. caution::
      This function should only be called in the thread that initialized :mod:`pygame.display`.

   .. ## pygame.event.wait ##

.. function:: peek

   | :sl:`test if event types are waiting on the queue`
   | :sg:`peek(eventtype=None) -> bool`
   | :sg:`peek(eventtype=None, pump=True) -> bool`

   Returns ``True`` if there are any events of the given type waiting on the
   queue. If a sequence of event types is passed, this will return ``True`` if
   any of those events are on the queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.peek ##

.. function:: clear

   | :sl:`remove all events from the queue`
   | :sg:`clear(eventtype=None) -> None`
   | :sg:`clear(eventtype=None, pump=True) -> None`

   Removes all events from the queue. If ``eventtype`` is given, removes the given event
   or sequence of events. This has the same effect as :func:`pygame.event.get()` except ``None``
   is returned. It can be slightly more efficient when clearing a full event queue.

   If ``pump`` is ``True`` (the default), then :func:`pygame.event.pump()` will be called.

   .. versionchanged:: 1.9.5 Added ``pump`` argument

   .. ## pygame.event.clear ##

.. function:: event_name

   | :sl:`get the string name from an event id`
   | :sg:`event_name(type) -> string`

   Returns a string representing the name (in CapWords style) of the given
   event type.

   "UserEvent" is returned for all values in the user event id range.
   "Unknown" is returned when the event type does not exist.

   .. versionchanged:: 2.5.0 Added support for keyword arguments.
   .. ## pygame.event.event_name ##


.. function:: set_blocked

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_blocked(type) -> None`
   | :sg:`set_blocked(typelist) -> None`
   | :sg:`set_blocked(None) -> None`

   The given event types are not allowed to appear on the event queue. By
   default all events can be placed on the queue. It is safe to disable an
   event type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are blocked
   from being placed on the queue.

   .. ## pygame.event.set_blocked ##

.. function:: set_allowed

   | :sl:`control which events are allowed on the queue`
   | :sg:`set_allowed(type) -> None`
   | :sg:`set_allowed(typelist) -> None`
   | :sg:`set_allowed(None) -> None`

   The given event types are allowed to appear on the event queue. By default,
   all event types can be placed on the queue. It is safe to enable an event
   type multiple times.

   If ``None`` is passed as the argument, ALL of the event types are allowed
   to be placed on the queue.

   .. ## pygame.event.set_allowed ##

.. function:: get_blocked

   | :sl:`test if a type of event is blocked from the queue`
   | :sg:`get_blocked(type) -> bool`
   | :sg:`get_blocked(typelist) -> bool`

   Returns ``True`` if the given event type is blocked from the queue. If a
   sequence of event types is passed, this will return ``True`` if any of those
   event types are blocked.

   .. ## pygame.event.get_blocked ##

.. function:: set_grab

   | :sl:`control the sharing of input devices with other applications`
   | :sg:`set_grab(bool) -> None`

   When your program runs in a windowed environment, it will share the mouse
   and keyboard devices with other applications that have focus. If your
   program sets the event grab to ``True``, it will lock all input into your
   program.

   It is best to not always grab the input, since it prevents the user from
   doing other things on their system.

   .. ## pygame.event.set_grab ##

.. function:: get_grab

   | :sl:`test if the program is sharing input devices`
   | :sg:`get_grab() -> bool`

   Returns ``True`` when the input events are grabbed for this application.

   .. ## pygame.event.get_grab ##

.. function:: set_keyboard_grab

   | :sl:`grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.`
   | :sg:`set_keyboard_grab(bool) -> None`

   Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or the Meta/Super key.
   Note that not all system keyboard shortcuts can be captured by applications (one example is Ctrl+Alt+Del on Windows).
   This is primarily intended for specialized applications such as VNC clients or VM frontends. Normal games should not use keyboard grab.

   .. versionadded:: 2.5.0

   .. ## pygame.event.set_keyboard_grab ##

.. function:: get_keyboard_grab

   | :sl:`get the current keyboard grab state`
   | :sg:`get_keyboard_grab() -> bool`

   Returns ``True`` when keyboard grab is enabled.

   .. versionadded:: 2.5.0

   .. ## pygame.event.get_keyboard_grab ##

.. function:: post

   | :sl:`place a new event on the queue`
   | :sg:`post(Event) -> bool`

   Places the given event at the end of the event queue.

   This is usually used for placing custom events on the event queue.
   Any type of event can be posted, and the events posted can have any attributes.

   This returns a boolean on whether the event was posted or not. Blocked events
   cannot be posted, and this function returns ``False`` if you try to post them.

   .. versionchanged:: 2.0.1 returns a boolean, previously returned ``None``

   .. ## pygame.event.post ##

.. function:: custom_type

   | :sl:`make custom user event type`
   | :sg:`custom_type() -> int`

   Reserves a ``pygame.USEREVENT`` for a custom use.

   If too many events are made a :exc:`pygame.error` is raised.

   .. versionadded:: 2.0.0.dev3

   .. ## pygame.event.custom_type ##

.. class:: Event

   | :sl:`pygame object for representing events`
   | :sg:`Event(type, dict) -> Event`
   | :sg:`Event(type, \**attributes) -> Event`

   A pygame object used for representing an event. ``Event`` instances
   support attribute assignment and deletion.

   When creating the object, the attributes may come from a dictionary
   argument with string keys or from keyword arguments.

   .. note::
      From version 2.1.3 ``EventType`` is an alias for ``Event``. Beforehand,
      ``Event`` was a function that returned ``EventType`` instances. Use of
      ``Event`` is preferred over ``EventType`` wherever it is possible, as
      the latter could be deprecated in a future version.

   .. attribute:: type

      | :sl:`event type identifier.`
      | :sg:`type -> int`

      Read-only. The event type identifier. For user created event
      objects, this is the ``type`` argument passed to
      :func:`pygame.event.Event()`.

      For example, some predefined event identifiers are ``QUIT`` and
      ``MOUSEMOTION``.

      .. ## pygame.event.Event.type ##

   .. attribute:: __dict__

      | :sl:`event attribute dictionary`
      | :sg:`__dict__ -> dict`

      Read-only. The event type specific attributes of an event. The
      ``dict`` attribute is a synonym for backward compatibility.

      For example, the attributes of a ``KEYDOWN`` event would be ``unicode``,
      ``key``, and ``mod``

      .. ## pygame.event.Event.__dict__ ##

   .. versionadded:: 1.9.2 Mutable attributes.

   .. ## pygame.event.Event ##

.. ## pygame.event ##


--- Contenu du fichier : mask.rst.txt ---
.. include:: common.txt

:mod:`pygame.mask`
==================

.. module:: pygame.mask
   :synopsis: pygame module for image masks.

| :sl:`pygame module for image masks.`

Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
to store which parts collide.

.. versionadded:: 1.8

.. versionchanged:: 2.0.2 Mask functions now support keyword arguments.

.. versionchanged:: 2.0.2 Mask functions that take positions or offsets now
                    support :class:`pygame.math.Vector2` arguments.


.. function:: from_surface

   | :sl:`Creates a Mask from the given surface`
   | :sg:`from_surface(surface) -> Mask`
   | :sg:`from_surface(surface, threshold=127) -> Mask`

   Creates a :class:`Mask` object from the given surface by setting all the
   opaque pixels and not setting the transparent pixels.

   If the surface uses a color-key, then it is used to decide which bits in
   the resulting mask are set. All the pixels that are **not** equal to the
   color-key are **set** and the pixels equal to the color-key are not set.

   If a color-key is not used, then the alpha value of each pixel is used to
   decide which bits in the resulting mask are set. All the pixels that have an
   alpha value **greater than** the ``threshold`` parameter are **set** and the
   pixels with an alpha value less than or equal to the ``threshold`` are
   not set.

   :param Surface surface: the surface to create the mask from
   :param int threshold: (optional) the alpha threshold (default is 127) to
      compare with each surface pixel's alpha value, if the ``surface`` is
      color-keyed this parameter is ignored

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. note::
      This function is used to create the masks for
      :func:`pygame.sprite.collide_mask`.

   .. ## pygame.mask.from_surface ##

.. function:: from_threshold

   | :sl:`Creates a mask by thresholding Surfaces`
   | :sg:`from_threshold(surface, color) -> Mask`
   | :sg:`from_threshold(surface, color, threshold=(0, 0, 0, 255), othersurface=None, palette_colors=1) -> Mask`

   This is a more featureful method of getting a :class:`Mask` from a surface.

   If the optional ``othersurface`` is not used, all the pixels **within** the
   ``threshold`` of the ``color`` parameter are **set** in the resulting mask.

   If the optional ``othersurface`` is used, every pixel in the first surface
   that is **within** the ``threshold`` of the corresponding pixel in
   ``othersurface`` is **set** in the resulting mask.

   :param Surface surface: the surface to create the mask from
   :param color: color used to check if the surface's pixels are within the
      given ``threshold`` range, this parameter is ignored if the optional
      ``othersurface`` parameter is supplied
   :type color: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param threshold: (optional) the threshold range used to check the difference
      between two colors (default is ``(0, 0, 0, 255)``)
   :type threshold: Color or int or tuple(int, int, int, [int]) or list[int, int, int, [int]]
   :param Surface othersurface: (optional) used to check whether the pixels of
      the first surface are within the given ``threshold`` range of the pixels
      from this surface (default is ``None``)
   :param int palette_colors: (optional) indicates whether to use the palette
      colors or not, a nonzero value causes the palette colors to be used and a
      0 causes them not to be used (default is 1)

   :returns: a newly created :class:`Mask` object from the given surface
   :rtype: Mask

   .. ## pygame.mask.from_threshold ##

.. class:: Mask

   | :sl:`pygame object for representing 2D bitmasks`
   | :sg:`Mask(size=(width, height)) -> Mask`
   | :sg:`Mask(size=(width, height), fill=False) -> Mask`

   A ``Mask`` object is used to represent a 2D bitmask. Each bit in
   the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
   to indicate an unset bit. Set bits in a mask can be used to detect collisions
   with other masks and their set bits.

   A filled mask has all of its bits set to 1, conversely an
   unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
   created unfilled (default) or filled by using the ``fill`` parameter. Masks
   can also be cleared or filled using the :func:`pygame.mask.Mask.clear()` and
   :func:`pygame.mask.Mask.fill()` methods respectively.

   A mask's coordinates start in the top left corner at ``(0, 0)`` just like
   :mod:`pygame.Surface`. Individual bits can be accessed using the
   :func:`pygame.mask.Mask.get_at()` and :func:`pygame.mask.Mask.set_at()`
   methods.

   .. _mask-offset-label:

   The methods :meth:`overlap`, :meth:`overlap_area`, :meth:`overlap_mask`,
   :meth:`draw`, :meth:`erase`, and :meth:`convolve` use an offset parameter
   to indicate the offset of another mask's top left corner from the calling
   mask's top left corner. The calling mask's top left corner is considered to
   be the origin ``(0, 0)``. Offsets are a sequence of two values
   ``(x_offset, y_offset)``. Positive and negative offset values are supported.

   ::

                 0 to x (x_offset)
                 :    :
         0 ..... +----:---------+
         to      |    :         |
         y .......... +-----------+
      (y_offset) |    | othermask |
                 |    +-----------+
                 | calling_mask |
                 +--------------+

   :param size: the dimensions of the mask (width and height)
   :param bool fill: (optional) create an unfilled mask (default: ``False``) or
      filled mask (``True``)

   :returns: a newly created :class:`Mask` object
   :rtype: Mask

   .. versionchanged:: 2.0.0
      Shallow copy support added. The :class:`Mask` class supports the special
      method ``__copy__()`` and shallow copying via ``copy.copy(mask)``.
   .. versionchanged:: 2.0.0 Subclassing support added. The :class:`Mask` class
      can be used as a base class.
   .. versionchanged:: 1.9.5 Added support for keyword arguments.
   .. versionchanged:: 1.9.5 Added the optional keyword parameter ``fill``.
   .. versionchanged:: 1.9.5 Added support for masks with a width and/or a
      height of 0.

   .. method:: copy

      | :sl:`Returns a new copy of the mask`
      | :sg:`copy() -> Mask`

      :returns: a new copy of this mask, the new mask will have the same width,
         height, and set/unset bits as the original
      :rtype: Mask

      .. note::
         If a mask subclass needs to copy any instance specific attributes
         then it should override the ``__copy__()`` method. The overridden
         ``__copy__()`` method needs to call ``super().__copy__()`` and then
         copy the required data as in the following example code.

         ::

            class SubMask(pygame.mask.Mask):
                def __copy__(self):
                    new_mask = super().__copy__()
                    # Do any SubMask attribute copying here.
                    return new_mask

      .. versionadded:: 2.0.0

      .. ## Mask.copy ##

   .. method:: get_size

      | :sl:`Returns the size of the mask`
      | :sg:`get_size() -> (width, height)`

      :returns: the size of the mask, (width, height)
      :rtype: tuple(int, int)

      .. ## Mask.get_size ##

   .. method:: get_rect

      | :sl:`Returns a Rect based on the size of the mask`
      | :sg:`get_rect(\**kwargs) -> Rect`

      Returns a new :func:`pygame.Rect` object based on the size of this mask.
      The rect's default position will be ``(0, 0)`` and its default width and
      height will be the same as this mask's. The rect's attributes can be
      altered via :func:`pygame.Rect` attribute keyword arguments/values passed
      into this method. As an example, ``a_mask.get_rect(center=(10, 5))`` would
      create a :func:`pygame.Rect` based on the mask's size centered at the
      given position.

      :param dict kwargs: :func:`pygame.Rect` attribute keyword arguments/values
         that will be applied to the rect

      :returns: a new :func:`pygame.Rect` object based on the size of this mask
         with any :func:`pygame.Rect` attribute keyword arguments/values applied
         to it
      :rtype: Rect

      .. versionadded:: 2.0.0

      .. ## Mask.get_rect ##

   .. method:: get_at

      | :sl:`Gets the bit at the given position`
      | :sg:`get_at(pos) -> int`

      :param pos: the position of the bit to get (x, y)

      :returns: 1 if the bit is set, 0 if the bit is not set
      :rtype: int

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.get_at ##

   .. method:: set_at

      | :sl:`Sets the bit at the given position`
      | :sg:`set_at(pos) -> None`
      | :sg:`set_at(pos, value=1) -> None`

      :param pos: the position of the bit to set (x, y)
      :param int value: any nonzero int will set the bit to 1, 0 will set the
         bit to 0 (default is 1)

      :returns: ``None``
      :rtype: NoneType

      :raises IndexError: if the position is outside of the mask's bounds

      .. ## Mask.set_at ##

   .. method:: overlap

      | :sl:`Returns the point of intersection`
      | :sg:`overlap(other, offset) -> (x, y)`
      | :sg:`overlap(other, offset) -> None`

      Returns the first point of intersection encountered between this mask and
      ``other``. A point of intersection is 2 overlapping set bits.

      The current algorithm searches the overlapping area in
      ``sizeof(unsigned long int) * CHAR_BIT`` bit wide column blocks (the value
      of ``sizeof(unsigned long int) * CHAR_BIT`` is platform dependent, for
      clarity it will be referred to as ``W``). Starting at the top left corner
      it checks bits 0 to ``W - 1`` of the first row (``(0, 0)`` to
      ``(W - 1, 0)``) then continues to the next row (``(0, 1)`` to
      ``(W - 1, 1)``). Once this entire column block is checked, it continues to
      the next one (``W`` to ``2 * W - 1``). This is repeated until it finds a
      point of intersection or the entire overlapping area is checked.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: point of intersection or ``None`` if no intersection
      :rtype: tuple(int, int) or NoneType

      .. ## Mask.overlap ##

   .. method:: overlap_area

      | :sl:`Returns the number of overlapping set bits`
      | :sg:`overlap_area(other, offset) -> numbits`

      Returns the number of overlapping set bits between between this mask and
      ``other``.

      This can be useful for collision detection. An approximate collision
      normal can be found by calculating the gradient of the overlapping area
      through the finite difference.

      ::

         dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
         dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: the number of overlapping set bits
      :rtype: int

      .. ## Mask.overlap_area ##

   .. method:: overlap_mask

      | :sl:`Returns a mask of the overlapping set bits`
      | :sg:`overlap_mask(other, offset) -> Mask`

      Returns a :class:`Mask`, the same size as this mask, containing the
      overlapping set bits between this mask and ``other``.

      :param Mask other: the other mask to overlap with this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: a newly created :class:`Mask` with the overlapping bits set
      :rtype: Mask

      .. ## Mask.overlap_mask ##

   .. method:: fill

      | :sl:`Sets all bits to 1`
      | :sg:`fill() -> None`

      Sets all bits in the mask to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.fill ##

   .. method:: clear

      | :sl:`Sets all bits to 0`
      | :sg:`clear() -> None`

      Sets all bits in the mask to 0.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.clear ##

   .. method:: invert

      | :sl:`Flips all the bits`
      | :sg:`invert() -> None`

      Flips all of the bits in the mask. All the set bits are cleared to 0 and
      all the unset bits are set to 1.

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.invert ##

   .. method:: scale

      | :sl:`Resizes a mask`
      | :sg:`scale((width, height)) -> Mask`

      Creates a new :class:`Mask` of the requested size with its bits scaled
      from this mask.

      :param size: the width and height (size) of the mask to create

      :returns: a new :class:`Mask` object with its bits scaled from this mask
      :rtype: Mask

      :raises ValueError: if ``width < 0`` or ``height < 0``

      .. ## Mask.scale ##

   .. method:: draw

      | :sl:`Draws a mask onto another`
      | :sg:`draw(other, offset) -> None`

      Performs a bitwise OR, drawing ``othermask`` onto this mask.

      :param Mask other: the mask to draw onto this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.draw ##

   .. method:: erase

      | :sl:`Erases a mask from another`
      | :sg:`erase(other, offset) -> None`

      Erases (clears) all bits set in ``other`` from this mask.

      :param Mask other: the mask to erase from this mask
      :param offset: the offset of ``other`` from this mask, for more
         details refer to the :ref:`Mask offset notes <mask-offset-label>`

      :returns: ``None``
      :rtype: NoneType

      .. ## Mask.erase ##

   .. method:: count

      | :sl:`Returns the number of set bits`
      | :sg:`count() -> bits`

      :returns: the number of set bits in the mask
      :rtype: int

      .. ## Mask.count ##

   .. method:: centroid

      | :sl:`Returns the centroid of the set bits`
      | :sg:`centroid() -> (x, y)`

      Finds the centroid (the center mass of the set bits) for this mask.

      :returns: a coordinate tuple indicating the centroid of the mask, it will
         return ``(0, 0)`` if the mask has no bits set
      :rtype: tuple(int, int)

      .. ## Mask.centroid ##

   .. method:: angle

      | :sl:`Returns the orientation of the set bits`
      | :sg:`angle() -> theta`

      Finds the approximate orientation (from -90 to 90 degrees) of the set bits
      in the mask. This works best if performed on a mask with only one
      connected component.

      :returns: the orientation of the set bits in the mask, it will return
         ``0.0`` if the mask has no bits set
      :rtype: float

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.angle ##

   .. method:: outline

      | :sl:`Returns a list of points outlining an object`
      | :sg:`outline() -> [(x, y), ...]`
      | :sg:`outline(every=1) -> [(x, y), ...]`

      Returns a list of points of the outline of the first connected component
      encountered in the mask. To find a connected component, the mask is
      searched per row (left to right) starting in the top left corner.

      The ``every`` optional parameter skips set bits in the outline. For
      example, setting it to 10 would return a list of every 10th set bit in the
      outline.

      :param int every: (optional) indicates the number of bits to skip over in
         the outline (default is 1)

      :returns: a list of points outlining the first connected component
         encountered, an empty list is returned if the mask has no bits set
      :rtype: list[tuple(int, int)]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.outline ##

   .. method:: convolve

      | :sl:`Returns the convolution of this mask with another mask`
      | :sg:`convolve(other) -> Mask`
      | :sg:`convolve(other, output=None, offset=(0, 0)) -> Mask`

      Convolve this mask with the given ``other`` Mask.

      :param Mask other: mask to convolve this mask with
      :param output: (optional) mask for output (default is ``None``)
      :type output: Mask or NoneType
      :param offset: the offset of ``other`` from this mask, (default is
         ``(0, 0)``)

      :returns: a :class:`Mask` with the ``(i - offset[0], j - offset[1])`` bit
         set, if shifting ``other`` (such that its bottom right corner is at
         ``(i, j)``) causes it to overlap with this mask

         If an ``output`` Mask is specified, the output is drawn onto it and
         it is returned. Otherwise a mask of size ``(MAX(0, width + other mask's
         width - 1), MAX(0, height + other mask's height - 1))`` is created and
         returned.
      :rtype: Mask

      .. ## Mask.convolve ##

   .. method:: connected_component

      | :sl:`Returns a mask containing a connected component`
      | :sg:`connected_component() -> Mask`
      | :sg:`connected_component(pos) -> Mask`

      A connected component is a group (1 or more) of connected set bits
      (orthogonally and diagonally). The SAUF algorithm, which checks 8 point
      connectivity, is used to find a connected component in the mask.

      By default this method will return a :class:`Mask` containing the largest
      connected component in the mask. Optionally, a bit coordinate can be
      specified and the connected component containing it will be returned. If
      the bit at the given location is not set, the returned :class:`Mask` will
      be empty (no bits set).

      :param pos: (optional) selects the connected component that contains the
         bit at this position

      :returns: a :class:`Mask` object (same size as this mask) with the largest
         connected component from this mask, if this mask has no bits set then
         an empty mask will be returned

         If the ``pos`` parameter is provided then the mask returned will have
         the connected component that contains this position. An empty mask will
         be returned if the ``pos`` parameter selects an unset bit.
      :rtype: Mask

      :raises IndexError: if the optional ``pos`` parameter is outside of the
         mask's bounds

      .. ## Mask.connected_component ##

   .. method:: connected_components

      | :sl:`Returns a list of masks of connected components`
      | :sg:`connected_components() -> [Mask, ...]`
      | :sg:`connected_components(minimum=0) -> [Mask, ...]`

      Provides a list containing a :class:`Mask` object for each connected
      component.

      :param int minimum: (optional) indicates the minimum number of bits (to
	 filter out noise) per connected component (default is 0, which equates
 	 to no minimum and is equivalent to setting it to 1, as a connected
         component must have at least 1 bit set)

      :returns: a list containing a :class:`Mask` object for each connected
         component, an empty list is returned if the mask has no bits set
      :rtype: list[Mask]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.connected_components ##

   .. method:: get_bounding_rects

      | :sl:`Returns a list of bounding rects of connected components`
      | :sg:`get_bounding_rects() -> [Rect, ...]`

      Provides a list containing a bounding rect for each connected component.

      :returns: a list containing a bounding rect for each connected component,
         an empty list is returned if the mask has no bits set
      :rtype: list[Rect]

      .. note::
         See :meth:`connected_component` for details on how a connected
         component is calculated.

      .. ## Mask.get_bounding_rects ##

   .. method:: to_surface

      | :sl:`Returns a surface with the mask drawn on it`
      | :sg:`to_surface() -> Surface`
      | :sg:`to_surface(surface=None, setsurface=None, unsetsurface=None, setcolor=(255, 255, 255, 255), unsetcolor=(0, 0, 0, 255), dest=(0, 0)) -> Surface`

      Draws this mask on the given surface. Set bits (bits set to 1) and unset
      bits (bits set to 0) can be drawn onto a surface.

      :param surface: (optional) Surface to draw mask onto, if no surface is
         provided one will be created (default is ``None``, which will cause a
         surface with the parameters
         ``Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)`` to be
         created, drawn on, and returned)
      :type surface: Surface or None
      :param setsurface: (optional) use this surface's color values to draw
         set bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``setcolor`` value
      :type setsurface: Surface or None
      :param unsetsurface: (optional) use this surface's color values to draw
         unset bits (default is ``None``), if this surface is smaller than the
         mask any bits outside its bounds will use the ``unsetcolor`` value
      :type unsetsurface: Surface or None
      :param setcolor: (optional) color to draw set bits (default is
         ``(255, 255, 255, 255)``, white), use ``None`` to skip drawing the set
         bits, the ``setsurface`` parameter (if set) will takes precedence over
         this parameter
      :type setcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param unsetcolor: (optional) color to draw unset bits (default is
         ``(0, 0, 0, 255)``, black), use ``None`` to skip drawing the unset
         bits, the ``unsetsurface`` parameter (if set) will takes precedence
         over this parameter
      :type unsetcolor: Color or str or int or tuple(int, int, int, [int]) or
         list(int, int, int, [int]) or None
      :param dest: (optional) surface destination of where to position the
         topleft corner of the mask being drawn (default is ``(0, 0)``), if a
         Rect is used as the ``dest`` parameter, its ``x`` and ``y`` attributes
         will be used as the destination, **NOTE1:** rects with a negative width
         or height value will not be normalized before using their ``x`` and
         ``y`` values, **NOTE2:** this destination value is only used to
         position the mask on the surface, it does not offset the ``setsurface``
         and ``unsetsurface`` from the mask, they are always aligned with the
         mask (i.e. position ``(0, 0)`` on the mask always corresponds to
         position ``(0, 0)`` on the ``setsurface`` and ``unsetsurface``)
      :type dest: Rect or tuple(int, int) or list(int, int) or Vector2(int, int)

      :returns: the ``surface`` parameter (or a newly created surface if no
         ``surface`` parameter was provided) with this mask drawn on it
      :rtype: Surface

      :raises ValueError: if the ``setsurface`` parameter or ``unsetsurface``
         parameter does not have the same format (bytesize/bitsize/alpha) as
         the ``surface`` parameter

      .. note ::
         To skip drawing the set bits, both ``setsurface`` and ``setcolor`` must
         be ``None``. The ``setsurface`` parameter defaults to ``None``, but
         ``setcolor`` defaults to a color value and therefore must be set to
         ``None``.

      .. note ::
         To skip drawing the unset bits, both ``unsetsurface`` and
         ``unsetcolor`` must be ``None``. The ``unsetsurface`` parameter
         defaults to ``None``, but ``unsetcolor`` defaults to a color value and
         therefore must be set to ``None``.

      .. versionadded:: 2.0.0

      .. ## Mask.to_surface ##

   .. ## pygame.mask.Mask ##

.. ## pygame.mask ##


--- Contenu du fichier : context.rst.txt ---
.. include:: common.txt

:mod:`pygame.context`
======================

.. module:: pygame.context
    :synopsis: pygame module to provide additional context about the system

| :sl:`pygame module to provide additional context about the system`

**EXPERIMENTAL!** This API may change or disappear in later pygame releases. 
If you use this, your code may break with the next pygame release.
This is a new module, so we are marking it experimental for now.
We probably won't have to change API, but we're keeping the possibility
open just in case something obvious comes up.

.. versionadded:: 2.1.3

.. function:: get_pref_path

   | :sl:`get a writeable folder for your app`
   | :sg:`get_pref_path(org, app) -> path`

   When distributing apps, it's helpful to have a way to get a writeable path,
   because it's what apps are expected to do, and because sometimes the local
   space around the app isn't writeable to the app.

   This function returns a platform specific path for your app to store
   savegames, settings, and the like. This path is unique per user and
   per app name.

   It takes two strings, ``org`` and ``app``, referring to the "organization"
   and "application name." For example, the organization could be "Valve," 
   and the application name could be "Half Life 2." It then will figure out the
   preferred path, **creating the folders referenced by the path if necessary**,
   and return a string containing the absolute path.

   For example::

        On Windows, it would resemble
        C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\

        On macOS, it would resemble
        /Users/bob/Library/Application Support/My Program Name/

        And on Linux it would resemble
        /home/bob/.local/share/My Program Name/
    
   .. versionadded:: 2.1.3

.. function:: get_pref_locales

   | :sl:`get preferred locales set on the system`
   | :sg:`get_pref_locales() -> list[locale]`

   Returns a list of "locale" dicts, sorted in descending order of preference
   set on the host OS (the most preferred locale is the first element). May
   also be an empty list if pygame could not find this information.

   Each "locale" dict contains the language code which can be accessed by the
   key ``"language"``. This language code is an ISO-639 language specifier 
   (such as "en" for English, "de" for German, etc).
   A "locale" dict may also optionally contain a ``"country"`` field, whose
   value is an ISO-3166 country code (such as "US" for the United States, 
   "CA" for Canada, etc). If this field is not set or undetermined, it is 
   ``None``.
   A "locale" dict which looks like ``{'language': 'en', 'country': 'US'}``
   indicates the user prefers American English, while
   ``{'language': 'en', 'country': None}`` indicates that the user prefers
   English, generically.

   This might be a bit of an expensive call because it has to query the OS. So
   this function must not be called in a game loop, instead it's best to ask 
   for this once and save the results. However, this list can change when the
   user changes a system preference outside of your program. pygame will send
   a ``LOCALECHANGED`` event in this case, if possible, and you can call this
   function again to get an updated copy of preferred locales.

   .. note::
        Since the organization and app names can potentially be used as
        a folder name, it is highly encouraged to avoid punctuation.
        Instead stick to letters, numbers, and spaces.

   .. note::
        The ``appdirs`` library has similar functionality for this use case,
        but has more "folder types" to choose from.

   .. versionadded:: 2.1.3


--- Contenu du fichier : locals.rst.txt ---
.. include:: common.txt

:mod:`pygame.locals`
====================

.. module:: pygame.locals
   :synopsis: pygame constants

| :sl:`pygame constants`

This module contains various constants used by pygame. Its contents are
automatically placed in the pygame module namespace. However, an application
can use ``pygame.locals`` to include only the pygame constants with a ``from
pygame.locals import *``.

Detailed descriptions of the various constants can be found throughout the
pygame documentation. Here are the locations of some of them.

   - The :mod:`pygame.display` module contains flags like ``FULLSCREEN`` used
     by :func:`pygame.display.set_mode`.
   - The :mod:`pygame.event` module contains the various event types.
   - The :mod:`pygame.key` module lists the keyboard constants and modifiers
     (``K_``\* and ``MOD_``\*) relating to the ``key`` and ``mod`` attributes of
     the ``KEYDOWN`` and ``KEYUP`` events.
   - The :mod:`pygame.time` module defines ``TIMER_RESOLUTION``.

.. ## pygame.locals ##


--- Contenu du fichier : cursors.rst.txt ---
.. include:: common.txt

:mod:`pygame.cursors`
=====================

.. module:: pygame.cursors
   :synopsis: pygame module for cursor resources

| :sl:`pygame module for cursor resources`

Pygame offers control over the system hardware cursor. Pygame supports
black and white cursors (bitmap cursors), as well as system variant cursors and color cursors.
You control the cursor with functions inside :mod:`pygame.mouse`.

This cursors module contains functions for loading and decoding various
cursor formats. These allow you to easily store your cursors in external files
or directly as encoded python strings.

The module includes several standard cursors. The :func:`pygame.mouse.set_cursor()`
function takes several arguments. All those arguments have been stored in a
single tuple you can call like this:

::

   >>> pygame.mouse.set_cursor(*pygame.cursors.arrow)
   
The following variables can be passed to ``pygame.mouse.set_cursor`` function:

   * ``pygame.cursors.arrow``

   * ``pygame.cursors.diamond``

   * ``pygame.cursors.broken_x``

   * ``pygame.cursors.tri_left``

   * ``pygame.cursors.tri_right``

This module also contains a few cursors as formatted strings. You'll need to
pass these to ``pygame.cursors.compile()`` function before you can use them.
The example call would look like this:

::

   >>> cursor = pygame.cursors.compile(pygame.cursors.textmarker_strings)
   >>> pygame.mouse.set_cursor((8, 16), (0, 0), *cursor)

The following strings can be converted into cursor bitmaps with
``pygame.cursors.compile()`` :

   * ``pygame.cursors.thickarrow_strings``

   * ``pygame.cursors.sizer_x_strings``

   * ``pygame.cursors.sizer_y_strings``

   * ``pygame.cursors.sizer_xy_strings``
   
   * ``pygame.cursor.textmarker_strings``

.. function:: compile

   | :sl:`create binary cursor data from simple strings`
   | :sg:`compile(strings, black='X', white='.', xor='o') -> data, mask`

   A sequence of strings can be used to create binary cursor data for the
   system cursor. This returns the binary data in the form of two tuples.
   Those can be passed as the third and fourth arguments respectively of the 
   :func:`pygame.mouse.set_cursor()` function.

   If you are creating your own cursor strings, you can use any value represent
   the black and white pixels. Some system allow you to set a special toggle
   color for the system color, this is also called the xor color. If the system
   does not support xor cursors, that color will simply be black.
   
   The height must be divisible by 8. The width of the strings must all be equal 
   and be divisible by 8. If these two conditions are not met, ``ValueError`` is
   raised.
   An example set of cursor strings looks like this

   ::

       thickarrow_strings = (               #sized 24x24
         "XX                      ",
         "XXX                     ",
         "XXXX                    ",
         "XX.XX                   ",
         "XX..XX                  ",
         "XX...XX                 ",
         "XX....XX                ",
         "XX.....XX               ",
         "XX......XX              ",
         "XX.......XX             ",
         "XX........XX            ",
         "XX........XXX           ",
         "XX......XXXXX           ",
         "XX.XXX..XX              ",
         "XXXX XX..XX             ",
         "XX   XX..XX             ",
         "     XX..XX             ",
         "      XX..XX            ",
         "      XX..XX            ",
         "       XXXX             ",
         "       XX               ",
         "                        ",
         "                        ",
         "                        ")

   .. ## pygame.cursors.compile ##

.. function:: load_xbm

   | :sl:`load cursor data from an XBM file`
   | :sg:`load_xbm(cursorfile) -> cursor_args`
   | :sg:`load_xbm(cursorfile, maskfile) -> cursor_args`

   This loads cursors for a simple subset of ``XBM`` files. ``XBM`` files are
   traditionally used to store cursors on UNIX systems, they are an ASCII
   format used to represent simple images.

   Sometimes the black and white color values will be split into two separate
   ``XBM`` files. You can pass a second maskfile argument to load the two
   images into a single cursor.

   The cursorfile and maskfile arguments can either be filenames or file-like
   object with the readlines method.

   The return value cursor_args can be passed directly to the
   ``pygame.mouse.set_cursor()`` function.

   .. ## pygame.cursors.load_xbm ##



.. class:: Cursor

   | :sl:`pygame object representing a cursor`
   | :sg:`Cursor(size, hotspot, xormasks, andmasks) -> Cursor`
   | :sg:`Cursor(hotspot, surface) -> Cursor`
   | :sg:`Cursor(constant) -> Cursor`
   | :sg:`Cursor(Cursor) -> Cursor`
   | :sg:`Cursor() -> Cursor`

   In pygame 2, there are 3 types of cursors you can create to give your
   game that little bit of extra polish. There's **bitmap** type cursors,
   which existed in pygame 1.x, and are compiled from a string or load from an xbm file.
   Then there are **system** type cursors, where you choose a preset that will 
   convey the same meaning but look native across different operating systems. 
   Finally you can create a **color** cursor, which displays a pygame surface as the cursor.

   **Creating a system cursor**

   Choose a constant from this list, pass it into ``pygame.cursors.Cursor(constant)``, 
   and you're good to go. Be advised that not all systems support every system
   cursor, and you may get a substitution instead. For example, on MacOS,
   WAIT/WAITARROW should show up as an arrow, and SIZENWSE/SIZENESW/SIZEALL
   should show up as a closed hand. And on Wayland, every SIZE cursor should 
   show up as a hand.

   ::

      Pygame Cursor Constant           Description
      --------------------------------------------
      pygame.SYSTEM_CURSOR_ARROW       arrow
      pygame.SYSTEM_CURSOR_IBEAM       i-beam
      pygame.SYSTEM_CURSOR_WAIT        wait
      pygame.SYSTEM_CURSOR_CROSSHAIR   crosshair
      pygame.SYSTEM_CURSOR_WAITARROW   small wait cursor 
                                       (or wait if not available)
      pygame.SYSTEM_CURSOR_SIZENWSE    double arrow pointing 
                                       northwest and southeast
      pygame.SYSTEM_CURSOR_SIZENESW    double arrow pointing
                                       northeast and southwest
      pygame.SYSTEM_CURSOR_SIZEWE      double arrow pointing
                                       west and east
      pygame.SYSTEM_CURSOR_SIZENS      double arrow pointing 
                                       north and south
      pygame.SYSTEM_CURSOR_SIZEALL     four pointed arrow pointing
                                       north, south, east, and west
      pygame.SYSTEM_CURSOR_NO          slashed circle or crossbones
      pygame.SYSTEM_CURSOR_HAND        hand

   **Creating a cursor without passing arguments**
   
   In addition to the cursor constants available and described above,
   you can also call ``pygame.cursors.Cursor()``, and your cursor is ready (doing that is the same as
   calling ``pygame.cursors.Cursor(pygame.SYSTEM_CURSOR_ARROW)``.
   Doing one of those calls actually creates a system cursor using the default native image.

   **Creating a color cursor**

   To create a color cursor, create a ``Cursor`` from a ``hotspot`` and a ``surface``.
   ``hotspot`` is an (x,y) coordinate that determines where in the cursor the exact point is.
   The hotspot position must be within the bounds of the ``surface``.

   **Creating a bitmap cursor**

   When the mouse cursor is visible, it will be displayed as a black and white
   bitmap using the given bitmask arrays. The ``size`` is a sequence containing 
   the cursor width and height. ``hotspot`` is a sequence containing the cursor 
   hotspot position. 
   
   A cursor has a width and height, but a mouse position is represented by a 
   set of point coordinates. So the value passed into the cursor ``hotspot`` 
   variable helps pygame to actually determine at what exact point the cursor 
   is at.
   
   ``xormasks`` is a sequence of bytes containing the cursor xor data masks. 
   Lastly ``andmasks``, a sequence of bytes containing the cursor bitmask data.
   To create these variables, we can make use of the 
   :func:`pygame.cursors.compile()` function.

   Width and height must be a multiple of 8, and the mask arrays must be the 
   correct size for the given width and height. Otherwise an exception is raised.
   
   .. method:: copy

      | :sl:`copy the current cursor`
      | :sg:`copy() -> Cursor`
      
      Returns a new Cursor object with the same data and hotspot as the original.
   .. ## pygame.cursors.Cursor.copy ##
   

   .. attribute:: type
   
      | :sl:`Gets the cursor type`
      | :sg:`type -> string`

      The type will be ``"system"``, ``"bitmap"``, or ``"color"``.

   .. ## pygame.cursors.Cursor.type ##

   .. attribute:: data

      | :sl:`Gets the cursor data`
      | :sg:`data -> tuple`

      Returns the data that was used to create this cursor object, wrapped up in a tuple.

   .. ## pygame.cursors.Cursor.data ##

   .. versionadded:: 2.0.1

   .. ## pygame.cursors.Cursor ##
   
.. ## pygame.cursors ##

Example code for creating and settings cursors. (Click the mouse to switch cursor)

.. literalinclude:: code_examples/cursors_module_example.py


--- Contenu du fichier : touch.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.touch`
=========================

.. module:: pygame._sdl2.touch
   :synopsis: pygame module to work with touch input

| :sl:`pygame module to work with touch input`

.. versionadded:: 2 This module requires SDL2.

.. function:: get_num_devices

   | :sl:`get the number of touch devices`
   | :sg:`get_num_devices() -> int`

   Return the number of available touch devices.

   .. ## pygame._sdl2.touch.get_num_devices ##

.. function:: get_device

   | :sl:`get the a touch device id for a given index`
   | :sg:`get_device(index) -> touchid`

   :param int index: This number is at least 0 and less than the
                     :func:`number of devices <pygame._sdl2.touch.get_num_devices()>`.

   Return an integer id associated with the given ``index``.

   .. ## pygame._sdl2.touch.get_device ##

.. function:: get_num_fingers

   | :sl:`the number of active fingers for a given touch device`
   | :sg:`get_num_fingers(touchid) -> int`

   Return the number of fingers active for the touch device
   whose id is `touchid`.

   .. ## pygame._sdl2.touch.get_num_fingers ##

.. function:: get_finger

   | :sl:`get information about an active finger`
   | :sg:`get_finger(touchid, index) -> int`

   :param int touchid: The touch device id.
   :param int index: The index of the finger to return
                     information about, between 0 and the
                     :func:`number of active fingers <pygame._sdl2.touch.get_num_fingers()>`.

   Return a dict for the finger ``index`` active on ``touchid``.
   The dict contains these keys:

   ::

      id         the id of the finger (an integer).
      x          the normalized x position of the finger, between 0 and 1.
      y          the normalized y position of the finger, between 0 and 1.
      pressure   the amount of pressure applied by the finger, between 0 and 1.

   .. ## pygame._sdl2.touch.get_finger ##

.. ## pygame._sdl2.touch ##


--- Contenu du fichier : joystick.rst.txt ---
.. include:: common.txt

:mod:`pygame.joystick`
======================

.. module:: pygame.joystick
   :synopsis: Pygame module for interacting with joysticks, gamepads, and trackballs.

| :sl:`Pygame module for interacting with joysticks, gamepads, and trackballs.`

The joystick module manages the joystick devices on a computer.
Joystick devices include trackballs and video-game-style
gamepads, and the module allows the use of multiple buttons and "hats".
Computers may manage multiple joysticks at a time.

Each instance of the Joystick class represents one gaming device plugged
into the computer. If a gaming pad has multiple joysticks on it, then the
joystick object can actually represent multiple joysticks on that single
game device.

For a quick way to initialise the joystick module and get a list of Joystick instances
use the following code::

    pygame.joystick.init()
    joysticks = [pygame.joystick.Joystick(x) for x in range(pygame.joystick.get_count())]

The following event types will be generated by the joysticks ::

    JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION

And in pygame 2, which supports hotplugging::

   JOYDEVICEADDED JOYDEVICEREMOVED

Note that in pygame 2, joysticks events use a unique "instance ID". The device index
passed in the constructor to a Joystick object is not unique after devices have
been added and removed. You must call :meth:`Joystick.get_instance_id()` to find
the instance ID that was assigned to a Joystick on opening.

The event queue needs to be pumped frequently for some of the methods to work.
So call one of pygame.event.get, pygame.event.wait, or pygame.event.pump regularly.

To be able to get joystick events and update the joystick objects while the window
is not in focus, you may set the ``SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS`` environment
variable. See :ref:`environment variables <environment-variables>` for more details.


.. function:: init

   | :sl:`Initialize the joystick module.`
   | :sg:`init() -> None`

   This function is called automatically by ``pygame.init()``.

   It initializes the joystick module. The module must be initialized before any
   other functions will work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.init ##

.. function:: quit

   | :sl:`Uninitialize the joystick module.`
   | :sg:`quit() -> None`

   Uninitialize the joystick module. After you call this any existing joystick
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.joystick.quit ##

.. function:: get_init

   | :sl:`Returns True if the joystick module is initialized.`
   | :sg:`get_init() -> bool`

   Test if the ``pygame.joystick.init()`` function has been called.

   .. ## pygame.joystick.get_init ##

.. function:: get_count

   | :sl:`Returns the number of joysticks.`
   | :sg:`get_count() -> count`

   Return the number of joystick devices on the system. The count will be ``0`` 
   if there are no joysticks on the system.

   When you create Joystick objects using ``Joystick(id)``, you pass an integer
   that must be lower than this count.

   .. ## pygame.joystick.get_count ##

.. class:: Joystick

   | :sl:`Create a new Joystick object.`
   | :sg:`Joystick(id) -> Joystick`

   Create a new joystick to access a physical device. The id argument must be a
   value from ``0`` to ``pygame.joystick.get_count() - 1``.

   Joysticks are initialised on creation and are shut down when deallocated.
   Once the device is initialized the pygame event queue will start receiving
   events about its input.

   .. versionchanged:: 2.0.0 Joystick objects are now opened immediately on creation.

   .. method:: init

      | :sl:`initialize the Joystick`
      | :sg:`init() -> None`

      Initialize the joystick, if it has been closed. It is safe to call this
      even if the joystick is already initialized.

      .. deprecated:: 2.0.0

         In future it will not be possible to reinitialise a closed Joystick
         object. Will be removed in Pygame 2.1.

      .. ## Joystick.init ##

   .. method:: quit

      | :sl:`uninitialize the Joystick`
      | :sg:`quit() -> None`

      Close a Joystick object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Joystick.quit ##

   .. method:: get_init

      | :sl:`check if the Joystick is initialized`
      | :sg:`get_init() -> bool`

      Return True if the Joystick object is currently initialised.

      .. ## Joystick.get_init ##

   .. method:: get_id

      | :sl:`get the device index (deprecated)`
      | :sg:`get_id() -> int`

      Returns the original device index for this device. This is the same
      value that was passed to the ``Joystick()`` constructor. This method can
      safely be called while the Joystick is not initialized.

      .. deprecated:: 2.0.0

         The original device index is not useful in pygame 2. Use
         :meth:`.get_instance_id` instead. Will be removed in Pygame 2.1.

   .. method:: get_instance_id() -> int

      | :sl:`get the joystick instance id`
      | :sg:`get_instance_id() -> int`

      Get the joystick instance ID. This matches the ``instance_id`` field
      that is given in joystick events.

      .. versionadded:: 2.0.0dev11

   .. method:: get_guid() -> str

      | :sl:`get the joystick GUID`
      | :sg:`get_guid() -> str`

      Get the GUID string. This identifies the exact hardware of the joystick
      device.

      .. versionadded:: 2.0.0dev11

   .. method:: get_power_level() -> str

      | :sl:`get the approximate power status of the device`
      | :sg:`get_power_level() -> str`

      Get a string giving the power status of the device.

      One of: ``empty``, ``low``, ``medium``, ``full``, ``wired``, ``max``, or
      ``unknown``.

      .. versionadded:: 2.0.0dev11

      .. ## Joystick.get_id ##

   .. method:: get_name

      | :sl:`get the Joystick system name`
      | :sg:`get_name() -> string`

      Returns the system name for this joystick device. It is unknown what name
      the system will give to the Joystick, but it should be a unique name that
      identifies the device. This method can safely be called while the
      Joystick is not initialized.

      .. ## Joystick.get_name ##

   .. method:: get_numaxes

      | :sl:`get the number of axes on a Joystick`
      | :sg:`get_numaxes() -> int`

      Returns the number of input axes are on a Joystick. There will usually be
      two for the position. Controls like rudders and throttles are treated as
      additional axes.

      The ``pygame.JOYAXISMOTION`` events will be in the range from ``-1.0`` 
      to ``1.0``. A value of ``0.0`` means the axis is centered. Gamepad devices 
      will usually be ``-1``, ``0``, or ``1`` with no values in between. Older 
      analog joystick axes will not always use the full ``-1`` to ``1`` range, 
      and the centered value will be some area around ``0``. 
      
      Analog joysticks usually have a bit of noise in their axis, which will 
      generate a lot of rapid small motion events.

      .. ## Joystick.get_numaxes ##

   .. method:: get_axis

      | :sl:`get the current position of an axis`
      | :sg:`get_axis(axis_number) -> float`

      Returns the current position of a joystick axis. The value will range
      from ``-1`` to ``1`` with a value of ``0`` being centered. You may want 
      to take into account some tolerance to handle jitter, and joystick drift 
      may keep the joystick from centering at ``0`` or using the full range of 
      position values.

      The axis number must be an integer from ``0`` to ``get_numaxes() - 1``.

      When using gamepads both the control sticks and the analog triggers are
      usually reported as axes.

      .. ## Joystick.get_axis ##

   .. method:: get_numballs

      | :sl:`get the number of trackballs on a Joystick`
      | :sg:`get_numballs() -> int`

      Returns the number of trackball devices on a Joystick. These devices work
      similar to a mouse but they have no absolute position; they only have
      relative amounts of movement.

      The ``pygame.JOYBALLMOTION`` event will be sent when the trackball is
      rolled. It will report the amount of movement on the trackball.

      .. ## Joystick.get_numballs ##

   .. method:: get_ball

      | :sl:`get the relative position of a trackball`
      | :sg:`get_ball(ball_number) -> x, y`

      Returns the relative movement of a joystick button. The value is a ``x, y``
      pair holding the relative movement since the last call to get_ball.

      The ball number must be an integer from ``0`` to ``get_numballs() - 1``.

      .. ## Joystick.get_ball ##

   .. method:: get_numbuttons

      | :sl:`get the number of buttons on a Joystick`
      | :sg:`get_numbuttons() -> int`

      Returns the number of pushable buttons on the joystick. These buttons
      have a boolean (on or off) state.

      Buttons generate a ``pygame.JOYBUTTONDOWN`` and ``pygame.JOYBUTTONUP``
      event when they are pressed and released.

      .. ## Joystick.get_numbuttons ##

   .. method:: get_button

      | :sl:`get the current button state`
      | :sg:`get_button(button) -> bool`

      Returns the current state of a joystick button.

      .. ## Joystick.get_button ##

   .. method:: get_numhats

      | :sl:`get the number of hat controls on a Joystick`
      | :sg:`get_numhats() -> int`

      Returns the number of joystick hats on a Joystick. Hat devices are like
      miniature digital joysticks on a joystick. Each hat has two axes of
      input.

      The ``pygame.JOYHATMOTION`` event is generated when the hat changes
      position. The ``position`` attribute for the event contains a pair of 
      values that are either ``-1``, ``0``, or ``1``. A position of ``(0, 0)`` 
      means the hat is centered.

      .. ## Joystick.get_numhats ##

   .. method:: get_hat

      | :sl:`get the position of a joystick hat`
      | :sg:`get_hat(hat_number) -> x, y`

      Returns the current position of a position hat. The position is given as
      two values representing the ``x`` and ``y`` position for the hat. ``(0, 0)``
      means centered. A value of ``-1`` means left/down and a value of ``1`` means
      right/up: so ``(-1, 0)`` means left; ``(1, 0)`` means right; ``(0, 1)`` means 
      up; ``(1, 1)`` means upper-right; etc.

      This value is digital, ``i.e.``, each coordinate can be ``-1``, ``0`` or ``1`` 
      but never in-between.

      The hat number must be between ``0`` and ``get_numhats() - 1``.

      .. ## Joystick.get_hat ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the joystick, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Joystick.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      joystick does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Joystick.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the joystick. See
      :meth:`Joystick.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Joystick.stop_rumble ##

   .. ## pygame.joystick.Joystick ##

.. ## pygame.joystick ##

.. figure:: code_examples/joystick_calls.png
   :scale: 100 %
   :alt: joystick module example

   Example code for joystick module.

.. literalinclude:: ../../../examples/joystick.py

.. _controller-mappings:


Common Controller Axis Mappings
===============================

Controller mappings are drawn from the underlying SDL library which pygame uses and they differ
between pygame 1 and pygame 2. Below are a couple of mappings for three popular controllers.

Axis and hat mappings are listed from -1 to +1.


Nintendo Switch Left Joy-Con (pygame 2.x)
*****************************************

The Nintendo Switch Left Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    D-pad Up        - Button 0
    D-pad Down      - Button 1
    D-pad Left      - Button 2
    D-pad Right     - Button 3
    SL              - Button 4
    SR              - Button 5
    -               - Button 8
    Stick In        - Button 10
    Capture         - Button 13
    L               - Button 14
    ZL              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Right Joy-Con (pygame 2.x)
******************************************

The Nintendo Switch Right Joy-Con has 4 axes, 11 buttons, and 0 hats. The values for the 4 axes never change.
The controller is recognized as "Wireless Gamepad"


* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    SL              - Button 4
    SR              - Button 5
    +               - Button 9
    Stick In        - Button 11
    Home            - Button 12
    R               - Button 14
    ZR              - Button 15

* **Hat/JoyStick**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Nintendo Switch Pro Controller (pygame 2.x)
*******************************************

The Nintendo Switch Pro Controller has 6 axes, 16 buttons, and 0 hats.
The controller is recognized as "Nintendo Switch Pro Controller".


* **Left Stick**::

    Left -> Right   - Axis 0
    Up -> Down      - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up -> Down      - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    - Button        - Button 4
    Home Button     - Button 5
    + Button        - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Capture Button  - Button 15


XBox 360 Controller (pygame 2.x)
********************************

The Xbox 360 controller mapping has 6 axes, 11 buttons and 1 hat.
The controller is recognized as "Xbox 360 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9
    Guide Button    - Button 10

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 2.x)
*************************************

The PlayStation 4 controller mapping has 6 axes and 16 buttons.
The controller is recognized as "PS4 Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 4

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Share Button    - Button 4
    PS Button       - Button 5
    Options Button  - Button 6
    L. Stick In     - Button 7
    R. Stick In     - Button 8
    Left Bumper     - Button 9
    Right Bumper    - Button 10
    D-pad Up        - Button 11
    D-pad Down      - Button 12
    D-pad Left      - Button 13
    D-pad Right     - Button 14
    Touch Pad Click - Button 15

Playstation 5 Controller (pygame 2.x)
*************************************

The PlayStation 5 controller mapping has 6 axes, 13 buttons, and 1 hat.
The controller is recognized as "Sony Interactive Entertainment Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 3
    Up   -> Down    - Axis 4

* **Left Trigger**::

    Out -> In       - Axis 2

* **Right Trigger**::

    Out -> In       - Axis 5

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Left Trigger    - Button 6
    Right Trigger   - Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    PS Button       - Button 10
    Left Stick in   - Button 11
    Right Stick in  - Button 12

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



XBox 360 Controller (pygame 1.x)
********************************

The Xbox 360 controller mapping has 5 axes, 10 buttons, and 1 hat.
The controller is recognized as "Controller (XBOX 360 For Windows)".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 4
    Up   -> Down    - Axis 3

* **Left Trigger & Right Trigger**::

    RT -> LT        - Axis 2

* **Buttons**::

    A Button        - Button 0
    B Button        - Button 1
    X Button        - Button 2
    Y Button        - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    Back Button     - Button 6
    Start Button    - Button 7
    L. Stick In     - Button 8
    R. Stick In     - Button 9

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis


Playstation 4 Controller (pygame 1.x)
*************************************

The PlayStation 4 controller mapping has 6 axes, 14 buttons, and 1 hat.
The controller is recognized as "Wireless Controller".

* **Left Stick**::

    Left -> Right   - Axis 0
    Up   -> Down    - Axis 1

* **Right Stick**::

    Left -> Right   - Axis 2
    Up   -> Down    - Axis 3

* **Left Trigger**::

    Out -> In       - Axis 5

* **Right Trigger**::

    Out -> In       - Axis 4

* **Buttons**::

    Cross Button    - Button 0
    Circle Button   - Button 1
    Square Button   - Button 2
    Triangle Button - Button 3
    Left Bumper     - Button 4
    Right Bumper    - Button 5
    L. Trigger(Full)- Button 6
    R. Trigger(Full)- Button 7
    Share Button    - Button 8
    Options Button  - Button 9
    L. Stick In     - Button 10
    R. Stick In     - Button 11
    PS Button       - Button 12
    Touch Pad Click - Button 13

* **Hat/D-pad**::

    Down -> Up      - Y Axis
    Left -> Right   - X Axis



--- Contenu du fichier : math.rst.txt ---
.. include:: common.txt

:mod:`pygame.math`
==================

.. module:: pygame.math
   :synopsis: pygame module for vector classes

| :sl:`pygame module for vector classes`

The pygame math module currently provides Vector classes in two and three
dimensions, ``Vector2`` and ``Vector3`` respectively.

They support the following numerical operations: ``vec + vec``, ``vec - vec``, 
``vec * number``, ``number * vec``, ``vec / number``, ``vec // number``, ``vec += vec``, 
``vec -= vec``, ``vec *= number``, ``vec /= number``, ``vec //= number``, ``round(vec, ndigits=0)``. 

All these operations will be performed elementwise.
In addition ``vec * vec`` will perform a scalar-product (a.k.a. dot-product). 
If you want to multiply every element from vector v with every element from 
vector w you can use the elementwise method: ``v.elementwise() * w``

The coordinates of a vector can be retrieved or set using attributes or
subscripts

::

   v = pygame.Vector3()

   v.x = 5
   v[1] = 2 * v.x
   print(v[1]) # 10

   v.x == v[0]
   v.y == v[1]
   v.z == v[2]

Multiple coordinates can be set using slices or swizzling

::

   v = pygame.Vector2()
   v.xy = 1, 2
   v[:] = 1, 2

.. versionadded:: 1.9.2pre
.. versionchanged:: 1.9.4 Removed experimental notice.
.. versionchanged:: 1.9.4 Allow scalar construction like GLSL Vector2(2) == Vector2(2.0, 2.0)
.. versionchanged:: 1.9.4 :mod:`pygame.math` import not required. More convenient ``pygame.Vector2`` and ``pygame.Vector3``.
.. versionchanged:: 2.2.0 `round` returns a new vector with components rounded to the specified digits.

.. function:: clamp

   | :sl:`returns value clamped to min and max.`
   | :sg:`clamp(value, min, max) -> float`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave clamp feedback with authors <https://github.com/pygame/pygame/pull/3326>`_

   Clamps a numeric ``value`` so that it's no lower than ``min``, and no higher
   than ``max``.

   .. versionadded:: 2.1.3

   .. ## math.clamp ##

.. function:: lerp

   | :sl:`interpolates between two values by a weight.`
   | :sg:`lerp(a, b, weight) -> float`

   Linearly interpolates between ``a`` and ``b`` by ``weight`` using the formula ``a + (b-a) * weight``.
   
   If ``weight`` is ``0.5``, ``lerp`` will return the value half-way between ``a``
   and ``b``. When ``a = 10`` and ``b = 20``, ``lerp(a, b, 0.5)`` will return ``15``. You
   can think of weight as the percentage of interpolation from ``a`` to ``b``, ``0.0``
   being 0% and ``1.0`` being 100%.

   ``lerp`` can be used for many things. You could rotate a sprite by a weight with
   ``angle = lerp(0, 360, weight)``. You could even scale an enemy's attack value
   based on the level you're playing:

   ::

      FINAL_LEVEL = 10
      current_level = 2

      attack = lerp(10, 50, current_level/MAX_LEVEL) # 18

   If you're on level 0, ``attack`` will be ``10``, if you're on level 10,
   ``attack`` will be ``50``. If you're on level 5, the
   result of ``current_level/MAX_LEVEL`` will be ``0.5``
   which represents 50%, therefore ``attack`` will be ``30``, which is the midpoint of ``10`` and ``50``.

   Raises a ValueError if ``weight`` is outside the range of ``[0, 1]``.

   .. versionadded:: 2.1.3

   .. ## math.lerp ##

.. class:: Vector2

   | :sl:`a 2-Dimensional Vector`
   | :sg:`Vector2() -> Vector2(0, 0)`
   | :sg:`Vector2(int) -> Vector2`
   | :sg:`Vector2(float) -> Vector2`
   | :sg:`Vector2(Vector2) -> Vector2`
   | :sg:`Vector2(x, y) -> Vector2`
   | :sg:`Vector2((x, y)) -> Vector2`

   Some general information about the ``Vector2`` class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector2) -> float`

      .. ## Vector2.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector2) -> float`

      calculates the third component of the cross-product.

      .. ## Vector2.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude_squared() == vec.x**2 + vec.y**2``. This
      is faster than ``vec.magnitude()`` because it avoids the square root.

      .. ## Vector2.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length() == math.sqrt(vec.x**2 + vec.y**2)``

      .. ## Vector2.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: ``vec.length_squared() == vec.x**2 + vec.y**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector2.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector2`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector2.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. 
      The direction of the vector is not changed.

      .. ## Vector2.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise 
      it returns ``False``.

      .. ## Vector2.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector2.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector2) -> Vector2`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector2.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector2) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector2.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector2) -> float`

      .. ## Vector2.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector2) -> float`

      .. ## Vector2.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector2, float) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector2, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector2.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector2, float) -> Vector2`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self and
      other the result is going to be. It must be a value between ``0`` and ``1`` 
      where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector2.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector2, float) -> Vector2`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector2.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector2.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle) -> Vector2`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector2.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in degrees. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector2.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle) -> None`

      Rotates the vector counterclockwise by the given angle in radians. The
      length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector2.rotate_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector2) -> float`

      Returns the angle from self to the passed ``Vector2`` that would rotate self
      to be aligned with the passed ``Vector2`` without crossing over the negative 
      x-axis.

      .. figure:: code_examples/angle_to.png
         :alt: angle_to image

         Example demonstrating the angle returned

      .. ## Vector2.angle_to ##

   .. method:: as_polar

      | :sl:`returns a tuple with radial distance and azimuthal angle.`
      | :sg:`as_polar() -> (r, phi)`

      Returns a tuple ``(r, phi)`` where r is the radial distance, and phi 
      is the azimuthal angle.

      .. ## Vector2.as_polar ##

   .. method:: from_polar

      | :sl:`Creates a Vector2(x, y) or sets x and y from a polar coordinates tuple.`
      | :sg:`Vector2.from_polar((r, phi)) -> Vector2`
      | :sg:`Vector2().from_polar((r, phi)) -> None`

      If used from the class creates a Vector2(x,y), else sets x and y.
      The values of x and y are defined from a tuple ``(r, phi)`` where r
      is the radial distance, and phi is the azimuthal angle.

      .. ## Vector2.from_polar ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector2) -> Vector2`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector2.project ##

   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector2`

      Returns a new Vector2 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector2.copy ##
   

   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector2`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector2`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector2.clamp_magnitude_ip ##


   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector2) -> None`
      | :sg:`update(x, y) -> None`
      | :sg:`update((x, y)) -> None`

      Sets coordinates x and y in place.

      .. versionadded:: 1.9.5

      .. ## Vector2.update ##

   
   .. attribute:: epsilon
      
      | :sl:`Determines the tolerance of vector calculations.`
      
      Both Vector classes have a value named ``epsilon`` that defaults to ``1e-6``.
      This value acts as a numerical margin in various methods to account for floating point
      arithmetic errors. Specifically, ``epsilon`` is used in the following places:

         * comparing Vectors (``==`` and ``!=``)
         * the ``is_normalized`` method (if the square of the length is within ``epsilon`` of 1, it's normalized)
         * slerping (a Vector with a length of ``<epsilon`` is considered a zero vector, and can't slerp with that)
         * reflection (can't reflect over the zero vector)
         * projection (can't project onto the zero vector)
         * rotation (only used when rotating by a multiple of 90 degrees)

      While it's possible to change ``epsilon`` for a specific instance of a Vector, all the other Vectors
      will retain the default value. Changing ``epsilon`` on a specific instance however could lead to some
      asymmetric behavior where symmetry would be expected, such as

      ::

         u = pygame.Vector2(0, 1)
         v = pygame.Vector2(0, 1.2)
         u.epsilon = 0.5 # don't set it nearly this large

         print(u == v) # >> True
         print(v == u) # >> False

      You'll probably never have to change ``epsilon`` from the default value, but in rare situations you might
      find that either the margin is too large or too small, in which case changing ``epsilon`` slightly 
      might help you out.


   .. ## pygame.math.Vector2 ##

.. class:: Vector3

   | :sl:`a 3-Dimensional Vector`
   | :sg:`Vector3() -> Vector3(0, 0, 0)`
   | :sg:`Vector3(int) -> Vector3`
   | :sg:`Vector3(float) -> Vector3`
   | :sg:`Vector3(Vector3) -> Vector3`
   | :sg:`Vector3(x, y, z) -> Vector3`
   | :sg:`Vector3((x, y, z)) -> Vector3`

   Some general information about the Vector3 class.

   .. versionchanged:: 2.1.3 
      Inherited methods of vector subclasses now correctly return an instance of the 
      subclass instead of the superclass

   .. method:: dot

      | :sl:`calculates the dot- or scalar-product with the other vector`
      | :sg:`dot(Vector3) -> float`

      .. ## Vector3.dot ##

   .. method:: cross

      | :sl:`calculates the cross- or vector-product`
      | :sg:`cross(Vector3) -> Vector3`

      calculates the cross-product.

      .. ## Vector3.cross ##

   .. method:: magnitude

      | :sl:`returns the Euclidean magnitude of the vector.`
      | :sg:`magnitude() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: ``vec.magnitude() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.magnitude ##

   .. method:: magnitude_squared

      | :sl:`returns the squared Euclidean magnitude of the vector.`
      | :sg:`magnitude_squared() -> float`

      calculates the magnitude of the vector which follows from the
      theorem: 
      ``vec.magnitude_squared() == vec.x**2 + vec.y**2 + vec.z**2``.
      This is faster than ``vec.magnitude()`` because it avoids the
      square root.

      .. ## Vector3.magnitude_squared ##

   .. method:: length

      | :sl:`returns the Euclidean length of the vector.`
      | :sg:`length() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length() == math.sqrt(vec.x**2 + vec.y**2 + vec.z**2)``

      .. ## Vector3.length ##

   .. method:: length_squared

      | :sl:`returns the squared Euclidean length of the vector.`
      | :sg:`length_squared() -> float`

      calculates the Euclidean length of the vector which follows from the
      Pythagorean theorem: 
      ``vec.length_squared() == vec.x**2 + vec.y**2 + vec.z**2``. 
      This is faster than ``vec.length()`` because it avoids the square root.

      .. ## Vector3.length_squared ##

   .. method:: normalize

      | :sl:`returns a vector with the same direction but length 1.`
      | :sg:`normalize() -> Vector3`

      Returns a new vector that has ``length`` equal to ``1`` and the same 
      direction as self.

      .. ## Vector3.normalize ##

   .. method:: normalize_ip

      | :sl:`normalizes the vector in place so that its length is 1.`
      | :sg:`normalize_ip() -> None`

      Normalizes the vector so that it has ``length`` equal to ``1``. The 
      direction of the vector is not changed.

      .. ## Vector3.normalize_ip ##

   .. method:: is_normalized

      | :sl:`tests if the vector is normalized i.e. has length == 1.`
      | :sg:`is_normalized() -> Bool`

      Returns True if the vector has ``length`` equal to ``1``. Otherwise it 
      returns ``False``.

      .. ## Vector3.is_normalized ##

   .. method:: scale_to_length

      | :sl:`scales the vector to a given length.`
      | :sg:`scale_to_length(float) -> None`

      Scales the vector so that it has the given length. The direction of the
      vector is not changed. You can also scale to length ``0``. If the vector 
      is the zero vector (i.e. has length ``0`` thus no direction) a
      ``ValueError`` is raised.

      .. ## Vector3.scale_to_length ##

   .. method:: reflect

      | :sl:`returns a vector reflected of a given normal.`
      | :sg:`reflect(Vector3) -> Vector3`

      Returns a new vector that points in the direction as if self would bounce
      of a surface characterized by the given surface normal. The length of the
      new vector is the same as self's.

      .. ## Vector3.reflect ##

   .. method:: reflect_ip

      | :sl:`reflect the vector of a given normal in place.`
      | :sg:`reflect_ip(Vector3) -> None`

      Changes the direction of self as if it would have been reflected of a
      surface with the given surface normal.

      .. ## Vector3.reflect_ip ##

   .. method:: distance_to

      | :sl:`calculates the Euclidean distance to a given vector.`
      | :sg:`distance_to(Vector3) -> float`

      .. ## Vector3.distance_to ##

   .. method:: distance_squared_to

      | :sl:`calculates the squared Euclidean distance to a given vector.`
      | :sg:`distance_squared_to(Vector3) -> float`

      .. ## Vector3.distance_squared_to ##

   .. method:: move_towards

      | :sl:`returns a vector moved toward the target by a given distance.`
      | :sg:`move_towards(Vector3, float) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Returns a Vector which is moved towards the given Vector by a given
      distance and does not overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards ##

   .. method:: move_towards_ip

      | :sl:`moves the vector toward its target at a given distance.`
      | :sg:`move_towards_ip(Vector3, float) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave move_towards_ip feedback with authors <https://github.com/pygame/pygame/pull/2929>`_

      Moves itself toward the given Vector at a given distance and does not
      overshoot past its target Vector.
      The first parameter determines the target Vector, while the second
      parameter determines the delta distance. If the distance is in the
      negatives, then it will move away from the target Vector.

      .. versionadded:: 2.1.3

      .. ## Vector3.move_towards_ip ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given vector.`
      | :sg:`lerp(Vector3, float) -> Vector3`

      Returns a Vector which is a linear interpolation between self and the
      given Vector. The second parameter determines how far between self an
      other the result is going to be. It must be a value between ``0`` and 
      ``1``, where ``0`` means self and ``1`` means other will be returned.

      .. ## Vector3.lerp ##

   .. method:: slerp

      | :sl:`returns a spherical interpolation to the given vector.`
      | :sg:`slerp(Vector3, float) -> Vector3`

      Calculates the spherical interpolation from self to the given Vector. The
      second argument - often called t - must be in the range ``[-1, 1]``. It
      parametrizes where - in between the two vectors - the result should be.
      If a negative value is given the interpolation will not take the
      complement of the shortest path.

      .. ## Vector3.slerp ##

   .. method:: elementwise

      | :sl:`The next operation will be performed elementwise.`
      | :sg:`elementwise() -> VectorElementwiseProxy`

      Applies the following operation to each element of the vector.

      .. ## Vector3.elementwise ##

   .. method:: rotate

      | :sl:`rotates a vector by a given angle in degrees.`
      | :sg:`rotate(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in degrees around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate ##

   .. method:: rotate_rad

      | :sl:`rotates a vector by a given angle in radians.`
      | :sg:`rotate_rad(angle, Vector3) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise by the given angle in radians around the given axis.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_rad ##

   .. method:: rotate_ip

      | :sl:`rotates the vector by a given angle in degrees in place.`
      | :sg:`rotate_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_ip ##

   .. method:: rotate_ip_rad

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_ip_rad(angle, Vector3) -> None`

      DEPRECATED: Use rotate_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_ip_rad ##

   .. method:: rotate_rad_ip

      | :sl:`rotates the vector by a given angle in radians in place.`
      | :sg:`rotate_rad_ip(angle, Vector3) -> None`

      Rotates the vector counterclockwise around the given axis by the given
      angle in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_rad_ip ##

   .. method:: rotate_x

      | :sl:`rotates a vector around the x-axis by the angle in degrees.`
      | :sg:`rotate_x(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x ##

   .. method:: rotate_x_rad

      | :sl:`rotates a vector around the x-axis by the angle in radians.`
      | :sg:`rotate_x_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the x-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_x_rad ##

   .. method:: rotate_x_ip

      | :sl:`rotates the vector around the x-axis by the angle in degrees in place.`
      | :sg:`rotate_x_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_x_ip ##

   .. method:: rotate_x_ip_rad

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_x_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_x_ip_rad ##

   .. method:: rotate_x_rad_ip

      | :sl:`rotates the vector around the x-axis by the angle in radians in place.`
      | :sg:`rotate_x_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the x-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_x_rad_ip ##

   .. method:: rotate_y

      | :sl:`rotates a vector around the y-axis by the angle in degrees.`
      | :sg:`rotate_y(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y ##

   .. method:: rotate_y_rad

      | :sl:`rotates a vector around the y-axis by the angle in radians.`
      | :sg:`rotate_y_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the y-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_y_rad ##

   .. method:: rotate_y_ip

      | :sl:`rotates the vector around the y-axis by the angle in degrees in place.`
      | :sg:`rotate_y_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_y_ip ##

   .. method:: rotate_y_ip_rad

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_y_rad_ip() instead.

      .. versionadded:: 2.0.0
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_y_ip_rad ##

   .. method:: rotate_y_rad_ip

      | :sl:`rotates the vector around the y-axis by the angle in radians in place.`
      | :sg:`rotate_y_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the y-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_y_rad_ip ##

   .. method:: rotate_z

      | :sl:`rotates a vector around the z-axis by the angle in degrees.`
      | :sg:`rotate_z(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in degrees.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z ##

   .. method:: rotate_z_rad

      | :sl:`rotates a vector around the z-axis by the angle in radians.`
      | :sg:`rotate_z_rad(angle) -> Vector3`

      Returns a vector which has the same length as self but is rotated
      counterclockwise around the z-axis by the given angle in radians.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.0.0

      .. ## Vector3.rotate_z_rad ##

   .. method:: rotate_z_ip

      | :sl:`rotates the vector around the z-axis by the angle in degrees in place.`
      | :sg:`rotate_z_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in degrees. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. ## Vector3.rotate_z_ip ##

   .. method:: rotate_z_ip_rad

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_ip_rad(angle) -> None`

      DEPRECATED: Use rotate_z_rad_ip() instead.
      
      .. deprecated:: 2.1.1

      .. ## Vector3.rotate_z_ip_rad ##

   .. method:: rotate_z_rad_ip

      | :sl:`rotates the vector around the z-axis by the angle in radians in place.`
      | :sg:`rotate_z_rad_ip(angle) -> None`

      Rotates the vector counterclockwise around the z-axis by the given angle
      in radians. The length of the vector is not changed.
      (Note that due to pygame's inverted y coordinate system, the rotation
      will look clockwise if displayed).

      .. versionadded:: 2.1.1

      .. ## Vector3.rotate_z_rad_ip ##

   .. method:: angle_to

      | :sl:`calculates the angle to a given vector in degrees.`
      | :sg:`angle_to(Vector3) -> float`

      Returns the angle between self and the given vector.

      .. ## Vector3.angle_to ##

   .. method:: as_spherical

      | :sl:`returns a tuple with radial distance, inclination and azimuthal angle.`
      | :sg:`as_spherical() -> (r, theta, phi)`

      Returns a tuple ``(r, theta, phi)`` where r is the radial distance, theta is
      the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.as_spherical ##

   .. method:: from_spherical

      | :sl:`Creates a Vector3(x, y, z) or sets x, y and z from a spherical coordinates 3-tuple.`
      | :sg:`Vector3.from_spherical((r, theta, phi)) -> Vector3`
      | :sg:`Vector3().from_spherical((r, theta, phi)) -> None`

      If used from the class creates a Vector3(x, y, z), else sets x, y, and z.
      The values of x, y, and z are from a tuple ``(r, theta, phi)`` where r is the radial
      distance, theta is the inclination angle and phi is the azimuthal angle.

      .. ## Vector3.from_spherical ##

   .. method:: project

      | :sl:`projects a vector onto another.`
      | :sg:`project(Vector3) -> Vector3`

      Returns the projected vector. This is useful for collision detection in finding the components in a certain direction (e.g. in direction of the wall). 
      For a more detailed explanation see `Wikipedia <https://en.wikipedia.org/wiki/Vector_projection>`_.

      .. versionadded:: 2.0.2

      .. ## Vector3.project ##
   
   .. method:: copy

      | :sl:`Returns a copy of itself.`
      | :sg:`copy() -> Vector3`

      Returns a new Vector3 having the same dimensions.

      .. versionadded:: 2.1.1

      .. ## Vector3.copy ##


   .. method:: clamp_magnitude

      | :sl:`Returns a copy of a vector with the magnitude clamped between max_length and min_length.`
      | :sg:`clamp_magnitude(max_length) -> Vector3`
      | :sg:`clamp_magnitude(min_length, max_length) -> Vector3`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Returns a new copy of a vector with the magnitude clamped between 
      ``max_length`` and ``min_length``. If only one argument is passed, it is 
      taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude ##
   

   .. method:: clamp_magnitude_ip

      | :sl:`Clamps the vector's magnitude between max_length and min_length`
      | :sg:`clamp_magnitude_ip(max_length) -> None`
      | :sg:`clamp_magnitude_ip(min_length, max_length) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave clamp_magnitude_ip feedback with authors <https://github.com/pygame/pygame/pull/2990>`_

      Clamps the vector's magnitude between ``max_length`` and ``min_length``.
      If only one argument is passed, it is taken to be the ``max_length``

      This function raises ``ValueError`` if ``min_length`` is greater than
      ``max_length``, or if either of these values are negative.

      .. versionadded:: 2.1.3

      .. ## Vector3.clamp_magnitude_ip ##

   .. method:: update

      | :sl:`Sets the coordinates of the vector.`
      | :sg:`update() -> None`
      | :sg:`update(int) -> None`
      | :sg:`update(float) -> None`
      | :sg:`update(Vector3) -> None`
      | :sg:`update(x, y, z) -> None`
      | :sg:`update((x, y, z)) -> None`

      Sets coordinates x, y, and z in place.

      .. versionadded:: 1.9.5

      .. ## Vector3.update ##

   .. attribute:: epsilon

      | :sl:`Determines the tolerance of vector calculations.`
      
      With lengths within this number, vectors are considered equal. For more information see :attr:`pygame.math.Vector2.epsilon`
            
   .. ##  ##

   .. ## pygame.math.Vector3 ##

.. ## pygame.math ##


--- Contenu du fichier : bufferproxy.rst.txt ---
.. include:: common.txt

.. default-domain:: py

:class:`pygame.BufferProxy`
===========================

.. currentmodule:: pygame

.. class:: BufferProxy

   | :sl:`pygame object to export a surface buffer through an array protocol`
   | :sg:`BufferProxy(<parent>) -> BufferProxy`

   :class:`BufferProxy` is a pygame support type, designed as the return value
   of the :meth:`Surface.get_buffer` and :meth:`Surface.get_view` methods.
   For all Python versions a :class:`BufferProxy` object exports a C struct
   and Python level array interface on behalf of its parent object's buffer.
   A new buffer interface is also exported.
   In pygame, :class:`BufferProxy` is key to implementing the
   :mod:`pygame.surfarray` module.

   :class:`BufferProxy` instances can be created directly from Python code,
   either for a parent that exports an interface, or from a Python ``dict``
   describing an object's buffer layout. The dict entries are based on the
   Python level array interface mapping. The following keys are recognized:

      ``"shape"`` : tuple
         The length of each array dimension as a tuple of integers. The
         length of the tuple is the number of dimensions in the array.

      ``"typestr"`` : string
         The array element type as a length 3 string. The first character
         gives byteorder, '<' for little-endian, '>' for big-endian, and
         '\|' for not applicable. The second character is the element type,
         'i' for signed integer, 'u' for unsigned integer, 'f' for floating
         point, and 'V' for an chunk of bytes. The third character gives the
         bytesize of the element, from '1' to '9' bytes. So, for example,
         "<u4" is an unsigned 4 byte little-endian integer, such as a
         32 bit pixel on a PC, while "\|V3" would represent a 24 bit pixel,
         which has no integer equivalent.

      ``"data"`` : tuple
         The physical buffer start address and a read-only flag as a length
         2 tuple. The address is an integer value, while the read-only flag
         is a bool—``False`` for writable, ``True`` for read-only.

      ``"strides"`` : tuple : (optional)
         Array stride information as a tuple of integers. It is required
	 only of non C-contiguous arrays. The tuple length must match
	 that of ``"shape"``.

      ``"parent"`` : object : (optional)
         The exporting object. It can be used to keep the parent object
         alive while its buffer is visible.

      ``"before"`` : callable : (optional)
         Callback invoked when the :class:`BufferProxy` instance
         exports the buffer. The callback is given one argument, the
	 ``"parent"`` object if given, otherwise ``None``.
         The callback is useful for setting a lock on the parent.

      ``"after"`` : callable : (optional)
         Callback invoked when an exported buffer is released.
         The callback is passed on argument, the ``"parent"`` object if given,
         otherwise None. The callback is useful for releasing a lock on the
         parent.
      
   The BufferProxy class supports subclassing, instance variables, and weak
   references.

   .. versionadded:: 1.8.0
   .. versionextended:: 1.9.2

   .. attribute:: parent

      | :sl:`Return wrapped exporting object.`
      | :sg:`parent -> Surface`
      | :sg:`parent -> <parent>`

      The :class:`Surface` which returned the :class:`BufferProxy` object or
      the object passed to a :class:`BufferProxy` call.

   .. attribute:: length

      | :sl:`The size, in bytes, of the exported buffer.`
      | :sg:`length -> int`

      The number of valid bytes of data exported. For discontinuous data,
      that is data which is not a single block of memory, the bytes within
      the gaps are excluded from the count. This property is equivalent to
      the ``Py_buffer`` C struct ``len`` field.

   .. attribute:: raw

      | :sl:`A copy of the exported buffer as a single block of bytes.`
      | :sg:`raw -> bytes`

      The buffer data as a ``str``/``bytes`` object.
      Any gaps in the exported data are removed.

   .. method:: write

      | :sl:`Write raw bytes to object buffer.`
      | :sg:`write(buffer, offset=0)`

      Overwrite bytes in the parent object's data. The data must be C or F
      contiguous, otherwise a ValueError is raised. Argument `buffer` is a
      ``str``/``bytes`` object. An optional offset gives a
      start position, in bytes, within the buffer where overwriting begins.
      If the offset is negative or greater that or equal to the buffer proxy's
      :attr:`length` value, an ``IndexException`` is raised.
      If ``len(buffer) > proxy.length + offset``, a ``ValueError`` is raised.


--- Contenu du fichier : color_list.rst.txt ---
.. include:: common.txt

Named Colors
============

.. raw:: html

    <style>
    .aliceblue {background-color: #f0f8ff; color: #f0f8ff;}
    .antiquewhite {background-color: #faebd7; color: #faebd7;}
    .antiquewhite1 {background-color: #ffefdb; color: #ffefdb;}
    .antiquewhite2 {background-color: #eedfcc; color: #eedfcc;}
    .antiquewhite3 {background-color: #cdc0b0; color: #cdc0b0;}
    .antiquewhite4 {background-color: #8b8378; color: #8b8378;}
    .aqua {background-color: #00ffff; color: #00ffff;}
    .aquamarine {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine1 {background-color: #7fffd4; color: #7fffd4;}
    .aquamarine2 {background-color: #76eec6; color: #76eec6;}
    .aquamarine3 {background-color: #66cdaa; color: #66cdaa;}
    .aquamarine4 {background-color: #458b74; color: #458b74;}
    .azure {background-color: #f0ffff; color: #f0ffff;}
    .azure1 {background-color: #f0ffff; color: #f0ffff;}
    .azure3 {background-color: #c1cdcd; color: #c1cdcd;}
    .azure2 {background-color: #e0eeee; color: #e0eeee;}
    .azure4 {background-color: #838b8b; color: #838b8b;}
    .beige {background-color: #f5f5dc; color: #f5f5dc;}
    .bisque {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque1 {background-color: #ffe4c4; color: #ffe4c4;}
    .bisque2 {background-color: #eed5b7; color: #eed5b7;}
    .bisque3 {background-color: #cdb79e; color: #cdb79e;}
    .bisque4 {background-color: #8b7d6b; color: #8b7d6b;}
    .black {background-color: #000000; color: #000000;}
    .blanchedalmond {background-color: #ffebcd; color: #ffebcd;}
    .blue {background-color: #0000ff; color: #0000ff;}
    .blue1 {background-color: #0000ff; color: #0000ff;}
    .blue2 {background-color: #0000ee; color: #0000ee;}
    .blue3 {background-color: #0000cd; color: #0000cd;}
    .blue4 {background-color: #00008b; color: #00008b;}
    .blueviolet {background-color: #8a2be2; color: #8a2be2;}
    .brown {background-color: #a52a2a; color: #a52a2a;}
    .brown1 {background-color: #ff4040; color: #ff4040;}
    .brown2 {background-color: #ee3b3b; color: #ee3b3b;}
    .brown3 {background-color: #cd3333; color: #cd3333;}
    .brown4 {background-color: #8b2323; color: #8b2323;}
    .burlywood {background-color: #deb887; color: #deb887;}
    .burlywood1 {background-color: #ffd39b; color: #ffd39b;}
    .burlywood2 {background-color: #eec591; color: #eec591;}
    .burlywood3 {background-color: #cdaa7d; color: #cdaa7d;}
    .burlywood4 {background-color: #8b7355; color: #8b7355;}
    .cadetblue {background-color: #5f9ea0; color: #5f9ea0;}
    .cadetblue1 {background-color: #98f5ff; color: #98f5ff;}
    .cadetblue2 {background-color: #8ee5ee; color: #8ee5ee;}
    .cadetblue3 {background-color: #7ac5cd; color: #7ac5cd;}
    .cadetblue4 {background-color: #53868b; color: #53868b;}
    .chartreuse {background-color: #7fff00; color: #7fff00;}
    .chartreuse1 {background-color: #7fff00; color: #7fff00;}
    .chartreuse2 {background-color: #76ee00; color: #76ee00;}
    .chartreuse3 {background-color: #66cd00; color: #66cd00;}
    .chartreuse4 {background-color: #458b00; color: #458b00;}
    .chocolate {background-color: #d2691e; color: #d2691e;}
    .chocolate1 {background-color: #ff7f24; color: #ff7f24;}
    .chocolate2 {background-color: #ee7621; color: #ee7621;}
    .chocolate3 {background-color: #cd661d; color: #cd661d;}
    .chocolate4 {background-color: #8b4513; color: #8b4513;}
    .coral {background-color: #ff7f50; color: #ff7f50;}
    .coral1 {background-color: #ff7256; color: #ff7256;}
    .coral2 {background-color: #ee6a50; color: #ee6a50;}
    .coral3 {background-color: #cd5b45; color: #cd5b45;}
    .coral4 {background-color: #8b3e2f; color: #8b3e2f;}
    .cornflowerblue {background-color: #6495ed; color: #6495ed;}
    .cornsilk {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk1 {background-color: #fff8dc; color: #fff8dc;}
    .cornsilk2 {background-color: #eee8cd; color: #eee8cd;}
    .cornsilk3 {background-color: #cdc8b1; color: #cdc8b1;}
    .cornsilk4 {background-color: #8b8878; color: #8b8878;}
    .crimson {background-color: #dc143c; color: #dc143c;}
    .cyan {background-color: #00ffff; color: #00ffff;}
    .cyan1 {background-color: #00ffff; color: #00ffff;}
    .cyan2 {background-color: #00eeee; color: #00eeee;}
    .cyan3 {background-color: #00cdcd; color: #00cdcd;}
    .cyan4 {background-color: #008b8b; color: #008b8b;}
    .darkblue {background-color: #00008b; color: #00008b;}
    .darkcyan {background-color: #008b8b; color: #008b8b;}
    .darkgoldenrod {background-color: #b8860b; color: #b8860b;}
    .darkgoldenrod1 {background-color: #ffb90f; color: #ffb90f;}
    .darkgoldenrod2 {background-color: #eead0e; color: #eead0e;}
    .darkgoldenrod3 {background-color: #cd950c; color: #cd950c;}
    .darkgoldenrod4 {background-color: #8b6508; color: #8b6508;}
    .darkgray {background-color: #a9a9a9; color: #a9a9a9;}
    .darkgreen {background-color: #006400; color: #006400;}
    .darkgrey {background-color: #a9a9a9; color: #a9a9a9;}
    .darkkhaki {background-color: #bdb76b; color: #bdb76b;}
    .darkmagenta {background-color: #8b008b; color: #8b008b;}
    .darkolivegreen {background-color: #556b2f; color: #556b2f;}
    .darkolivegreen1 {background-color: #caff70; color: #caff70;}
    .darkolivegreen2 {background-color: #bcee68; color: #bcee68;}
    .darkolivegreen3 {background-color: #a2cd5a; color: #a2cd5a;}
    .darkolivegreen4 {background-color: #6e8b3d; color: #6e8b3d;}
    .darkorange {background-color: #ff8c00; color: #ff8c00;}
    .darkorange1 {background-color: #ff7f00; color: #ff7f00;}
    .darkorange2 {background-color: #ee7600; color: #ee7600;}
    .darkorange3 {background-color: #cd6600; color: #cd6600;}
    .darkorange4 {background-color: #8b4500; color: #8b4500;}
    .darkorchid {background-color: #9932cc; color: #9932cc;}
    .darkorchid1 {background-color: #bf3eff; color: #bf3eff;}
    .darkorchid2 {background-color: #b23aee; color: #b23aee;}
    .darkorchid3 {background-color: #9a32cd; color: #9a32cd;}
    .darkorchid4 {background-color: #68228b; color: #68228b;}
    .darkred {background-color: #8b0000; color: #8b0000;}
    .darksalmon {background-color: #e9967a; color: #e9967a;}
    .darkseagreen {background-color: #8fbc8f; color: #8fbc8f;}
    .darkseagreen1 {background-color: #c1ffc1; color: #c1ffc1;}
    .darkseagreen2 {background-color: #b4eeb4; color: #b4eeb4;}
    .darkseagreen3 {background-color: #9bcd9b; color: #9bcd9b;}
    .darkseagreen4 {background-color: #698b69; color: #698b69;}
    .darkslateblue {background-color: #483d8b; color: #483d8b;}
    .darkslategray {background-color: #2f4f4f; color: #2f4f4f;}
    .darkslategray1 {background-color: #97ffff; color: #97ffff;}
    .darkslategray2 {background-color: #8deeee; color: #8deeee;}
    .darkslategray3 {background-color: #79cdcd; color: #79cdcd;}
    .darkslategray4 {background-color: #528b8b; color: #528b8b;}
    .darkslategrey {background-color: #2f4f4f; color: #2f4f4f;}
    .darkturquoise {background-color: #00ced1; color: #00ced1;}
    .darkviolet {background-color: #9400d3; color: #9400d3;}
    .deeppink {background-color: #ff1493; color: #ff1493;}
    .deeppink1 {background-color: #ff1493; color: #ff1493;}
    .deeppink2 {background-color: #ee1289; color: #ee1289;}
    .deeppink3 {background-color: #cd1076; color: #cd1076;}
    .deeppink4 {background-color: #8b0a50; color: #8b0a50;}
    .deepskyblue {background-color: #00bfff; color: #00bfff;}
    .deepskyblue1 {background-color: #00bfff; color: #00bfff;}
    .deepskyblue2 {background-color: #00b2ee; color: #00b2ee;}
    .deepskyblue3 {background-color: #009acd; color: #009acd;}
    .deepskyblue4 {background-color: #00688b; color: #00688b;}
    .dimgray {background-color: #696969; color: #696969;}
    .dimgrey {background-color: #696969; color: #696969;}
    .dodgerblue {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue1 {background-color: #1e90ff; color: #1e90ff;}
    .dodgerblue2 {background-color: #1c86ee; color: #1c86ee;}
    .dodgerblue3 {background-color: #1874cd; color: #1874cd;}
    .dodgerblue4 {background-color: #104e8b; color: #104e8b;}
    .firebrick {background-color: #b22222; color: #b22222;}
    .firebrick1 {background-color: #ff3030; color: #ff3030;}
    .firebrick2 {background-color: #ee2c2c; color: #ee2c2c;}
    .firebrick3 {background-color: #cd2626; color: #cd2626;}
    .firebrick4 {background-color: #8b1a1a; color: #8b1a1a;}
    .floralwhite {background-color: #fffaf0; color: #fffaf0;}
    .forestgreen {background-color: #228b22; color: #228b22;}
    .fuchsia {background-color: #ff00ff; color: #ff00ff;}
    .gainsboro {background-color: #dcdcdc; color: #dcdcdc;}
    .ghostwhite {background-color: #f8f8ff; color: #f8f8ff;}
    .gold {background-color: #ffd700; color: #ffd700;}
    .gold1 {background-color: #ffd700; color: #ffd700;}
    .gold2 {background-color: #eec900; color: #eec900;}
    .gold3 {background-color: #cdad00; color: #cdad00;}
    .gold4 {background-color: #8b7500; color: #8b7500;}
    .goldenrod {background-color: #daa520; color: #daa520;}
    .goldenrod1 {background-color: #ffc125; color: #ffc125;}
    .goldenrod2 {background-color: #eeb422; color: #eeb422;}
    .goldenrod3 {background-color: #cd9b1d; color: #cd9b1d;}
    .goldenrod4 {background-color: #8b6914; color: #8b6914;}
    .gray {background-color: #bebebe; color: #bebebe;}
    .gray0 {background-color: #000000; color: #000000;}
    .gray1 {background-color: #030303; color: #030303;}
    .gray2 {background-color: #050505; color: #050505;}
    .gray3 {background-color: #080808; color: #080808;}
    .gray4 {background-color: #0a0a0a; color: #0a0a0a;}
    .gray5 {background-color: #0d0d0d; color: #0d0d0d;}
    .gray6 {background-color: #0f0f0f; color: #0f0f0f;}
    .gray7 {background-color: #121212; color: #121212;}
    .gray8 {background-color: #141414; color: #141414;}
    .gray9 {background-color: #171717; color: #171717;}
    .gray10 {background-color: #1a1a1a; color: #1a1a1a;}
    .gray11 {background-color: #1c1c1c; color: #1c1c1c;}
    .gray12 {background-color: #1f1f1f; color: #1f1f1f;}
    .gray13 {background-color: #212121; color: #212121;}
    .gray14 {background-color: #242424; color: #242424;}
    .gray15 {background-color: #262626; color: #262626;}
    .gray16 {background-color: #292929; color: #292929;}
    .gray17 {background-color: #2b2b2b; color: #2b2b2b;}
    .gray18 {background-color: #2e2e2e; color: #2e2e2e;}
    .gray19 {background-color: #303030; color: #303030;}
    .gray20 {background-color: #333333; color: #333333;}
    .gray21 {background-color: #363636; color: #363636;}
    .gray22 {background-color: #383838; color: #383838;}
    .gray23 {background-color: #3b3b3b; color: #3b3b3b;}
    .gray24 {background-color: #3d3d3d; color: #3d3d3d;}
    .gray25 {background-color: #404040; color: #404040;}
    .gray26 {background-color: #424242; color: #424242;}
    .gray27 {background-color: #454545; color: #454545;}
    .gray28 {background-color: #474747; color: #474747;}
    .gray29 {background-color: #4a4a4a; color: #4a4a4a;}
    .gray30 {background-color: #4d4d4d; color: #4d4d4d;}
    .gray31 {background-color: #4f4f4f; color: #4f4f4f;}
    .gray32 {background-color: #525252; color: #525252;}
    .gray33 {background-color: #545454; color: #545454;}
    .gray34 {background-color: #575757; color: #575757;}
    .gray35 {background-color: #595959; color: #595959;}
    .gray36 {background-color: #5c5c5c; color: #5c5c5c;}
    .gray37 {background-color: #5e5e5e; color: #5e5e5e;}
    .gray38 {background-color: #616161; color: #616161;}
    .gray39 {background-color: #636363; color: #636363;}
    .gray40 {background-color: #666666; color: #666666;}
    .gray41 {background-color: #696969; color: #696969;}
    .gray42 {background-color: #6b6b6b; color: #6b6b6b;}
    .gray43 {background-color: #6e6e6e; color: #6e6e6e;}
    .gray44 {background-color: #707070; color: #707070;}
    .gray45 {background-color: #737373; color: #737373;}
    .gray46 {background-color: #757575; color: #757575;}
    .gray47 {background-color: #787878; color: #787878;}
    .gray48 {background-color: #7a7a7a; color: #7a7a7a;}
    .gray49 {background-color: #7d7d7d; color: #7d7d7d;}
    .gray50 {background-color: #7f7f7f; color: #7f7f7f;}
    .gray51 {background-color: #828282; color: #828282;}
    .gray52 {background-color: #858585; color: #858585;}
    .gray53 {background-color: #878787; color: #878787;}
    .gray54 {background-color: #8a8a8a; color: #8a8a8a;}
    .gray55 {background-color: #8c8c8c; color: #8c8c8c;}
    .gray56 {background-color: #8f8f8f; color: #8f8f8f;}
    .gray57 {background-color: #919191; color: #919191;}
    .gray58 {background-color: #949494; color: #949494;}
    .gray59 {background-color: #969696; color: #969696;}
    .gray60 {background-color: #999999; color: #999999;}
    .gray61 {background-color: #9c9c9c; color: #9c9c9c;}
    .gray62 {background-color: #9e9e9e; color: #9e9e9e;}
    .gray63 {background-color: #a1a1a1; color: #a1a1a1;}
    .gray64 {background-color: #a3a3a3; color: #a3a3a3;}
    .gray65 {background-color: #a6a6a6; color: #a6a6a6;}
    .gray66 {background-color: #a8a8a8; color: #a8a8a8;}
    .gray67 {background-color: #ababab; color: #ababab;}
    .gray68 {background-color: #adadad; color: #adadad;}
    .gray69 {background-color: #b0b0b0; color: #b0b0b0;}
    .gray70 {background-color: #b3b3b3; color: #b3b3b3;}
    .gray71 {background-color: #b5b5b5; color: #b5b5b5;}
    .gray72 {background-color: #b8b8b8; color: #b8b8b8;}
    .gray73 {background-color: #bababa; color: #bababa;}
    .gray74 {background-color: #bdbdbd; color: #bdbdbd;}
    .gray75 {background-color: #bfbfbf; color: #bfbfbf;}
    .gray76 {background-color: #c2c2c2; color: #c2c2c2;}
    .gray77 {background-color: #c4c4c4; color: #c4c4c4;}
    .gray78 {background-color: #c7c7c7; color: #c7c7c7;}
    .gray79 {background-color: #c9c9c9; color: #c9c9c9;}
    .gray80 {background-color: #cccccc; color: #cccccc;}
    .gray81 {background-color: #cfcfcf; color: #cfcfcf;}
    .gray82 {background-color: #d1d1d1; color: #d1d1d1;}
    .gray83 {background-color: #d4d4d4; color: #d4d4d4;}
    .gray84 {background-color: #d6d6d6; color: #d6d6d6;}
    .gray85 {background-color: #d9d9d9; color: #d9d9d9;}
    .gray86 {background-color: #dbdbdb; color: #dbdbdb;}
    .gray87 {background-color: #dedede; color: #dedede;}
    .gray88 {background-color: #e0e0e0; color: #e0e0e0;}
    .gray89 {background-color: #e3e3e3; color: #e3e3e3;}
    .gray90 {background-color: #e5e5e5; color: #e5e5e5;}
    .gray91 {background-color: #e8e8e8; color: #e8e8e8;}
    .gray92 {background-color: #ebebeb; color: #ebebeb;}
    .gray93 {background-color: #ededed; color: #ededed;}
    .gray94 {background-color: #f0f0f0; color: #f0f0f0;}
    .gray95 {background-color: #f2f2f2; color: #f2f2f2;}
    .gray96 {background-color: #f5f5f5; color: #f5f5f5;}
    .gray97 {background-color: #f7f7f7; color: #f7f7f7;}
    .gray98 {background-color: #fafafa; color: #fafafa;}
    .gray99 {background-color: #fcfcfc; color: #fcfcfc;}
    .gray100 {background-color: #ffffff; color: #ffffff;}
    .green {background-color: #00ff00; color: #00ff00;}
    .green1 {background-color: #00ff00; color: #00ff00;}
    .green2 {background-color: #00ee00; color: #00ee00;}
    .green3 {background-color: #00cd00; color: #00cd00;}
    .green4 {background-color: #008b00; color: #008b00;}
    .greenyellow {background-color: #adff2f; color: #adff2f;}
    .grey {background-color: #bebebe; color: #bebebe;}
    .grey0 {background-color: #000000; color: #000000;}
    .grey1 {background-color: #030303; color: #030303;}
    .grey2 {background-color: #050505; color: #050505;}
    .grey3 {background-color: #080808; color: #080808;}
    .grey4 {background-color: #0a0a0a; color: #0a0a0a;}
    .grey5 {background-color: #0d0d0d; color: #0d0d0d;}
    .grey6 {background-color: #0f0f0f; color: #0f0f0f;}
    .grey7 {background-color: #121212; color: #121212;}
    .grey8 {background-color: #141414; color: #141414;}
    .grey9 {background-color: #171717; color: #171717;}
    .grey10 {background-color: #1a1a1a; color: #1a1a1a;}
    .grey11 {background-color: #1c1c1c; color: #1c1c1c;}
    .grey12 {background-color: #1f1f1f; color: #1f1f1f;}
    .grey13 {background-color: #212121; color: #212121;}
    .grey14 {background-color: #242424; color: #242424;}
    .grey15 {background-color: #262626; color: #262626;}
    .grey16 {background-color: #292929; color: #292929;}
    .grey17 {background-color: #2b2b2b; color: #2b2b2b;}
    .grey18 {background-color: #2e2e2e; color: #2e2e2e;}
    .grey19 {background-color: #303030; color: #303030;}
    .grey20 {background-color: #333333; color: #333333;}
    .grey21 {background-color: #363636; color: #363636;}
    .grey22 {background-color: #383838; color: #383838;}
    .grey23 {background-color: #3b3b3b; color: #3b3b3b;}
    .grey24 {background-color: #3d3d3d; color: #3d3d3d;}
    .grey25 {background-color: #404040; color: #404040;}
    .grey26 {background-color: #424242; color: #424242;}
    .grey27 {background-color: #454545; color: #454545;}
    .grey28 {background-color: #474747; color: #474747;}
    .grey29 {background-color: #4a4a4a; color: #4a4a4a;}
    .grey30 {background-color: #4d4d4d; color: #4d4d4d;}
    .grey31 {background-color: #4f4f4f; color: #4f4f4f;}
    .grey32 {background-color: #525252; color: #525252;}
    .grey33 {background-color: #545454; color: #545454;}
    .grey34 {background-color: #575757; color: #575757;}
    .grey35 {background-color: #595959; color: #595959;}
    .grey36 {background-color: #5c5c5c; color: #5c5c5c;}
    .grey37 {background-color: #5e5e5e; color: #5e5e5e;}
    .grey38 {background-color: #616161; color: #616161;}
    .grey39 {background-color: #636363; color: #636363;}
    .grey40 {background-color: #666666; color: #666666;}
    .grey41 {background-color: #696969; color: #696969;}
    .grey42 {background-color: #6b6b6b; color: #6b6b6b;}
    .grey43 {background-color: #6e6e6e; color: #6e6e6e;}
    .grey44 {background-color: #707070; color: #707070;}
    .grey45 {background-color: #737373; color: #737373;}
    .grey46 {background-color: #757575; color: #757575;}
    .grey47 {background-color: #787878; color: #787878;}
    .grey48 {background-color: #7a7a7a; color: #7a7a7a;}
    .grey49 {background-color: #7d7d7d; color: #7d7d7d;}
    .grey50 {background-color: #7f7f7f; color: #7f7f7f;}
    .grey51 {background-color: #828282; color: #828282;}
    .grey52 {background-color: #858585; color: #858585;}
    .grey53 {background-color: #878787; color: #878787;}
    .grey54 {background-color: #8a8a8a; color: #8a8a8a;}
    .grey55 {background-color: #8c8c8c; color: #8c8c8c;}
    .grey56 {background-color: #8f8f8f; color: #8f8f8f;}
    .grey57 {background-color: #919191; color: #919191;}
    .grey58 {background-color: #949494; color: #949494;}
    .grey59 {background-color: #969696; color: #969696;}
    .grey60 {background-color: #999999; color: #999999;}
    .grey61 {background-color: #9c9c9c; color: #9c9c9c;}
    .grey62 {background-color: #9e9e9e; color: #9e9e9e;}
    .grey63 {background-color: #a1a1a1; color: #a1a1a1;}
    .grey64 {background-color: #a3a3a3; color: #a3a3a3;}
    .grey65 {background-color: #a6a6a6; color: #a6a6a6;}
    .grey66 {background-color: #a8a8a8; color: #a8a8a8;}
    .grey67 {background-color: #ababab; color: #ababab;}
    .grey68 {background-color: #adadad; color: #adadad;}
    .grey69 {background-color: #b0b0b0; color: #b0b0b0;}
    .grey70 {background-color: #b3b3b3; color: #b3b3b3;}
    .grey71 {background-color: #b5b5b5; color: #b5b5b5;}
    .grey72 {background-color: #b8b8b8; color: #b8b8b8;}
    .grey73 {background-color: #bababa; color: #bababa;}
    .grey74 {background-color: #bdbdbd; color: #bdbdbd;}
    .grey75 {background-color: #bfbfbf; color: #bfbfbf;}
    .grey76 {background-color: #c2c2c2; color: #c2c2c2;}
    .grey77 {background-color: #c4c4c4; color: #c4c4c4;}
    .grey78 {background-color: #c7c7c7; color: #c7c7c7;}
    .grey79 {background-color: #c9c9c9; color: #c9c9c9;}
    .grey80 {background-color: #cccccc; color: #cccccc;}
    .grey81 {background-color: #cfcfcf; color: #cfcfcf;}
    .grey82 {background-color: #d1d1d1; color: #d1d1d1;}
    .grey83 {background-color: #d4d4d4; color: #d4d4d4;}
    .grey84 {background-color: #d6d6d6; color: #d6d6d6;}
    .grey85 {background-color: #d9d9d9; color: #d9d9d9;}
    .grey86 {background-color: #dbdbdb; color: #dbdbdb;}
    .grey87 {background-color: #dedede; color: #dedede;}
    .grey88 {background-color: #e0e0e0; color: #e0e0e0;}
    .grey89 {background-color: #e3e3e3; color: #e3e3e3;}
    .grey90 {background-color: #e5e5e5; color: #e5e5e5;}
    .grey91 {background-color: #e8e8e8; color: #e8e8e8;}
    .grey92 {background-color: #ebebeb; color: #ebebeb;}
    .grey93 {background-color: #ededed; color: #ededed;}
    .grey94 {background-color: #f0f0f0; color: #f0f0f0;}
    .grey95 {background-color: #f2f2f2; color: #f2f2f2;}
    .grey96 {background-color: #f5f5f5; color: #f5f5f5;}
    .grey97 {background-color: #f7f7f7; color: #f7f7f7;}
    .grey98 {background-color: #fafafa; color: #fafafa;}
    .grey99 {background-color: #fcfcfc; color: #fcfcfc;}
    .grey100 {background-color: #ffffff; color: #ffffff;}
    .honeydew {background-color: #f0fff0; color: #f0fff0;}
    .honeydew1 {background-color: #f0fff0; color: #f0fff0;}
    .honeydew2 {background-color: #e0eee0; color: #e0eee0;}
    .honeydew3 {background-color: #c1cdc1; color: #c1cdc1;}
    .honeydew4 {background-color: #838b83; color: #838b83;}
    .hotpink {background-color: #ff69b4; color: #ff69b4;}
    .hotpink1 {background-color: #ff6eb4; color: #ff6eb4;}
    .hotpink2 {background-color: #ee6aa7; color: #ee6aa7;}
    .hotpink3 {background-color: #cd6090; color: #cd6090;}
    .hotpink4 {background-color: #8b3a62; color: #8b3a62;}
    .indianred {background-color: #cd5c5c; color: #cd5c5c;}
    .indianred1 {background-color: #ff6a6a; color: #ff6a6a;}
    .indianred2 {background-color: #ee6363; color: #ee6363;}
    .indianred3 {background-color: #cd5555; color: #cd5555;}
    .indianred4 {background-color: #8b3a3a; color: #8b3a3a;}
    .indigo {background-color: #4b0082; color: #4b0082;}
    .ivory {background-color: #fffff0; color: #fffff0;}
    .ivory1 {background-color: #fffff0; color: #fffff0;}
    .ivory2 {background-color: #eeeee0; color: #eeeee0;}
    .ivory3 {background-color: #cdcdc1; color: #cdcdc1;}
    .ivory4 {background-color: #8b8b83; color: #8b8b83;}
    .khaki {background-color: #f0e68c; color: #f0e68c;}
    .khaki1 {background-color: #fff68f; color: #fff68f;}
    .khaki2 {background-color: #eee685; color: #eee685;}
    .khaki3 {background-color: #cdc673; color: #cdc673;}
    .khaki4 {background-color: #8b864e; color: #8b864e;}
    .lavender {background-color: #e6e6fa; color: #e6e6fa;}
    .lavenderblush {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush1 {background-color: #fff0f5; color: #fff0f5;}
    .lavenderblush2 {background-color: #eee0e5; color: #eee0e5;}
    .lavenderblush3 {background-color: #cdc1c5; color: #cdc1c5;}
    .lavenderblush4 {background-color: #8b8386; color: #8b8386;}
    .lawngreen {background-color: #7cfc00; color: #7cfc00;}
    .lemonchiffon {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon1 {background-color: #fffacd; color: #fffacd;}
    .lemonchiffon2 {background-color: #eee9bf; color: #eee9bf;}
    .lemonchiffon3 {background-color: #cdc9a5; color: #cdc9a5;}
    .lemonchiffon4 {background-color: #8b8970; color: #8b8970;}
    .lightblue {background-color: #add8e6; color: #add8e6;}
    .lightblue1 {background-color: #bfefff; color: #bfefff;}
    .lightblue2 {background-color: #b2dfee; color: #b2dfee;}
    .lightblue3 {background-color: #9ac0cd; color: #9ac0cd;}
    .lightblue4 {background-color: #68838b; color: #68838b;}
    .lightcoral {background-color: #f08080; color: #f08080;}
    .lightcyan {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan1 {background-color: #e0ffff; color: #e0ffff;}
    .lightcyan2 {background-color: #d1eeee; color: #d1eeee;}
    .lightcyan3 {background-color: #b4cdcd; color: #b4cdcd;}
    .lightcyan4 {background-color: #7a8b8b; color: #7a8b8b;}
    .lightgoldenrod {background-color: #eedd82; color: #eedd82;}
    .lightgoldenrod1 {background-color: #ffec8b; color: #ffec8b;}
    .lightgoldenrod2 {background-color: #eedc82; color: #eedc82;}
    .lightgoldenrod3 {background-color: #cdbe70; color: #cdbe70;}
    .lightgoldenrod4 {background-color: #8b814c; color: #8b814c;}
    .lightgoldenrodyellow {background-color: #fafad2; color: #fafad2;}
    .lightgray {background-color: #d3d3d3; color: #d3d3d3;}
    .lightgreen {background-color: #90ee90; color: #90ee90;}
    .lightgrey {background-color: #d3d3d3; color: #d3d3d3;}
    .lightpink {background-color: #ffb6c1; color: #ffb6c1;}
    .lightpink1 {background-color: #ffaeb9; color: #ffaeb9;}
    .lightpink2 {background-color: #eea2ad; color: #eea2ad;}
    .lightpink3 {background-color: #cd8c95; color: #cd8c95;}
    .lightpink4 {background-color: #8b5f65; color: #8b5f65;}
    .lightsalmon {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon1 {background-color: #ffa07a; color: #ffa07a;}
    .lightsalmon2 {background-color: #ee9572; color: #ee9572;}
    .lightsalmon3 {background-color: #cd8162; color: #cd8162;}
    .lightsalmon4 {background-color: #8b5742; color: #8b5742;}
    .lightseagreen {background-color: #20b2aa; color: #20b2aa;}
    .lightskyblue {background-color: #87cefa; color: #87cefa;}
    .lightskyblue1 {background-color: #b0e2ff; color: #b0e2ff;}
    .lightskyblue2 {background-color: #a4d3ee; color: #a4d3ee;}
    .lightskyblue3 {background-color: #8db6cd; color: #8db6cd;}
    .lightskyblue4 {background-color: #607b8b; color: #607b8b;}
    .lightslateblue {background-color: #8470ff; color: #8470ff;}
    .lightslategray {background-color: #778899; color: #778899;}
    .lightslategrey {background-color: #778899; color: #778899;}
    .lightsteelblue {background-color: #b0c4de; color: #b0c4de;}
    .lightsteelblue1 {background-color: #cae1ff; color: #cae1ff;}
    .lightsteelblue2 {background-color: #bcd2ee; color: #bcd2ee;}
    .lightsteelblue3 {background-color: #a2b5cd; color: #a2b5cd;}
    .lightsteelblue4 {background-color: #6e7b8b; color: #6e7b8b;}
    .lightyellow {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow1 {background-color: #ffffe0; color: #ffffe0;}
    .lightyellow2 {background-color: #eeeed1; color: #eeeed1;}
    .lightyellow3 {background-color: #cdcdb4; color: #cdcdb4;}
    .lightyellow4 {background-color: #8b8b7a; color: #8b8b7a;}
    .linen {background-color: #faf0e6; color: #faf0e6;}
    .limegreen {background-color: #32cd32; color: #32cd32;}
    .lime {background-color: #00ff00; color: #00ff00;}
    .magenta {background-color: #ff00ff; color: #ff00ff;}
    .magenta1 {background-color: #ff00ff; color: #ff00ff;}
    .magenta2 {background-color: #ee00ee; color: #ee00ee;}
    .magenta3 {background-color: #cd00cd; color: #cd00cd;}
    .magenta4 {background-color: #8b008b; color: #8b008b;}
    .maroon {background-color: #b03060; color: #b03060;}
    .maroon1 {background-color: #ff34b3; color: #ff34b3;}
    .maroon2 {background-color: #ee30a7; color: #ee30a7;}
    .maroon3 {background-color: #cd2990; color: #cd2990;}
    .maroon4 {background-color: #8b1c62; color: #8b1c62;}
    .mediumaquamarine {background-color: #66cdaa; color: #66cdaa;}
    .mediumblue {background-color: #0000cd; color: #0000cd;}
    .mediumorchid {background-color: #ba55d3; color: #ba55d3;}
    .mediumorchid1 {background-color: #e066ff; color: #e066ff;}
    .mediumorchid2 {background-color: #d15fee; color: #d15fee;}
    .mediumorchid3 {background-color: #b452cd; color: #b452cd;}
    .mediumorchid4 {background-color: #7a378b; color: #7a378b;}
    .mediumpurple {background-color: #9370db; color: #9370db;}
    .mediumpurple1 {background-color: #ab82ff; color: #ab82ff;}
    .mediumpurple2 {background-color: #9f79ee; color: #9f79ee;}
    .mediumpurple3 {background-color: #8968cd; color: #8968cd;}
    .mediumpurple4 {background-color: #5d478b; color: #5d478b;}
    .mediumseagreen {background-color: #3cb371; color: #3cb371;}
    .mediumslateblue {background-color: #7b68ee; color: #7b68ee;}
    .mediumspringgreen {background-color: #00fa9a; color: #00fa9a;}
    .mediumturquoise {background-color: #48d1cc; color: #48d1cc;}
    .mediumvioletred {background-color: #c71585; color: #c71585;}
    .midnightblue {background-color: #191970; color: #191970;}
    .mintcream {background-color: #f5fffa; color: #f5fffa;}
    .mistyrose {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose1 {background-color: #ffe4e1; color: #ffe4e1;}
    .mistyrose2 {background-color: #eed5d2; color: #eed5d2;}
    .mistyrose3 {background-color: #cdb7b5; color: #cdb7b5;}
    .mistyrose4 {background-color: #8b7d7b; color: #8b7d7b;}
    .moccasin {background-color: #ffe4b5; color: #ffe4b5;}
    .navajowhite {background-color: #ffdead; color: #ffdead;}
    .navajowhite1 {background-color: #ffdead; color: #ffdead;}
    .navajowhite2 {background-color: #eecfa1; color: #eecfa1;}
    .navajowhite3 {background-color: #cdb38b; color: #cdb38b;}
    .navajowhite4 {background-color: #8b795e; color: #8b795e;}
    .navy {background-color: #000080; color: #000080;}
    .navyblue {background-color: #000080; color: #000080;}
    .oldlace {background-color: #fdf5e6; color: #fdf5e6;}
    .olive {background-color: #808000; color: #808000;}
    .olivedrab {background-color: #6b8e23; color: #6b8e23;}
    .olivedrab1 {background-color: #c0ff3e; color: #c0ff3e;}
    .olivedrab2 {background-color: #b3ee3a; color: #b3ee3a;}
    .olivedrab3 {background-color: #9acd32; color: #9acd32;}
    .olivedrab4 {background-color: #698b22; color: #698b22;}
    .orange {background-color: #ffa500; color: #ffa500;}
    .orange1 {background-color: #ffa500; color: #ffa500;}
    .orange2 {background-color: #ee9a00; color: #ee9a00;}
    .orange3 {background-color: #cd8500; color: #cd8500;}
    .orange4 {background-color: #8b5a00; color: #8b5a00;}
    .orangered {background-color: #ff4500; color: #ff4500;}
    .orangered1 {background-color: #ff4500; color: #ff4500;}
    .orangered2 {background-color: #ee4000; color: #ee4000;}
    .orangered3 {background-color: #cd3700; color: #cd3700;}
    .orangered4 {background-color: #8b2500; color: #8b2500;}
    .orchid {background-color: #da70d6; color: #da70d6;}
    .orchid1 {background-color: #ff83fa; color: #ff83fa;}
    .orchid2 {background-color: #ee7ae9; color: #ee7ae9;}
    .orchid3 {background-color: #cd69c9; color: #cd69c9;}
    .orchid4 {background-color: #8b4789; color: #8b4789;}
    .palegreen {background-color: #98fb98; color: #98fb98;}
    .palegreen1 {background-color: #9aff9a; color: #9aff9a;}
    .palegreen2 {background-color: #90ee90; color: #90ee90;}
    .palegreen3 {background-color: #7ccd7c; color: #7ccd7c;}
    .palegreen4 {background-color: #548b54; color: #548b54;}
    .palegoldenrod {background-color: #eee8aa; color: #eee8aa;}
    .paleturquoise {background-color: #afeeee; color: #afeeee;}
    .paleturquoise1 {background-color: #bbffff; color: #bbffff;}
    .paleturquoise2 {background-color: #aeeeee; color: #aeeeee;}
    .paleturquoise3 {background-color: #96cdcd; color: #96cdcd;}
    .paleturquoise4 {background-color: #668b8b; color: #668b8b;}
    .palevioletred {background-color: #db7093; color: #db7093;}
    .palevioletred1 {background-color: #ff82ab; color: #ff82ab;}
    .palevioletred2 {background-color: #ee799f; color: #ee799f;}
    .palevioletred3 {background-color: #cd6889; color: #cd6889;}
    .palevioletred4 {background-color: #8b475d; color: #8b475d;}
    .papayawhip {background-color: #ffefd5; color: #ffefd5;}
    .peachpuff {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff1 {background-color: #ffdab9; color: #ffdab9;}
    .peachpuff2 {background-color: #eecbad; color: #eecbad;}
    .peachpuff3 {background-color: #cdaf95; color: #cdaf95;}
    .peachpuff4 {background-color: #8b7765; color: #8b7765;}
    .peru {background-color: #cd853f; color: #cd853f;}
    .pink {background-color: #ffc0cb; color: #ffc0cb;}
    .pink1 {background-color: #ffb5c5; color: #ffb5c5;}
    .pink2 {background-color: #eea9b8; color: #eea9b8;}
    .pink3 {background-color: #cd919e; color: #cd919e;}
    .pink4 {background-color: #8b636c; color: #8b636c;}
    .plum {background-color: #dda0dd; color: #dda0dd;}
    .plum1 {background-color: #ffbbff; color: #ffbbff;}
    .plum2 {background-color: #eeaeee; color: #eeaeee;}
    .plum3 {background-color: #cd96cd; color: #cd96cd;}
    .plum4 {background-color: #8b668b; color: #8b668b;}
    .powderblue {background-color: #b0e0e6; color: #b0e0e6;}
    .purple {background-color: #a020f0; color: #a020f0;}
    .purple1 {background-color: #9b30ff; color: #9b30ff;}
    .purple2 {background-color: #912cee; color: #912cee;}
    .purple3 {background-color: #7d26cd; color: #7d26cd;}
    .purple4 {background-color: #551a8b; color: #551a8b;}
    .red {background-color: #ff0000; color: #ff0000;}
    .red1 {background-color: #ff0000; color: #ff0000;}
    .red2 {background-color: #ee0000; color: #ee0000;}
    .red3 {background-color: #cd0000; color: #cd0000;}
    .red4 {background-color: #8b0000; color: #8b0000;}
    .rosybrown {background-color: #bc8f8f; color: #bc8f8f;}
    .rosybrown1 {background-color: #ffc1c1; color: #ffc1c1;}
    .rosybrown2 {background-color: #eeb4b4; color: #eeb4b4;}
    .rosybrown3 {background-color: #cd9b9b; color: #cd9b9b;}
    .rosybrown4 {background-color: #8b6969; color: #8b6969;}
    .royalblue {background-color: #4169e1; color: #4169e1;}
    .royalblue1 {background-color: #4876ff; color: #4876ff;}
    .royalblue2 {background-color: #436eee; color: #436eee;}
    .royalblue3 {background-color: #3a5fcd; color: #3a5fcd;}
    .royalblue4 {background-color: #27408b; color: #27408b;}
    .salmon {background-color: #fa8072; color: #fa8072;}
    .salmon1 {background-color: #ff8c69; color: #ff8c69;}
    .salmon2 {background-color: #ee8262; color: #ee8262;}
    .salmon3 {background-color: #cd7054; color: #cd7054;}
    .salmon4 {background-color: #8b4c39; color: #8b4c39;}
    .saddlebrown {background-color: #8b4513; color: #8b4513;}
    .sandybrown {background-color: #f4a460; color: #f4a460;}
    .seagreen {background-color: #2e8b57; color: #2e8b57;}
    .seagreen1 {background-color: #54ff9f; color: #54ff9f;}
    .seagreen2 {background-color: #4eee94; color: #4eee94;}
    .seagreen3 {background-color: #43cd80; color: #43cd80;}
    .seagreen4 {background-color: #2e8b57; color: #2e8b57;}
    .seashell {background-color: #fff5ee; color: #fff5ee;}
    .seashell1 {background-color: #fff5ee; color: #fff5ee;}
    .seashell2 {background-color: #eee5de; color: #eee5de;}
    .seashell3 {background-color: #cdc5bf; color: #cdc5bf;}
    .seashell4 {background-color: #8b8682; color: #8b8682;}
    .sienna {background-color: #a0522d; color: #a0522d;}
    .sienna1 {background-color: #ff8247; color: #ff8247;}
    .sienna2 {background-color: #ee7942; color: #ee7942;}
    .sienna3 {background-color: #cd6839; color: #cd6839;}
    .sienna4 {background-color: #8b4726; color: #8b4726;}
    .silver {background-color: #c0c0c0; color: #c0c0c0;}
    .skyblue {background-color: #87ceeb; color: #87ceeb;}
    .skyblue1 {background-color: #87ceff; color: #87ceff;}
    .skyblue2 {background-color: #7ec0ee; color: #7ec0ee;}
    .skyblue3 {background-color: #6ca6cd; color: #6ca6cd;}
    .skyblue4 {background-color: #4a708b; color: #4a708b;}
    .slateblue {background-color: #6a5acd; color: #6a5acd;}
    .slateblue1 {background-color: #836fff; color: #836fff;}
    .slateblue2 {background-color: #7a67ee; color: #7a67ee;}
    .slateblue3 {background-color: #6959cd; color: #6959cd;}
    .slateblue4 {background-color: #473c8b; color: #473c8b;}
    .slategray {background-color: #708090; color: #708090;}
    .slategray1 {background-color: #c6e2ff; color: #c6e2ff;}
    .slategray2 {background-color: #b9d3ee; color: #b9d3ee;}
    .slategray3 {background-color: #9fb6cd; color: #9fb6cd;}
    .slategray4 {background-color: #6c7b8b; color: #6c7b8b;}
    .slategrey {background-color: #708090; color: #708090;}
    .snow {background-color: #fffafa; color: #fffafa;}
    .snow1 {background-color: #fffafa; color: #fffafa;}
    .snow2 {background-color: #eee9e9; color: #eee9e9;}
    .snow3 {background-color: #cdc9c9; color: #cdc9c9;}
    .snow4 {background-color: #8b8989; color: #8b8989;}
    .springgreen {background-color: #00ff7f; color: #00ff7f;}
    .springgreen1 {background-color: #00ff7f; color: #00ff7f;}
    .springgreen2 {background-color: #00ee76; color: #00ee76;}
    .springgreen3 {background-color: #00cd66; color: #00cd66;}
    .springgreen4 {background-color: #008b45; color: #008b45;}
    .steelblue {background-color: #4682b4; color: #4682b4;}
    .steelblue1 {background-color: #63b8ff; color: #63b8ff;}
    .steelblue2 {background-color: #5cacee; color: #5cacee;}
    .steelblue3 {background-color: #4f94cd; color: #4f94cd;}
    .steelblue4 {background-color: #36648b; color: #36648b;}
    .tan {background-color: #d2b48c; color: #d2b48c;}
    .tan1 {background-color: #ffa54f; color: #ffa54f;}
    .tan2 {background-color: #ee9a49; color: #ee9a49;}
    .tan3 {background-color: #cd853f; color: #cd853f;}
    .tan4 {background-color: #8b5a2b; color: #8b5a2b;}
    .teal {background-color: #008080; color: #008080;}
    .thistle {background-color: #d8bfd8; color: #d8bfd8;}
    .thistle1 {background-color: #ffe1ff; color: #ffe1ff;}
    .thistle2 {background-color: #eed2ee; color: #eed2ee;}
    .thistle3 {background-color: #cdb5cd; color: #cdb5cd;}
    .thistle4 {background-color: #8b7b8b; color: #8b7b8b;}
    .tomato {background-color: #ff6347; color: #ff6347;}
    .tomato1 {background-color: #ff6347; color: #ff6347;}
    .tomato2 {background-color: #ee5c42; color: #ee5c42;}
    .tomato3 {background-color: #cd4f39; color: #cd4f39;}
    .tomato4 {background-color: #8b3626; color: #8b3626;}
    .turquoise {background-color: #40e0d0; color: #40e0d0;}
    .turquoise1 {background-color: #00f5ff; color: #00f5ff;}
    .turquoise2 {background-color: #00e5ee; color: #00e5ee;}
    .turquoise3 {background-color: #00c5cd; color: #00c5cd;}
    .turquoise4 {background-color: #00868b; color: #00868b;}
    .violet {background-color: #ee82ee; color: #ee82ee;}
    .violetred {background-color: #d02090; color: #d02090;}
    .violetred1 {background-color: #ff3e96; color: #ff3e96;}
    .violetred2 {background-color: #ee3a8c; color: #ee3a8c;}
    .violetred3 {background-color: #cd3278; color: #cd3278;}
    .violetred4 {background-color: #8b2252; color: #8b2252;}
    .wheat {background-color: #f5deb3; color: #f5deb3;}
    .wheat1 {background-color: #ffe7ba; color: #ffe7ba;}
    .wheat2 {background-color: #eed8ae; color: #eed8ae;}
    .wheat3 {background-color: #cdba96; color: #cdba96;}
    .wheat4 {background-color: #8b7e66; color: #8b7e66;}
    .white {background-color: #ffffff; color: #ffffff;}
    .whitesmoke {background-color: #f5f5f5; color: #f5f5f5;}
    .yellow {background-color: #ffff00; color: #ffff00;}
    .yellow1 {background-color: #ffff00; color: #ffff00;}
    .yellow2 {background-color: #eeee00; color: #eeee00;}
    .yellow3 {background-color: #cdcd00; color: #cdcd00;}
    .yellow4 {background-color: #8b8b00; color: #8b8b00;}
    .yellowgreen {background-color: #9acd32; color: #9acd32;}
    </style>

:doc:`color` lets you specify any of these named colors when creating a new
``pygame.Color`` (taken from the
`colordict module <https://github.com/pygame/pygame/blob/main/src_py/colordict.py>`_).

.. role:: aliceblue
.. role:: antiquewhite
.. role:: antiquewhite1
.. role:: antiquewhite2
.. role:: antiquewhite3
.. role:: antiquewhite4
.. role:: aqua
.. role:: aquamarine
.. role:: aquamarine1
.. role:: aquamarine2
.. role:: aquamarine3
.. role:: aquamarine4
.. role:: azure
.. role:: azure1
.. role:: azure2
.. role:: azure3
.. role:: azure4
.. role:: beige
.. role:: bisque
.. role:: bisque1
.. role:: bisque2
.. role:: bisque3
.. role:: bisque4
.. role:: black
.. role:: blanchedalmond
.. role:: blue
.. role:: blue1
.. role:: blue2
.. role:: blue3
.. role:: blue4
.. role:: blueviolet
.. role:: brown
.. role:: brown1
.. role:: brown2
.. role:: brown3
.. role:: brown4
.. role:: burlywood
.. role:: burlywood1
.. role:: burlywood2
.. role:: burlywood3
.. role:: burlywood4
.. role:: cadetblue
.. role:: cadetblue1
.. role:: cadetblue2
.. role:: cadetblue3
.. role:: cadetblue4
.. role:: chartreuse
.. role:: chartreuse1
.. role:: chartreuse2
.. role:: chartreuse3
.. role:: chartreuse4
.. role:: chocolate
.. role:: chocolate1
.. role:: chocolate2
.. role:: chocolate3
.. role:: chocolate4
.. role:: coral
.. role:: coral1
.. role:: coral2
.. role:: coral3
.. role:: coral4
.. role:: cornflowerblue
.. role:: cornsilk
.. role:: cornsilk1
.. role:: cornsilk2
.. role:: cornsilk3
.. role:: cornsilk4
.. role:: crimson
.. role:: cyan
.. role:: cyan1
.. role:: cyan2
.. role:: cyan3
.. role:: cyan4
.. role:: darkblue
.. role:: darkcyan
.. role:: darkgoldenrod
.. role:: darkgoldenrod1
.. role:: darkgoldenrod2
.. role:: darkgoldenrod3
.. role:: darkgoldenrod4
.. role:: darkgray
.. role:: darkgreen
.. role:: darkgrey
.. role:: darkkhaki
.. role:: darkmagenta
.. role:: darkolivegreen
.. role:: darkolivegreen1
.. role:: darkolivegreen2
.. role:: darkolivegreen3
.. role:: darkolivegreen4
.. role:: darkorange
.. role:: darkorange1
.. role:: darkorange2
.. role:: darkorange3
.. role:: darkorange4
.. role:: darkorchid
.. role:: darkorchid1
.. role:: darkorchid2
.. role:: darkorchid3
.. role:: darkorchid4
.. role:: darkred
.. role:: darksalmon
.. role:: darkseagreen
.. role:: darkseagreen1
.. role:: darkseagreen2
.. role:: darkseagreen3
.. role:: darkseagreen4
.. role:: darkslateblue
.. role:: darkslategray
.. role:: darkslategray1
.. role:: darkslategray2
.. role:: darkslategray3
.. role:: darkslategray4
.. role:: darkslategrey
.. role:: darkturquoise
.. role:: darkviolet
.. role:: deeppink
.. role:: deeppink1
.. role:: deeppink2
.. role:: deeppink3
.. role:: deeppink4
.. role:: deepskyblue
.. role:: deepskyblue1
.. role:: deepskyblue2
.. role:: deepskyblue3
.. role:: deepskyblue4
.. role:: dimgray
.. role:: dimgrey
.. role:: dodgerblue
.. role:: dodgerblue1
.. role:: dodgerblue2
.. role:: dodgerblue3
.. role:: dodgerblue4
.. role:: firebrick
.. role:: firebrick1
.. role:: firebrick2
.. role:: firebrick3
.. role:: firebrick4
.. role:: floralwhite
.. role:: forestgreen
.. role:: fuchsia
.. role:: gainsboro
.. role:: ghostwhite
.. role:: gold
.. role:: gold1
.. role:: gold2
.. role:: gold3
.. role:: gold4
.. role:: goldenrod
.. role:: goldenrod1
.. role:: goldenrod2
.. role:: goldenrod3
.. role:: goldenrod4
.. role:: gray
.. role:: gray0
.. role:: gray1
.. role:: gray2
.. role:: gray3
.. role:: gray4
.. role:: gray5
.. role:: gray6
.. role:: gray7
.. role:: gray8
.. role:: gray9
.. role:: gray10
.. role:: gray11
.. role:: gray12
.. role:: gray13
.. role:: gray14
.. role:: gray15
.. role:: gray16
.. role:: gray17
.. role:: gray18
.. role:: gray19
.. role:: gray20
.. role:: gray21
.. role:: gray22
.. role:: gray23
.. role:: gray24
.. role:: gray25
.. role:: gray26
.. role:: gray27
.. role:: gray28
.. role:: gray29
.. role:: gray30
.. role:: gray31
.. role:: gray32
.. role:: gray33
.. role:: gray34
.. role:: gray35
.. role:: gray36
.. role:: gray37
.. role:: gray38
.. role:: gray39
.. role:: gray40
.. role:: gray41
.. role:: gray42
.. role:: gray43
.. role:: gray44
.. role:: gray45
.. role:: gray46
.. role:: gray47
.. role:: gray48
.. role:: gray49
.. role:: gray50
.. role:: gray51
.. role:: gray52
.. role:: gray53
.. role:: gray54
.. role:: gray55
.. role:: gray56
.. role:: gray57
.. role:: gray58
.. role:: gray59
.. role:: gray60
.. role:: gray61
.. role:: gray62
.. role:: gray63
.. role:: gray64
.. role:: gray65
.. role:: gray66
.. role:: gray67
.. role:: gray68
.. role:: gray69
.. role:: gray70
.. role:: gray71
.. role:: gray72
.. role:: gray73
.. role:: gray74
.. role:: gray75
.. role:: gray76
.. role:: gray77
.. role:: gray78
.. role:: gray79
.. role:: gray80
.. role:: gray81
.. role:: gray82
.. role:: gray83
.. role:: gray84
.. role:: gray85
.. role:: gray86
.. role:: gray87
.. role:: gray88
.. role:: gray89
.. role:: gray90
.. role:: gray91
.. role:: gray92
.. role:: gray93
.. role:: gray94
.. role:: gray95
.. role:: gray96
.. role:: gray97
.. role:: gray98
.. role:: gray99
.. role:: gray100
.. role:: green
.. role:: green1
.. role:: green2
.. role:: green3
.. role:: green4
.. role:: greenyellow
.. role:: grey
.. role:: grey0
.. role:: grey1
.. role:: grey2
.. role:: grey3
.. role:: grey4
.. role:: grey5
.. role:: grey6
.. role:: grey7
.. role:: grey8
.. role:: grey9
.. role:: grey10
.. role:: grey11
.. role:: grey12
.. role:: grey13
.. role:: grey14
.. role:: grey15
.. role:: grey16
.. role:: grey17
.. role:: grey18
.. role:: grey19
.. role:: grey20
.. role:: grey21
.. role:: grey22
.. role:: grey23
.. role:: grey24
.. role:: grey25
.. role:: grey26
.. role:: grey27
.. role:: grey28
.. role:: grey29
.. role:: grey30
.. role:: grey31
.. role:: grey32
.. role:: grey33
.. role:: grey34
.. role:: grey35
.. role:: grey36
.. role:: grey37
.. role:: grey38
.. role:: grey39
.. role:: grey40
.. role:: grey41
.. role:: grey42
.. role:: grey43
.. role:: grey44
.. role:: grey45
.. role:: grey46
.. role:: grey47
.. role:: grey48
.. role:: grey49
.. role:: grey50
.. role:: grey51
.. role:: grey52
.. role:: grey53
.. role:: grey54
.. role:: grey55
.. role:: grey56
.. role:: grey57
.. role:: grey58
.. role:: grey59
.. role:: grey60
.. role:: grey61
.. role:: grey62
.. role:: grey63
.. role:: grey64
.. role:: grey65
.. role:: grey66
.. role:: grey67
.. role:: grey68
.. role:: grey69
.. role:: grey70
.. role:: grey71
.. role:: grey72
.. role:: grey73
.. role:: grey74
.. role:: grey75
.. role:: grey76
.. role:: grey77
.. role:: grey78
.. role:: grey79
.. role:: grey80
.. role:: grey81
.. role:: grey82
.. role:: grey83
.. role:: grey84
.. role:: grey85
.. role:: grey86
.. role:: grey87
.. role:: grey88
.. role:: grey89
.. role:: grey90
.. role:: grey91
.. role:: grey92
.. role:: grey93
.. role:: grey94
.. role:: grey95
.. role:: grey96
.. role:: grey97
.. role:: grey98
.. role:: grey99
.. role:: grey100
.. role:: honeydew
.. role:: honeydew1
.. role:: honeydew2
.. role:: honeydew3
.. role:: honeydew4
.. role:: hotpink
.. role:: hotpink1
.. role:: hotpink2
.. role:: hotpink3
.. role:: hotpink4
.. role:: indianred
.. role:: indianred1
.. role:: indianred2
.. role:: indianred3
.. role:: indianred4
.. role:: indigo
.. role:: ivory
.. role:: ivory1
.. role:: ivory2
.. role:: ivory3
.. role:: ivory4
.. role:: khaki
.. role:: khaki1
.. role:: khaki2
.. role:: khaki3
.. role:: khaki4
.. role:: lavender
.. role:: lavenderblush
.. role:: lavenderblush1
.. role:: lavenderblush2
.. role:: lavenderblush3
.. role:: lavenderblush4
.. role:: lawngreen
.. role:: lemonchiffon
.. role:: lemonchiffon1
.. role:: lemonchiffon2
.. role:: lemonchiffon3
.. role:: lemonchiffon4
.. role:: lightblue
.. role:: lightblue1
.. role:: lightblue2
.. role:: lightblue3
.. role:: lightblue4
.. role:: lightcoral
.. role:: lightcyan
.. role:: lightcyan1
.. role:: lightcyan2
.. role:: lightcyan3
.. role:: lightcyan4
.. role:: lightgoldenrod
.. role:: lightgoldenrod1
.. role:: lightgoldenrod2
.. role:: lightgoldenrod3
.. role:: lightgoldenrod4
.. role:: lightgoldenrodyellow
.. role:: lightgray
.. role:: lightgreen
.. role:: lightgrey
.. role:: lightpink
.. role:: lightpink1
.. role:: lightpink2
.. role:: lightpink3
.. role:: lightpink4
.. role:: lightsalmon
.. role:: lightsalmon1
.. role:: lightsalmon2
.. role:: lightsalmon3
.. role:: lightsalmon4
.. role:: lightseagreen
.. role:: lightskyblue
.. role:: lightskyblue1
.. role:: lightskyblue2
.. role:: lightskyblue3
.. role:: lightskyblue4
.. role:: lightslateblue
.. role:: lightslategray
.. role:: lightslategrey
.. role:: lightsteelblue
.. role:: lightsteelblue1
.. role:: lightsteelblue2
.. role:: lightsteelblue3
.. role:: lightsteelblue4
.. role:: lightyellow
.. role:: lightyellow1
.. role:: lightyellow2
.. role:: lightyellow3
.. role:: lightyellow4
.. role:: limegreen
.. role:: lime
.. role:: linen
.. role:: magenta
.. role:: magenta1
.. role:: magenta2
.. role:: magenta3
.. role:: magenta4
.. role:: maroon
.. role:: maroon1
.. role:: maroon2
.. role:: maroon3
.. role:: maroon4
.. role:: mediumaquamarine
.. role:: mediumblue
.. role:: mediumorchid
.. role:: mediumorchid1
.. role:: mediumorchid2
.. role:: mediumorchid3
.. role:: mediumorchid4
.. role:: mediumpurple
.. role:: mediumpurple1
.. role:: mediumpurple2
.. role:: mediumpurple3
.. role:: mediumpurple4
.. role:: mediumseagreen
.. role:: mediumslateblue
.. role:: mediumspringgreen
.. role:: mediumturquoise
.. role:: mediumvioletred
.. role:: midnightblue
.. role:: mintcream
.. role:: mistyrose
.. role:: mistyrose1
.. role:: mistyrose2
.. role:: mistyrose3
.. role:: mistyrose4
.. role:: moccasin
.. role:: navajowhite
.. role:: navajowhite1
.. role:: navajowhite2
.. role:: navajowhite3
.. role:: navajowhite4
.. role:: navy
.. role:: navyblue
.. role:: oldlace
.. role:: olive
.. role:: olivedrab
.. role:: olivedrab1
.. role:: olivedrab2
.. role:: olivedrab3
.. role:: olivedrab4
.. role:: orange
.. role:: orange1
.. role:: orange2
.. role:: orange3
.. role:: orange4
.. role:: orangered
.. role:: orangered1
.. role:: orangered2
.. role:: orangered3
.. role:: orangered4
.. role:: orchid
.. role:: orchid1
.. role:: orchid2
.. role:: orchid3
.. role:: orchid4
.. role:: palegoldenrod
.. role:: palegreen
.. role:: palegreen1
.. role:: palegreen2
.. role:: palegreen3
.. role:: palegreen4
.. role:: paleturquoise
.. role:: paleturquoise1
.. role:: paleturquoise2
.. role:: paleturquoise3
.. role:: paleturquoise4
.. role:: palevioletred
.. role:: palevioletred1
.. role:: palevioletred2
.. role:: palevioletred3
.. role:: palevioletred4
.. role:: papayawhip
.. role:: peachpuff
.. role:: peachpuff1
.. role:: peachpuff2
.. role:: peachpuff3
.. role:: peachpuff4
.. role:: peru
.. role:: pink
.. role:: pink1
.. role:: pink2
.. role:: pink3
.. role:: pink4
.. role:: plum
.. role:: plum1
.. role:: plum2
.. role:: plum3
.. role:: plum4
.. role:: powderblue
.. role:: purple
.. role:: purple1
.. role:: purple2
.. role:: purple3
.. role:: purple4
.. role:: red
.. role:: red1
.. role:: red2
.. role:: red3
.. role:: red4
.. role:: rosybrown
.. role:: rosybrown1
.. role:: rosybrown2
.. role:: rosybrown3
.. role:: rosybrown4
.. role:: royalblue
.. role:: royalblue1
.. role:: royalblue2
.. role:: royalblue3
.. role:: royalblue4
.. role:: saddlebrown
.. role:: salmon
.. role:: salmon1
.. role:: salmon2
.. role:: salmon3
.. role:: salmon4
.. role:: sandybrown
.. role:: seagreen
.. role:: seagreen1
.. role:: seagreen2
.. role:: seagreen3
.. role:: seagreen4
.. role:: seashell
.. role:: seashell1
.. role:: seashell2
.. role:: seashell3
.. role:: seashell4
.. role:: sienna
.. role:: sienna1
.. role:: sienna2
.. role:: sienna3
.. role:: sienna4
.. role:: silver
.. role:: skyblue
.. role:: skyblue1
.. role:: skyblue2
.. role:: skyblue3
.. role:: skyblue4
.. role:: slateblue
.. role:: slateblue1
.. role:: slateblue2
.. role:: slateblue3
.. role:: slateblue4
.. role:: slategray
.. role:: slategray1
.. role:: slategray2
.. role:: slategray3
.. role:: slategray4
.. role:: slategrey
.. role:: snow
.. role:: snow1
.. role:: snow2
.. role:: snow3
.. role:: snow4
.. role:: springgreen
.. role:: springgreen1
.. role:: springgreen2
.. role:: springgreen3
.. role:: springgreen4
.. role:: steelblue
.. role:: steelblue1
.. role:: steelblue2
.. role:: steelblue3
.. role:: steelblue4
.. role:: tan
.. role:: tan1
.. role:: tan2
.. role:: tan3
.. role:: tan4
.. role:: teal
.. role:: thistle
.. role:: thistle1
.. role:: thistle2
.. role:: thistle3
.. role:: thistle4
.. role:: tomato
.. role:: tomato1
.. role:: tomato2
.. role:: tomato3
.. role:: tomato4
.. role:: turquoise
.. role:: turquoise1
.. role:: turquoise2
.. role:: turquoise3
.. role:: turquoise4
.. role:: violet
.. role:: violetred
.. role:: violetred1
.. role:: violetred2
.. role:: violetred3
.. role:: violetred4
.. role:: wheat
.. role:: wheat1
.. role:: wheat2
.. role:: wheat3
.. role:: wheat4
.. role:: white
.. role:: whitesmoke
.. role:: yellow
.. role:: yellow1
.. role:: yellow2
.. role:: yellow3
.. role:: yellow4
.. role:: yellowgreen

==========================  ======================================================================================================
Name                        Color
==========================  ======================================================================================================
``aliceblue``               :aliceblue:`████████`
``antiquewhite``            :antiquewhite:`████████`
``antiquewhite1``           :antiquewhite1:`████████`
``antiquewhite2``           :antiquewhite2:`████████`
``antiquewhite3``           :antiquewhite3:`████████`
``antiquewhite4``           :antiquewhite4:`████████`
``aqua``                    :aqua:`████████`
``aquamarine``              :aquamarine:`████████`
``aquamarine1``             :aquamarine1:`████████`
``aquamarine2``             :aquamarine2:`████████`
``aquamarine3``             :aquamarine3:`████████`
``aquamarine4``             :aquamarine4:`████████`
``azure``                   :azure:`████████`
``azure1``                  :azure1:`████████`
``azure2``                  :azure2:`████████`
``azure3``                  :azure3:`████████`
``azure4``                  :azure4:`████████`
``beige``                   :beige:`████████`
``bisque``                  :bisque:`████████`
``bisque1``                 :bisque1:`████████`
``bisque2``                 :bisque2:`████████`
``bisque3``                 :bisque3:`████████`
``bisque4``                 :bisque4:`████████`
``black``                   :black:`████████`
``blanchedalmond``          :blanchedalmond:`████████`
``blue``                    :blue:`████████`
``blue1``                   :blue1:`████████`
``blue2``                   :blue2:`████████`
``blue3``                   :blue3:`████████`
``blue4``                   :blue4:`████████`
``blueviolet``              :blueviolet:`████████`
``brown``                   :brown:`████████`
``brown1``                  :brown1:`████████`
``brown2``                  :brown2:`████████`
``brown3``                  :brown3:`████████`
``brown4``                  :brown4:`████████`
``burlywood``               :burlywood:`████████`
``burlywood1``              :burlywood1:`████████`
``burlywood2``              :burlywood2:`████████`
``burlywood3``              :burlywood3:`████████`
``burlywood4``              :burlywood4:`████████`
``cadetblue``               :cadetblue:`████████`
``cadetblue1``              :cadetblue1:`████████`
``cadetblue2``              :cadetblue2:`████████`
``cadetblue3``              :cadetblue3:`████████`
``cadetblue4``              :cadetblue4:`████████`
``chartreuse``              :chartreuse:`████████`
``chartreuse1``             :chartreuse1:`████████`
``chartreuse2``             :chartreuse2:`████████`
``chartreuse3``             :chartreuse3:`████████`
``chartreuse4``             :chartreuse4:`████████`
``chocolate``               :chocolate:`████████`
``chocolate1``              :chocolate1:`████████`
``chocolate2``              :chocolate2:`████████`
``chocolate3``              :chocolate3:`████████`
``chocolate4``              :chocolate4:`████████`
``coral``                   :coral:`████████`
``coral1``                  :coral1:`████████`
``coral2``                  :coral2:`████████`
``coral3``                  :coral3:`████████`
``coral4``                  :coral4:`████████`
``cornflowerblue``          :cornflowerblue:`████████`
``cornsilk``                :cornsilk:`████████`
``cornsilk1``               :cornsilk1:`████████`
``cornsilk2``               :cornsilk2:`████████`
``cornsilk3``               :cornsilk3:`████████`
``cornsilk4``               :cornsilk4:`████████`
``crimson``                 :crimson:`████████`
``cyan``                    :cyan:`████████`
``cyan1``                   :cyan1:`████████`
``cyan2``                   :cyan2:`████████`
``cyan3``                   :cyan3:`████████`
``cyan4``                   :cyan4:`████████`
``darkblue``                :darkblue:`████████`
``darkcyan``                :darkcyan:`████████`
``darkgoldenrod``           :darkgoldenrod:`████████`
``darkgoldenrod1``          :darkgoldenrod1:`████████`
``darkgoldenrod2``          :darkgoldenrod2:`████████`
``darkgoldenrod3``          :darkgoldenrod3:`████████`
``darkgoldenrod4``          :darkgoldenrod4:`████████`
``darkgray``                :darkgray:`████████`
``darkgreen``               :darkgreen:`████████`
``darkgrey``                :darkgrey:`████████`
``darkkhaki``               :darkkhaki:`████████`
``darkmagenta``             :darkmagenta:`████████`
``darkolivegreen``          :darkolivegreen:`████████`
``darkolivegreen1``         :darkolivegreen1:`████████`
``darkolivegreen2``         :darkolivegreen2:`████████`
``darkolivegreen3``         :darkolivegreen3:`████████`
``darkolivegreen4``         :darkolivegreen4:`████████`
``darkorange``              :darkorange:`████████`
``darkorange1``             :darkorange1:`████████`
``darkorange2``             :darkorange2:`████████`
``darkorange3``             :darkorange3:`████████`
``darkorange4``             :darkorange4:`████████`
``darkorchid``              :darkorchid:`████████`
``darkorchid1``             :darkorchid1:`████████`
``darkorchid2``             :darkorchid2:`████████`
``darkorchid3``             :darkorchid3:`████████`
``darkorchid4``             :darkorchid4:`████████`
``darkred``                 :darkred:`████████`
``darksalmon``              :darksalmon:`████████`
``darkseagreen``            :darkseagreen:`████████`
``darkseagreen1``           :darkseagreen1:`████████`
``darkseagreen2``           :darkseagreen2:`████████`
``darkseagreen3``           :darkseagreen3:`████████`
``darkseagreen4``           :darkseagreen4:`████████`
``darkslateblue``           :darkslateblue:`████████`
``darkslategray``           :darkslategray:`████████`
``darkslategray1``          :darkslategray1:`████████`
``darkslategray2``          :darkslategray2:`████████`
``darkslategray3``          :darkslategray3:`████████`
``darkslategray4``          :darkslategray4:`████████`
``darkslategrey``           :darkslategrey:`████████`
``darkturquoise``           :darkturquoise:`████████`
``darkviolet``              :darkviolet:`████████`
``deeppink``                :deeppink:`████████`
``deeppink1``               :deeppink1:`████████`
``deeppink2``               :deeppink2:`████████`
``deeppink3``               :deeppink3:`████████`
``deeppink4``               :deeppink4:`████████`
``deepskyblue``             :deepskyblue:`████████`
``deepskyblue1``            :deepskyblue1:`████████`
``deepskyblue2``            :deepskyblue2:`████████`
``deepskyblue3``            :deepskyblue3:`████████`
``deepskyblue4``            :deepskyblue4:`████████`
``dimgray``                 :dimgray:`████████`
``dimgrey``                 :dimgrey:`████████`
``dodgerblue``              :dodgerblue:`████████`
``dodgerblue1``             :dodgerblue1:`████████`
``dodgerblue2``             :dodgerblue2:`████████`
``dodgerblue3``             :dodgerblue3:`████████`
``dodgerblue4``             :dodgerblue4:`████████`
``firebrick``               :firebrick:`████████`
``firebrick1``              :firebrick1:`████████`
``firebrick2``              :firebrick2:`████████`
``firebrick3``              :firebrick3:`████████`
``firebrick4``              :firebrick4:`████████`
``floralwhite``             :floralwhite:`████████`
``forestgreen``             :forestgreen:`████████`
``fuchsia``                 :fuchsia:`████████`
``gainsboro``               :gainsboro:`████████`
``ghostwhite``              :ghostwhite:`████████`
``gold``                    :gold:`████████`
``gold1``                   :gold1:`████████`
``gold2``                   :gold2:`████████`
``gold3``                   :gold3:`████████`
``gold4``                   :gold4:`████████`
``goldenrod``               :goldenrod:`████████`
``goldenrod1``              :goldenrod1:`████████`
``goldenrod2``              :goldenrod2:`████████`
``goldenrod3``              :goldenrod3:`████████`
``goldenrod4``              :goldenrod4:`████████`
``gray``                    :gray:`████████`
``gray0``                   :gray0:`████████`
``gray1``                   :gray1:`████████`
``gray2``                   :gray2:`████████`
``gray3``                   :gray3:`████████`
``gray4``                   :gray4:`████████`
``gray5``                   :gray5:`████████`
``gray6``                   :gray6:`████████`
``gray7``                   :gray7:`████████`
``gray8``                   :gray8:`████████`
``gray9``                   :gray9:`████████`
``gray10``                  :gray10:`████████`
``gray11``                  :gray11:`████████`
``gray12``                  :gray12:`████████`
``gray13``                  :gray13:`████████`
``gray14``                  :gray14:`████████`
``gray15``                  :gray15:`████████`
``gray16``                  :gray16:`████████`
``gray17``                  :gray17:`████████`
``gray18``                  :gray18:`████████`
``gray19``                  :gray19:`████████`
``gray20``                  :gray20:`████████`
``gray21``                  :gray21:`████████`
``gray22``                  :gray22:`████████`
``gray23``                  :gray23:`████████`
``gray24``                  :gray24:`████████`
``gray25``                  :gray25:`████████`
``gray26``                  :gray26:`████████`
``gray27``                  :gray27:`████████`
``gray28``                  :gray28:`████████`
``gray29``                  :gray29:`████████`
``gray30``                  :gray30:`████████`
``gray31``                  :gray31:`████████`
``gray32``                  :gray32:`████████`
``gray33``                  :gray33:`████████`
``gray34``                  :gray34:`████████`
``gray35``                  :gray35:`████████`
``gray36``                  :gray36:`████████`
``gray37``                  :gray37:`████████`
``gray38``                  :gray38:`████████`
``gray39``                  :gray39:`████████`
``gray40``                  :gray40:`████████`
``gray41``                  :gray41:`████████`
``gray42``                  :gray42:`████████`
``gray43``                  :gray43:`████████`
``gray44``                  :gray44:`████████`
``gray45``                  :gray45:`████████`
``gray46``                  :gray46:`████████`
``gray47``                  :gray47:`████████`
``gray48``                  :gray48:`████████`
``gray49``                  :gray49:`████████`
``gray50``                  :gray50:`████████`
``gray51``                  :gray51:`████████`
``gray52``                  :gray52:`████████`
``gray53``                  :gray53:`████████`
``gray54``                  :gray54:`████████`
``gray55``                  :gray55:`████████`
``gray56``                  :gray56:`████████`
``gray57``                  :gray57:`████████`
``gray58``                  :gray58:`████████`
``gray59``                  :gray59:`████████`
``gray60``                  :gray60:`████████`
``gray61``                  :gray61:`████████`
``gray62``                  :gray62:`████████`
``gray63``                  :gray63:`████████`
``gray64``                  :gray64:`████████`
``gray65``                  :gray65:`████████`
``gray66``                  :gray66:`████████`
``gray67``                  :gray67:`████████`
``gray68``                  :gray68:`████████`
``gray69``                  :gray69:`████████`
``gray70``                  :gray70:`████████`
``gray71``                  :gray71:`████████`
``gray72``                  :gray72:`████████`
``gray73``                  :gray73:`████████`
``gray74``                  :gray74:`████████`
``gray75``                  :gray75:`████████`
``gray76``                  :gray76:`████████`
``gray77``                  :gray77:`████████`
``gray78``                  :gray78:`████████`
``gray79``                  :gray79:`████████`
``gray80``                  :gray80:`████████`
``gray81``                  :gray81:`████████`
``gray82``                  :gray82:`████████`
``gray83``                  :gray83:`████████`
``gray84``                  :gray84:`████████`
``gray85``                  :gray85:`████████`
``gray86``                  :gray86:`████████`
``gray87``                  :gray87:`████████`
``gray88``                  :gray88:`████████`
``gray89``                  :gray89:`████████`
``gray90``                  :gray90:`████████`
``gray91``                  :gray91:`████████`
``gray92``                  :gray92:`████████`
``gray93``                  :gray93:`████████`
``gray94``                  :gray94:`████████`
``gray95``                  :gray95:`████████`
``gray96``                  :gray96:`████████`
``gray97``                  :gray97:`████████`
``gray98``                  :gray98:`████████`
``gray99``                  :gray99:`████████`
``gray100``                 :gray100:`████████`
``green``                   :green:`████████`
``green1``                  :green1:`████████`
``green2``                  :green2:`████████`
``green3``                  :green3:`████████`
``green4``                  :green4:`████████`
``greenyellow``             :greenyellow:`████████`
``grey``                    :grey:`████████`
``grey0``                   :grey0:`████████`
``grey1``                   :grey1:`████████`
``grey2``                   :grey2:`████████`
``grey3``                   :grey3:`████████`
``grey4``                   :grey4:`████████`
``grey5``                   :grey5:`████████`
``grey6``                   :grey6:`████████`
``grey7``                   :grey7:`████████`
``grey8``                   :grey8:`████████`
``grey9``                   :grey9:`████████`
``grey10``                  :grey10:`████████`
``grey11``                  :grey11:`████████`
``grey12``                  :grey12:`████████`
``grey13``                  :grey13:`████████`
``grey14``                  :grey14:`████████`
``grey15``                  :grey15:`████████`
``grey16``                  :grey16:`████████`
``grey17``                  :grey17:`████████`
``grey18``                  :grey18:`████████`
``grey19``                  :grey19:`████████`
``grey20``                  :grey20:`████████`
``grey21``                  :grey21:`████████`
``grey22``                  :grey22:`████████`
``grey23``                  :grey23:`████████`
``grey24``                  :grey24:`████████`
``grey25``                  :grey25:`████████`
``grey26``                  :grey26:`████████`
``grey27``                  :grey27:`████████`
``grey28``                  :grey28:`████████`
``grey29``                  :grey29:`████████`
``grey30``                  :grey30:`████████`
``grey31``                  :grey31:`████████`
``grey32``                  :grey32:`████████`
``grey33``                  :grey33:`████████`
``grey34``                  :grey34:`████████`
``grey35``                  :grey35:`████████`
``grey36``                  :grey36:`████████`
``grey37``                  :grey37:`████████`
``grey38``                  :grey38:`████████`
``grey39``                  :grey39:`████████`
``grey40``                  :grey40:`████████`
``grey41``                  :grey41:`████████`
``grey42``                  :grey42:`████████`
``grey43``                  :grey43:`████████`
``grey44``                  :grey44:`████████`
``grey45``                  :grey45:`████████`
``grey46``                  :grey46:`████████`
``grey47``                  :grey47:`████████`
``grey48``                  :grey48:`████████`
``grey49``                  :grey49:`████████`
``grey50``                  :grey50:`████████`
``grey51``                  :grey51:`████████`
``grey52``                  :grey52:`████████`
``grey53``                  :grey53:`████████`
``grey54``                  :grey54:`████████`
``grey55``                  :grey55:`████████`
``grey56``                  :grey56:`████████`
``grey57``                  :grey57:`████████`
``grey58``                  :grey58:`████████`
``grey59``                  :grey59:`████████`
``grey60``                  :grey60:`████████`
``grey61``                  :grey61:`████████`
``grey62``                  :grey62:`████████`
``grey63``                  :grey63:`████████`
``grey64``                  :grey64:`████████`
``grey65``                  :grey65:`████████`
``grey66``                  :grey66:`████████`
``grey67``                  :grey67:`████████`
``grey68``                  :grey68:`████████`
``grey69``                  :grey69:`████████`
``grey70``                  :grey70:`████████`
``grey71``                  :grey71:`████████`
``grey72``                  :grey72:`████████`
``grey73``                  :grey73:`████████`
``grey74``                  :grey74:`████████`
``grey75``                  :grey75:`████████`
``grey76``                  :grey76:`████████`
``grey77``                  :grey77:`████████`
``grey78``                  :grey78:`████████`
``grey79``                  :grey79:`████████`
``grey80``                  :grey80:`████████`
``grey81``                  :grey81:`████████`
``grey82``                  :grey82:`████████`
``grey83``                  :grey83:`████████`
``grey84``                  :grey84:`████████`
``grey85``                  :grey85:`████████`
``grey86``                  :grey86:`████████`
``grey87``                  :grey87:`████████`
``grey88``                  :grey88:`████████`
``grey89``                  :grey89:`████████`
``grey90``                  :grey90:`████████`
``grey91``                  :grey91:`████████`
``grey92``                  :grey92:`████████`
``grey93``                  :grey93:`████████`
``grey94``                  :grey94:`████████`
``grey95``                  :grey95:`████████`
``grey96``                  :grey96:`████████`
``grey97``                  :grey97:`████████`
``grey98``                  :grey98:`████████`
``grey99``                  :grey99:`████████`
``grey100``                 :grey100:`████████`
``honeydew``                :honeydew:`████████`
``honeydew1``               :honeydew1:`████████`
``honeydew2``               :honeydew2:`████████`
``honeydew3``               :honeydew3:`████████`
``honeydew4``               :honeydew4:`████████`
``hotpink``                 :hotpink:`████████`
``hotpink1``                :hotpink1:`████████`
``hotpink2``                :hotpink2:`████████`
``hotpink3``                :hotpink3:`████████`
``hotpink4``                :hotpink4:`████████`
``indianred``               :indianred:`████████`
``indianred1``              :indianred1:`████████`
``indianred2``              :indianred2:`████████`
``indianred3``              :indianred3:`████████`
``indianred4``              :indianred4:`████████`
``indigo``                  :indigo:`████████`
``ivory``                   :ivory:`████████`
``ivory1``                  :ivory1:`████████`
``ivory2``                  :ivory2:`████████`
``ivory3``                  :ivory3:`████████`
``ivory4``                  :ivory4:`████████`
``khaki``                   :khaki:`████████`
``khaki1``                  :khaki1:`████████`
``khaki2``                  :khaki2:`████████`
``khaki3``                  :khaki3:`████████`
``khaki4``                  :khaki4:`████████`
``lavender``                :lavender:`████████`
``lavenderblush``           :lavenderblush:`████████`
``lavenderblush1``          :lavenderblush1:`████████`
``lavenderblush2``          :lavenderblush2:`████████`
``lavenderblush3``          :lavenderblush3:`████████`
``lavenderblush4``          :lavenderblush4:`████████`
``lawngreen``               :lawngreen:`████████`
``lemonchiffon``            :lemonchiffon:`████████`
``lemonchiffon1``           :lemonchiffon1:`████████`
``lemonchiffon2``           :lemonchiffon2:`████████`
``lemonchiffon3``           :lemonchiffon3:`████████`
``lemonchiffon4``           :lemonchiffon4:`████████`
``lightblue``               :lightblue:`████████`
``lightblue1``              :lightblue1:`████████`
``lightblue2``              :lightblue2:`████████`
``lightblue3``              :lightblue3:`████████`
``lightblue4``              :lightblue4:`████████`
``lightcoral``              :lightcoral:`████████`
``lightcyan``               :lightcyan:`████████`
``lightcyan1``              :lightcyan1:`████████`
``lightcyan2``              :lightcyan2:`████████`
``lightcyan3``              :lightcyan3:`████████`
``lightcyan4``              :lightcyan4:`████████`
``lightgoldenrod``          :lightgoldenrod:`████████`
``lightgoldenrod1``         :lightgoldenrod1:`████████`
``lightgoldenrod2``         :lightgoldenrod2:`████████`
``lightgoldenrod3``         :lightgoldenrod3:`████████`
``lightgoldenrod4``         :lightgoldenrod4:`████████`
``lightgoldenrodyellow``    :lightgoldenrodyellow:`████████`
``lightgray``               :lightgray:`████████`
``lightgreen``              :lightgreen:`████████`
``lightgrey``               :lightgrey:`████████`
``lightpink``               :lightpink:`████████`
``lightpink1``              :lightpink1:`████████`
``lightpink2``              :lightpink2:`████████`
``lightpink3``              :lightpink3:`████████`
``lightpink4``              :lightpink4:`████████`
``lightsalmon``             :lightsalmon:`████████`
``lightsalmon1``            :lightsalmon1:`████████`
``lightsalmon2``            :lightsalmon2:`████████`
``lightsalmon3``            :lightsalmon3:`████████`
``lightsalmon4``            :lightsalmon4:`████████`
``lightseagreen``           :lightseagreen:`████████`
``lightskyblue``            :lightskyblue:`████████`
``lightskyblue1``           :lightskyblue1:`████████`
``lightskyblue2``           :lightskyblue2:`████████`
``lightskyblue3``           :lightskyblue3:`████████`
``lightskyblue4``           :lightskyblue4:`████████`
``lightslateblue``          :lightslateblue:`████████`
``lightslategray``          :lightslategray:`████████`
``lightslategrey``          :lightslategrey:`████████`
``lightsteelblue``          :lightsteelblue:`████████`
``lightsteelblue1``         :lightsteelblue1:`████████`
``lightsteelblue2``         :lightsteelblue2:`████████`
``lightsteelblue3``         :lightsteelblue3:`████████`
``lightsteelblue4``         :lightsteelblue4:`████████`
``lightyellow``             :lightyellow:`████████`
``lightyellow1``            :lightyellow1:`████████`
``lightyellow2``            :lightyellow2:`████████`
``lightyellow3``            :lightyellow3:`████████`
``lightyellow4``            :lightyellow4:`████████`
``lime``                    :lime:`████████`
``limegreen``               :limegreen:`████████`
``linen``                   :linen:`████████`
``magenta``                 :magenta:`████████`
``magenta1``                :magenta1:`████████`
``magenta2``                :magenta2:`████████`
``magenta3``                :magenta3:`████████`
``magenta4``                :magenta4:`████████`
``maroon``                  :maroon:`████████`
``maroon1``                 :maroon1:`████████`
``maroon2``                 :maroon2:`████████`
``maroon3``                 :maroon3:`████████`
``maroon4``                 :maroon4:`████████`
``mediumaquamarine``        :mediumaquamarine:`████████`
``mediumblue``              :mediumblue:`████████`
``mediumorchid``            :mediumorchid:`████████`
``mediumorchid1``           :mediumorchid1:`████████`
``mediumorchid2``           :mediumorchid2:`████████`
``mediumorchid3``           :mediumorchid3:`████████`
``mediumorchid4``           :mediumorchid4:`████████`
``mediumpurple``            :mediumpurple:`████████`
``mediumpurple1``           :mediumpurple1:`████████`
``mediumpurple2``           :mediumpurple2:`████████`
``mediumpurple3``           :mediumpurple3:`████████`
``mediumpurple4``           :mediumpurple4:`████████`
``mediumseagreen``          :mediumseagreen:`████████`
``mediumslateblue``         :mediumslateblue:`████████`
``mediumspringgreen``       :mediumspringgreen:`████████`
``mediumturquoise``         :mediumturquoise:`████████`
``mediumvioletred``         :mediumvioletred:`████████`
``midnightblue``            :midnightblue:`████████`
``mintcream``               :mintcream:`████████`
``mistyrose``               :mistyrose:`████████`
``mistyrose1``              :mistyrose1:`████████`
``mistyrose2``              :mistyrose2:`████████`
``mistyrose3``              :mistyrose3:`████████`
``mistyrose4``              :mistyrose4:`████████`
``moccasin``                :moccasin:`████████`
``navajowhite``             :navajowhite:`████████`
``navajowhite1``            :navajowhite1:`████████`
``navajowhite2``            :navajowhite2:`████████`
``navajowhite3``            :navajowhite3:`████████`
``navajowhite4``            :navajowhite4:`████████`
``navy``                    :navy:`████████`
``navyblue``                :navyblue:`████████`
``oldlace``                 :oldlace:`████████`
``olive``                   :olive:`████████`
``olivedrab``               :olivedrab:`████████`
``olivedrab1``              :olivedrab1:`████████`
``olivedrab2``              :olivedrab2:`████████`
``olivedrab3``              :olivedrab3:`████████`
``olivedrab4``              :olivedrab4:`████████`
``orange``                  :orange:`████████`
``orange1``                 :orange1:`████████`
``orange2``                 :orange2:`████████`
``orange3``                 :orange3:`████████`
``orange4``                 :orange4:`████████`
``orangered``               :orangered:`████████`
``orangered1``              :orangered1:`████████`
``orangered2``              :orangered2:`████████`
``orangered3``              :orangered3:`████████`
``orangered4``              :orangered4:`████████`
``orchid``                  :orchid:`████████`
``orchid1``                 :orchid1:`████████`
``orchid2``                 :orchid2:`████████`
``orchid3``                 :orchid3:`████████`
``orchid4``                 :orchid4:`████████`
``palegoldenrod``           :palegoldenrod:`████████`
``palegreen``               :palegreen:`████████`
``palegreen1``              :palegreen1:`████████`
``palegreen2``              :palegreen2:`████████`
``palegreen3``              :palegreen3:`████████`
``palegreen4``              :palegreen4:`████████`
``paleturquoise``           :paleturquoise:`████████`
``paleturquoise1``          :paleturquoise1:`████████`
``paleturquoise2``          :paleturquoise2:`████████`
``paleturquoise3``          :paleturquoise3:`████████`
``paleturquoise4``          :paleturquoise4:`████████`
``palevioletred``           :palevioletred:`████████`
``palevioletred1``          :palevioletred1:`████████`
``palevioletred2``          :palevioletred2:`████████`
``palevioletred3``          :palevioletred3:`████████`
``palevioletred4``          :palevioletred4:`████████`
``papayawhip``              :papayawhip:`████████`
``peachpuff``               :peachpuff:`████████`
``peachpuff1``              :peachpuff1:`████████`
``peachpuff2``              :peachpuff2:`████████`
``peachpuff3``              :peachpuff3:`████████`
``peachpuff4``              :peachpuff4:`████████`
``peru``                    :peru:`████████`
``pink``                    :pink:`████████`
``pink1``                   :pink1:`████████`
``pink2``                   :pink2:`████████`
``pink3``                   :pink3:`████████`
``pink4``                   :pink4:`████████`
``plum``                    :plum:`████████`
``plum1``                   :plum1:`████████`
``plum2``                   :plum2:`████████`
``plum3``                   :plum3:`████████`
``plum4``                   :plum4:`████████`
``powderblue``              :powderblue:`████████`
``purple``                  :purple:`████████`
``purple1``                 :purple1:`████████`
``purple2``                 :purple2:`████████`
``purple3``                 :purple3:`████████`
``purple4``                 :purple4:`████████`
``red``                     :red:`████████`
``red1``                    :red1:`████████`
``red2``                    :red2:`████████`
``red3``                    :red3:`████████`
``red4``                    :red4:`████████`
``rosybrown``               :rosybrown:`████████`
``rosybrown1``              :rosybrown1:`████████`
``rosybrown2``              :rosybrown2:`████████`
``rosybrown3``              :rosybrown3:`████████`
``rosybrown4``              :rosybrown4:`████████`
``royalblue``               :royalblue:`████████`
``royalblue1``              :royalblue1:`████████`
``royalblue2``              :royalblue2:`████████`
``royalblue3``              :royalblue3:`████████`
``royalblue4``              :royalblue4:`████████`
``saddlebrown``             :saddlebrown:`████████`
``salmon``                  :salmon:`████████`
``salmon1``                 :salmon1:`████████`
``salmon2``                 :salmon2:`████████`
``salmon3``                 :salmon3:`████████`
``salmon4``                 :salmon4:`████████`
``sandybrown``              :sandybrown:`████████`
``seagreen``                :seagreen:`████████`
``seagreen1``               :seagreen1:`████████`
``seagreen2``               :seagreen2:`████████`
``seagreen3``               :seagreen3:`████████`
``seagreen4``               :seagreen4:`████████`
``seashell``                :seashell:`████████`
``seashell1``               :seashell1:`████████`
``seashell2``               :seashell2:`████████`
``seashell3``               :seashell3:`████████`
``seashell4``               :seashell4:`████████`
``sienna``                  :sienna:`████████`
``sienna1``                 :sienna1:`████████`
``sienna2``                 :sienna2:`████████`
``sienna3``                 :sienna3:`████████`
``sienna4``                 :sienna4:`████████`
``silver``                  :silver:`████████`
``skyblue``                 :skyblue:`████████`
``skyblue1``                :skyblue1:`████████`
``skyblue2``                :skyblue2:`████████`
``skyblue3``                :skyblue3:`████████`
``skyblue4``                :skyblue4:`████████`
``slateblue``               :slateblue:`████████`
``slateblue1``              :slateblue1:`████████`
``slateblue2``              :slateblue2:`████████`
``slateblue3``              :slateblue3:`████████`
``slateblue4``              :slateblue4:`████████`
``slategray``               :slategray:`████████`
``slategray1``              :slategray1:`████████`
``slategray2``              :slategray2:`████████`
``slategray3``              :slategray3:`████████`
``slategray4``              :slategray4:`████████`
``slategrey``               :slategrey:`████████`
``snow``                    :snow:`████████`
``snow1``                   :snow1:`████████`
``snow2``                   :snow2:`████████`
``snow3``                   :snow3:`████████`
``snow4``                   :snow4:`████████`
``springgreen``             :springgreen:`████████`
``springgreen1``            :springgreen1:`████████`
``springgreen2``            :springgreen2:`████████`
``springgreen3``            :springgreen3:`████████`
``springgreen4``            :springgreen4:`████████`
``steelblue``               :steelblue:`████████`
``steelblue1``              :steelblue1:`████████`
``steelblue2``              :steelblue2:`████████`
``steelblue3``              :steelblue3:`████████`
``steelblue4``              :steelblue4:`████████`
``tan``                     :tan:`████████`
``tan1``                    :tan1:`████████`
``tan2``                    :tan2:`████████`
``tan3``                    :tan3:`████████`
``tan4``                    :tan4:`████████`
``teal``                    :teal:`████████`
``thistle``                 :thistle:`████████`
``thistle1``                :thistle1:`████████`
``thistle2``                :thistle2:`████████`
``thistle3``                :thistle3:`████████`
``thistle4``                :thistle4:`████████`
``tomato``                  :tomato:`████████`
``tomato1``                 :tomato1:`████████`
``tomato2``                 :tomato2:`████████`
``tomato3``                 :tomato3:`████████`
``tomato4``                 :tomato4:`████████`
``turquoise``               :turquoise:`████████`
``turquoise1``              :turquoise1:`████████`
``turquoise2``              :turquoise2:`████████`
``turquoise3``              :turquoise3:`████████`
``turquoise4``              :turquoise4:`████████`
``violet``                  :violet:`████████`
``violetred``               :violetred:`████████`
``violetred1``              :violetred1:`████████`
``violetred2``              :violetred2:`████████`
``violetred3``              :violetred3:`████████`
``violetred4``              :violetred4:`████████`
``wheat``                   :wheat:`████████`
``wheat1``                  :wheat1:`████████`
``wheat2``                  :wheat2:`████████`
``wheat3``                  :wheat3:`████████`
``wheat4``                  :wheat4:`████████`
``white``                   :white:`████████`
``whitesmoke``              :whitesmoke:`████████`
``yellow``                  :yellow:`████████`
``yellow1``                 :yellow1:`████████`
``yellow2``                 :yellow2:`████████`
``yellow3``                 :yellow3:`████████`
``yellow4``                 :yellow4:`████████`
``yellowgreen``             :yellowgreen:`████████`
==========================  ======================================================================================================


--- Contenu du fichier : pixelcopy.rst.txt ---
.. include:: common.txt

:mod:`pygame.pixelcopy`
=======================

.. module:: pygame.pixelcopy
   :synopsis: pygame module for general pixel array copying

| :sl:`pygame module for general pixel array copying`

The ``pygame.pixelcopy`` module contains functions for copying between
surfaces and objects exporting an array structure interface. It is a backend
for :mod:`pygame.surfarray`, adding NumPy support. But pixelcopy is more
general, and intended for direct use.

The array struct interface exposes an array's data in a standard way.
It was introduced in NumPy. In Python 2.7 and above it is replaced by the
new buffer protocol, though the buffer protocol is still a work in progress.
The array struct interface, on the other hand, is stable and works with earlier
Python versions. So for now the array struct interface is the predominate way
pygame handles array introspection.

For 2d arrays of integer pixel values, the values are mapped to the
pixel format of the related surface. To get the actual color of a pixel
value use :meth:`pygame.Surface.unmap_rgb`. 2d arrays can only be used
directly between surfaces having the same pixel layout.

New in pygame 1.9.2.

.. function:: surface_to_array

   | :sl:`copy surface pixels to an array object`
   | :sg:`surface_to_array(array, surface, kind='P', opaque=255, clear=0) -> None`

   The surface_to_array function copies pixels from a Surface object
   to a 2D or 3D array. Depending on argument ``kind`` and the target array
   dimension, a copy may be raw pixel value, RGB, a color component slice,
   or colorkey alpha transparency value. Recognized ``kind`` values are the
   single character codes 'P', 'R', 'G', 'B', 'A', and 'C'. Kind codes are case
   insensitive, so 'p' is equivalent to 'P'. The first two dimensions
   of the target must be the surface size (w, h).

   The default 'P' kind code does a direct raw integer pixel (mapped) value
   copy to a 2D array and a 'RGB' pixel component (unmapped) copy to a 3D array
   having shape (w, h, 3). For an 8 bit colormap surface this means the
   table index is copied to a 2D array, not the table value itself. A 2D
   array's item size must be at least as large as the surface's pixel
   byte size. The item size of a 3D array must be at least one byte.

   For the 'R', 'G', 'B', and 'A' copy kinds a single color component
   of the unmapped surface pixels are copied to the target 2D array.
   For kind 'A' and surfaces with source alpha (the surface was created with
   the SRCALPHA flag), has a colorkey
   (set with :meth:`Surface.set_colorkey() <pygame.Surface.set_colorkey>`),
   or has a blanket alpha
   (set with :meth:`Surface.set_alpha() <pygame.Surface.set_alpha>`)
   then the alpha values are those expected for a SDL surface.
   If a surface has no explicit alpha value, then the target array
   is filled with the value of the optional ``opaque`` surface_to_array
   argument (default 255: not transparent).

   Copy kind 'C' is a special case for alpha copy of a source surface
   with colorkey. Unlike the 'A' color component copy, the ``clear``
   argument value is used for colorkey matches, ``opaque`` otherwise.
   By default, a match has alpha 0 (totally transparent), while everything
   else is alpha 255 (totally opaque). It is a more general implementation
   of :meth:`pygame.surfarray.array_colorkey`.

   Specific to surface_to_array, a ValueError is raised for target arrays
   with incorrect shape or item size. A TypeError is raised for an incorrect
   kind code. Surface specific problems, such as locking, raise a pygame.error.

   .. ## pygame.pixelcopy.surface_to_array ##

.. function:: array_to_surface

   | :sl:`copy an array object to a surface`
   | :sg:`array_to_surface(<surface>, <array>) -> None`

   See :func:`pygame.surfarray.blit_array`.

   .. ## pygame.pixelcopy.array_to_surface ##

.. function:: map_array

   | :sl:`copy an array to another array, using surface format`
   | :sg:`map_array(<array>, <array>, <surface>) -> None`

   Map an array of color element values - (w, h, ..., 3) - to an array of
   pixels - (w, h) according to the format of <surface>.

   .. ## pygame.pixelcopy.map_array ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`pygame.pixelcopy.make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format of the array.
   The array can be 2D or 3D with any sized integer values.

   .. ## pygame.pixelcopy.make_surface ##

.. ## pygame.pixelcopy ##


--- Contenu du fichier : midi.rst.txt ---
.. include:: common.txt

:mod:`pygame.midi`
==================

.. module:: pygame.midi
   :synopsis: pygame module for interacting with midi input and output.

| :sl:`pygame module for interacting with midi input and output.`

.. versionadded:: 1.9.0

The midi module can send output to midi devices and get input from midi
devices. It can also list midi devices on the system.

The midi module supports real and virtual midi devices.

It uses the portmidi library. Is portable to which ever platforms portmidi
supports (currently Windows, Mac OS X, and Linux).

This uses pyportmidi for now, but may use its own bindings at some point in the
future. The pyportmidi bindings are included with pygame.

|

.. versionadded:: 2.0.0

These are pygame events (:mod:`pygame.event`) reserved for midi use. The
``MIDIIN`` event is used by :func:`pygame.midi.midis2events` when converting
midi events to pygame events.

::

   MIDIIN
   MIDIOUT

|

.. function:: init

   | :sl:`initialize the midi module`
   | :sg:`init() -> None`

   Initializes the :mod:`pygame.midi` module. Must be called before using the
   :mod:`pygame.midi` module.

   It is safe to call this more than once.

   .. ## pygame.midi.init ##

.. function:: quit

   | :sl:`uninitialize the midi module`
   | :sg:`quit() -> None`

   Uninitializes the :mod:`pygame.midi` module. If :func:`pygame.midi.init` was
   called to initialize the :mod:`pygame.midi` module, then this function will
   be called automatically when your program exits.

   It is safe to call this function more than once.

   .. ## pygame.midi.quit ##

.. function:: get_init

   | :sl:`returns True if the midi module is currently initialized`
   | :sg:`get_init() -> bool`

   Gets the initialization state of the :mod:`pygame.midi` module.

   :returns: ``True`` if the :mod:`pygame.midi` module is currently initialized.
   :rtype: bool

   .. versionadded:: 1.9.5

   .. ## pygame.midi.get_init ##

.. class:: Input

   | :sl:`Input is used to get midi input from midi devices.`
   | :sg:`Input(device_id) -> None`
   | :sg:`Input(device_id, buffer_size) -> None`

   :param int device_id: midi device id
   :param int buffer_size: (optional) the number of input events to be buffered

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Input.close ##

   .. method:: poll

      | :sl:`returns True if there's data, or False if not.`
      | :sg:`poll() -> bool`

      Used to indicate if any data exists.

      :returns: ``True`` if there is data, ``False`` otherwise
      :rtype: bool

      :raises MidiException: on error

      .. ## Input.poll ##

   .. method:: read

      | :sl:`reads num_events midi events from the buffer.`
      | :sg:`read(num_events) -> midi_event_list`

      Reads from the input buffer and gives back midi events.

      :param int num_events: number of input events to read

      :returns: the format for midi_event_list is
         ``[[[status, data1, data2, data3], timestamp], ...]``
      :rtype: list

      .. ## Input.read ##

   .. ## pygame.midi.Input ##

.. class:: Output

   | :sl:`Output is used to send midi to an output device`
   | :sg:`Output(device_id) -> None`
   | :sg:`Output(device_id, latency=0) -> None`
   | :sg:`Output(device_id, buffer_size=256) -> None`
   | :sg:`Output(device_id, latency, buffer_size) -> None`

   The ``buffer_size`` specifies the number of output events to be buffered
   waiting for output. In some cases (see below) PortMidi does not buffer
   output at all and merely passes data to a lower-level API, in which case
   buffersize is ignored.

   ``latency`` is the delay in milliseconds applied to timestamps to determine
   when the output should actually occur. If ``latency`` is <<0, 0 is assumed.

   If ``latency`` is zero, timestamps are ignored and all output is delivered
   immediately. If ``latency`` is greater than zero, output is delayed until the
   message timestamp plus the ``latency``. In some cases, PortMidi can obtain
   better timing than your application by passing timestamps along to the
   device driver or hardware. Latency may also help you to synchronize midi
   data to audio data by matching midi latency to the audio buffer latency.

   .. note::
      Time is measured relative to the time source indicated by time_proc.
      Timestamps are absolute, not relative delays or offsets.

   .. method:: abort

      | :sl:`terminates outgoing messages immediately`
      | :sg:`abort() -> None`

      The caller should immediately close the output port; this call may result
      in transmission of a partial midi message. There is no abort for Midi
      input because the user can simply ignore messages in the buffer and close
      an input device at any time.

      .. ## Output.abort ##

   .. method:: close

      | :sl:`closes a midi stream, flushing any pending buffers.`
      | :sg:`close() -> None`

      PortMidi attempts to close open streams when the application exits.

      .. note:: This is particularly difficult under Windows.

      .. ## Output.close ##

   .. method:: note_off

      | :sl:`turns a midi note off (note must be on)`
      | :sg:`note_off(note, velocity=None, channel=0) -> None`

      Turn a note off in the output stream. The note must already be on for
      this to work correctly.

      .. ## Output.note_off ##

   .. method:: note_on

      | :sl:`turns a midi note on (note must be off)`
      | :sg:`note_on(note, velocity=None, channel=0) -> None`

      Turn a note on in the output stream. The note must already be off for
      this to work correctly.

      .. ## Output.note_on ##

   .. method:: set_instrument

      | :sl:`select an instrument, with a value between 0 and 127`
      | :sg:`set_instrument(instrument_id, channel=0) -> None`

      Select an instrument.

      .. ## Output.set_instrument ##

   .. method:: pitch_bend

      | :sl:`modify the pitch of a channel.`
      | :sg:`set_instrument(value=0, channel=0) -> None`

      Adjust the pitch of a channel. The value is a signed integer
      from -8192 to +8191. For example, 0 means "no change", +4096 is
      typically a semitone higher, and -8192 is 1 whole tone lower (though
      the musical range corresponding to the pitch bend range can also be
      changed in some synthesizers).

      If no value is given, the pitch bend is returned to "no change".

      .. versionadded:: 1.9.4

   .. method:: write

      | :sl:`writes a list of midi data to the Output`
      | :sg:`write(data) -> None`

      Writes series of MIDI information in the form of a list.

      :param list data: data to write, the expected format is
         ``[[[status, data1=0, data2=0, ...], timestamp], ...]``
         with the ``data#`` fields being optional

      :raises IndexError: if more than 1024 elements in the data list

      Example:
      ::

         # Program change at time 20000 and 500ms later send note 65 with
         # velocity 100.
         write([[[0xc0, 0, 0], 20000], [[0x90, 60, 100], 20500]])

      .. note::
         - Timestamps will be ignored if latency = 0
         - To get a note to play immediately, send MIDI info with timestamp
           read from function Time
         - Optional data fields: ``write([[[0xc0, 0, 0], 20000]])`` is
           equivalent to ``write([[[0xc0], 20000]])``

      .. ## Output.write ##

   .. method:: write_short

      | :sl:`writes up to 3 bytes of midi data to the Output`
      | :sg:`write_short(status) -> None`
      | :sg:`write_short(status, data1=0, data2=0) -> None`

      Output MIDI information of 3 bytes or less. The ``data`` fields are
      optional and assumed to be 0 if omitted.

      Examples of status byte values:
      ::

         0xc0  # program change
         0x90  # note on
         # etc.

      Example:
      ::

         # note 65 on with velocity 100
         write_short(0x90, 65, 100)

      .. ## Output.write_short ##

   .. method:: write_sys_ex

      | :sl:`writes a timestamped system-exclusive midi message.`
      | :sg:`write_sys_ex(when, msg) -> None`

      Writes a timestamped system-exclusive midi message.

      :param msg: midi message
      :type msg: list[int] or str
      :param when: timestamp in milliseconds

      Example:
      ::

         midi_output.write_sys_ex(0, '\xF0\x7D\x10\x11\x12\x13\xF7')

         # is equivalent to

         midi_output.write_sys_ex(pygame.midi.time(),
                                  [0xF0, 0x7D, 0x10, 0x11, 0x12, 0x13, 0xF7])

      .. ## Output.write_sys_ex ##

   .. ## pygame.midi.Output ##

.. function:: get_count

   | :sl:`gets the number of devices.`
   | :sg:`get_count() -> num_devices`

   Device ids range from 0 to ``get_count() - 1``

   .. ## pygame.midi.get_count ##

.. function:: get_default_input_id

   | :sl:`gets default input device number`
   | :sg:`get_default_input_id() -> default_id`

   The following describes the usage details for this function and the
   :func:`get_default_output_id` function.

   Return the default device ID or ``-1`` if there are no devices. The result
   can be passed to the :class:`Input`/:class:`Output` class.

   On a PC the user can specify a default device by setting an environment
   variable. To use device #1, for example:
   ::

      set PM_RECOMMENDED_INPUT_DEVICE=1
      or
      set PM_RECOMMENDED_OUTPUT_DEVICE=1

   The user should first determine the available device ID by using the
   supplied application "testin" or "testout".

   In general, the registry is a better place for this kind of info. With
   USB devices that can come and go, using integers is not very reliable
   for device identification. Under Windows, if ``PM_RECOMMENDED_INPUT_DEVICE``
   (or ``PM_RECOMMENDED_OUTPUT_DEVICE``) is NOT found in the environment,
   then the default device is obtained by looking for a string in the registry
   under:
   ::

      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Input_Device
      or
      HKEY_LOCAL_MACHINE/SOFTWARE/PortMidi/Recommended_Output_Device


   The number of the first device with a substring that matches the
   string exactly is returned. For example, if the string in the registry is
   "USB" and device 1 is named "In USB MidiSport 1x1", then that will be
   the default input because it contains the string "USB".

   In addition to the name, :func:`get_device_info()` returns "interf", which is
   the interface name. The "interface" is the underlying software system or
   API used by PortMidi to access devices. Supported interfaces:
   ::

      MMSystem   # the only Win32 interface currently supported
      ALSA       # the only Linux interface currently supported
      CoreMIDI   # the only Mac OS X interface currently supported
      # DirectX - not implemented
      # OSS     - not implemented

   To specify both the interface and the device name in the registry, separate
   the two with a comma and a space. The string before the comma must be a
   substring of the "interf" string and the string after the space must be a
   substring of the "name" name string in order to match the device. e.g.:
   ::

      MMSystem, In USB MidiSport 1x1

   .. note::
      In the current release, the default is simply the first device (the
      input or output device with the lowest PmDeviceID).

   .. ## pygame.midi.get_default_input_id ##

.. function:: get_default_output_id

   | :sl:`gets default output device number`
   | :sg:`get_default_output_id() -> default_id`

   See :func:`get_default_input_id` for usage details.

   .. ## pygame.midi.get_default_output_id ##

.. function:: get_device_info

   | :sl:`returns information about a midi device`
   | :sg:`get_device_info(an_id) -> (interf, name, input, output, opened)`
   | :sg:`get_device_info(an_id) -> None`

   Gets the device info for a given id.

   :param int an_id: id of the midi device being queried

   :returns: if the id is out of range ``None`` is returned, otherwise
      a tuple of (interf, name, input, output, opened) is returned.

         - interf: string describing the device interface (e.g. 'ALSA')
         - name: string name of the device (e.g. 'Midi Through Port-0')
         - input: 1 if the device is an input device, otherwise 0
         - output: 1 if the device is an output device, otherwise 0
         - opened: 1 if the device is opened, otherwise 0
   :rtype: tuple or None

   .. ## pygame.midi.get_device_info ##

.. function:: midis2events

   | :sl:`converts midi events to pygame events`
   | :sg:`midis2events(midi_events, device_id) -> [Event, ...]`

   Takes a sequence of midi events and returns list of pygame events.

   The ``midi_events`` data is expected to be a sequence of
   ``((status, data1, data2, data3), timestamp)`` midi events (all values
   required).

   :returns: a list of pygame events of event type ``MIDIIN``
   :rtype: list

   .. ## pygame.midi.midis2events ##

.. function:: time

   | :sl:`returns the current time in ms of the PortMidi timer`
   | :sg:`time() -> time`

   The time is reset to 0 when the :mod:`pygame.midi` module is initialized.

   .. ## pygame.midi.time ##


.. function:: frequency_to_midi

   | :sl:`Converts a frequency into a MIDI note. Rounds to the closest midi note.`
   | :sg:`frequency_to_midi(midi_note) -> midi_note`

   example:
   ::

       frequency_to_midi(27.5) == 21

   .. versionadded:: 1.9.5

   .. ## pygame.midi.frequency_to_midi ##


.. function:: midi_to_frequency

   | :sl:`Converts a midi note to a frequency.`
   | :sg:`midi_to_frequency(midi_note) -> frequency`

   example:
   ::

       midi_to_frequency(21) == 27.5

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_frequency ##


.. function:: midi_to_ansi_note

   | :sl:`Returns the Ansi Note name for a midi number.`
   | :sg:`midi_to_ansi_note(midi_note) -> ansi_note`

   example:
   ::

       midi_to_ansi_note(21) == 'A0'

   .. versionadded:: 1.9.5

   .. ## pygame.midi.midi_to_ansi_note ##

.. exception:: MidiException

   | :sl:`exception that pygame.midi functions and classes can raise`
   | :sg:`MidiException(errno) -> None`

   .. ## pygame.midi.MidiException ##


.. ## pygame.midi ##


--- Contenu du fichier : overlay.rst.txt ---
.. include:: common.txt

:mod:`pygame.Overlay`
=====================

.. currentmodule:: pygame

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.

.. class:: Overlay

   | :sl:`pygame object for video overlay graphics`
   | :sg:`Overlay(format, (width, height)) -> Overlay`

   The Overlay objects provide support for accessing hardware video overlays.
   Video overlays do not use standard ``RGB`` pixel formats, and can use
   multiple resolutions of data to create a single image.

   The Overlay objects represent lower level access to the display hardware. To
   use the object you must understand the technical details of video overlays.

   The Overlay format determines the type of pixel data used. Not all hardware
   will support all types of overlay formats. Here is a list of available
   format types:

   ::

     YV12_OVERLAY, IYUV_OVERLAY, YUY2_OVERLAY, UYVY_OVERLAY, YVYU_OVERLAY

   The width and height arguments control the size for the overlay image data.
   The overlay image can be displayed at any size, not just the resolution of
   the overlay.

   The overlay objects are always visible, and always show above the regular
   display contents.

   .. method:: display

      | :sl:`set the overlay pixel data`
      | :sg:`display((y, u, v)) -> None`
      | :sg:`display() -> None`

      Display the YUV data in SDL's overlay planes. The y, u, and v arguments
      are strings of binary data. The data must be in the correct format used
      to create the Overlay.

      If no argument is passed in, the Overlay will simply be redrawn with the
      current data. This can be useful when the Overlay is not really hardware
      accelerated.

      The strings are not validated, and improperly sized strings could crash
      the program.

      .. ## Overlay.display ##

   .. method:: set_location

      | :sl:`control where the overlay is displayed`
      | :sg:`set_location(rect) -> None`

      Set the location for the overlay. The overlay will always be shown
      relative to the main display Surface. This does not actually redraw the
      overlay, it will be updated on the next call to ``Overlay.display()``.

      .. ## Overlay.set_location ##

   .. method:: get_hardware

      | :sl:`test if the Overlay is hardware accelerated`
      | :sg:`get_hardware(rect) -> int`

      Returns a True value when the Overlay is hardware accelerated. If the
      platform does not support acceleration, software rendering is used.

      .. ## Overlay.get_hardware ##

   .. ## pygame.Overlay ##


--- Contenu du fichier : gfxdraw.rst.txt ---
.. include:: common.txt

:mod:`pygame.gfxdraw`
=====================

.. module:: pygame.gfxdraw
   :synopsis: pygame module for drawing shapes

| :sl:`pygame module for drawing shapes`

**EXPERIMENTAL!**: This API may change or disappear in later pygame releases. If
you use this, your code may break with the next pygame release.

The pygame package does not import gfxdraw automatically when loaded, so it
must imported explicitly to be used.

::

    import pygame
    import pygame.gfxdraw

For all functions the arguments are strictly positional and integers are
accepted for coordinates and radii. The ``color`` argument can be one of the
following formats:

   - a :mod:`pygame.Color` object
   - an ``(RGB)`` triplet (tuple/list)
   - an ``(RGBA)`` quadruplet (tuple/list)

The functions :meth:`rectangle` and :meth:`box` will accept any ``(x, y, w, h)``
sequence for their ``rect`` argument, though :mod:`pygame.Rect` instances are
preferred.

To draw a filled antialiased shape, first use the antialiased (aa*) version
of the function, and then use the filled (filled_*) version.
For example:

::

   col = (255, 0, 0)
   surf.fill((255, 255, 255))
   pygame.gfxdraw.aacircle(surf, x, y, 30, col)
   pygame.gfxdraw.filled_circle(surf, x, y, 30, col)


.. note::
   For threading, each of the functions releases the GIL during the C part of
   the call.

.. note::
   See the :mod:`pygame.draw` module for alternative draw methods.
   The ``pygame.gfxdraw`` module differs from the :mod:`pygame.draw` module in
   the API it uses and the different draw functions available.
   ``pygame.gfxdraw`` wraps the primitives from the library called SDL_gfx,
   rather than using modified versions.

.. versionadded:: 1.9.0


.. function:: pixel

   | :sl:`draw a pixel`
   | :sg:`pixel(surface, x, y, color) -> None`

   Draws a single pixel, at position (x ,y), on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the pixel
   :param int y: y coordinate of the pixel
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pixel ##

.. function:: hline

   | :sl:`draw a horizontal line`
   | :sg:`hline(surface, x1, x2, y, color) -> None`

   Draws a straight horizontal line (``(x1, y)`` to ``(x2, y)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y: y coordinate of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.hline ##

.. function:: vline

   | :sl:`draw a vertical line`
   | :sg:`vline(surface, x, y1, y2, color) -> None`

   Draws a straight vertical line (``(x, y1)`` to ``(x, y2)``) on the given
   surface. There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the line
   :param int y1: y coordinate of one end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.vline ##

.. function:: line

   | :sl:`draw a line`
   | :sg:`line(surface, x1, y1, x2, y2, color) -> None`

   Draws a straight line (``(x1, y1)`` to ``(x2, y2)``) on the given surface.
   There are no endcaps.

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of one end of the line
   :param int y1: y coordinate of one end of the line
   :param int x2: x coordinate of the other end of the line
   :param int y2: y coordinate of the other end of the line
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.line ##

.. function:: rectangle

   | :sl:`draw a rectangle`
   | :sg:`rectangle(surface, rect, color) -> None`

   Draws an unfilled rectangle on the given surface. For a filled rectangle use
   :meth:`box`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. ## pygame.gfxdraw.rectangle ##

.. function:: box

   | :sl:`draw a filled rectangle`
   | :sg:`box(surface, rect, color) -> None`

   Draws a filled rectangle on the given surface. For an unfilled rectangle use
   :meth:`rectangle`.

   :param Surface surface: surface to draw on
   :param Rect rect: rectangle to draw, position and dimensions
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      The ``rect.bottom`` and ``rect.right`` attributes of a :mod:`pygame.Rect`
      always lie one pixel outside of its actual border. Therefore, these
      values will not be included as part of the drawing.

   .. note::
      The :func:`pygame.Surface.fill` method works just as well for drawing
      filled rectangles. In fact :func:`pygame.Surface.fill` can be hardware
      accelerated on some platforms with both software and hardware display
      modes.

   .. ## pygame.gfxdraw.box ##

.. function:: circle

   | :sl:`draw a circle`
   | :sg:`circle(surface, x, y, r, color) -> None`

   Draws an unfilled circle on the given surface. For a filled circle use
   :meth:`filled_circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.circle ##

.. function:: aacircle

   | :sl:`draw an antialiased circle`
   | :sg:`aacircle(surface, x, y, r, color) -> None`

   Draws an unfilled antialiased circle on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aacircle ##

.. function:: filled_circle

   | :sl:`draw a filled circle`
   | :sg:`filled_circle(surface, x, y, r, color) -> None`

   Draws a filled circle on the given surface. For an unfilled circle use
   :meth:`circle`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the circle
   :param int y: y coordinate of the center of the circle
   :param int r: radius of the circle
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_circle ##

.. function:: ellipse

   | :sl:`draw an ellipse`
   | :sg:`ellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled ellipse on the given surface. For a filled ellipse use
   :meth:`filled_ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.ellipse ##

.. function:: aaellipse

   | :sl:`draw an antialiased ellipse`
   | :sg:`aaellipse(surface, x, y, rx, ry, color) -> None`

   Draws an unfilled antialiased ellipse on the given surface.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aaellipse ##

.. function:: filled_ellipse

   | :sl:`draw a filled ellipse`
   | :sg:`filled_ellipse(surface, x, y, rx, ry, color) -> None`

   Draws a filled ellipse on the given surface. For an unfilled ellipse use
   :meth:`ellipse`.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the ellipse
   :param int y: y coordinate of the center of the ellipse
   :param int rx: horizontal radius of the ellipse
   :param int ry: vertical radius of the ellipse
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_ellipse ##

.. function:: arc

   | :sl:`draw an arc`
   | :sg:`arc(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an arc on the given surface. For an arc with its endpoints connected
   to its center use :meth:`pie`.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the arc. The arc is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   nothing will be drawn

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the arc
   :param int y: y coordinate of the center of the arc
   :param int r: radius of the arc
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. note::
      This function uses *degrees* while the :func:`pygame.draw.arc` function
      uses *radians*.

   .. ## pygame.gfxdraw.arc ##

.. function:: pie

   | :sl:`draw a pie`
   | :sg:`pie(surface, x, y, r, start_angle, stop_angle, color) -> None`

   Draws an unfilled pie on the given surface. A pie is an :meth:`arc` with its
   endpoints connected to its center.

   The two angle arguments are given in degrees and indicate the start and stop
   positions of the pie. The pie is drawn in a clockwise direction from the
   ``start_angle`` to the ``stop_angle``. If ``start_angle == stop_angle``,
   a straight line will be drawn from the center position at the given angle,
   to a length of the radius.

   :param Surface surface: surface to draw on
   :param int x: x coordinate of the center of the pie
   :param int y: y coordinate of the center of the pie
   :param int r: radius of the pie
   :param int start_angle: start angle in degrees
   :param int stop_angle: stop angle in degrees
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.pie ##

.. function:: trigon

   | :sl:`draw a trigon/triangle`
   | :sg:`trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled trigon (triangle) on the given surface. For a filled
   trigon use :meth:`filled_trigon`.

   A trigon can also be drawn using :meth:`polygon` e.g.
   ``polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.trigon ##

.. function:: aatrigon

   | :sl:`draw an antialiased trigon/triangle`
   | :sg:`aatrigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws an unfilled antialiased trigon (triangle) on the given surface.

   An aatrigon can also be drawn using :meth:`aapolygon` e.g.
   ``aapolygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.aatrigon ##

.. function:: filled_trigon

   | :sl:`draw a filled trigon/triangle`
   | :sg:`filled_trigon(surface, x1, y1, x2, y2, x3, y3, color) -> None`

   Draws a filled trigon (triangle) on the given surface. For an unfilled
   trigon use :meth:`trigon`.

   A filled_trigon can also be drawn using :meth:`filled_polygon` e.g.
   ``filled_polygon(surface, ((x1, y1), (x2, y2), (x3, y3)), color)``

   :param Surface surface: surface to draw on
   :param int x1: x coordinate of the first corner of the trigon
   :param int y1: y coordinate of the first corner of the trigon
   :param int x2: x coordinate of the second corner of the trigon
   :param int y2: y coordinate of the second corner of the trigon
   :param int x3: x coordinate of the third corner of the trigon
   :param int y3: y coordinate of the third corner of the trigon
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   .. ## pygame.gfxdraw.filled_trigon ##

.. function:: polygon

   | :sl:`draw a polygon`
   | :sg:`polygon(surface, points, color) -> None`

   Draws an unfilled polygon on the given surface. For a filled polygon use
   :meth:`filled_polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.polygon ##

.. function:: aapolygon

   | :sl:`draw an antialiased polygon`
   | :sg:`aapolygon(surface, points, color) -> None`

   Draws an unfilled antialiased polygon on the given surface.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.aapolygon ##

.. function:: filled_polygon

   | :sl:`draw a filled polygon`
   | :sg:`filled_polygon(surface, points, color) -> None`

   Draws a filled polygon on the given surface. For an unfilled polygon use
   :meth:`polygon`.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)`
   :type points: tuple(coordinate) or list(coordinate)
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.filled_polygon ##

.. function:: textured_polygon

   | :sl:`draw a textured polygon`
   | :sg:`textured_polygon(surface, points, texture, tx, ty) -> None`

   Draws a textured polygon on the given surface. For better performance, the
   surface and the texture should have the same format.

   A per-pixel alpha texture blit to a per-pixel alpha surface will differ from
   a :func:`pygame.Surface.blit` blit. Also, a per-pixel alpha texture cannot be
   used with an 8-bit per pixel destination.

   The adjacent coordinates in the ``points`` argument, as well as the first
   and last points, will be connected by line segments.
   e.g. For the points ``[(x1, y1), (x2, y2), (x3, y3)]`` a line segment will
   be drawn from ``(x1, y1)`` to ``(x2, y2)``, from ``(x2, y2)`` to
   ``(x3, y3)``, and from ``(x3, y3)`` to ``(x1, y1)``.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates, where each
      *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param Surface texture: texture to draw on the polygon
   :param int tx: x offset of the texture
   :param int ty: y offset of the texture

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.textured_polygon ##

.. function:: bezier

   | :sl:`draw a Bezier curve`
   | :sg:`bezier(surface, points, steps, color) -> None`

   Draws a Bézier curve on the given surface.

   :param Surface surface: surface to draw on
   :param points: a sequence of 3 or more (x, y) coordinates used to form a
      curve, where each *coordinate* in the sequence must be a
      tuple/list/:class:`pygame.math.Vector2` of 2 ints/floats (float values
      will be truncated)
   :type points: tuple(coordinate) or list(coordinate)
   :param int steps: number of steps for the interpolation, the minimum is 2
   :param color: color to draw with, the alpha value is optional if using a
      tuple ``(RGB[A])``
   :type color: Color or tuple(int, int, int, [int])

   :returns: ``None``
   :rtype: NoneType

   :raises ValueError: if ``steps < 2``
   :raises ValueError: if ``len(points) < 3`` (must have at least 3 points)
   :raises IndexError: if ``len(coordinate) < 2`` (each coordinate must have
      at least 2 items)

   .. ## pygame.gfxdraw.bezier ##

.. ## pygame.gfxdraw ##


--- Contenu du fichier : fastevent.rst.txt ---
.. include:: common.txt

:mod:`pygame.fastevent`
=======================

.. module:: pygame.fastevent
   :synopsis: pygame module for interacting with events and queues from multiple
              threads.

| :sl:`pygame module for interacting with events and queues`

IMPORTANT NOTE: THIS MODULE IS DEPRECATED IN PYGAME 2.2

In older pygame versions before pygame 2, :mod:`pygame.event` was not well
suited for posting events from different threads. This module served as a
replacement (with less features) for multithreaded use. Now, the usage of this
module is highly discouraged in favour of use of the main :mod:`pygame.event`
module. This module will be removed in a future pygame version.

Below, the legacy docs of the module is provided

.. function:: init

   | :sl:`initialize pygame.fastevent`
   | :sg:`init() -> None`

   Initialize the pygame.fastevent module.

   .. ## pygame.fastevent.init ##

.. function:: get_init

   | :sl:`returns True if the fastevent module is currently initialized`
   | :sg:`get_init() -> bool`

   Returns True if the pygame.fastevent module is currently initialized.

   .. ## pygame.fastevent.get_init ##

.. function:: pump

   | :sl:`internally process pygame event handlers`
   | :sg:`pump() -> None`

   For each frame of your game, you will need to make some sort of call to the
   event queue. This ensures your program can internally interact with the rest
   of the operating system.

   This function is not necessary if your program is consistently processing
   events on the queue through the other :mod:`pygame.fastevent` functions.

   There are important things that must be dealt with internally in the event
   queue. The main window may need to be repainted or respond to the system. If
   you fail to make a call to the event queue for too long, the system may
   decide your program has locked up.

   .. ## pygame.fastevent.pump ##

.. function:: wait

   | :sl:`wait for an event`
   | :sg:`wait() -> Event`

   Returns the current event on the queue. If there are no messages
   waiting on the queue, this will not return until one is available.
   Sometimes it is important to use this wait to get events from the queue,
   it will allow your application to idle when the user isn't doing anything
   with it.

   .. ## pygame.fastevent.wait ##

.. function:: poll

   | :sl:`get an available event`
   | :sg:`poll() -> Event`

   Returns next event on queue. If there is no event waiting on the queue,
   this will return an event with type NOEVENT.

   .. ## pygame.fastevent.poll ##

.. function:: get

   | :sl:`get all events from the queue`
   | :sg:`get() -> list of Events`

   This will get all the messages and remove them from the queue.

   .. ## pygame.fastevent.get ##

.. function:: post

   | :sl:`place an event on the queue`
   | :sg:`post(Event) -> None`

   This will post your own event objects onto the event queue. You can post
   any event type you want, but some care must be taken. For example, if you
   post a MOUSEBUTTONDOWN event to the queue, it is likely any code receiving
   the event will expect the standard MOUSEBUTTONDOWN attributes to be
   available, like 'pos' and 'button'.

   Because pygame.fastevent.post() may have to wait for the queue to empty,
   you can get into a dead lock if you try to append an event on to a full
   queue from the thread that processes events. For that reason I do not
   recommend using this function in the main thread of an SDL program.

   .. ## pygame.fastevent.post ##

.. ## pygame.fastevent ##

--- Contenu du fichier : sdl2_controller.rst.txt ---
.. include:: common.txt

:mod:`pygame._sdl2.controller`
==============================

.. module:: pygame._sdl2.controller
   :synopsis: pygame module to work with controllers

| :sl:`Pygame module to work with controllers.`

.. note::
   Use import pygame._sdl2.controller before using this module.

This module offers control over common controller types like the dualshock 4 or
the xbox 360 controllers: They have two analog sticks, two triggers, two shoulder buttons,
a dpad, 4 buttons on the side, 2 (or 3) buttons in the middle.

Pygame uses xbox controllers naming conventions (like a, b, x, y for buttons) but
they always refer to the same buttons. For example ``CONTROLLER_BUTTON_X`` is
always the leftmost button of the 4 buttons on the right.

Controllers can generate the following events::

   CONTROLLERAXISMOTION, CONTROLLERBUTTONDOWN, CONTROLLERBUTTONUP,
   CONTROLLERDEVICEREMAPPED, CONTROLLERDEVICEADDED, CONTROLLERDEVICEREMOVED

Additionally if pygame is built with SDL 2.0.14 or higher the following events can also be generated
(to get the version of sdl pygame is built with use :meth:`pygame.version.SDL`)::

   CONTROLLERTOUCHPADDOWN, CONTROLLERTOUCHPADMOTION, CONTROLLERTOUCHPADUP

These events can be enabled/disabled by :meth:`pygame._sdl2.controller.set_eventstate`
Note that controllers can generate joystick events as well. This function only toggles
events related to controllers.

.. note::
   See the :mod:`pygame.joystick` for a more versatile but more advanced api.

.. versionadded:: 2 This module requires SDL2.

.. function:: init

   | :sl:`initialize the controller module`
   | :sg:`init() -> None`

   Initialize the controller module.

   .. ## pygame._sdl2.controller.init ##

.. function:: quit

   | :sl:`Uninitialize the controller module.`
   | :sg:`quit() -> None`

   Uninitialize the controller module.

   .. ## pygame._sdl2.controller.quit ##

.. function:: get_init

   | :sl:`Returns True if the controller module is initialized.`
   | :sg:`get_init() -> bool`

   Test if ``pygame._sdl2.controller.init()`` was called.

    .. ## pygame._sdl2.controller.get_init ##

.. function:: set_eventstate

    | :sl:`Sets the current state of events related to controllers`
    | :sg:`set_eventstate(state) -> None`

    Enable or disable events connected to controllers.

    .. note::
        Controllers can still generate joystick events, which will not be toggled by this function.

    .. versionchanged:: 2.0.2: Changed return type from int to None

    .. ## pygame._sdl2.controller.set_eventstate ##

.. function:: get_eventstate

    | :sl:`Gets the current state of events related to controllers`
    | :sg:`get_eventstate() -> bool`

    Returns the current state of events related to controllers, True meaning
    events will be posted.

    .. versionadded:: 2.0.2

    .. ## pygame._sdl2.controller.get_eventstate ##

.. function:: get_count

    | :sl:`Get the number of joysticks connected`
    | :sg:`get_count() -> int`

    Get the number of joysticks connected.

    .. ## pygame._sdl2.controller.get_count ##

.. function:: is_controller

    | :sl:`Check if the given joystick is supported by the game controller interface`
    | :sg:`is_controller(index) -> bool`

    Returns True if the index given can be used to create a controller object.

    .. ## pygame._sdl2.controller.is_controller ##

.. function:: name_forindex

    | :sl:`Get the name of the controller`
    | :sg:`name_forindex(index) -> name or None`

    Returns the name of controller, or None if there's no name or the
    index is invalid.

    .. ## pygame._sdl2.controller.name_forindex ##

.. class:: Controller

    | :sl:`Create a new Controller object.`
    | :sg:`Controller(index) -> Controller`

    Create a new Controller object. Index should be integer between
    0 and ``pygame._sdl2.controller.get_count()``. Controllers also
    can be created from a ``pygame.joystick.Joystick`` using
    ``pygame._sdl2.controller.from_joystick``. Controllers are
    initialized on creation.

   .. method:: quit

      | :sl:`uninitialize the Controller`
      | :sg:`quit() -> None`

      Close a Controller object. After this the pygame event queue will no longer
      receive events from the device.

      It is safe to call this more than once.

      .. ## Controller.quit ##

   .. method:: get_init

      | :sl:`check if the Controller is initialized`
      | :sg:`get_init() -> bool`

      Returns True if the Controller object is currently initialised.

      .. ## Controller.get_init ##

   .. staticmethod:: from_joystick

       | :sl:`Create a Controller from a pygame.joystick.Joystick object`
       | :sg:`from_joystick(joystick) -> Controller`

       Create a Controller object from a ``pygame.joystick.Joystick`` object

       .. ## Controller.from_joystick ##

   .. method:: attached

      | :sl:`Check if the Controller has been opened and is currently connected.`
      | :sg:`attached() -> bool`

      Returns True if the Controller object is opened and connected.

      .. ## Controller.attached ##

   .. method:: as_joystick

      | :sl:`Returns a pygame.joystick.Joystick() object`
      | :sg:`as_joystick() -> Joystick object`

      Returns a pygame.joystick.Joystick() object created from this controller's index

      .. ## Controller.as_joystick ##

   .. method:: get_axis

      | :sl:`Get the current state of a joystick axis`
      | :sg:`get_axis(axis) -> int`

      Get the current state of a trigger or joystick axis.
      The axis argument must be one of the following constants::

         CONTROLLER_AXIS_LEFTX, CONTROLLER_AXIS_LEFTY,
         CONTROLLER_AXIS_RIGHTX, CONTROLLER_AXIS_RIGHTY,
         CONTROLLER_AXIS_TRIGGERLEFT, CONTROLLER_AXIS_TRIGGERRIGHT

      Joysticks can return a value between -32768 and 32767. Triggers however
      can only return a value between 0 and 32768.

      .. ## Controller.get_axis ##

   .. method:: get_button

      | :sl:`Get the current state of a button`
      | :sg:`get_button(button) -> bool`

      Get the current state of a button, True meaning it is pressed down.
      The button argument must be one of the following constants::

         CONTROLLER_BUTTON_A, CONTROLLER_BUTTON_B,
         CONTROLLER_BUTTON_X, CONTROLLER_BUTTON_Y
         CONTROLLER_BUTTON_DPAD_UP, CONTROLLER_BUTTON_DPAD_DOWN,
         CONTROLLER_BUTTON_DPAD_LEFT, CONTROLLER_BUTTON_DPAD_RIGHT,
         CONTROLLER_BUTTON_LEFTSHOULDER, CONTROLLER_BUTTON_RIGHTSHOULDER,
         CONTROLLER_BUTTON_LEFTSTICK, CONTROLLER_BUTTON_RIGHTSTICK,
         CONTROLLER_BUTTON_BACK, CONTROLLER_BUTTON_GUIDE,
         CONTROLLER_BUTTON_START


      .. ## Controller.get_button ##

   .. method:: get_mapping

      | :sl:`Get the mapping assigned to the controller`
      | :sg:`get_mapping() -> mapping`

      Returns a dict containing the mapping of the Controller. For more
      information see :meth:`Controller.set_mapping()`

      .. versionchanged:: 2.0.2: Return type changed from ``str`` to ``dict``

      .. ## Controller.get_mapping ##

   .. method:: set_mapping

      | :sl:`Assign a mapping to the controller`
      | :sg:`set_mapping(mapping) -> int`

      Rebind buttons, axes, triggers and dpads. The mapping should be a 
      dict containing all buttons, hats and axes. The easiest way to get this
      is to use the dict returned by :meth:`Controller.get_mapping`. To edit
      this mapping assign a value to the original button. The value of the
      dictionary must be a button, hat or axis represented in the following way:

      * For a button use: bX where X is the index of the button.
      * For a hat use: hX.Y where X is the index and the Y is the direction (up: 1, right: 2, down: 3, left: 4).
      * For an axis use: aX where x is the index of the axis.

      An example of mapping::

         mapping = controller.get_mapping() # Get current mapping
         mapping["a"] = "b3" # Remap button a to y
         mapping["y"] = "b0" # Remap button y to a
         controller.set_mapping(mapping) # Set the mapping


      The function will return 1 if a new mapping is added or 0 if an existing one is updated.

      .. versionchanged:: 2.0.2: Renamed from ``add_mapping`` to ``set_mapping``
      .. versionchanged:: 2.0.2: Argument type changed from ``str`` to ``dict``

      .. ## Controller.set_mapping ##

   .. method:: rumble

      | :sl:`Start a rumbling effect`
      | :sg:`rumble(low_frequency, high_frequency, duration) -> bool`

      Start a rumble effect on the controller, with the specified strength ranging
      from 0 to 1. Duration is length of the effect, in ms. Setting the duration
      to 0 will play the effect until another one overwrites it or
      :meth:`Controller.stop_rumble` is called. If an effect is already
      playing, then it will be overwritten.

      Returns True if the rumble was played successfully or False if the
      controller does not support it or :meth:`pygame.version.SDL` is below 2.0.9.

      .. versionadded:: 2.0.2

      .. ## Controller.rumble ##

   .. method:: stop_rumble

      | :sl:`Stop any rumble effect playing`
      | :sg:`stop_rumble() -> None`

      Stops any rumble effect playing on the controller. See
      :meth:`Controller.rumble` for more information.

      .. versionadded:: 2.0.2

      .. ## Controller.stop_rumble ##

.. ## pygame._sdl2.controller ##


--- Contenu du fichier : tests.rst.txt ---
.. include:: common.txt

:mod:`pygame.tests`
===================

.. module:: pygame.tests
   :synopsis: Pygame unit test suite package

| :sl:`Pygame unit test suite package`

A quick way to run the test suite package from the command line is to import
the go submodule with the Python -m option:

::

  python -m pygame.tests [<test options>]

Command line option --help displays a usage message. Available options
correspond to the :func:`pygame.tests.run` arguments.

The xxxx_test submodules of the tests package are unit test suites for
individual parts of pygame. Each can also be run as a main program. This is
useful if the test, such as cdrom_test, is interactive.

For pygame development the test suite can be run from a pygame distribution
root directory. Program ``run_tests.py`` is provided for convenience, though
test/go.py can be run directly.

Module level tags control which modules are included in a unit test run. Tags
are assigned to a unit test module with a corresponding <name>_tags.py module.
The tags module has the global __tags__, a list of tag names. For example,
``cdrom_test.py`` has a tag file ``cdrom_tags.py`` containing a tags list that
has the 'interactive' string. The 'interactive' tag indicates ``cdrom_test.py``
expects user input. It is excluded from a ``run_tests.py`` or
``pygame.tests.go`` run. 

Two other tags that are excluded are 'ignore' and 'subprocess_ignore'. These
two tags indicate unit tests that will not run on a particular platform, or
for which no corresponding pygame module is available.

The test runner will list each excluded module along with the tag responsible.

.. function:: run

   | :sl:`Run the pygame unit test suite`
   | :sg:`run(*args, **kwds) -> tuple`

   Positional arguments (optional):

   ::

       The names of tests to include. If omitted then all tests are run. Test names
       need not include the trailing '_test'.

   Keyword arguments:

   ::

       incomplete - fail incomplete tests (default False)
       nosubprocess - run all test suites in the current process
                      (default False, use separate subprocesses)
       dump - dump failures/errors as dict ready to eval (default False)
       file - if provided, the name of a file into which to dump failures/errors
       timings - if provided, the number of times to run each individual test to
                 get an average run time (default is run each test once)
       exclude - A list of TAG names to exclude from the run
       show_output - show silenced stderr/stdout on errors (default False)
       all - dump all results, not just errors (default False)
       randomize - randomize order of tests (default False)
       seed - if provided, a seed randomizer integer
       multi_thread - if provided, the number of THREADS in which to run
                      subprocessed tests
       time_out - if subprocess is True then the time limit in seconds before
                  killing a test (default 30)
       fake - if provided, the name of the fake tests package in the
              run_tests__tests subpackage to run instead of the normal
              pygame tests
       python - the path to a python executable to run subprocessed tests
                (default sys.executable)

   Return value:

   ::

       A tuple of total number of tests run, dictionary of error information.
       The dictionary is empty if no errors were recorded.

   By default individual test modules are run in separate subprocesses. This
   recreates normal pygame usage where ``pygame.init()`` and ``pygame.quit()``
   are called only once per program execution, and avoids unfortunate
   interactions between test modules. 
   
   A time limit is placed on test execution ensuring that any frozen tests
   processes are killed when their time allotment is expired. Use the single
   process option if threading is not working properly or if tests are taking
   too long. It is not guaranteed that all tests will pass in single process
   mode.

   Tests are run in a randomized order if the randomize argument is True or a
   seed argument is provided. If no seed integer is provided then the system
   time is used for the randomization seed value.

   Individual test modules may have a __tags__ attribute, a list of tag strings
   used to selectively omit modules from a run. By default only 'interactive'
   modules such as cdrom_test are ignored. An interactive module must be run
   from the console as a Python program.

   This function can only be called once per Python session. It is not
   reentrant.

   .. ## pygame.tests.run ##

.. ## pygame.tests ##


--- Contenu du fichier : cdrom.rst.txt ---
.. include:: common.txt

:mod:`pygame.cdrom`
===================

.. module:: pygame.cdrom
   :synopsis: pygame module for audio cdrom control

| :sl:`pygame module for audio cdrom control`

.. warning::
	This module is non functional in pygame 2.0 and above, unless you have manually compiled pygame with SDL1.
	This module will not be supported in the future.
	One alternative for python cdrom functionality is `pycdio <https://pypi.org/project/pycdio/>`_.
	
The cdrom module manages the ``CD`` and ``DVD`` drives on a computer. It can
also control the playback of audio CDs. This module needs to be initialized
before it can do anything. Each ``CD`` object you create represents a cdrom
drive and must also be initialized individually before it can do most things.

.. function:: init

   | :sl:`initialize the cdrom module`
   | :sg:`init() -> None`

   Initialize the cdrom module. This will scan the system for all ``CD``
   devices. The module must be initialized before any other functions will
   work. This automatically happens when you call ``pygame.init()``.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.init ##

.. function:: quit

   | :sl:`uninitialize the cdrom module`
   | :sg:`quit() -> None`

   Uninitialize the cdrom module. After you call this any existing ``CD``
   objects will no longer work.

   It is safe to call this function more than once.

   .. ## pygame.cdrom.quit ##

.. function:: get_init

   | :sl:`true if the cdrom module is initialized`
   | :sg:`get_init() -> bool`

   Test if the cdrom module is initialized or not. This is different than the
   ``CD.init()`` since each drive must also be initialized individually.

   .. ## pygame.cdrom.get_init ##

.. function:: get_count

   | :sl:`number of cd drives on the system`
   | :sg:`get_count() -> count`

   Return the number of cd drives on the system. When you create ``CD`` objects
   you need to pass an integer id that must be lower than this count. The count
   will be 0 if there are no drives on the system.

   .. ## pygame.cdrom.get_count ##

.. class:: CD

   | :sl:`class to manage a cdrom drive`
   | :sg:`CD(id) -> CD`

   You can create a ``CD`` object for each cdrom on the system. Use
   ``pygame.cdrom.get_count()`` to determine how many drives actually exist.
   The id argument is an integer of the drive, starting at zero.

   The ``CD`` object is not initialized, you can only call ``CD.get_id()`` and
   ``CD.get_name()`` on an uninitialized drive.

   It is safe to create multiple ``CD`` objects for the same drive, they will
   all cooperate normally.

   .. method:: init

      | :sl:`initialize a cdrom drive for use`
      | :sg:`init() -> None`

      Initialize the cdrom drive for use. The drive must be initialized for
      most ``CD`` methods to work. Even if the rest of pygame has been
      initialized.

      There may be a brief pause while the drive is initialized. Avoid
      ``CD.init()`` if the program should not stop for a second or two.

      .. ## CD.init ##

   .. method:: quit

      | :sl:`uninitialize a cdrom drive for use`
      | :sg:`quit() -> None`

      Uninitialize a drive for use. Call this when your program will not be
      accessing the drive for awhile.

      .. ## CD.quit ##

   .. method:: get_init

      | :sl:`true if this cd device initialized`
      | :sg:`get_init() -> bool`

      Test if this ``CDROM`` device is initialized. This is different than the
      ``pygame.cdrom.init()`` since each drive must also be initialized
      individually.

      .. ## CD.get_init ##

   .. method:: play

      | :sl:`start playing audio`
      | :sg:`play(track, start=None, end=None) -> None`

      Playback audio from an audio cdrom in the drive. Besides the track number
      argument, you can also pass a starting and ending time for playback. The
      start and end time are in seconds, and can limit the section of an audio
      track played.

      If you pass a start time but no end, the audio will play to the end of
      the track. If you pass a start time and 'None' for the end time, the
      audio will play to the end of the entire disc.

      See the ``CD.get_numtracks()`` and ``CD.get_track_audio()`` to find
      tracks to playback.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.play ##

   .. method:: stop

      | :sl:`stop audio playback`
      | :sg:`stop() -> None`

      Stops playback of audio from the cdrom. This will also lose the current
      playback position. This method does nothing if the drive isn't already
      playing audio.

      .. ## CD.stop ##

   .. method:: pause

      | :sl:`temporarily stop audio playback`
      | :sg:`pause() -> None`

      Temporarily stop audio playback on the ``CD``. The playback can be
      resumed at the same point with the ``CD.resume()`` method. If the ``CD``
      is not playing this method does nothing.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.pause ##

   .. method:: resume

      | :sl:`unpause audio playback`
      | :sg:`resume() -> None`

      Unpause a paused ``CD``. If the ``CD`` is not paused or already playing,
      this method does nothing.

      .. ## CD.resume ##

   .. method:: eject

      | :sl:`eject or open the cdrom drive`
      | :sg:`eject() -> None`

      This will open the cdrom drive and eject the cdrom. If the drive is
      playing or paused it will be stopped.

      .. ## CD.eject ##

   .. method:: get_id

      | :sl:`the index of the cdrom drive`
      | :sg:`get_id() -> id`

      Returns the integer id that was used to create the ``CD`` instance. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_id ##

   .. method:: get_name

      | :sl:`the system name of the cdrom drive`
      | :sg:`get_name() -> name`

      Return the string name of the drive. This is the system name used to
      represent the drive. It is often the drive letter or device name. This
      method can work on an uninitialized ``CD``.

      .. ## CD.get_name ##

   .. method:: get_busy

      | :sl:`true if the drive is playing audio`
      | :sg:`get_busy() -> bool`

      Returns True if the drive busy playing back audio.

      .. ## CD.get_busy ##

   .. method:: get_paused

      | :sl:`true if the drive is paused`
      | :sg:`get_paused() -> bool`

      Returns True if the drive is currently paused.

      .. ## CD.get_paused ##

   .. method:: get_current

      | :sl:`the current audio playback position`
      | :sg:`get_current() -> track, seconds`

      Returns both the current track and time of that track. This method works
      when the drive is either playing or paused.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_current ##

   .. method:: get_empty

      | :sl:`False if a cdrom is in the drive`
      | :sg:`get_empty() -> bool`

      Return False if there is a cdrom currently in the drive. If the drive is
      empty this will return True.

      .. ## CD.get_empty ##

   .. method:: get_numtracks

      | :sl:`the number of tracks on the cdrom`
      | :sg:`get_numtracks() -> count`

      Return the number of tracks on the cdrom in the drive. This will return
      zero of the drive is empty or has no tracks.

      .. ## CD.get_numtracks ##

   .. method:: get_track_audio

      | :sl:`true if the cdrom track has audio data`
      | :sg:`get_track_audio(track) -> bool`

      Determine if a track on a cdrom contains audio data. You can also call
      ``CD.num_tracks()`` and ``CD.get_all()`` to determine more information
      about the cdrom.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_audio ##

   .. method:: get_all

      | :sl:`get all track information`
      | :sg:`get_all() -> [(audio, start, end, length), ...]`

      Return a list with information for every track on the cdrom. The
      information consists of a tuple with four values. The audio value is True
      if the track contains audio data. The start, end, and length values are
      floating point numbers in seconds. Start and end represent absolute times
      on the entire disc.

      .. ## CD.get_all ##

   .. method:: get_track_start

      | :sl:`start time of a cdrom track`
      | :sg:`get_track_start(track) -> seconds`

      Return the absolute time in seconds where at start of the cdrom track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_start ##

   .. method:: get_track_length

      | :sl:`length of a cdrom track`
      | :sg:`get_track_length(track) -> seconds`

      Return a floating point value in seconds of the length of the cdrom
      track.

      Note, track 0 is the first track on the ``CD``. Track numbers start at
      zero.

      .. ## CD.get_track_length ##

   .. ## pygame.cdrom.CD ##

.. ## pygame.cdrom ##


--- Contenu du fichier : pygame.rst.txt ---
.. include:: common.txt

:mod:`pygame`
=============

.. module:: pygame
   :synopsis: the top level pygame package

| :sl:`the top level pygame package`

The pygame package represents the top-level package for others to use. Pygame
itself is broken into many submodules, but this does not affect programs that
use pygame.

As a convenience, most of the top-level variables in pygame have been placed
inside a module named :mod:`pygame.locals`. This is meant to be used with
``from pygame.locals import *``, in addition to ``import pygame``.

When you ``import pygame`` all available pygame submodules are automatically
imported. Be aware that some of the pygame modules are considered *optional*,
and may not be available. In that case, pygame will provide a placeholder
object instead of the module, which can be used to test for availability.

.. function:: init

   | :sl:`initialize all imported pygame modules`
   | :sg:`init() -> (numpass, numfail)`

   Initialize all imported pygame modules. No exceptions will be raised if a
   module fails, but the total number if successful and failed inits will be
   returned as a tuple. You can always initialize individual modules manually,
   but :func:`pygame.init` is a convenient way to get everything started. The
   ``init()`` functions for individual modules will raise exceptions when they
   fail.

   You may want to initialize the different modules separately to speed up your
   program or to not use modules your game does not require.

   It is safe to call this ``init()`` more than once as repeated calls will have
   no effect. This is true even if you have ``pygame.quit()`` all the modules.

   .. ## pygame.init ##

.. function:: quit

   | :sl:`uninitialize all pygame modules`
   | :sg:`quit() -> None`

   Uninitialize all pygame modules that have previously been initialized. When
   the Python interpreter shuts down, this method is called regardless, so your
   program should not need it, except when it wants to terminate its pygame
   resources and continue. It is safe to call this function more than once as
   repeated calls have no effect.

   .. note::
      Calling :func:`pygame.quit` will not exit your program. Consider letting
      your program end in the same way a normal Python program will end.

   .. ## pygame.quit ##

.. function:: get_init

   | :sl:`returns True if pygame is currently initialized`
   | :sg:`get_init() -> bool`

   Returns ``True`` if pygame is currently initialized.

   .. versionadded:: 1.9.5

   .. ## pygame.get_init ##

.. exception:: error

   | :sl:`standard pygame exception`
   | :sg:`raise pygame.error(message)`

   This exception is raised whenever a pygame or SDL operation fails. You
   can catch any anticipated problems and deal with the error. The exception is
   always raised with a descriptive message about the problem.

   Derived from the ``RuntimeError`` exception, which can also be used to catch
   these raised errors.

   .. ## pygame.error ##

.. function:: get_error

   | :sl:`get the current error message`
   | :sg:`get_error() -> errorstr`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.get_error ##

.. function:: set_error

   | :sl:`set the current error message`
   | :sg:`set_error(error_msg) -> None`

   SDL maintains an internal error message. This message will usually be
   given to you when :func:`pygame.error` is raised, so this function will
   rarely be needed.

   .. ## pygame.set_error ##

.. function:: get_sdl_version

   | :sl:`get the version number of SDL`
   | :sg:`get_sdl_version(linked=True) -> major, minor, patch`

   Returns the three version numbers of the SDL library. ``linked=True``
   will cause the function to return the version of the library that pygame
   is linked against while ``linked=False`` will cause the function to return
   the version of the library that pygame is compiled against.
   It can be used to detect which features may or may not be
   available through pygame.

   .. versionadded:: 1.7.0

   .. versionchanged:: 2.2.0 ``linked`` keyword argument added

   .. ## pygame.get_sdl_version ##

.. function:: get_sdl_byteorder

   | :sl:`get the byte order of SDL`
   | :sg:`get_sdl_byteorder() -> int`

   Returns the byte order of the SDL library. It returns ``1234`` for little
   endian byte order and ``4321`` for big endian byte order.

   .. versionadded:: 1.8

   .. ## pygame.get_sdl_byteorder ##

.. function:: register_quit

   | :sl:`register a function to be called when pygame quits`
   | :sg:`register_quit(callable) -> None`

   When :func:`pygame.quit` is called, all registered quit functions are
   called. Pygame modules do this automatically when they are initializing, so
   this function will rarely be needed.

   .. ## pygame.register_quit ##

.. function:: encode_string

   | :sl:`Encode a Unicode or bytes object`
   | :sg:`encode_string([obj [, encoding [, errors [, etype]]]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   encoding (string): If present, encoding to use. The default is
   ``'unicode_escape'``.

   errors (string): If given, how to handle unencodable characters. The default
   is ``'backslashreplace'``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``. For the default encoding and errors values
   there should be no encoding errors.

   This function is used in encoding file paths. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_string ##

.. function:: encode_file_path

   | :sl:`Encode a Unicode or bytes object as a file system path`
   | :sg:`encode_file_path([obj [, etype]]) -> bytes or None`

   obj: If Unicode, encode; if bytes, return unaltered; if anything else,
   return ``None``; if not given, raise ``SyntaxError``.

   etype (exception type): If given, the exception type to raise for an
   encoding error. The default is ``UnicodeEncodeError``, as returned by
   ``PyUnicode_AsEncodedString()``.

   This function is used to encode file paths in pygame. Encoding is to the
   codec as returned by ``sys.getfilesystemencoding()``. Keyword arguments are
   supported.

   .. versionadded:: 1.9.2 (primarily for use in unit tests)

   .. ## pygame.encode_file_path ##


:mod:`pygame.version`
=====================

.. module:: pygame.version
   :synopsis: small module containing version information

| :sl:`small module containing version information`

This module is automatically imported into the pygame package and can be used to
check which version of pygame has been imported.

.. data:: ver

   | :sl:`version number as a string`
   | :sg:`ver = '1.2'`

   This is the version represented as a string. It can contain a micro release
   number as well, e.g. ``'1.5.2'``

   .. ## pygame.version.ver ##

.. data:: vernum

   | :sl:`tupled integers of the version`
   | :sg:`vernum = (1, 5, 3)`

   This version information can easily be compared with other version
   numbers of the same format. An example of checking pygame version numbers
   would look like this:

   ::

       if pygame.version.vernum < (1, 5):
           print('Warning, older version of pygame (%s)' %  pygame.version.ver)
           disable_advanced_features = True

   .. versionadded:: 1.9.6 Attributes ``major``, ``minor``, and ``patch``.

   ::

      vernum.major == vernum[0]
      vernum.minor == vernum[1]
      vernum.patch == vernum[2]

   .. versionchanged:: 1.9.6
      ``str(pygame.version.vernum)`` returns a string like ``"2.0.0"`` instead
      of ``"(2, 0, 0)"``.

   .. versionchanged:: 1.9.6
      ``repr(pygame.version.vernum)`` returns a string like
      ``"PygameVersion(major=2, minor=0, patch=0)"`` instead of ``"(2, 0, 0)"``.

   .. ## pygame.version.vernum ##

.. data:: rev

   | :sl:`repository revision of the build`
   | :sg:`rev = 'a6f89747b551+'`

   The Mercurial node identifier of the repository checkout from which this
   package was built. If the identifier ends with a plus sign '+' then the
   package contains uncommitted changes. Please include this revision number
   in bug reports, especially for non-release pygame builds.
   
   Important note: pygame development has moved to github, this variable is 
   obsolete now. As soon as development shifted to github, this variable started
   returning an empty string ``""``. 
   It has always been returning an empty string since ``v1.9.5``.
   
   .. versionchanged:: 1.9.5
      Always returns an empty string ``""``.

   .. ## pygame.version.rev ##

.. data:: SDL

   | :sl:`tupled integers of the SDL library version`
   | :sg:`SDL = '(2, 0, 12)'`

   This is the SDL library version represented as an extended tuple. It also has
   attributes 'major', 'minor' & 'patch' that can be accessed like this:

   ::

     >>> pygame.version.SDL.major
     2

   printing the whole thing returns a string like this:

   ::

    >>> pygame.version.SDL
    SDLVersion(major=2, minor=0, patch=12)

   .. versionadded:: 2.0.0

   .. ## pygame.version.SDL ##

.. ## pygame.version ##

.. ## pygame ##

.. _environment-variables:

**Setting Environment Variables**

Some aspects of pygame's behaviour can be controlled by setting environment variables, they cover a wide
range of the library's functionality. Some of the variables are from pygame itself, while others come from
the underlying C SDL library that pygame uses.

In python, environment variables are usually set in code like this::

     import os
     os.environ['NAME_OF_ENVIRONMENT_VARIABLE'] = 'value_to_set'

Or to preserve users ability to override the variable::

     import os
     os.environ['ENV_VAR'] = os.environ.get('ENV_VAR', 'value')

If the variable is more useful for users of an app to set than the developer then they can set it like this:

**Windows**::

    set NAME_OF_ENVIRONMENT_VARIABLE=value_to_set
    python my_application.py

**Linux/Mac**::

    ENV_VAR=value python my_application.py

For some variables they need to be set before initialising pygame, some must be set before even importing pygame,
and others can simply be set right before the area of code they control is run.

Below is a list of environment variables, their settable values, and a brief description of what they do.

|

**Pygame Environment Variables**

These variables are defined by pygame itself.

|

::

 PYGAME_DISPLAY - Experimental (subject to change)
 Set index of the display to use, "0" is the default.

This sets the display where pygame will open its window
or screen. The value set here will be used if set before
calling :func:`pygame.display.set_mode()`, and as long as no
'display' parameter is passed into :func:`pygame.display.set_mode()`.

|

::

 PYGAME_FORCE_SCALE -
 Set to "photo" or "default".

This forces set_mode() to use the SCALED display mode and,
if "photo" is set, makes the scaling use the slowest, but
highest quality anisotropic scaling algorithm, if it is
available. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 PYGAME_BLEND_ALPHA_SDL2 - New in pygame 2.0.0
 Set to "1" to enable the SDL2 blitter.

This makes pygame use the SDL2 blitter for all alpha
blending. The SDL2 blitter is sometimes faster than
the default blitter but uses a different formula so
the final colours may differ. Must be set before
:func:`pygame.init()` is called.

|

::

 PYGAME_HIDE_SUPPORT_PROMPT -
 Set to "1" to hide the prompt.

This stops the welcome message popping up in the
console that tells you which version of python,
pygame & SDL you are using. Must be set before
importing pygame.

|

::

 PYGAME_FREETYPE -
 Set to "1" to enable.

This switches the pygame.font module to a pure
freetype implementation that bypasses SDL_ttf.
See the font module for why you might want to
do this. Must be set before importing pygame.

|

::

 PYGAME_CAMERA -
 Set to "opencv" or "vidcapture"

Forces the library backend used in the camera
module, overriding the platform defaults. Must
be set before calling :func:`pygame.camera.init()`.

In pygame 2.0.3, backends can be set programmatically instead, and the old
OpenCV backend has been replaced with one on top of "opencv-python," rather
than the old "highgui" OpenCV port. Also, there is a new native Windows
backend available.

|
|

**SDL Environment Variables**

These variables are defined by SDL.

For documentation on the environment variables available in
pygame 1 try `here
<https://www.libsdl.org/release/SDL-1.2.15/docs/html/sdlenvvars.html>`__.
For Pygame 2, some selected environment variables are listed below.

|

::

 SDL_VIDEO_CENTERED -
 Set to "1" to enable centering the window.

This will make the pygame window open in the centre of the display.
Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEO_WINDOW_POS -
 Set to "x,y" to position the top left corner of the window.

This allows control over the placement of the pygame window within
the display. Must be set before calling :func:`pygame.display.set_mode()`.

|

::

 SDL_VIDEODRIVER -
 Set to "drivername" to change the video driver used.

On some platforms there are multiple video drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.display.init()`.

|

::

 SDL_AUDIODRIVER -
 Set to "drivername" to change the audio driver used.

On some platforms there are multiple audio drivers available and
this allows users to pick between them. More information is available
`here <https://wiki.libsdl.org/FAQUsingSDL>`__. Must be set before
calling :func:`pygame.init()` or :func:`pygame.mixer.init()`.

|

::

 SDL_VIDEO_ALLOW_SCREENSAVER
 Set to "1" to allow screensavers while pygame apps are running.

By default pygame apps disable screensavers while
they are running. Setting this environment variable allows users or
developers to change that and make screensavers run again.

|

::

 SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
 Set to "0" to re-enable the compositor.

By default SDL tries to disable the X11 compositor for all pygame
apps. This is usually a good thing as it's faster, however if you
have an app which *doesn't* update every frame and are using linux
you may want to disable this bypass. The bypass has reported problems
on KDE linux. This variable is only used on x11/linux platforms.

|

::

 SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 Set to "1" to allow joysticks to be updated even when the window is out of focus

By default, when the window is not in focus, input devices do not get
updated. However, using this environment variable it is possible to get
joystick updates even when the window is in the background. Must be set
before calling :func:`pygame.init()` or :func:`pygame.joystick.init()`.


--- Contenu du fichier : camera.rst.txt ---
.. include:: common.txt

:mod:`pygame.camera`
====================

.. module:: pygame.camera
   :synopsis: pygame module for camera use

| :sl:`pygame module for camera use`

.. note::
   Use import pygame.camera before using this module.

Pygame currently supports Linux (V4L2) and Windows (MSMF) cameras natively,
with wider platform support available via an integrated OpenCV backend.

.. versionadded:: 2.0.2 Windows native camera support
.. versionadded:: 2.0.3 New OpenCV backends

EXPERIMENTAL!: This API may change or disappear in later pygame releases. If
you use this, your code will very likely break with the next pygame release.

The Bayer to ``RGB`` function is based on:

::

 Sonix SN9C101 based webcam basic I/F routines
 Copyright (C) 2004 Takafumi Mizuno <taka-qce@ls-a.jp>
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:
 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 SUCH DAMAGE.

New in pygame 1.9.0.

.. function:: init

   | :sl:`Module init`
   | :sg:`init(backend = None) -> None`

   This function starts up the camera module, choosing the best webcam backend
   it can find for your system. This is not guaranteed to succeed, and may even
   attempt to import third party modules, like `OpenCV`. If you want to
   override its backend choice, you can call pass the name of the backend you
   want into this function. More about backends in
   :func:`get_backends()`.

   .. versionchanged:: 2.0.3 Option to explicitly select backend

   .. ## pygame.camera.init ##

.. function:: get_backends

   | :sl:`Get the backends supported on this system`
   | :sg:`get_backends() -> [str]`

   This function returns every backend it thinks has a possibility of working
   on your system, in order of priority.

   pygame.camera Backends:
   ::

      Backend           OS        Description
      ---------------------------------------------------------------------------------
      _camera (MSMF)    Windows   Builtin, works on Windows 8+ Python3
      _camera (V4L2)    Linux     Builtin
      OpenCV            Any       Uses `opencv-python` module, can't enumerate cameras
      OpenCV-Mac        Mac       Same as OpenCV, but has camera enumeration
      VideoCapture      Windows   Uses abandoned `VideoCapture` module, can't enumerate
                                  cameras, may be removed in the future

   There are two main differences among backends.

   The _camera backends are built in to pygame itself, and require no third
   party imports. All the other backends do. For the OpenCV and VideoCapture
   backends, those modules need to be installed on your system.

   The other big difference is "camera enumeration." Some backends don't have
   a way to list out camera names, or even the number of cameras on the
   system. In these cases, :func:`list_cameras()` will return
   something like ``[0]``. If you know you have multiple cameras on the 
   system, these backend ports will pass through a "camera index number" 
   through if you use that as the ``device`` parameter.

   .. versionadded:: 2.0.3

   .. ## pygame.camera.get_backends ##

.. function:: colorspace

   | :sl:`Surface colorspace conversion`
   | :sg:`colorspace(Surface, format, DestSurface = None) -> Surface`

   Allows for conversion from "RGB" to a destination colorspace of "HSV" or
   "YUV". The source and destination surfaces must be the same size and pixel
   depth. This is useful for computer vision on devices with limited processing
   power. Capture as small of an image as possible, ``transform.scale()`` it
   even smaller, and then convert the colorspace to ``YUV`` or ``HSV`` before
   doing any processing on it.

   .. ## pygame.camera.colorspace ##

.. function:: list_cameras

   | :sl:`returns a list of available cameras`
   | :sg:`list_cameras() -> [cameras]`

   Checks the computer for available cameras and returns a list of strings of
   camera names, ready to be fed into :class:`pygame.camera.Camera`.

   If the camera backend doesn't support webcam enumeration, this will return
   something like ``[0]``. See :func:`get_backends()` for much more
   information.

   .. ## pygame.camera.list_cameras ##

.. class:: Camera

   | :sl:`load a camera`
   | :sg:`Camera(device, (width, height), format) -> Camera`

   Loads a camera. On Linux, the device is typically something like
   "/dev/video0". Default width and height are 640 by 480. 
   Format is the desired colorspace of the output. 
   This is useful for computer vision purposes. The default is
   ``RGB``. The following are supported:

      * ``RGB`` - Red, Green, Blue

      * ``YUV`` - Luma, Blue Chrominance, Red Chrominance

      * ``HSV`` - Hue, Saturation, Value

   .. method:: start

      | :sl:`opens, initializes, and starts capturing`
      | :sg:`start() -> None`

      Opens the camera device, attempts to initialize it, and begins recording
      images to a buffer. The camera must be started before any of the below
      functions can be used.

      .. ## Camera.start ##

   .. method:: stop

      | :sl:`stops, uninitializes, and closes the camera`
      | :sg:`stop() -> None`

      Stops recording, uninitializes the camera, and closes it. Once a camera
      is stopped, the below functions cannot be used until it is started again.

      .. ## Camera.stop ##

   .. method:: get_controls

      | :sl:`gets current values of user controls`
      | :sg:`get_controls() -> (hflip = bool, vflip = bool, brightness)`

      If the camera supports it, get_controls will return the current settings
      for horizontal and vertical image flip as bools and brightness as an int.
      If unsupported, it will return the default values of (0, 0, 0). Note that
      the return values here may be different than those returned by
      set_controls, though these are more likely to be correct.

      .. ## Camera.get_controls ##

   .. method:: set_controls

      | :sl:`changes camera settings if supported by the camera`
      | :sg:`set_controls(hflip = bool, vflip = bool, brightness) -> (hflip = bool, vflip = bool, brightness)`

      Allows you to change camera settings if the camera supports it. The
      return values will be the input values if the camera claims it succeeded
      or the values previously in use if not. Each argument is optional, and
      the desired one can be chosen by supplying the keyword, like hflip. Note
      that the actual settings being used by the camera may not be the same as
      those returned by set_controls. On Windows, :code:`hflip` and :code:`vflip` are
      implemented by pygame, not by the Camera, so they should always work, but
      :code:`brightness` is unsupported.

      .. ## Camera.set_controls ##

   .. method:: get_size

      | :sl:`returns the dimensions of the images being recorded`
      | :sg:`get_size() -> (width, height)`

      Returns the current dimensions of the images being captured by the
      camera. This will return the actual size, which may be different than the
      one specified during initialization if the camera did not support that
      size.

      .. ## Camera.get_size ##

   .. method:: query_image

      | :sl:`checks if a frame is ready`
      | :sg:`query_image() -> bool`

      If an image is ready to get, it returns true. Otherwise it returns false.
      Note that some webcams will always return False and will only queue a
      frame when called with a blocking function like :func:`get_image()`.
      On Windows (MSMF), and the  OpenCV backends, :func:`query_image()`
      should be reliable, though. This is useful to separate the framerate of
      the game from that of the camera without having to use threading. 

      .. ## Camera.query_image ##

   .. method:: get_image

      | :sl:`captures an image as a Surface`
      | :sg:`get_image(Surface = None) -> Surface`

      Pulls an image off of the buffer as an ``RGB`` Surface. It can optionally
      reuse an existing Surface to save time. The bit-depth of the surface is
      24 bits on Linux, 32 bits on Windows, or the same as the optionally
      supplied Surface.

      .. ## Camera.get_image ##

   .. method:: get_raw

      | :sl:`returns an unmodified image as bytes`
      | :sg:`get_raw() -> bytes`

      Gets an image from a camera as a string in the native pixelformat of the
      camera. Useful for integration with other libraries. This returns a
      bytes object

      .. ## Camera.get_raw ##

   .. ## pygame.camera.Camera ##

.. ## pygame.camera ##


--- Contenu du fichier : mouse.rst.txt ---
.. include:: common.txt

:mod:`pygame.mouse`
===================

.. module:: pygame.mouse
   :synopsis: pygame module to work with the mouse

| :sl:`pygame module to work with the mouse`

The mouse functions can be used to get the current state of the mouse device.
These functions can also alter the system cursor for the mouse.

When the display mode is set, the event queue will start receiving mouse
events. The mouse buttons generate ``pygame.MOUSEBUTTONDOWN`` and
``pygame.MOUSEBUTTONUP`` events when they are pressed and released. These
events contain a button attribute representing which button was pressed. The
mouse wheel will generate ``pygame.MOUSEBUTTONDOWN`` and 
``pygame.MOUSEBUTTONUP`` events when rolled. The button will be set to 4 
when the wheel is rolled up, and to button 5 when the wheel is rolled down. 
Whenever the mouse is moved it generates a ``pygame.MOUSEMOTION`` event. The 
mouse movement is broken into small and accurate motion events. As the mouse 
is moving many motion events will be placed on the queue. Mouse motion events 
that are not properly cleaned from the event queue are the primary reason the 
event queue fills up.

If the mouse cursor is hidden, and input is grabbed to the current display the
mouse will enter a virtual input mode, where the relative movements of the
mouse will never be stopped by the borders of the screen. See the functions
``pygame.mouse.set_visible()`` and ``pygame.event.set_grab()`` to get this
configured.


**Mouse Wheel Behavior in pygame 2**

There is proper functionality for mouse wheel behaviour with pygame 2 supporting
``pygame.MOUSEWHEEL`` events.  The new events support horizontal and vertical 
scroll movements, with signed integer values representing the amount scrolled 
(``x`` and ``y``), as well as ``flipped`` direction (the set positive and 
negative values for each axis is flipped). Read more about SDL2 
input-related changes here `<https://wiki.libsdl.org/MigrationGuide#input>`_

In pygame 2, the mouse wheel functionality can be used by listening for the 
``pygame.MOUSEWHEEL`` type of an event (Bear in mind they still emit 
``pygame.MOUSEBUTTONDOWN`` events like in pygame 1.x, as well).
When this event is triggered, a developer can access the appropriate ``Event`` object 
with ``pygame.event.get()``. The object can be used to access data about the mouse 
scroll, such as ``which`` (it will tell you what exact mouse device trigger the event).

.. code-block:: python
   :caption: Code example of mouse scroll (tested on 2.0.0.dev7)
   :name: test.py

   # Taken from husano896's PR thread (slightly modified)
   import pygame
   from pygame.locals import *
   pygame.init()
   screen = pygame.display.set_mode((640, 480))
   clock = pygame.time.Clock()
   
   def main():
      while True:
         for event in pygame.event.get():
               if event.type == QUIT:
                  pygame.quit()
                  return
               elif event.type == MOUSEWHEEL:
                  print(event) 
                  print(event.x, event.y)
                  print(event.flipped)
                  print(event.which)
                  # can access properties with 
                  # proper notation(ex: event.y)
         clock.tick(60)

   # Execute game:
   main()

.. function:: get_pressed

   | :sl:`get the state of the mouse buttons`
   | :sg:`get_pressed(num_buttons=3) -> (button1, button2, button3)`
   | :sg:`get_pressed(num_buttons=5) -> (button1, button2, button3, button4, button5)`

   Returns a sequence of booleans representing the state of all the mouse
   buttons. A true value means the mouse is currently being pressed at the time
   of the call.

   Note, to get all of the mouse events it is better to use either 
   ``pygame.event.wait()`` or ``pygame.event.get()`` and check all of those 
   events to see if they are ``MOUSEBUTTONDOWN``, ``MOUSEBUTTONUP``, or
   ``MOUSEMOTION``.

   Note, that on ``X11`` some X servers use middle button emulation. When you
   click both buttons ``1`` and ``3`` at the same time a ``2`` button event 
   can be emitted.

   Note, remember to call ``pygame.event.get()`` before this function.
   Otherwise it will not work as expected.

   To support five button mice, an optional parameter ``num_buttons`` has been 
   added in pygame 2. When this is set to ``5``, ``button4`` and ``button5`` 
   are added to the returned tuple. Only ``3`` and ``5`` are valid values 
   for this parameter.
   
   .. versionchanged:: 2.0.0 ``num_buttons`` argument added

   .. ## pygame.mouse.get_pressed ##

.. function:: get_pos

   | :sl:`get the mouse cursor position`
   | :sg:`get_pos() -> (x, y)`

   Returns the ``x`` and ``y`` position of the mouse cursor. The position is
   relative to the top-left corner of the display. The cursor position can be
   located outside of the display window, but is always constrained to the
   screen.

   .. ## pygame.mouse.get_pos ##

.. function:: get_rel

   | :sl:`get the amount of mouse movement`
   | :sg:`get_rel() -> (x, y)`

   Returns the amount of movement in ``x`` and ``y`` since the previous call to
   this function. The relative movement of the mouse cursor is constrained to
   the edges of the screen, but see the virtual input mouse mode for a way
   around this. Virtual input mode is described at the top of the page.

   .. ## pygame.mouse.get_rel ##

.. function:: set_pos

   | :sl:`set the mouse cursor position`
   | :sg:`set_pos([x, y]) -> None`

   Set the current mouse position to arguments given. If the mouse cursor is
   visible it will jump to the new coordinates. Moving the mouse will generate
   a new ``pygame.MOUSEMOTION`` event.

   .. ## pygame.mouse.set_pos ##

.. function:: set_visible

   | :sl:`hide or show the mouse cursor`
   | :sg:`set_visible(bool) -> bool`

   If the bool argument is true, the mouse cursor will be visible. This will
   return the previous visible state of the cursor.

   .. ## pygame.mouse.set_visible ##

.. function:: get_visible

   | :sl:`get the current visibility state of the mouse cursor`
   | :sg:`get_visible() -> bool`

   Get the current visibility state of the mouse cursor. ``True`` if the mouse is
   visible, ``False`` otherwise.

   .. versionadded:: 2.0.0

   .. ## pygame.mouse.get_visible ##

.. function:: get_focused

   | :sl:`check if the display is receiving mouse input`
   | :sg:`get_focused() -> bool`

   Returns true when pygame is receiving mouse input events (or, in windowing
   terminology, is "active" or has the "focus").

   This method is most useful when working in a window. By contrast, in
   full-screen mode, this method always returns true.

   Note: under ``MS`` Windows, the window that has the mouse focus also has the
   keyboard focus. But under X-Windows, one window can receive mouse events and
   another receive keyboard events. ``pygame.mouse.get_focused()`` indicates
   whether the pygame window receives mouse events.

   .. ## pygame.mouse.get_focused ##

.. function:: set_cursor

   | :sl:`set the mouse cursor to a new cursor`
   | :sg:`set_cursor(pygame.cursors.Cursor) -> None`
   | :sg:`set_cursor(size, hotspot, xormasks, andmasks) -> None`
   | :sg:`set_cursor(hotspot, surface) -> None`
   | :sg:`set_cursor(constant) -> None`

   Set the mouse cursor to something new. This function accepts either an explicit
   ``Cursor`` object or arguments to create a ``Cursor`` object.

   See :class:`pygame.cursors.Cursor` for help creating cursors and for examples.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.set_cursor ##


.. function:: get_cursor

   | :sl:`get the current mouse cursor`
   | :sg:`get_cursor() -> pygame.cursors.Cursor`

   Get the information about the mouse system cursor. The return value contains
   the same data as the arguments passed into :func:`pygame.mouse.set_cursor()`.

   .. note:: Code that unpacked a get_cursor() call into 
             ``size, hotspot, xormasks, andmasks`` will still work,
	     assuming the call returns an old school type cursor.

   .. versionchanged:: 2.0.1

   .. ## pygame.mouse.get_cursor ##

.. ## pygame.mouse ##


--- Contenu du fichier : mixer.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer`
===================

.. module:: pygame.mixer
   :synopsis: pygame module for loading and playing sounds

| :sl:`pygame module for loading and playing sounds`

This module contains classes for loading Sound objects and controlling
playback. The mixer module is optional and depends on SDL_mixer. Your program
should test that :mod:`pygame.mixer` is available and initialized before using
it.

The mixer module has a limited number of channels for playback of sounds.
Usually programs tell pygame to start playing audio and it selects an available
channel automatically. The default is 8 simultaneous channels, but complex
programs can get more precise control over the number of channels and their
use.

All sound playback is mixed in background threads. When you begin to play a
Sound object, it will return immediately while the sound continues to play. A
single Sound object can also be actively played back multiple times.

The mixer also has a special streaming channel. This is for music playback and
is accessed through the :mod:`pygame.mixer.music` module. Consider using this
module for playing long running music. Unlike mixer module, the music module
streams the music from the files without loading music at once into memory.

The mixer module must be initialized like other pygame modules, but it has some
extra conditions. The ``pygame.mixer.init()`` function takes several optional
arguments to control the playback rate and sample size. Pygame will default to
reasonable values, but pygame cannot perform Sound resampling, so the mixer
should be initialized to match the values of your audio resources.

``NOTE``: For less laggy sound use a smaller buffer size. The default
is set to reduce the chance of scratchy sounds on some computers. You can
change the default buffer by calling :func:`pygame.mixer.pre_init` before
:func:`pygame.mixer.init` or :func:`pygame.init` is called. For example:
``pygame.mixer.pre_init(44100,-16,2, 1024)``


.. function:: init

   | :sl:`initialize the mixer module`
   | :sg:`init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Initialize the mixer module for Sound loading and playback. The default
   arguments can be overridden to provide specific audio mixing. Keyword
   arguments are accepted. For backwards compatibility, argument values of 
   0 are replaced with the startup defaults, except for ``allowedchanges``,
   where -1 is used. (startup defaults may be changed by a :func:`pre_init` call).

   The size argument represents how many bits are used for each audio sample.
   If the value is negative then signed sample values will be used. Positive
   values mean unsigned audio samples will be used. An invalid value raises an
   exception.

   The channels argument is used to specify whether to use mono or stereo. 1
   for mono and 2 for stereo.

   The buffer argument controls the number of internal samples used in the
   sound mixer. The default value should work for most cases. It can be lowered
   to reduce latency, but sound dropout may occur. It can be raised to larger
   values to ensure playback never skips, but it will impose latency on sound
   playback. The buffer size must be a power of two (if not it is rounded up to
   the next nearest power of 2).

   Some platforms require the :mod:`pygame.mixer` module to be initialized
   after the display modules have initialized. The top level ``pygame.init()``
   takes care of this automatically, but cannot pass any arguments to the mixer
   init. To solve this, mixer has a function ``pygame.mixer.pre_init()`` to set
   the proper defaults before the toplevel init is used.

   When using allowedchanges=0 it will convert the samples at runtime to match
   what the hardware supports. For example a sound card may not
   support 16bit sound samples, so instead it will use 8bit samples internally.
   If AUDIO_ALLOW_FORMAT_CHANGE is supplied, then the requested format will
   change to the closest that SDL2 supports.

   Apart from 0, allowedchanged accepts the following constants ORed together:

      - AUDIO_ALLOW_FREQUENCY_CHANGE
      - AUDIO_ALLOW_FORMAT_CHANGE
      - AUDIO_ALLOW_CHANNELS_CHANGE
      - AUDIO_ALLOW_ANY_CHANGE

   It is safe to call this more than once, but after the mixer is initialized
   you cannot change the playback arguments without first calling
   ``pygame.mixer.quit()``.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionchanged:: 2.0.0 ``size`` can be 32 (32-bit floats).
   .. versionchanged:: 2.0.0 ``channels`` can also be 4 or 6.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.init ##

.. function:: pre_init

   | :sl:`preset the mixer init arguments`
   | :sg:`pre_init(frequency=44100, size=-16, channels=2, buffer=512, devicename=None, allowedchanges=AUDIO_ALLOW_FREQUENCY_CHANGE | AUDIO_ALLOW_CHANNELS_CHANGE) -> None`

   Call pre_init to change the defaults used when the real
   ``pygame.mixer.init()`` is called. Keyword arguments are accepted. The best
   way to set custom mixer playback values is to call
   ``pygame.mixer.pre_init()`` before calling the top level ``pygame.init()``.
   For backwards compatibility, argument values of 0 are replaced with the
   startup defaults, except for ``allowedchanges``, where -1 is used.

   .. versionchanged:: 1.8 The default ``buffersize`` changed from 1024 to 3072.
   .. versionchanged:: 1.9.1 The default ``buffersize`` changed from 3072 to 4096.
   .. versionchanged:: 2.0.0 The default ``buffersize`` changed from 4096 to 512. 
   .. versionchanged:: 2.0.0 The default ``frequency`` changed from 22050 to 44100.
   .. versionadded:: 2.0.0 ``allowedchanges``, ``devicename`` arguments added

   .. ## pygame.mixer.pre_init ##

.. function:: quit

   | :sl:`uninitialize the mixer`
   | :sg:`quit() -> None`

   This will uninitialize :mod:`pygame.mixer`. All playback will stop and any
   loaded Sound objects may not be compatible with the mixer if it is
   reinitialized later.

   .. ## pygame.mixer.quit ##

.. function:: get_init

   | :sl:`test if the mixer is initialized`
   | :sg:`get_init() -> (frequency, format, channels)`

   If the mixer is initialized, this returns the playback arguments it is
   using. If the mixer has not been initialized this returns ``None``.

   .. ## pygame.mixer.get_init ##

.. function:: stop

   | :sl:`stop playback of all sound channels`
   | :sg:`stop() -> None`

   This will stop all playback of all active mixer channels.

   .. ## pygame.mixer.stop ##

.. function:: pause

   | :sl:`temporarily stop playback of all sound channels`
   | :sg:`pause() -> None`

   This will temporarily stop all playback on the active mixer channels. The
   playback can later be resumed with ``pygame.mixer.unpause()``

   .. ## pygame.mixer.pause ##

.. function:: unpause

   | :sl:`resume paused playback of sound channels`
   | :sg:`unpause() -> None`

   This will resume all active sound channels after they have been paused.

   .. ## pygame.mixer.unpause ##

.. function:: fadeout

   | :sl:`fade out the volume on all sounds before stopping`
   | :sg:`fadeout(time) -> None`

   This will fade out the volume on all active channels over the time argument
   in milliseconds. After the sound is muted the playback will stop.

   .. ## pygame.mixer.fadeout ##

.. function:: set_num_channels

   | :sl:`set the total number of playback channels`
   | :sg:`set_num_channels(count) -> None`

   Sets the number of available channels for the mixer. The default value is 8.
   The value can be increased or decreased. If the value is decreased, sounds
   playing on the truncated channels are stopped.

   .. ## pygame.mixer.set_num_channels ##

.. function:: get_num_channels

   | :sl:`get the total number of playback channels`
   | :sg:`get_num_channels() -> count`

   Returns the number of currently active playback channels.

   .. ## pygame.mixer.get_num_channels ##

.. function:: set_reserved

   | :sl:`reserve channels from being automatically used`
   | :sg:`set_reserved(count) -> count`

   The mixer can reserve any number of channels that will not be automatically
   selected for playback by Sounds. This means that whenever you play a Sound 
   without specifying a channel, a reserved channel will never be used. If sounds
   are currently playing on the reserved channels they will not be stopped.

   This allows the application to reserve a specific number of channels for
   important sounds that must not be dropped or have a guaranteed channel to
   play on.

   Will return number of channels actually reserved, this may be less than requested
   depending on the number of channels previously allocated.

   .. ## pygame.mixer.set_reserved ##

.. function:: find_channel

   | :sl:`find an unused channel`
   | :sg:`find_channel(force=False) -> Channel`

   This will find and return an inactive Channel object. If there are no
   inactive Channels this function will return ``None``. If there are no
   inactive channels and the force argument is ``True``, this will find the
   Channel with the longest running Sound and return it.

   .. ## pygame.mixer.find_channel ##

.. function:: get_busy

   | :sl:`test if any sound is being mixed`
   | :sg:`get_busy() -> bool`

   Returns ``True`` if the mixer is busy mixing any channels. If the mixer is
   idle then this return ``False``.

   .. ## pygame.mixer.get_busy ##

.. function:: get_sdl_mixer_version

   | :sl:`get the mixer's SDL version`
   | :sg:`get_sdl_mixer_version() -> (major, minor, patch)`
   | :sg:`get_sdl_mixer_version(linked=True) -> (major, minor, patch)`

   :param bool linked: if ``True`` (default) the linked version number is
      returned, otherwise the compiled version number is returned

   :returns: the mixer's SDL library version number (linked or compiled
      depending on the ``linked`` parameter) as a tuple of 3 integers
      ``(major, minor, patch)``
   :rtype: tuple

   .. note::
      The linked and compile version numbers should be the same.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.get_sdl_mixer_version ##

.. class:: Sound

   | :sl:`Create a new Sound object from a file or buffer object`
   | :sg:`Sound(filename) -> Sound`
   | :sg:`Sound(file=filename) -> Sound`
   | :sg:`Sound(file=pathlib_path) -> Sound`
   | :sg:`Sound(buffer) -> Sound`
   | :sg:`Sound(buffer=buffer) -> Sound`
   | :sg:`Sound(object) -> Sound`
   | :sg:`Sound(file=object) -> Sound`
   | :sg:`Sound(array=object) -> Sound`

   Load a new sound buffer from a filename, a python file object or a readable
   buffer object. Limited resampling will be performed to help the sample match
   the initialize arguments for the mixer. A Unicode string can only be a file
   pathname. A bytes object can be either a pathname or a buffer object.
   Use the 'file' or 'buffer' keywords to avoid ambiguity; otherwise Sound may
   guess wrong. If the array keyword is used, the object is expected to export 
   a new buffer interface (The object is checked for a buffer interface first.)

   The Sound object represents actual sound sample data. Methods that change
   the state of the Sound object will the all instances of the Sound playback.
   A Sound object also exports a new buffer interface.

   The Sound can be loaded from an ``OGG`` audio file or from an uncompressed
   ``WAV``.

   Note: The buffer will be copied internally, no data will be shared between
   it and the Sound object.

   For now buffer and array support is consistent with ``sndarray.make_sound``
   for NumPy arrays, in that sample sign and byte order are ignored. This
   will change, either by correctly handling sign and byte order, or by raising
   an exception when different. Also, source samples are truncated to fit the
   audio sample size. This will not change.

   .. versionadded:: 1.8 ``pygame.mixer.Sound(buffer)``
   .. versionadded:: 1.9.2
      :class:`pygame.mixer.Sound` keyword arguments and array interface support
   .. versionadded:: 2.0.1 pathlib.Path support on Python 3.

   .. method:: play

      | :sl:`begin sound playback`
      | :sg:`play(loops=0, maxtime=0, fade_ms=0) -> Channel`

      Begin playback of the Sound (i.e., on the computer's speakers) on an
      available Channel. This will forcibly select a Channel, so playback may
      cut off a currently playing sound if necessary.

      The loops argument controls how many times the sample will be repeated
      after being played the first time. A value of 5 means that the sound will
      be played once, then repeated five times, and so is played a total of six
      times. The default value (zero) means the Sound is not repeated, and so
      is only played once. If loops is set to -1 the Sound will loop
      indefinitely (though you can still call ``stop()`` to stop it).

      The maxtime argument can be used to stop playback after a given number of
      milliseconds.

      The fade_ms argument will make the sound start playing at 0 volume and
      fade up to full volume over the time given. The sample may end before the
      fade-in is complete.

      This returns the Channel object for the channel that was selected.

      .. ## Sound.play ##

   .. method:: stop

      | :sl:`stop sound playback`
      | :sg:`stop() -> None`

      This will stop the playback of this Sound on any active Channels.

      .. ## Sound.stop ##

   .. method:: fadeout

      | :sl:`stop sound playback after fading out`
      | :sg:`fadeout(time) -> None`

      This will stop playback of the sound after fading it out over the time
      argument in milliseconds. The Sound will fade and stop on all actively
      playing channels.

      .. ## Sound.fadeout ##

   .. method:: set_volume

      | :sl:`set the playback volume for this Sound`
      | :sg:`set_volume(value) -> None`

      This will set the playback volume (loudness) for this Sound. This will
      immediately affect the Sound if it is playing. It will also affect any
      future playback of this Sound.

      :param float value: volume in the range of 0.0 to 1.0 (inclusive)

         | If value < 0.0, the volume will not be changed
         | If value > 1.0, the volume will be set to 1.0

      .. ## Sound.set_volume ##

   .. method:: get_volume

      | :sl:`get the playback volume`
      | :sg:`get_volume() -> value`

      Return a value from 0.0 to 1.0 representing the volume for this Sound.

      .. ## Sound.get_volume ##

   .. method:: get_num_channels

      | :sl:`count how many times this Sound is playing`
      | :sg:`get_num_channels() -> count`

      Return the number of active channels this sound is playing on.

      .. ## Sound.get_num_channels ##

   .. method:: get_length

      | :sl:`get the length of the Sound`
      | :sg:`get_length() -> seconds`

      Return the length of this Sound in seconds.

      .. ## Sound.get_length ##

   .. method:: get_raw

      | :sl:`return a bytestring copy of the Sound samples.`
      | :sg:`get_raw() -> bytes`

      Return a copy of the Sound object buffer as a bytes.

      .. versionadded:: 1.9.2

      .. ## Sound.get_raw ##

   .. ## pygame.mixer.Sound ##

.. class:: Channel

   | :sl:`Create a Channel object for controlling playback`
   | :sg:`Channel(id) -> Channel`

   Return a Channel object for one of the current channels. The id must be a
   value from 0 to the value of ``pygame.mixer.get_num_channels()``.

   The Channel object can be used to get fine control over the playback of
   Sounds. A channel can only playback a single Sound at time. Using channels
   is entirely optional since pygame can manage them by default.

   .. method:: play

      | :sl:`play a Sound on a specific Channel`
      | :sg:`play(Sound, loops=0, maxtime=0, fade_ms=0) -> None`

      This will begin playback of a Sound on a specific Channel. If the Channel
      is currently playing any other Sound it will be stopped.

      The loops argument has the same meaning as in ``Sound.play()``: it is the
      number of times to repeat the sound after the first time. If it is 3, the
      sound will be played 4 times (the first time, then three more). If loops
      is -1 then the playback will repeat indefinitely.

      As in ``Sound.play()``, the maxtime argument can be used to stop playback
      of the Sound after a given number of milliseconds.

      As in ``Sound.play()``, the fade_ms argument can be used fade in the
      sound.

      .. ## Channel.play ##

   .. method:: stop

      | :sl:`stop playback on a Channel`
      | :sg:`stop() -> None`

      Stop sound playback on a channel. After playback is stopped the channel
      becomes available for new Sounds to play on it.

      .. ## Channel.stop ##

   .. method:: pause

      | :sl:`temporarily stop playback of a channel`
      | :sg:`pause() -> None`

      Temporarily stop the playback of sound on a channel. It can be resumed at
      a later time with ``Channel.unpause()``

      .. ## Channel.pause ##

   .. method:: unpause

      | :sl:`resume pause playback of a channel`
      | :sg:`unpause() -> None`

      Resume the playback on a paused channel.

      .. ## Channel.unpause ##

   .. method:: fadeout

      | :sl:`stop playback after fading channel out`
      | :sg:`fadeout(time) -> None`

      Stop playback of a channel after fading out the sound over the given time
      argument in milliseconds.

      .. ## Channel.fadeout ##

   .. method:: set_volume

      | :sl:`set the volume of a playing channel`
      | :sg:`set_volume(value) -> None`
      | :sg:`set_volume(left, right) -> None`

      Set the volume (loudness) of a playing sound. When a channel starts to
      play its volume value is reset. This only affects the current sound. The
      value argument is between 0.0 and 1.0.

      If one argument is passed, it will be the volume of both speakers. If two
      arguments are passed and the mixer is in stereo mode, the first argument
      will be the volume of the left speaker and the second will be the volume
      of the right speaker. (If the second argument is ``None``, the first
      argument will be the volume of both speakers.)

      If the channel is playing a Sound on which ``set_volume()`` has also been
      called, both calls are taken into account. For example:

      ::

          sound = pygame.mixer.Sound("s.wav")
          channel = s.play()      # Sound plays at full volume by default
          sound.set_volume(0.9)   # Now plays at 90% of full volume.
          sound.set_volume(0.6)   # Now plays at 60% (previous value replaced).
          channel.set_volume(0.5) # Now plays at 30% (0.6 * 0.5).

      .. ## Channel.set_volume ##

   .. method:: get_volume

      | :sl:`get the volume of the playing channel`
      | :sg:`get_volume() -> value`

      Return the volume of the channel for the current playing sound. This does
      not take into account stereo separation used by
      :meth:`Channel.set_volume`. The Sound object also has its own volume
      which is mixed with the channel.

      .. ## Channel.get_volume ##

   .. method:: get_busy

      | :sl:`check if the channel is active`
      | :sg:`get_busy() -> bool`

      Returns ``True`` if the channel is actively mixing sound. If the channel
      is idle this returns ``False``.

      .. ## Channel.get_busy ##

   .. method:: get_sound

      | :sl:`get the currently playing Sound`
      | :sg:`get_sound() -> Sound`

      Return the actual Sound object currently playing on this channel. If the
      channel is idle ``None`` is returned.

      .. ## Channel.get_sound ##

   .. method:: queue

      | :sl:`queue a Sound object to follow the current`
      | :sg:`queue(Sound) -> None`

      When a Sound is queued on a Channel, it will begin playing immediately
      after the current Sound is finished. Each channel can only have a single
      Sound queued at a time. The queued Sound will only play if the current
      playback finished automatically. It is cleared on any other call to
      ``Channel.stop()`` or ``Channel.play()``.

      If there is no sound actively playing on the Channel then the Sound will
      begin playing immediately.

      .. ## Channel.queue ##

   .. method:: get_queue

      | :sl:`return any Sound that is queued`
      | :sg:`get_queue() -> Sound`

      If a Sound is already queued on this channel it will be returned. Once
      the queued sound begins playback it will no longer be on the queue.

      .. ## Channel.get_queue ##

   .. method:: set_endevent

      | :sl:`have the channel send an event when playback stops`
      | :sg:`set_endevent() -> None`
      | :sg:`set_endevent(type) -> None`

      When an endevent is set for a channel, it will send an event to the
      pygame queue every time a sound finishes playing on that channel (not
      just the first time). Use ``pygame.event.get()`` to retrieve the endevent
      once it's sent.

      Note that if you called ``Sound.play(n)`` or ``Channel.play(sound,n)``,
      the end event is sent only once: after the sound has been played "n+1"
      times (see the documentation of Sound.play).

      If ``Channel.stop()`` or ``Channel.play()`` is called while the sound was
      still playing, the event will be posted immediately.

      The type argument will be the event id sent to the queue. This can be any
      valid event type, but a good choice would be a value between
      ``pygame.locals.USEREVENT`` and ``pygame.locals.NUMEVENTS``. If no type
      argument is given then the Channel will stop sending endevents.

      .. ## Channel.set_endevent ##

   .. method:: get_endevent

      | :sl:`get the event a channel sends when playback stops`
      | :sg:`get_endevent() -> type`

      Returns the event type to be sent every time the Channel finishes
      playback of a Sound. If there is no endevent the function returns
      ``pygame.NOEVENT``.

      .. ## Channel.get_endevent ##

   .. ## pygame.mixer.Channel ##

.. ## pygame.mixer ##


--- Contenu du fichier : music.rst.txt ---
.. include:: common.txt

:mod:`pygame.mixer.music`
=========================

.. module:: pygame.mixer.music
   :synopsis: pygame module for controlling streamed audio

| :sl:`pygame module for controlling streamed audio`

The music module is closely tied to :mod:`pygame.mixer`. Use the music module
to control the playback of music in the sound mixer.

The difference between the music playback and regular Sound playback is that
the music is streamed, and never actually loaded all at once. The mixer system
only supports a single music stream at once.

On older pygame versions, ``MP3`` support was limited under Mac and Linux. This
changed in pygame ``v2.0.2`` which got improved MP3 support. Consider using
``OGG`` file format for music as that can give slightly better compression than
MP3 in most cases.

.. function:: load

   | :sl:`Load a music file for playback`
   | :sg:`load(filename) -> None`
   | :sg:`load(fileobj, namehint="") -> None`

   This will load a music filename/file object and prepare it for playback. If
   a music stream is already playing it will be stopped. This does not start
   the music playing.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`load(fileobj, "ogg")`.

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.load ##

.. function:: unload

   | :sl:`Unload the currently loaded music to free up resources`
   | :sg:`unload() -> None`

   This closes resources like files for any music that may be loaded.

   .. versionadded:: 2.0.0

   .. ## pygame.mixer.music.load ##


.. function:: play

   | :sl:`Start the playback of the music stream`
   | :sg:`play(loops=0, start=0.0, fade_ms=0) -> None`

   This will play the loaded music stream. If the music is already playing it
   will be restarted.
   
   ``loops`` is an optional integer argument, which is ``0`` by default, which 
   indicates how many times to repeat the music. The music repeats indefinitely if 
   this argument is set to ``-1``. 
   
   ``start`` is an optional float argument, which is ``0.0`` by default, which 
   denotes the position in time from which the music starts playing. The starting 
   position depends on the format of the music played. ``MP3`` and ``OGG`` use 
   the position as time in seconds. For ``MP3`` files the start time position
   selected may not be accurate as things like variable bit rate encoding and ID3
   tags can throw off the timing calculations. For ``MOD``  music it is the pattern 
   order number. Passing a start position will raise a NotImplementedError if 
   the start position cannot be set.

   ``fade_ms`` is an optional integer argument, which is ``0`` by default,
   which denotes the period of time (in milliseconds) over which the music
   will fade up from volume level ``0.0`` to full volume (or the volume level
   previously set by :func:`set_volume`). The sample may end before the fade-in
   is complete. If the music is already streaming ``fade_ms`` is ignored.
   
   .. versionchanged:: 2.0.0 Added optional ``fade_ms`` argument

   .. ## pygame.mixer.music.play ##

.. function:: rewind

   | :sl:`restart music`
   | :sg:`rewind() -> None`

   Resets playback of the current music to the beginning. If :func:`pause` has
   previously been used to pause the music, the music will remain paused.
   
   .. note:: :func:`rewind` supports a limited number of file types and notably
             ``WAV`` files are NOT supported. For unsupported file types use :func:`play`
             which will restart the music that's already playing (note that this
             will start the music playing again even if previously paused).

   .. ## pygame.mixer.music.rewind ##

.. function:: stop

   | :sl:`stop the music playback`
   | :sg:`stop() -> None`

   Stops the music playback if it is currently playing.
   endevent will be triggered, if set.
   It won't unload the music.

   .. ## pygame.mixer.music.stop ##

.. function:: pause

   | :sl:`temporarily stop music playback`
   | :sg:`pause() -> None`

   Temporarily stop playback of the music stream. It can be resumed with the
   :func:`unpause` function.

   .. ## pygame.mixer.music.pause ##

.. function:: unpause

   | :sl:`resume paused music`
   | :sg:`unpause() -> None`

   This will resume the playback of a music stream after it has been paused.

   .. ## pygame.mixer.music.unpause ##

.. function:: fadeout

   | :sl:`stop music playback after fading out`
   | :sg:`fadeout(time) -> None`

   Fade out and stop the currently playing music.

   The ``time`` argument denotes the integer milliseconds for which the 
   fading effect is generated.

   Note, that this function blocks until the music has faded out. Calls 
   to :func:`fadeout` and :func:`set_volume` will have no effect during 
   this time. If an event was set using :func:`set_endevent` it will be 
   called after the music has faded.

   .. ## pygame.mixer.music.fadeout ##

.. function:: set_volume

   | :sl:`set the music volume`
   | :sg:`set_volume(volume) -> None`

   Set the volume of the music playback.
   
   The ``volume`` argument is a float between ``0.0`` and ``1.0`` that sets 
   the volume level. When new music is loaded the volume is reset to full
   volume. If ``volume`` is a negative value it will be ignored and the
   volume will remain set at the current level. If the ``volume`` argument
   is greater than ``1.0``, the volume will be set to ``1.0``.

   .. ## pygame.mixer.music.set_volume ##

.. function:: get_volume

   | :sl:`get the music volume`
   | :sg:`get_volume() -> value`

   Returns the current volume for the mixer. The value will be between ``0.0`` 
   and ``1.0``.

   .. ## pygame.mixer.music.get_volume ##

.. function:: get_busy

   | :sl:`check if the music stream is playing`
   | :sg:`get_busy() -> bool`

   Returns True when the music stream is actively playing. When the music is
   idle this returns False. In pygame 2.0.1 and above this function returns
   False when the music is paused. In pygame 1 it returns True when the music
   is paused.

   .. versionchanged:: 2.0.1 Returns False when music paused.

   .. ## pygame.mixer.music.get_busy ##

.. function:: set_pos

   | :sl:`set position to play from`
   | :sg:`set_pos(pos) -> None`

   This sets the position in the music file where playback will start.
   The meaning of "pos", a float (or a number that can be converted to a float),
   depends on the music format.
   
   For ``MOD`` files, pos is the integer pattern number in the module.
   For ``OGG`` it is the absolute position, in seconds, from
   the beginning of the sound. For ``MP3`` files, it is the relative position,
   in seconds, from the current position. For absolute positioning in an ``MP3``
   file, first call :func:`rewind`.

   Other file formats are unsupported. Newer versions of SDL_mixer have
   better positioning support than earlier ones. An SDLError is raised if a
   particular format does not support positioning.

   Function :func:`set_pos` calls underlining SDL_mixer function
   ``Mix_SetMusicPosition``.

   .. versionadded:: 1.9.2

   .. ## pygame.mixer.music.set_pos ##

.. function:: get_pos

   | :sl:`get the music play time`
   | :sg:`get_pos() -> time`

   This gets the number of milliseconds that the music has been playing for.
   The returned time only represents how long the music has been playing; it
   does not take into account any starting position offsets.

   .. ## pygame.mixer.music.get_pos ##

.. function:: queue

   | :sl:`queue a sound file to follow the current`
   | :sg:`queue(filename) -> None`
   | :sg:`queue(fileobj, namehint="", loops=0) -> None`

   This will load a sound file and queue it. A queued sound file will begin as
   soon as the current sound naturally ends. Only one sound can be queued at a
   time. Queuing a new sound while another sound is queued will result in the
   new sound becoming the queued sound. Also, if the current sound is ever
   stopped or changed, the queued sound will be lost.

   If you are loading from a file object, the namehint parameter can be used to specify
   the type of music data in the object. For example: :code:`queue(fileobj, "ogg")`.

   The following example will play music by Bach six times, then play music by
   Mozart once:

   ::

       pygame.mixer.music.load('bach.ogg')
       pygame.mixer.music.play(5)        # Plays six times, not five!
       pygame.mixer.music.queue('mozart.ogg')

   .. versionchanged:: 2.0.2 Added optional ``namehint`` argument

   .. ## pygame.mixer.music.queue ##

.. function:: set_endevent

   | :sl:`have the music send an event when playback stops`
   | :sg:`set_endevent() -> None`
   | :sg:`set_endevent(type) -> None`

   This causes pygame to signal (by means of the event queue) when the music is
   done playing. The argument determines the type of event that will be queued.

   The event will be queued every time the music finishes, not just the first
   time. To stop the event from being queued, call this method with no
   argument.

   .. ## pygame.mixer.music.set_endevent ##

.. function:: get_endevent

   | :sl:`get the event a channel sends when playback stops`
   | :sg:`get_endevent() -> type`

   Returns the event type to be sent every time the music finishes playback. If
   there is no endevent the function returns ``pygame.NOEVENT``.

   .. ## pygame.mixer.music.get_endevent ##

.. ## pygame.mixer.music ##


--- Contenu du fichier : sndarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.sndarray`
======================

.. module:: pygame.sndarray
   :synopsis: pygame module for accessing sound sample data

| :sl:`pygame module for accessing sound sample data`

Functions to convert between NumPy arrays and Sound objects. This
module will only be functional when pygame can use the external NumPy
package. If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule``
object.

Sound data is made of thousands of samples per second, and each sample is the
amplitude of the wave at a particular moment in time. For example, in 22-kHz
format, element number 5 of the array is the amplitude of the wave after
5/22000 seconds.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Each sample is an 8-bit or 16-bit integer, depending on the data format. A
stereo sound file has two values per sample, while a mono sound file only has
one.

.. function:: array

   | :sl:`copy Sound samples into an array`
   | :sg:`array(Sound) -> array`

   Creates a new array for the sound data and copies the samples. The array
   will always be in the format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.array ##

.. function:: samples

   | :sl:`reference Sound samples into an array`
   | :sg:`samples(Sound) -> array`

   Creates a new array that directly references the samples in a Sound object.
   Modifying the array will change the Sound. The array will always be in the
   format returned from ``pygame.mixer.get_init()``.

   .. ## pygame.sndarray.samples ##

.. function:: make_sound

   | :sl:`convert an array into a Sound object`
   | :sg:`make_sound(array) -> Sound`

   Create a new playable Sound object from an array. The mixer module must be
   initialized and the array format must be similar to the mixer audio format.

   .. ## pygame.sndarray.make_sound ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for sound arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions. The
   only supported arraytype is ``'numpy'``. Other values will raise ValueError.
   Using this function will raise a ``DeprecationWarning``.
   .. ## pygame.sndarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.sndarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.sndarray.get_arraytypes ##

.. ## pygame.sndarray ##


--- Contenu du fichier : time.rst.txt ---
.. include:: common.txt

:mod:`pygame.time`
==================

.. module:: pygame.time
   :synopsis: pygame module for monitoring time

| :sl:`pygame module for monitoring time`

Times in pygame are represented in milliseconds (1/1000 seconds). Most
platforms have a limited time resolution of around 10 milliseconds. This
resolution, in milliseconds, is given in the ``TIMER_RESOLUTION`` constant.

.. function:: get_ticks

   | :sl:`get the time in milliseconds`
   | :sg:`get_ticks() -> milliseconds`

   Return the number of milliseconds since ``pygame.init()`` was called. Before
   pygame is initialized this will always be 0.

   .. ## pygame.time.get_ticks ##

.. function:: wait

   | :sl:`pause the program for an amount of time`
   | :sg:`wait(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function sleeps the
   process to share the processor with other programs. A program that waits for
   even a few milliseconds will consume very little processor time. It is
   slightly less accurate than the ``pygame.time.delay()`` function.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.wait ##

.. function:: delay

   | :sl:`pause the program for an amount of time`
   | :sg:`delay(milliseconds) -> time`

   Will pause for a given number of milliseconds. This function will use the
   processor (rather than sleeping) in order to make the delay more accurate
   than ``pygame.time.wait()``.

   This returns the actual number of milliseconds used.

   .. ## pygame.time.delay ##

.. function:: set_timer

   | :sl:`repeatedly create an event on the event queue`
   | :sg:`set_timer(event, millis) -> None`
   | :sg:`set_timer(event, millis, loops=0) -> None`

   Set an event to appear on the event queue every given number of milliseconds.
   The first event will not appear until the amount of time has passed.

   The ``event`` attribute can be a ``pygame.event.Event`` object or an integer
   type that denotes an event.

   ``loops`` is an integer that denotes the number of events posted. If 0 (default)
   then the events will keep getting posted, unless explicitly stopped.

   To disable the timer for such an event, call the function again with the same
   event argument with ``millis`` argument set to 0.

   It is also worth mentioning that a particular event type can only be put on a
   timer once. In other words, there cannot be two timers for the same event type.
   Setting an event timer for a particular event discards the old one for that
   event type.

   ``loops`` replaces the ``once`` argument, and this does not break backward
   compatibility

   .. versionadded:: 2.0.0.dev3 once argument added.
   .. versionchanged:: 2.0.1 event argument supports ``pygame.event.Event`` object
   .. versionadded:: 2.0.1 added loops argument to replace once argument

   .. ## pygame.time.set_timer ##

.. class:: Clock

   | :sl:`create an object to help track time`
   | :sg:`Clock() -> Clock`

   Creates a new Clock object that can be used to track an amount of time. The
   clock also provides several functions to help control a game's framerate.

   .. method:: tick

      | :sl:`update the clock`
      | :sg:`tick(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick(40)`` once per frame, the program will never run at more
      than 40 frames per second.

      Note that this function uses SDL_Delay function which is not accurate on
      every platform, but does not use much CPU. Use tick_busy_loop if you want
      an accurate timer, and don't mind chewing CPU.

      .. ## Clock.tick ##

   .. method:: tick_busy_loop

      | :sl:`update the clock`
      | :sg:`tick_busy_loop(framerate=0) -> milliseconds`

      This method should be called once per frame. It will compute how many
      milliseconds have passed since the previous call.

      If you pass the optional framerate argument the function will delay to
      keep the game running slower than the given ticks per second. This can be
      used to help limit the runtime speed of a game. By calling
      ``Clock.tick_busy_loop(40)`` once per frame, the program will never run at
      more than 40 frames per second.

      Note that this function uses :func:`pygame.time.delay`, which uses lots
      of CPU in a busy loop to make sure that timing is more accurate.

      .. versionadded:: 1.8

      .. ## Clock.tick_busy_loop ##

   .. method:: get_time

      | :sl:`time used in the previous tick`
      | :sg:`get_time() -> milliseconds`

      The number of milliseconds that passed between the previous two calls to
      ``Clock.tick()``.

      .. ## Clock.get_time ##

   .. method:: get_rawtime

      | :sl:`actual time used in the previous tick`
      | :sg:`get_rawtime() -> milliseconds`

      Similar to ``Clock.get_time()``, but does not include any time used
      while ``Clock.tick()`` was delaying to limit the framerate.

      .. ## Clock.get_rawtime ##

   .. method:: get_fps

      | :sl:`compute the clock framerate`
      | :sg:`get_fps() -> float`

      Compute your game's framerate (in frames per second). It is computed by
      averaging the last ten calls to ``Clock.tick()``.

      .. ## Clock.get_fps ##

   .. ## pygame.time.Clock ##

.. ## pygame.time ##


--- Contenu du fichier : surfarray.rst.txt ---
.. include:: common.txt

:mod:`pygame.surfarray`
=======================

.. module:: pygame.surfarray
   :synopsis: pygame module for accessing surface pixel data using array interfaces

| :sl:`pygame module for accessing surface pixel data using array interfaces`

Functions to convert between NumPy arrays and Surface objects. This module
will only be functional when pygame can use the external NumPy package.
If NumPy can't be imported, ``surfarray`` becomes a ``MissingModule`` object.

Every pixel is stored as a single integer value to represent the red, green,
and blue colors. The 8-bit images use a value that looks into a colormap. Pixels
with higher depth use a bit packing process to place three or four values into
a single number.

The arrays are indexed by the ``X`` axis first, followed by the ``Y`` axis.
Arrays that treat the pixels as a single integer are referred to as 2D arrays.
This module can also separate the red, green, and blue color values into
separate indices. These types of arrays are referred to as 3D arrays, and the
last index is 0 for red, 1 for green, and 2 for blue.

The pixels of a 2D array as returned by :func:`array2d` and :func:`pixels2d`
are mapped to the specific surface. Use :meth:`pygame.Surface.unmap_rgb`
to convert to a color, and :meth:`pygame.Surface.map_rgb` to get the surface
specific pixel value of a color. Integer pixel values can only be used directly
between surfaces with matching pixel layouts (see :class:`pygame.Surface`).

All functions that refer to "array" will copy the surface information to a new
numpy array. All functions that refer to "pixels" will directly reference the
pixels from the surface and any changes performed to the array will make changes
in the surface. As this last functions share memory with the surface, this one
will be locked during the lifetime of the array.

.. function:: array2d

   | :sl:`Copy pixels into a 2d array`
   | :sg:`array2d(Surface) -> array`

   Copy the :meth:`mapped <pygame.Surface.map_rgb>` (raw) pixels from a Surface
   into a 2D array.
   The bit depth of the surface will control the size of the integer values,
   and will work for any type of pixel format.

   This function will temporarily lock the Surface as pixels are copied
   (see the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array2d ##

.. function:: pixels2d

   | :sl:`Reference pixels into a 2d array`
   | :sg:`pixels2d(Surface) -> array`

   Create a new 2D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   Pixels from a 24-bit Surface cannot be referenced, but all other Surface bit
   depths can.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels2d ##

.. function:: array3d

   | :sl:`Copy pixels into a 3d array`
   | :sg:`array3d(Surface) -> array`

   Copy the pixels from a Surface into a 3D array. The bit depth of the surface
   will control the size of the integer values, and will work for any type of
   pixel format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array3d ##

.. function:: pixels3d

   | :sl:`Reference pixels into a 3d array`
   | :sg:`pixels3d(Surface) -> array`

   Create a new 3D array that directly references the pixel values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This will only work on Surfaces that have 24-bit or 32-bit formats. Lower
   pixel formats cannot be referenced.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels3d ##

.. function:: array_alpha

   | :sl:`Copy pixel alphas into a 2d array`
   | :sg:`array_alpha(Surface) -> array`

   Copy the pixel alpha values (degree of transparency) from a Surface into a
   2D array. This will work for any type of Surface format. Surfaces without a
   pixel alpha will return an array with all opaque values.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. ## pygame.surfarray.array_alpha ##

.. function:: pixels_alpha

   | :sl:`Reference pixel alphas into a 2d array`
   | :sg:`pixels_alpha(Surface) -> array`

   Create a new 2D array that directly references the alpha values (degree of
   transparency) in a Surface. Any changes to the array will affect the pixels
   in the Surface. This is a fast operation since no data is copied.

   This can only work on 32-bit Surfaces with a per-pixel alpha value.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_alpha ##

.. function:: array_red

   | :sl:`Copy red pixels into a 2d array`
   | :sg:`array_red(Surface) -> array`

   Copy the pixel red values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_red ##

.. function:: pixels_red

   | :sl:`Reference pixel red into a 2d array.`
   | :sg:`pixels_red (Surface) -> array`

   Create a new 2D array that directly references the red values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_red ##

.. function:: array_green

   | :sl:`Copy green pixels into a 2d array`
   | :sg:`array_green(Surface) -> array`

   Copy the pixel green values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_green ##

.. function:: pixels_green

   | :sl:`Reference pixel green into a 2d array.`
   | :sg:`pixels_green (Surface) -> array`

   Create a new 2D array that directly references the green values in a
   Surface. Any changes to the array will affect the pixels in the Surface.
   This is a fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_green ##

.. function:: array_blue

   | :sl:`Copy blue pixels into a 2d array`
   | :sg:`array_blue(Surface) -> array`

   Copy the pixel blue values from a Surface into a 2D array. This will work
   for any type of Surface format.

   This function will temporarily lock the Surface as pixels are copied (see
   the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method).

   .. versionadded:: 2.0.2

   .. ## pygame.surfarray.array_blue ##

.. function:: pixels_blue

   | :sl:`Reference pixel blue into a 2d array.`
   | :sg:`pixels_blue (Surface) -> array`

   Create a new 2D array that directly references the blue values in a Surface.
   Any changes to the array will affect the pixels in the Surface. This is a
   fast operation since no data is copied.

   This can only work on 24-bit or 32-bit Surfaces.

   The Surface this references will remain locked for the lifetime of the array,
   since the array generated by this function shares memory with the surface.
   See the :meth:`pygame.Surface.lock` - lock the Surface memory for pixel
   access method.

   .. ## pygame.surfarray.pixels_blue ##

.. function:: array_colorkey

   | :sl:`Copy the colorkey values into a 2d array`
   | :sg:`array_colorkey(Surface) -> array`

   Create a new array with the colorkey transparency value from each pixel. If
   the pixel matches the colorkey it will be fully transparent; otherwise it
   will be fully opaque.

   This will work on any type of Surface format. If the image has no colorkey a
   solid opaque array will be returned.

   This function will temporarily lock the Surface as pixels are copied.

   .. ## pygame.surfarray.array_colorkey ##

.. function:: make_surface

   | :sl:`Copy an array to a new surface`
   | :sg:`make_surface(array) -> Surface`

   Create a new Surface that best resembles the data and format on the array.
   The array can be 2D or 3D with any sized integer values. Function
   make_surface uses the array struct interface to acquire array properties,
   so is not limited to just NumPy arrays. See :mod:`pygame.pixelcopy`.

   New in pygame 1.9.2: array struct interface support.

   .. ## pygame.surfarray.make_surface ##

.. function:: blit_array

   | :sl:`Blit directly from a array values`
   | :sg:`blit_array(Surface, array) -> None`

   Directly copy values from an array into a Surface. This is faster than
   converting the array into a Surface and blitting. The array must be the same
   dimensions as the Surface and will completely replace all pixel values. Only
   integer, ASCII character and record arrays are accepted.

   This function will temporarily lock the Surface as the new values are
   copied.

   .. ## pygame.surfarray.blit_array ##

.. function:: map_array

   | :sl:`Map a 3d array into a 2d array`
   | :sg:`map_array(Surface, array3d) -> array2d`

   Convert a 3D array into a 2D array. This will use the given Surface format
   to control the conversion. Palette surface formats are supported for NumPy
   arrays.

   .. ## pygame.surfarray.map_array ##

.. function:: use_arraytype

   | :sl:`Sets the array system to be used for surface arrays`
   | :sg:`use_arraytype (arraytype) -> None`

   DEPRECATED: Uses the requested array type for the module functions.
   The only supported arraytype is ``'numpy'``. Other values will raise
   ValueError. Using this function will raise a ``DeprecationWarning``.

   .. ## pygame.surfarray.use_arraytype ##

.. function:: get_arraytype

   | :sl:`Gets the currently active array type.`
   | :sg:`get_arraytype () -> str`

   DEPRECATED: Returns the currently active array type. This will be a value of the
   ``get_arraytypes()`` tuple and indicates which type of array module is used
   for the array creation. Using this function will raise a ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytype ##

.. function:: get_arraytypes

   | :sl:`Gets the array system types currently supported.`
   | :sg:`get_arraytypes () -> tuple`

   DEPRECATED: Checks, which array systems are available and returns them as a tuple of
   strings. The values of the tuple can be used directly in the
   :func:`pygame.surfarray.use_arraytype` () method. If no supported array
   system could be found, None will be returned.  Using this function will raise a
   ``DeprecationWarning``.

   .. versionadded:: 1.8

   .. ## pygame.surfarray.get_arraytypes ##

.. ## pygame.surfarray ##


--- Contenu du fichier : sdl2_video.rst.txt ---
.. include:: common.txt

:mod:`pygame.sdl2_video`
========================

.. module:: pygame._sdl2.video
   :synopsis: Experimental pygame module for porting new SDL video systems

.. warning::
	This module isn't ready for prime time yet, it's still in development.
        These docs are primarily meant to help the pygame developers and super-early adopters
        who are in communication with the developers. This API will change.

| :sl:`Experimental pygame module for porting new SDL video systems`

.. class:: Window

   | :sl:`pygame object that represents a window`
   | :sg:`Window(title="pygame", size=(640, 480), position=None, fullscreen=False, fullscreen_desktop=False, keywords) -> Window`

   .. classmethod:: from_display_module
   
      | :sl:`Creates window using window created by pygame.display.set_mode().`
      | :sg:`from_display_module() -> Window`

   .. classmethod:: from_window

      | :sl:`Create Window from another window. Could be from another UI toolkit.`
      | :sg:`from_window(other) -> Window`

   .. attribute:: grab

      | :sl:`Gets or sets whether the mouse is confined to the window.`
      | :sg:`grab -> bool`

   .. attribute:: relative_mouse

      | :sl:`Gets or sets the window's relative mouse motion state.`
      | :sg:`relative_mouse -> bool`

   .. method:: set_windowed

      | :sl:`Enable windowed mode (exit fullscreen).`
      | :sg:`set_windowed() -> None`

   .. method:: set_fullscreen

      | :sl:`Enter fullscreen.`
      | :sg:`set_fullscreen(desktop=False) -> None`

   .. attribute:: title

      | :sl:`Gets or sets whether the window title.`
      | :sg:`title -> string`

   .. method:: destroy

      | :sl:`Destroys the window.`
      | :sg:`destroy() -> None`

   .. method:: hide

      | :sl:`Hide the window.`
      | :sg:`hide() -> None`

   .. method:: show

      | :sl:`Show the window.`
      | :sg:`show() -> None`

   .. method:: focus

      | :sl:`Raise the window above other windows and set the input focus. The "input_only" argument is only supported on X11.`
      | :sg:`focus(input_only=False) -> None`

   .. method:: restore

      | :sl:`Restore the size and position of a minimized or maximized window.`
      | :sg:`restore() -> None`

   .. method:: maximize

      | :sl:`Maximize the window.`
      | :sg:`maximize() -> None`

   .. method:: minimize

      | :sl:`Minimize the window.`
      | :sg:`maximize() -> None`

   .. attribute:: resizable

      | :sl:`Gets and sets whether the window is resizable.`
      | :sg:`resizable -> bool`

   .. attribute:: borderless

      | :sl:`Add or remove the border from the window.`
      | :sg:`borderless -> bool`

   .. method:: set_icon

      | :sl:`Set the icon for the window.`
      | :sg:`set_icon(surface) -> None`

   .. attribute:: id

      | :sl:`Get the unique window ID. *Read-only*`
      | :sg:`id -> int`

   .. attribute:: size

      | :sl:`Gets and sets the window size.`
      | :sg:`size -> (int, int)`

   .. attribute:: position

      | :sl:`Gets and sets the window position.`
      | :sg:`position -> (int, int) or WINDOWPOS_CENTERED or WINDOWPOS_UNDEFINED`	

   .. attribute:: opacity

      | :sl:`Gets and sets the window opacity. Between 0.0 (fully transparent) and 1.0 (fully opaque).`
      | :sg:`opacity -> float`

   .. attribute:: display_index

      | :sl:`Get the index of the display that owns the window. *Read-only*`
      | :sg:`display_index -> int`

   .. method:: set_modal_for

      | :sl:`Set the window as a modal for a parent window. This function is only supported on X11.`
      | :sg:`set_modal_for(Window) -> None`

.. class:: Texture	

   | :sl:`pygame object that representing a Texture.`
   | :sg:`Texture(renderer, size, depth=0, static=False, streaming=False, target=False) -> Texture`

   .. staticmethod:: from_surface

      | :sl:`Create a texture from an existing surface.`
      | :sg:`from_surface(renderer, surface) -> Texture`

   .. attribute:: renderer

      | :sl:`Gets the renderer associated with the Texture. *Read-only*`
      | :sg:`renderer -> Renderer`

   .. attribute:: width

      | :sl:`Gets the width of the Texture. *Read-only*`
      | :sg:`width -> int`

   .. attribute:: height

      | :sl:`Gets the height of the Texture. *Read-only*`
      | :sg:`height -> int`

   .. attribute:: alpha

      | :sl:`Gets and sets an additional alpha value multiplied into render copy operations.`
      | :sg:`alpha -> int`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Texture.`
      | :sg:`blend_mode -> int`

   .. attribute:: color

      | :sl:`Gets and sets an additional color value multiplied into render copy operations.`
      | :sg:`color -> color`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the texture.`
      | :sg:`get_rect(**kwargs) -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the texture to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None, angle=0, origin=None, flip_x=False, flip_y=False) -> None`

   .. method:: update

      | :sl:`Update the texture with a Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`update(surface, area=None) -> None`

.. class:: Image

   | :sl:`Easy way to use a portion of a Texture without worrying about srcrect all the time.`
   | :sg:`Image(textureOrImage, srcrect=None) -> Image`

   .. method:: get_rect

      | :sl:`Get the rectangular area of the Image.`
      | :sg:`get_rect() -> Rect`

   .. method:: draw

      | :sl:`Copy a portion of the Image to the rendering target.`
      | :sg:`draw(srcrect=None, dstrect=None) -> None`

   .. attribute:: angle

      | :sl:`Gets and sets the angle the Image draws itself with.`
      | :sg:`angle -> float`

   .. attribute:: origin

      | :sl:`Gets and sets the origin. Origin=None means the Image will be rotated around its center.`
      | :sg:`origin -> (float, float) or None.`

   .. attribute:: flip_x

      | :sl:`Gets and sets whether the Image is flipped on the x axis.`
      | :sg:`flip_x -> bool`

   .. attribute:: flip_y

      | :sl:`Gets and sets whether the Image is flipped on the y axis.`
      | :sg:`flip_y -> bool`

   .. attribute:: color

      | :sl:`Gets and sets the Image color modifier.`
      | :sg:`color -> Color`

   .. attribute:: alpha

      | :sl:`Gets and sets the Image alpha modifier.`
      | :sg:`alpha -> float`

   .. attribute:: blend_mode

      | :sl:`Gets and sets the blend mode for the Image.`
      | :sg:`blend_mode -> int`

   .. attribute:: texture

      | :sl:`Gets and sets the Texture the Image is based on.`
      | :sg:`texture -> Texture`

   .. attribute:: srcrect

      | :sl:`Gets and sets the Rect the Image is based on.`
      | :sg:`srcrect -> Rect`

.. class:: Renderer

   | :sl:`Create a 2D rendering context for a window.`
   | :sg:`Renderer(window, index=-1, accelerated=-1, vsync=False, target_texture=False) -> Renderer`

   .. classmethod:: from_window

      | :sl:`Easy way to create a Renderer.`
      | :sg:`from_window(window) -> Renderer`

   .. attribute:: draw_blend_mode

      | :sl:`Gets and sets the blend mode used by the drawing functions.`
      | :sg:`draw_blend_mode -> int`   

   .. attribute:: draw_color

      | :sl:`Gets and sets the color used by the drawing functions.`
      | :sg:`draw_color -> Color`

   .. method:: clear

      | :sl:`Clear the current rendering target with the drawing color.`
      | :sg:`clear() -> None`

   .. method:: present

      | :sl:`Updates the screen with any new rendering since previous call.`
      | :sg:`present() -> None`	

   .. method:: get_viewport

      | :sl:`Returns the drawing area on the target.`
      | :sg:`get_viewport() -> Rect`

   .. method:: set_viewport

      | :sl:`Set the drawing area on the target. If area is None, the entire target will be used.`
      | :sg:`set_viewport(area) -> None`

   .. attribute:: logical_size

      | :sl:`Gets and sets the logical size.`
      | :sg:`logical_size -> (int width, int height)`

   .. attribute:: scale

      | :sl:`Gets and sets the scale.`
      | :sg:`scale -> (float x_scale, float y_scale)`

   .. attribute:: target

      | :sl:`Gets and sets the render target. None represents the default target (the renderer).`
      | :sg:`target -> Texture or None`

   .. method:: blit

      | :sl:`For compatibility purposes. Textures created by different Renderers cannot be shared!`
      | :sg:`blit(source, dest, area=None, special_flags=0)-> Rect`

   .. method:: draw_line

      | :sl:`Draws a line.`
      | :sg:`draw_line(p1, p2) -> None`

   .. method:: draw_point

      | :sl:`Draws a point.`
      | :sg:`draw_point(point) -> None`

   .. method:: draw_rect

      | :sl:`Draws a rectangle.`
      | :sg:`draw_rect(rect)-> None`

   .. method:: fill_rect

      | :sl:`Fills a rectangle.`
      | :sg:`fill_rect(rect)-> None`

   .. method:: to_surface

      | :sl:`Read pixels from current render target and create a pygame.Surface. WARNING: Slow operation, use sparingly.`
      | :sg:`to_surface(surface=None, area=None)-> Surface`

--- Contenu du fichier : font.rst.txt ---
.. include:: common.txt

:mod:`pygame.font`
==================

.. module:: pygame.font
   :synopsis: pygame module for loading and rendering fonts

| :sl:`pygame module for loading and rendering fonts`

The font module allows for rendering TrueType fonts into Surface objects.
This module is built on top of the SDL_ttf library, which comes with all
normal pygame installations.

Most of the work done with fonts are done by using the actual Font objects.
The module by itself only has routines to support the creation of Font objects
with :func:`pygame.font.Font`.

You can load fonts from the system by using the :func:`pygame.font.SysFont`
function. There are a few other functions to help look up the system fonts.

Pygame comes with a builtin default font, freesansbold. This can always be
accessed by passing ``None`` as the font name.

Before pygame 2.0.3, pygame.font accepts any UCS-2 / UTF-16 character
('\\u0001' to '\\uFFFF'). After 2.0.3, pygame.font built with SDL_ttf
2.0.15 accepts any valid UCS-4 / UTF-32 character 
(like emojis, if the font has them) ('\\U00000001' to '\\U0010FFFF')).
More about this in :func:`Font.render`.

Before pygame 2.0.3, this character space restriction can be avoided by
using the  :mod:`pygame.freetype` based ``pygame.ftfont`` to emulate the Font
module. This can be used by defining the environment variable PYGAME_FREETYPE
before the first import of :mod:`pygame`. Since the problem ``pygame.ftfont``
solves no longer exists, it will likely be removed in the future.

.. function:: init

   | :sl:`initialize the font module`
   | :sg:`init() -> None`

   This method is called automatically by ``pygame.init()``. It initializes the
   font module. The module must be initialized before any other functions will
   work.

   It is safe to call this function more than once.

   .. ## pygame.font.init ##

.. function:: quit

   | :sl:`uninitialize the font module`
   | :sg:`quit() -> None`

   Manually uninitialize SDL_ttf's font system. This is called automatically by
   ``pygame.quit()``.

   It is safe to call this function even if font is currently not initialized.

   .. ## pygame.font.quit ##

.. function:: get_init

   | :sl:`true if the font module is initialized`
   | :sg:`get_init() -> bool`

   Test if the font module is initialized or not.

   .. ## pygame.font.get_init ##

.. function:: get_default_font

   | :sl:`get the filename of the default font`
   | :sg:`get_default_font() -> string`

   Return the filename of the system font. This is not the full path to the
   file. This file can usually be found in the same directory as the font
   module, but it can also be bundled in separate archives.

   .. ## pygame.font.get_default_font ##

.. function:: get_sdl_ttf_version

   | :sl:`gets SDL_ttf version`
   | :sg:`get_sdl_ttf_version(linked=True) -> (major, minor, patch)`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave get_sdl_ttf_version feedback with authors <https://github.com/pygame/pygame/pull/3095>`_

   Returns a tuple of integers that identify SDL_ttf's version.
   SDL_ttf is the underlying font rendering library, written in C,
   on which pygame's font module depends. If 'linked' is True (the default), 
   the function returns the version of the linked TTF library. 
   Otherwise this function returns the version of TTF pygame was compiled with

   .. versionadded:: 2.1.3

   .. ## pygame.font.get_sdl_ttf_version ##

.. function:: get_fonts

   | :sl:`get all available fonts`
   | :sg:`get_fonts() -> list of strings`

   Returns a list of all the fonts available on the system. The names of the
   fonts will be set to lowercase with all spaces and punctuation removed. This
   works on most systems, but some will return an empty list if they cannot
   find fonts.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.get_fonts ##

.. function:: match_font

   | :sl:`find a specific font on the system`
   | :sg:`match_font(name, bold=False, italic=False) -> path`

   Returns the full path to a font file on the system. If bold or italic are
   set to true, this will attempt to find the correct family of font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.
   If none of the given names are found, None is returned.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   Example:

   ::

       print pygame.font.match_font('bitstreamverasans')
       # output is: /usr/share/fonts/truetype/ttf-bitstream-vera/Vera.ttf
       # (but only if you have Vera on your system)

   .. ## pygame.font.match_font ##

.. function:: SysFont

   | :sl:`create a Font object from the system fonts`
   | :sg:`SysFont(name, size, bold=False, italic=False) -> Font`

   Return a new Font object that is loaded from the system fonts. The font will
   match the requested bold and italic flags. Pygame uses a small set of common
   font aliases. If the specific font you ask for is not available, a reasonable
   alternative may be used. If a suitable system font is not found this will
   fall back on loading the default pygame font.

   The font name can also be an iterable of font names, a string of
   comma-separated font names, or a bytes of comma-separated font names, in
   which case the set of names will be searched in order.

   .. versionadded:: 2.0.1 Accept an iterable of font names.

   .. versionchanged:: 2.1.3 Checks through user fonts instead of just global fonts for Windows.

   .. ## pygame.font.SysFont ##

.. class:: Font

   | :sl:`create a new Font object from a file`
   | :sg:`Font(file_path=None, size=12) -> Font`
   | :sg:`Font(file_path, size) -> Font`
   | :sg:`Font(pathlib.Path, size) -> Font`
   | :sg:`Font(object, size) -> Font`

   Load a new font from a given filename or a python file object. The size is
   the height of the font in pixels. If the filename is ``None`` the pygame
   default font will be loaded. If a font cannot be loaded from the arguments
   given an exception will be raised. Once the font is created the size cannot
   be changed. If no arguments are given then the default font will be used and
   a font size of 12 is used.

   Font objects are mainly used to render text into new Surface objects. The
   render can emulate bold or italic features, but it is better to load from a
   font with actual italic or bold glyphs.

   .. attribute:: bold

      | :sl:`Gets or sets whether the font should be rendered in (faked) bold.`
      | :sg:`bold -> bool`

      Whether the font should be rendered in bold.

      When set to True, this enables the bold rendering of text. This
      is a fake stretching of the font that doesn't look good on many
      font types. If possible load the font from a real bold font
      file. While bold, the font will have a different width than when
      normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.bold ##

   .. attribute:: italic

      | :sl:`Gets or sets whether the font should be rendered in (faked) italics.`
      | :sg:`italic -> bool`

      Whether the font should be rendered in italic.

      When set to True, this enables fake rendering of italic
      text. This is a fake skewing of the font that doesn't look good
      on many font types. If possible load the font from a real italic
      font file. While italic the font will have a different width
      than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.italic ##

   .. attribute:: underline

      | :sl:`Gets or sets whether the font should be rendered with an underline.`
      | :sg:`underline -> bool`

      Whether the font should be rendered in underline.

      When set to True, all rendered fonts will include an
      underline. The underline is always one pixel thick, regardless
      of font size. This can be mixed with the bold, italic and
      strikethrough modes.

      .. versionadded:: 2.0.0

      .. ## Font.underline ##
   
   .. attribute:: strikethrough

      | :sl:`Gets or sets whether the font should be rendered with a strikethrough.`
      | :sg:`strikethrough -> bool`

      Whether the font should be rendered with a strikethrough.

      When set to True, all rendered fonts will include an
      strikethrough. The strikethrough is always one pixel thick,
      regardless of font size. This can be mixed with the bold,
      italic and underline modes.

      .. versionadded:: 2.1.3

      .. ## Font.strikethrough ##

   .. method:: render

      | :sl:`draw text on a new Surface`
      | :sg:`render(text, antialias, color, background=None) -> Surface`

      This creates a new Surface with the specified text rendered on it. 
      :mod:`pygame.font` provides no way to directly draw text on an existing
      Surface: instead you must use :func:`Font.render` to create an image
      (Surface) of the text, then blit this image onto another Surface.

      The text can only be a single line: newline characters are not rendered.
      Null characters ('\x00') raise a TypeError. Both Unicode and char (byte)
      strings are accepted. For Unicode strings only UCS-2 characters
      ('\\u0001' to '\\uFFFF') were previously supported and any greater
      unicode codepoint would raise a UnicodeError. Now, characters in the
      UCS-4 range are supported. For char strings a ``LATIN1`` encoding is
      assumed. The antialias argument is a boolean: if True the characters
      will have smooth edges. The color argument is the color of the text
      [e.g.: (0,0,255) for blue]. The optional background argument is a color
      to use for the text background. If no background is passed the area
      outside the text will be transparent.

      The Surface returned will be of the dimensions required to hold the text.
      (the same as those returned by :func:`Font.size`). If an empty string is passed
      for the text, a blank surface will be returned that is zero pixel wide and
      the height of the font.

      Depending on the type of background and antialiasing used, this returns
      different types of Surfaces. For performance reasons, it is good to know
      what type of image will be used. If antialiasing is not used, the return
      image will always be an 8-bit image with a two-color palette. If the
      background is transparent a colorkey will be set. Antialiased images are
      rendered to 24-bit ``RGB`` images. If the background is transparent a
      pixel alpha will be included.

      Optimization: if you know that the final destination for the text (on the
      screen) will always have a solid background, and the text is antialiased,
      you can improve performance by specifying the background color. This will
      cause the resulting image to maintain transparency information by
      colorkey rather than (much less efficient) alpha values.

      If you render '\\n' an unknown char will be rendered. Usually a
      rectangle. Instead you need to handle newlines yourself.

      Font rendering is not thread safe: only a single thread can render text
      at any time.

      .. versionchanged:: 2.0.3 Rendering UCS4 unicode works and does not
        raise an exception. Use `if hasattr(pygame.font, "UCS4"):` to see if
        pygame supports rendering UCS4 unicode including more languages and
        emoji.

      .. ## Font.render ##

   .. method:: size

      | :sl:`determine the amount of space needed to render text`
      | :sg:`size(text) -> (width, height)`

      Returns the dimensions needed to render the text. This can be used to
      help determine the positioning needed for text before it is rendered. It
      can also be used for word wrapping and other layout effects.

      Be aware that most fonts use kerning which adjusts the widths for
      specific letter pairs. For example, the width for "ae" will not always
      match the width for "a" + "e".

      .. ## Font.size ##

   .. method:: set_underline

      | :sl:`control if text is rendered with an underline`
      | :sg:`set_underline(bool) -> None`

      When enabled, all rendered fonts will include an underline. The underline
      is always one pixel thick, regardless of font size. This can be mixed
      with the bold, italic and strikethrough modes.

      .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.set_underline ##

   .. method:: get_underline

      | :sl:`check if text will be rendered with an underline`
      | :sg:`get_underline() -> bool`

      Return True when the font underline is enabled.

       .. note:: This is the same as the :attr:`underline` attribute.

      .. ## Font.get_underline ##
   
   .. method:: set_strikethrough

      | :sl:`control if text is rendered with a strikethrough`
      | :sg:`set_strikethrough(bool) -> None`

      When enabled, all rendered fonts will include a strikethrough. The
      strikethrough is always one pixel thick, regardless of font size.
      This can be mixed with the bold, italic and underline modes.

      .. note:: This is the same as the :attr:`strikethrough` attribute.
      
      .. versionadded:: 2.1.3

      .. ## Font.set_strikethrough ##

   .. method:: get_strikethrough

      | :sl:`check if text will be rendered with a strikethrough`
      | :sg:`get_strikethrough() -> bool`

      Return True when the font strikethrough is enabled.

       .. note:: This is the same as the :attr:`strikethrough` attribute.
       
       .. versionadded:: 2.1.3

      .. ## Font.get_strikethrough ##

   .. method:: set_bold

      | :sl:`enable fake rendering of bold text`
      | :sg:`set_bold(bool) -> None`

      Enables the bold rendering of text. This is a fake stretching of the font
      that doesn't look good on many font types. If possible load the font from
      a real bold font file. While bold, the font will have a different width
      than when normal. This can be mixed with the italic, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.set_bold ##

   .. method:: get_bold

      | :sl:`check if text will be rendered bold`
      | :sg:`get_bold() -> bool`

      Return True when the font bold rendering mode is enabled.

      .. note:: This is the same as the :attr:`bold` attribute.

      .. ## Font.get_bold ##

   .. method:: set_italic

      | :sl:`enable fake rendering of italic text`
      | :sg:`set_italic(bool) -> None`

      Enables fake rendering of italic text. This is a fake skewing of the font
      that doesn't look good on many font types. If possible load the font from
      a real italic font file. While italic the font will have a different
      width than when normal. This can be mixed with the bold, underline and
      strikethrough modes.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.set_italic ##

   .. method:: metrics

      | :sl:`gets the metrics for each character in the passed string`
      | :sg:`metrics(text) -> list`

      The list contains tuples for each character, which contain the minimum
      ``X`` offset, the maximum ``X`` offset, the minimum ``Y`` offset, the
      maximum ``Y`` offset and the advance offset (bearing plus width) of the
      character. [(minx, maxx, miny, maxy, advance), (minx, maxx, miny, maxy,
      advance), ...]. None is entered in the list for each unrecognized
      character.

      .. ## Font.metrics ##

   .. method:: get_italic

      | :sl:`check if the text will be rendered italic`
      | :sg:`get_italic() -> bool`

      Return True when the font italic rendering mode is enabled.

      .. note:: This is the same as the :attr:`italic` attribute.

      .. ## Font.get_italic ##

   .. method:: get_linesize

      | :sl:`get the line space of the font text`
      | :sg:`get_linesize() -> int`

      Return the height in pixels for a line of text with the font. When
      rendering multiple lines of text this is the recommended amount of space
      between lines.

      .. ## Font.get_linesize ##

   .. method:: get_height

      | :sl:`get the height of the font`
      | :sg:`get_height() -> int`

      Return the height in pixels of the actual rendered text. This is the
      average size for each glyph in the font.

      .. ## Font.get_height ##

   .. method:: get_ascent

      | :sl:`get the ascent of the font`
      | :sg:`get_ascent() -> int`

      Return the height in pixels for the font ascent. The ascent is the number
      of pixels from the font baseline to the top of the font.

      .. ## Font.get_ascent ##

   .. method:: get_descent

      | :sl:`get the descent of the font`
      | :sg:`get_descent() -> int`

      Return the height in pixels for the font descent. The descent is the
      number of pixels from the font baseline to the bottom of the font.

      .. ## Font.get_descent ##

   .. method:: set_script

      | :sl:`set the script code for text shaping`
      | :sg:`set_script(str) -> None`

      **Experimental:** feature still in development available for testing and feedback. It may change.
      `Please leave feedback with authors <https://github.com/pygame/pygame/pull/3330>`_

      Sets the script used by harfbuzz text shaping, taking a 4 character
      script code as input. For example, Hindi is written in the Devanagari
      script, for which the script code is `"Deva"`. See the full list of
      script codes in `ISO 15924 <https://www.unicode.org/iso15924/iso15924-codes.html>`_.

      This method requires pygame built with SDL_ttf 2.20.0 or above. Otherwise the
      method will raise a pygame.error.

      .. versionadded:: 2.2.0

      .. ## Font.set_script ## 

   .. ## pygame.font.Font ##

.. ## pygame.font ##


--- Contenu du fichier : sprite.rst.txt ---
.. include:: common.txt

:mod:`pygame.sprite`
====================

.. module:: pygame.sprite
   :synopsis: pygame module with basic game object classes

| :sl:`pygame module with basic game object classes`

This module contains several simple classes to be used within games. There is
the main Sprite class and several Group classes that contain Sprites. The use
of these classes is entirely optional when using pygame. The classes are fairly
lightweight and only provide a starting place for the code that is common to
most games.

The Sprite class is intended to be used as a base class for the different types
of objects in the game. There is also a base Group class that simply stores
sprites. A game could create new types of Group classes that operate on
specially customized Sprite instances they contain.

The basic Group class can draw the Sprites it contains to a Surface. The
``Group.draw()`` method requires that each Sprite have a ``Surface.image``
attribute and a ``Surface.rect``. The ``Group.clear()`` method requires these
same attributes, and can be used to erase all the Sprites with background.
There are also more advanced Groups: ``pygame.sprite.RenderUpdates()`` and
``pygame.sprite.OrderedUpdates()``.

Lastly, this module contains several collision functions. These help find
sprites inside multiple groups that have intersecting bounding rectangles. To
find the collisions, the Sprites are required to have a ``Surface.rect``
attribute assigned.

The groups are designed for high efficiency in removing and adding Sprites to
them. They also allow cheap testing to see if a Sprite already exists in a
Group. A given Sprite can exist in any number of groups. A game could use some
groups to control object rendering, and a completely separate set of groups to
control interaction or player movement. Instead of adding type attributes or
bools to a derived Sprite class, consider keeping the Sprites inside organized
Groups. This will allow for easier lookup later in the game.

Sprites and Groups manage their relationships with the ``add()`` and
``remove()`` methods. These methods can accept a single or multiple targets for
membership. The default initializers for these classes also takes a single or
list of targets for initial membership. It is safe to repeatedly add and remove
the same Sprite from a Group.

While it is possible to design sprite and group classes that don't derive from
the Sprite and AbstractGroup classes below, it is strongly recommended that you
extend those when you add a Sprite or Group class.

Sprites are not thread safe. So lock them yourself if using threads.

.. class:: Sprite

   | :sl:`Simple base class for visible game objects.`
   | :sg:`Sprite(*groups) -> Sprite`

   The base class for visible game objects. Derived classes will want to
   override the ``Sprite.update()`` and assign a ``Sprite.image`` and
   ``Sprite.rect`` attributes. The initializer can accept any number of Group
   instances to be added to.

   When subclassing the Sprite, be sure to call the base initializer before
   adding the Sprite to Groups. For example:

   .. code-block:: python
   
       class Block(pygame.sprite.Sprite):
            
           # Constructor. Pass in the color of the block, 
           # and its x and y position
           def __init__(self, color, width, height):
              # Call the parent class (Sprite) constructor
              pygame.sprite.Sprite.__init__(self) 
        
              # Create an image of the block, and fill it with a color.
              # This could also be an image loaded from the disk.
              self.image = pygame.Surface([width, height])
              self.image.fill(color)
        
              # Fetch the rectangle object that has the dimensions of the image
              # Update the position of this object by setting the values of rect.x and rect.y
              self.rect = self.image.get_rect()   
      
   .. method:: update

      | :sl:`method to control sprite behavior`
      | :sg:`update(*args, **kwargs) -> None`

      The default implementation of this method does nothing; it's just a
      convenient "hook" that you can override. This method is called by
      ``Group.update()`` with whatever arguments you give it.

      There is no need to use this method if not using the convenience method
      by the same name in the Group class.

      .. ## Sprite.update ##

   .. method:: add

      | :sl:`add the sprite to groups`
      | :sg:`add(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be added to the Groups it is not already a member of.

      .. ## Sprite.add ##

   .. method:: remove

      | :sl:`remove the sprite from groups`
      | :sg:`remove(*groups) -> None`

      Any number of Group instances can be passed as arguments. The Sprite will
      be removed from the Groups it is currently a member of.

      .. ## Sprite.remove ##

   .. method:: kill

      | :sl:`remove the Sprite from all Groups`
      | :sg:`kill() -> None`

      The Sprite is removed from all the Groups that contain it. This won't
      change anything about the state of the Sprite. It is possible to continue
      to use the Sprite after this method has been called, including adding it
      to Groups.

      .. ## Sprite.kill ##

   .. method:: alive

      | :sl:`does the sprite belong to any groups`
      | :sg:`alive() -> bool`

      Returns True when the Sprite belongs to one or more Groups.

      .. ## Sprite.alive ##

   .. method:: groups

      | :sl:`list of Groups that contain this Sprite`
      | :sg:`groups() -> group_list`

      Return a list of all the Groups that contain this Sprite.

      .. ## Sprite.groups ##

   .. ## pygame.sprite.Sprite ##

.. class:: WeakSprite

   | :sl:`A subclass of Sprite that references its Groups weakly. This means that any group this belongs to that is not referenced anywhere else is garbage collected automatically.`
   | :sg:`WeakSprite(*groups) -> WeakSprite`

.. class:: DirtySprite

   | :sl:`A subclass of Sprite with more attributes and features.`
   | :sg:`DirtySprite(*groups) -> DirtySprite`

   Extra DirtySprite attributes with their default values:

   dirty = 1

   ::

       if set to 1, it is repainted and then set to 0 again
       if set to 2 then it is always dirty ( repainted each frame,
       flag is not reset)
       0 means that it is not dirty and therefore not repainted again

   blendmode = 0

   ::

       its the special_flags argument of blit, blendmodes

   source_rect = None

   ::

       source rect to use, remember that it is relative to
       topleft (0,0) of self.image

   visible = 1

   ::

       normally 1, if set to 0 it will not be repainted
       (you must set it dirty too to be erased from screen)

   layer = 0

   ::

       (READONLY value, it is read when adding it to the
       LayeredDirty, for details see doc of LayeredDirty)

   .. ##  ##

   .. ## pygame.sprite.DirtySprite ##

.. class:: Group

   | :sl:`A container class to hold and manage multiple Sprite objects.`
   | :sg:`Group(*sprites) -> Group`

   A simple container for Sprite objects. This class can be inherited to create
   containers with more specific behaviors. The constructor takes any number of
   Sprite arguments to add to the Group. The group supports the following
   standard Python operations:

   ::

       in      test if a Sprite is contained
       len     the number of Sprites contained
       bool    test if any Sprites are contained
       iter    iterate through all the Sprites

   The Sprites in the Group are ordered only on python 3.6 and higher.
   Below python 3.6 drawing and iterating over the Sprites is in no particular order.

   .. method:: sprites

      | :sl:`list of the Sprites this Group contains`
      | :sg:`sprites() -> sprite_list`

      Return a list of all the Sprites this group contains. You can also get an
      iterator from the group, but you cannot iterate over a Group while
      modifying it.

      .. ## Group.sprites ##

   .. method:: copy

      | :sl:`duplicate the Group`
      | :sg:`copy() -> Group`

      Creates a new Group with all the same Sprites as the original. If you
      have subclassed Group, the new object will have the same (sub-)class as
      the original. This only works if the derived class's constructor takes
      the same arguments as the Group class's.

      .. ## Group.copy ##

   .. method:: add

      | :sl:`add Sprites to this Group`
      | :sg:`add(*sprites) -> None`

      Add any number of Sprites to this Group. This will only add Sprites that
      are not already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.add ##

   .. method:: remove

      | :sl:`remove Sprites from the Group`
      | :sg:`remove(*sprites) -> None`

      Remove any number of Sprites from the Group. This will only remove
      Sprites that are already members of the Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.remove ##

   .. method:: has

      | :sl:`test if a Group contains Sprites`
      | :sg:`has(*sprites) -> bool`

      Return True if the Group contains all of the given sprites. This is
      similar to using the "in" operator on the Group ("if sprite in group:
      ..."), which tests if a single Sprite belongs to a Group.

      Each sprite argument can also be a iterator containing Sprites.

      .. ## Group.has ##

   .. method:: update

      | :sl:`call the update method on contained Sprites`
      | :sg:`update(*args, **kwargs) -> None`

      Calls the ``update()`` method on all Sprites in the Group. The base
      Sprite class has an update method that takes any number of arguments and
      does nothing. The arguments passed to ``Group.update()`` will be passed
      to each Sprite.

      There is no way to get the return value from the ``Sprite.update()``
      methods.

      .. ## Group.update ##

   .. method:: draw

      | :sl:`blit the Sprite images`
      | :sg:`draw(Surface, bgsurf=None, special_flags=0) -> List[Rect]`

      Draws the contained Sprites to the Surface argument. This uses the
      ``Sprite.image`` attribute for the source surface, and ``Sprite.rect``
      for the position. ``special_flags`` is passed to ``Surface.blit()``.
      ``bgsurf`` is unused in this method but ``LayeredDirty.draw()`` uses
      it.

      The Group does not keep sprites in any order, so the draw order is
      arbitrary.

      .. ## Group.draw ##

   .. method:: clear

      | :sl:`draw a background over the Sprites`
      | :sg:`clear(Surface_dest, background) -> None`

      Erases the Sprites used in the last ``Group.draw()`` call. The
      destination Surface is cleared by filling the drawn Sprite positions with
      the background.

      The background is usually a Surface image the same dimensions as the
      destination Surface. However, it can also be a callback function that
      takes two arguments; the destination Surface and an area to clear. The
      background callback function will be called several times each clear.

      Here is an example callback that will clear the Sprites with solid red:

      ::

          def clear_callback(surf, rect):
              color = 255, 0, 0
              surf.fill(color, rect)

      .. ## Group.clear ##

   .. method:: empty

      | :sl:`remove all Sprites`
      | :sg:`empty() -> None`

      Removes all Sprites from this Group.

      .. ## Group.empty ##

   .. ## pygame.sprite.Group ##

.. class:: WeakDirtySprite

   | :sl:`A subclass of WeakSprite and DirtySprite that combines the benefits of both classes.`
   | :sg:`WeakDirtySprite(*groups) -> WeakDirtySprite`

.. class:: RenderPlain

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderClear

   | :sl:`Same as pygame.sprite.Group`

   This class is an alias to ``pygame.sprite.Group()``. It has no additional functionality.

   .. ## pygame.sprite.RenderClear ##

.. class:: RenderUpdates

   | :sl:`Group sub-class that tracks dirty updates.`
   | :sg:`RenderUpdates(*sprites) -> RenderUpdates`

   This class is derived from ``pygame.sprite.Group()``. It has an extended
   ``draw()`` method that tracks the changed areas of the screen.

   .. method:: draw

      | :sl:`blit the Sprite images and track changed areas`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      Draws all the Sprites to the surface, the same as ``Group.draw()``. This
      method also returns a list of Rectangular areas on the screen that have
      been changed. The returned changes include areas of the screen that have
      been affected by previous ``Group.clear()`` calls. ``special_flags`` is
      passed to ``Surface.blit()``.

      The returned Rect list should be passed to ``pygame.display.update()``.
      This will help performance on software driven display modes. This type of
      updating is usually only helpful on destinations with non-animating
      backgrounds.

      .. ## RenderUpdates.draw ##

   .. ## pygame.sprite.RenderUpdates ##

.. function:: OrderedUpdates

   | :sl:`RenderUpdates sub-class that draws Sprites in order of addition.`
   | :sg:`OrderedUpdates(*sprites) -> OrderedUpdates`

   This class derives from ``pygame.sprite.RenderUpdates()``. It maintains the
   order in which the Sprites were added to the Group for rendering. This makes
   adding and removing Sprites from the Group a little slower than regular
   Groups.

   .. ## pygame.sprite.OrderedUpdates ##

.. class:: LayeredUpdates

   | :sl:`LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.`
   | :sg:`LayeredUpdates(*sprites, **kwargs) -> LayeredUpdates`

   This group is fully compatible with :class:`pygame.sprite.Sprite`.

   You can set the default layer through kwargs using 'default_layer' and an
   integer for the layer. The default layer is 0.

   If the sprite you add has an attribute _layer then that layer will be used.
   If the \**kwarg contains 'layer' then the sprites passed will be added to
   that layer (overriding the ``sprite.layer`` attribute). If neither sprite
   has attribute layer nor \**kwarg then the default layer is used to add the
   sprites.

   .. versionadded:: 1.8

   .. method:: add

      | :sl:`add a sprite or sequence of sprites to a group`
      | :sg:`add(*sprites, **kwargs) -> None`

      If the ``sprite(s)`` have an attribute layer then that is used for the
      layer. If \**kwargs contains 'layer' then the ``sprite(s)`` will be added
      to that argument (overriding the sprite layer attribute). If neither is
      passed then the ``sprite(s)`` will be added to the default layer.

      .. ## LayeredUpdates.add ##

   .. method:: sprites

      | :sl:`returns a ordered list of sprites (first back, last top).`
      | :sg:`sprites() -> sprites`

      .. ## LayeredUpdates.sprites ##

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=0) -> Rect_list`

      .. ## LayeredUpdates.draw ##

   .. method:: get_sprites_at

      | :sl:`returns a list with all sprites at that position.`
      | :sg:`get_sprites_at(pos) -> colliding_sprites`

      Bottom sprites first, top last.

      .. ## LayeredUpdates.get_sprites_at ##

   .. method:: get_sprite

      | :sl:`returns the sprite at the index idx from the groups sprites`
      | :sg:`get_sprite(idx) -> sprite`

      Raises IndexOutOfBounds if the idx is not within range.

      .. ## LayeredUpdates.get_sprite ##

   .. method:: remove_sprites_of_layer

      | :sl:`removes all sprites from a layer and returns them as a list.`
      | :sg:`remove_sprites_of_layer(layer_nr) -> sprites`

      .. ## LayeredUpdates.remove_sprites_of_layer ##

   .. method:: layers

      | :sl:`returns a list of layers defined (unique), sorted from bottom up.`
      | :sg:`layers() -> layers`

      .. ## LayeredUpdates.layers ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredUpdates.change_layer ##

   .. method:: get_layer_of_sprite

      | :sl:`returns the layer that sprite is currently in.`
      | :sg:`get_layer_of_sprite(sprite) -> layer`

      If the sprite is not found then it will return the default layer.

      .. ## LayeredUpdates.get_layer_of_sprite ##

   .. method:: get_top_layer

      | :sl:`returns the top layer`
      | :sg:`get_top_layer() -> layer`

      .. ## LayeredUpdates.get_top_layer ##

   .. method:: get_bottom_layer

      | :sl:`returns the bottom layer`
      | :sg:`get_bottom_layer() -> layer`

      .. ## LayeredUpdates.get_bottom_layer ##

   .. method:: move_to_front

      | :sl:`brings the sprite to front layer`
      | :sg:`move_to_front(sprite) -> None`

      Brings the sprite to front, changing sprite layer to topmost layer (added
      at the end of that layer).

      .. ## LayeredUpdates.move_to_front ##

   .. method:: move_to_back

      | :sl:`moves the sprite to the bottom layer`
      | :sg:`move_to_back(sprite) -> None`

      Moves the sprite to the bottom layer, moving it behind all other layers
      and adding one additional layer.

      .. ## LayeredUpdates.move_to_back ##

   .. method:: get_top_sprite

      | :sl:`returns the topmost sprite`
      | :sg:`get_top_sprite() -> Sprite`

      .. ## LayeredUpdates.get_top_sprite ##

   .. method:: get_sprites_from_layer

      | :sl:`returns all sprites from a layer, ordered by how they where added`
      | :sg:`get_sprites_from_layer(layer) -> sprites`

      Returns all sprites from a layer, ordered by how they where added. It
      uses linear search and the sprites are not removed from layer.

      .. ## LayeredUpdates.get_sprites_from_layer ##

   .. method:: switch_layer

      | :sl:`switches the sprites from layer1 to layer2`
      | :sg:`switch_layer(layer1_nr, layer2_nr) -> None`

      The layers number must exist, it is not checked.

      .. ## LayeredUpdates.switch_layer ##

   .. ## pygame.sprite.LayeredUpdates ##

.. class:: LayeredDirty

   | :sl:`LayeredDirty group is for DirtySprite objects.  Subclasses LayeredUpdates.`
   | :sg:`LayeredDirty(*sprites, **kwargs) -> LayeredDirty`

   This group requires :class:`pygame.sprite.DirtySprite` or any sprite that
   has the following attributes:

   ::

       image, rect, dirty, visible, blendmode (see doc of DirtySprite).

   It uses the dirty flag technique and is therefore faster than the
   :class:`pygame.sprite.RenderUpdates` if you have many static sprites. It
   also switches automatically between dirty rect update and full screen
   drawing, so you do not have to worry what would be faster.

   Same as for the :class:`pygame.sprite.Group`. You can specify some
   additional attributes through kwargs:

   ::

       _use_update: True/False   default is False
       _default_layer: default layer where sprites without a layer are added.
       _time_threshold: threshold time for switching between dirty rect mode
           and fullscreen mode, defaults to 1000./80  == 1000./fps

   .. versionadded:: 1.8

   .. method:: draw

      | :sl:`draw all sprites in the right order onto the passed surface.`
      | :sg:`draw(surface, bgsurf=None, special_flags=None) -> Rect_list`

      You can pass the background too. If a background is already set, then the
      bgsurf argument has no effect. If present, the ``special_flags`` argument is
      always passed to ``Surface.blit()``, overriding ``DirtySprite.blendmode``. 
      If ``special_flags`` is not present, ``DirtySprite.blendmode`` is passed
      to the ``Surface.blit()`` instead.

      .. ## LayeredDirty.draw ##

   .. method:: clear

      | :sl:`used to set background`
      | :sg:`clear(surface, bgd) -> None`

      .. ## LayeredDirty.clear ##

   .. method:: repaint_rect

      | :sl:`repaints the given area`
      | :sg:`repaint_rect(screen_rect) -> None`

      screen_rect is in screen coordinates.

      .. ## LayeredDirty.repaint_rect ##

   .. method:: set_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`set_clip(screen_rect=None) -> None`

      .. ## LayeredDirty.set_clip ##

   .. method:: get_clip

      | :sl:`clip the area where to draw. Just pass None (default) to reset the clip`
      | :sg:`get_clip() -> Rect`

      .. ## LayeredDirty.get_clip ##

   .. method:: change_layer

      | :sl:`changes the layer of the sprite`
      | :sg:`change_layer(sprite, new_layer) -> None`

      sprite must have been added to the renderer. It is not checked.

      .. ## LayeredDirty.change_layer ##

   .. method:: set_timing_treshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_treshold(time_ms) -> None`

      DEPRECATED: Use set_timing_threshold() instead.

      .. deprecated:: 2.1.1

      .. ## LayeredDirty.set_timing_treshold ##

   .. method:: set_timing_threshold

      | :sl:`sets the threshold in milliseconds`
      | :sg:`set_timing_threshold(time_ms) -> None`

      Defaults to 1000.0 / 80.0. This means that the screen will be painted
      using the flip method rather than the update method if the update
      method is taking so long to update the screen that the frame rate falls
      below 80 frames per second.

      .. versionadded:: 2.1.1

      :raises TypeError: if ``time_ms`` is not int or float

      .. ## LayeredDirty.set_timing_threshold ##

   .. ## pygame.sprite.LayeredDirty ##

.. function:: GroupSingle

   | :sl:`Group container that holds a single sprite.`
   | :sg:`GroupSingle(sprite=None) -> GroupSingle`

   The GroupSingle container only holds a single Sprite. When a new Sprite is
   added, the old one is removed.

   There is a special property, ``GroupSingle.sprite``, that accesses the
   Sprite that this Group contains. It can be None when the Group is empty. The
   property can also be assigned to add a Sprite into the GroupSingle
   container.

   .. ## pygame.sprite.GroupSingle ##

.. function:: spritecollide

   | :sl:`Find sprites in a group that intersect another sprite.`
   | :sg:`spritecollide(sprite, group, dokill, collided = None) -> Sprite_list`

   Return a list containing all Sprites in a Group that intersect with another
   Sprite. Intersection is determined by comparing the ``Sprite.rect``
   attribute of each Sprite.

   The dokill argument is a bool. If set to True, all Sprites that collide will
   be removed from the Group.

   The collided argument is a callback function used to calculate if two
   sprites are colliding. it should take two sprites as values, and return a
   bool value indicating if they are colliding. If collided is not passed, all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   collided callables:

   ::

       collide_rect, collide_rect_ratio, collide_circle,
       collide_circle_ratio, collide_mask

   Example:
   
   .. code-block:: python

    # See if the Sprite block has collided with anything in the Group block_list
    # The True flag will remove the sprite in block_list
    blocks_hit_list = pygame.sprite.spritecollide(player, block_list, True)  
     
    # Check the list of colliding sprites, and add one to the score for each one
    for block in blocks_hit_list:
        score +=1
       
   .. ## pygame.sprite.spritecollide ##

.. function:: collide_rect

   | :sl:`Collision detection between two sprites, using rects.`
   | :sg:`collide_rect(left, right) -> bool`

   Tests for collision between two sprites. Uses the pygame rect colliderect
   function to calculate the collision. Intended to be passed as a collided
   callback function to the \*collide functions. Sprites must have a "rect"
   attributes.

   .. versionadded:: 1.8

   .. ## pygame.sprite.collide_rect ##

.. function:: collide_rect_ratio

   | :sl:`Collision detection between two sprites, using rects scaled to a ratio.`
   | :sg:`collide_rect_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites rects.

   Is created with a ratio, the instance is then intended to be passed as a
   collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_rect_ratio ##

.. function:: collide_circle

   | :sl:`Collision detection between two sprites, using circles.`
   | :sg:`collide_circle(left, right) -> bool`

   Tests for collision between two sprites, by testing to see if two circles
   centered on the sprites overlap. If the sprites have a "radius" attribute,
   that is used to create the circle, otherwise a circle is created that is big
   enough to completely enclose the sprites rect as given by the "rect"
   attribute. Intended to be passed as a collided callback function to the
   \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle ##

.. function:: collide_circle_ratio

   | :sl:`Collision detection between two sprites, using circles scaled to a ratio.`
   | :sg:`collide_circle_ratio(ratio) -> collided_callable`

   A callable class that checks for collisions between two sprites, using a
   scaled version of the sprites radius.

   Is created with a floating point ratio, the instance is then intended to be
   passed as a collided callback function to the \*collide functions.

   A ratio is a floating point number - 1.0 is the same size, 2.0 is twice as
   big, and 0.5 is half the size.

   The created callable tests for collision between two sprites, by testing to
   see if two circles centered on the sprites overlap, after scaling the
   circles radius by the stored ratio. If the sprites have a "radius"
   attribute, that is used to create the circle, otherwise a circle is created
   that is big enough to completely enclose the sprites rect as given by the
   "rect" attribute. Intended to be passed as a collided callback function to
   the \*collide functions. Sprites must have a "rect" and an optional "radius"
   attribute.

   .. versionadded:: 1.8.1

   .. ## pygame.sprite.collide_circle_ratio ##

.. function:: collide_mask

   | :sl:`Collision detection between two sprites, using masks.`
   | :sg:`collide_mask(sprite1, sprite2) -> (int, int)`
   | :sg:`collide_mask(sprite1, sprite2) -> None`

   Tests for collision between two sprites, by testing if their bitmasks
   overlap (uses :func:`pygame.mask.Mask.overlap`). If the sprites have a
   ``mask`` attribute, it is used as the mask, otherwise a mask is created from
   the sprite's ``image`` (uses :func:`pygame.mask.from_surface`). Sprites must
   have a ``rect`` attribute; the ``mask`` attribute is optional.

   The first point of collision between the masks is returned. The collision
   point is offset from ``sprite1``'s mask's topleft corner (which is always
   (0, 0)). The collision point is a position within the mask and is not
   related to the actual screen position of ``sprite1``.

   This function is intended to be passed as a ``collided`` callback function
   to the group collide functions (see :meth:`spritecollide`,
   :meth:`groupcollide`, :meth:`spritecollideany`).

   .. note::
      To increase performance, create and set a ``mask`` attribute for all
      sprites that will use this function to check for collisions. Otherwise,
      each time this function is called it will create new masks.

   .. note::
      A new mask needs to be recreated each time a sprite's image is changed
      (e.g. if a new image is used or the existing image is rotated).

   ::

      # Example of mask creation for a sprite.
      sprite.mask = pygame.mask.from_surface(sprite.image)

   :returns: first point of collision between the masks or ``None`` if no
      collision
   :rtype: tuple(int, int) or NoneType

   .. versionadded:: 1.8.0

   .. ## pygame.sprite.collide_mask ##

.. function:: groupcollide

   | :sl:`Find all sprites that collide between two groups.`
   | :sg:`groupcollide(group1, group2, dokill1, dokill2, collided = None) -> Sprite_dict`

   This will find collisions between all the Sprites in two groups.
   Collision is determined by comparing the ``Sprite.rect`` attribute of
   each Sprite or by using the collided function if it is not None.

   Every Sprite inside group1 is added to the return dictionary. The value for
   each item is the list of Sprites in group2 that intersect.

   If either dokill argument is True, the colliding Sprites will be removed
   from their respective Group.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.groupcollide ##

.. function:: spritecollideany

   | :sl:`Simple test if a sprite intersects anything in a group.`
   | :sg:`spritecollideany(sprite, group, collided = None) -> Sprite` Collision with the returned sprite.
   | :sg:`spritecollideany(sprite, group, collided = None) -> None` No collision

   If the sprite collides with any single sprite in the group, a single
   sprite from the group is returned.  On no collision None is returned.

   If you don't need all the features of the ``pygame.sprite.spritecollide()`` function, this
   function will be a bit quicker.

   The collided argument is a callback function used to calculate if two sprites are
   colliding. It should take two sprites as values and return a bool value
   indicating if they are colliding. If collided is not passed, then all
   sprites must have a "rect" value, which is a rectangle of the sprite area,
   which will be used to calculate the collision.

   .. ## pygame.sprite.spritecollideany ##

.. ##  ##

.. ## pygame.sprite ##


--- Contenu du fichier : color.rst.txt ---
.. include:: common.txt

:mod:`pygame.Color`
===================

.. currentmodule:: pygame

.. class:: Color

   | :sl:`pygame object for color representations`
   | :sg:`Color(r, g, b) -> Color`
   | :sg:`Color(r, g, b, a=255) -> Color`
   | :sg:`Color(color_value) -> Color`

   The ``Color`` class represents ``RGBA`` color values using a value range of
   0 to 255 inclusive. It allows basic arithmetic operations — binary
   operations ``+``, ``-``, ``*``, ``//``, ``%``, and unary operation ``~`` — to
   create new colors, supports conversions to other color spaces such as ``HSV``
   or ``HSL`` and lets you adjust single color channels.
   Alpha defaults to 255 (fully opaque) when not given.
   The arithmetic operations and ``correct_gamma()`` method preserve subclasses.
   For the binary operators, the class of the returned color is that of the
   left hand color object of the operator.

   Color objects support equality comparison with other color objects and 3 or
   4 element tuples of integers. There was a bug in pygame 1.8.1
   where the default alpha was 0, not 255 like previously.

   Color objects export the C level array interface. The interface exports a
   read-only one dimensional unsigned byte array of the same assigned length
   as the color. The new buffer interface is also exported, with the same
   characteristics as the array interface.

   The floor division, ``//``, and modulus, ``%``, operators do not raise
   an exception for division by zero. Instead, if a color, or alpha, channel
   in the right hand color is 0, then the result is 0. For example: ::

       # These expressions are True
       Color(255, 255, 255, 255) // Color(0, 64, 64, 64) == Color(0, 3, 3, 3)
       Color(255, 255, 255, 255) % Color(64, 64, 64, 0) == Color(63, 63, 63, 0)

   Use ``int(color)`` to return the immutable integer value of the color,
   usable as a ``dict`` key. This integer value differs from the mapped
   pixel values of :meth:`pygame.Surface.get_at_mapped`,
   :meth:`pygame.Surface.map_rgb` and :meth:`pygame.Surface.unmap_rgb`.
   It can be passed as a ``color_value`` argument to :class:`Color`
   (useful with sets).

   See :doc:`color_list` for samples of the available named colors.

   :param int r: red value in the range of 0 to 255 inclusive
   :param int g: green value in the range of 0 to 255 inclusive
   :param int b: blue value in the range of 0 to 255 inclusive
   :param int a: (optional) alpha value in the range of 0 to 255 inclusive,
      default is 255
   :param color_value: color value (see note below for the supported formats)

      .. note::
         Supported ``color_value`` formats:
            | - **Color object:** clones the given :class:`Color` object
            | - **Color name: str:** name of the color to use, e.g. ``'red'``
              (all the supported name strings can be found in the
               :doc:`color_list`, with sample swatches)
            | - **HTML color format str:** ``'#rrggbbaa'`` or ``'#rrggbb'``,
              where rr, gg, bb, and aa are 2-digit hex numbers in the range
              of 0 to 0xFF inclusive, the aa (alpha) value defaults to 0xFF
              if not provided
            | - **hex number str:** ``'0xrrggbbaa'`` or ``'0xrrggbb'``, where
              rr, gg, bb, and aa are 2-digit hex numbers in the range of 0x00
              to 0xFF inclusive, the aa (alpha) value defaults to 0xFF if not
              provided
            | - **int:** int value of the color to use, using hex numbers can
              make this parameter more readable, e.g. ``0xrrggbbaa``, where rr,
              gg, bb, and aa are 2-digit hex numbers in the range of 0x00 to
              0xFF inclusive, note that the aa (alpha) value is not optional for
              the int format and must be provided
            | - **tuple/list of int color values:** ``(R, G, B, A)`` or
              ``(R, G, B)``, where R, G, B, and A are int values in the range of
              0 to 255 inclusive, the A (alpha) value defaults to 255 if not
              provided

   :type color_value: Color or str or int or tuple(int, int, int, [int]) or
      list(int, int, int, [int])

   :returns: a newly created :class:`Color` object
   :rtype: Color

   .. versionchanged:: 2.0.0
      Support for tuples, lists, and :class:`Color` objects when creating
      :class:`Color` objects.
   .. versionchanged:: 1.9.2 Color objects export the C level array interface.
   .. versionchanged:: 1.9.0 Color objects support 4-element tuples of integers.
   .. versionchanged:: 1.8.1 New implementation of the class.

   .. attribute:: r

      | :sl:`Gets or sets the red value of the Color.`
      | :sg:`r -> int`

      The red value of the Color.

      .. ## Color.r ##

   .. attribute:: g

      | :sl:`Gets or sets the green value of the Color.`
      | :sg:`g -> int`

      The green value of the Color.

      .. ## Color.g ##

   .. attribute:: b

      | :sl:`Gets or sets the blue value of the Color.`
      | :sg:`b -> int`

      The blue value of the Color.

      .. ## Color.b ##

   .. attribute:: a

      | :sl:`Gets or sets the alpha value of the Color.`
      | :sg:`a -> int`

      The alpha value of the Color.

      .. ## Color.a ##

   .. attribute:: cmy

      | :sl:`Gets or sets the CMY representation of the Color.`
      | :sg:`cmy -> tuple`

      The ``CMY`` representation of the Color. The ``CMY`` components are in
      the ranges ``C`` = [0, 1], ``M`` = [0, 1], ``Y`` = [0, 1]. Note that this
      will not return the absolutely exact ``CMY`` values for the set ``RGB``
      values in all cases. Due to the ``RGB`` mapping from 0-255 and the
      ``CMY`` mapping from 0-1 rounding errors may cause the ``CMY`` values to
      differ slightly from what you might expect.

      .. ## Color.cmy ##

   .. attribute:: hsva

      | :sl:`Gets or sets the HSVA representation of the Color.`
      | :sg:`hsva -> tuple`

      The ``HSVA`` representation of the Color. The ``HSVA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``V`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSV`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSV`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSV`` values to differ slightly from what you might expect.

      .. ## Color.hsva ##

   .. attribute:: hsla

      | :sl:`Gets or sets the HSLA representation of the Color.`
      | :sg:`hsla -> tuple`

      The ``HSLA`` representation of the Color. The ``HSLA`` components are in
      the ranges ``H`` = [0, 360], ``S`` = [0, 100], ``L`` = [0, 100], A = [0,
      100]. Note that this will not return the absolutely exact ``HSL`` values
      for the set ``RGB`` values in all cases. Due to the ``RGB`` mapping from
      0-255 and the ``HSL`` mapping from 0-100 and 0-360 rounding errors may
      cause the ``HSL`` values to differ slightly from what you might expect.

      .. ## Color.hsla ##

   .. attribute:: i1i2i3

      | :sl:`Gets or sets the I1I2I3 representation of the Color.`
      | :sg:`i1i2i3 -> tuple`

      The ``I1I2I3`` representation of the Color. The ``I1I2I3`` components are
      in the ranges ``I1`` = [0, 1], ``I2`` = [-0.5, 0.5], ``I3`` = [-0.5,
      0.5]. Note that this will not return the absolutely exact ``I1I2I3``
      values for the set ``RGB`` values in all cases. Due to the ``RGB``
      mapping from 0-255 and the ``I1I2I3`` mapping from 0-1 rounding errors
      may cause the ``I1I2I3`` values to differ slightly from what you might
      expect.

      .. ## Color.i1i2i3 ##

   .. method:: normalize

      | :sl:`Returns the normalized RGBA values of the Color.`
      | :sg:`normalize() -> tuple`

      Returns the normalized ``RGBA`` values of the Color as floating point
      values.

      .. ## Color.normalize ##

   .. method:: correct_gamma

      | :sl:`Applies a certain gamma value to the Color.`
      | :sg:`correct_gamma (gamma) -> Color`

      Applies a certain gamma value to the Color and returns a new Color with
      the adjusted ``RGBA`` values.

      .. ## Color.correct_gamma ##

   .. method:: set_length

      | :sl:`Set the number of elements in the Color to 1,2,3, or 4.`
      | :sg:`set_length(len) -> None`

      DEPRECATED: You may unpack the values you need like so, 
      ``r, g, b, _ = pygame.Color(100, 100, 100)``
      If you only want r, g and b
      Or 
      ``r, g, *_ = pygame.Color(100, 100, 100)`` 
      if you only want r and g

      The default Color length is 4. Colors can have lengths 1,2,3 or 4. This
      is useful if you want to unpack to r,g,b and not r,g,b,a. If you want to
      get the length of a Color do ``len(acolor)``.

      .. deprecated:: 2.1.3
      .. versionadded:: 1.9.0

      .. ## Color.set_length ##

   .. method:: grayscale

      | :sl:`returns the grayscale of a Color`
      | :sg:`grayscale() -> Color`

      Returns a Color which represents the grayscaled version of self using the luminosity formula which weights red, green and blue according to their wavelengths..

      .. ## Color.grayscale ##

   .. method:: lerp

      | :sl:`returns a linear interpolation to the given Color.`
      | :sg:`lerp(Color, float) -> Color`

      Returns a Color which is a linear interpolation between self and the
      given Color in RGBA space. The second parameter determines how far
      between self and other the result is going to be.
      It must be a value between 0 and 1 where 0 means self and 1 means
      other will be returned.

      .. versionadded:: 2.0.1

      .. ## Color.lerp ##

   .. method:: premul_alpha

      | :sl:`returns a Color where the r,g,b components have been multiplied by the alpha.`
      | :sg:`premul_alpha() -> Color`

      Returns a new Color where each of the red, green and blue colour
      channels have been multiplied by the alpha channel of the original
      color. The alpha channel remains unchanged.

      This is useful when working with the ``BLEND_PREMULTIPLIED`` blending mode
      flag for :meth:`pygame.Surface.blit()`, which assumes that all surfaces using
      it are using pre-multiplied alpha colors.

      .. versionadded:: 2.0.0

      .. ## Color.premul_alpha ##

   .. method:: update

      | :sl:`Sets the elements of the color`
      | :sg:`update(r, g, b) -> None`
      | :sg:`update(r, g, b, a=255) -> None`
      | :sg:`update(color_value) -> None`

      Sets the elements of the color. See parameters for :meth:`pygame.Color` for the
      parameters of this function. If the alpha value was not set it will not change.

      .. versionadded:: 2.0.1

      .. ## Color.update ##
   .. ## pygame.Color ##


--- Contenu du fichier : transform.rst.txt ---
.. include:: common.txt

:mod:`pygame.transform`
=======================

.. module:: pygame.transform
   :synopsis: pygame module to transform surfaces

| :sl:`pygame module to transform surfaces`

A Surface transform is an operation that moves or resizes the pixels. All these
functions take a Surface to operate on and return a new Surface with the
results.

Some of the transforms are considered destructive. These means every time they
are performed they lose pixel data. Common examples of this are resizing and
rotating. For this reason, it is better to re-transform the original surface
than to keep transforming an image multiple times. (For example, suppose you
are animating a bouncing spring which expands and contracts. If you applied the
size changes incrementally to the previous images, you would lose detail.
Instead, always begin with the original image and scale to the desired size.)

.. versionchanged:: 2.0.2 transform functions now support keyword arguments.

.. function:: flip

   | :sl:`flip vertically and horizontally`
   | :sg:`flip(surface, flip_x, flip_y) -> Surface`

   This can flip a Surface either vertically, horizontally, or both.
   The arguments ``flip_x`` and ``flip_y`` are booleans that control whether
   to flip each axis. Flipping a Surface is non-destructive and returns a new
   Surface with the same dimensions.

   .. ## pygame.transform.flip ##

.. function:: scale

   | :sl:`resize to new resolution`
   | :sg:`scale(surface, size, dest_surface=None) -> Surface`

   Resizes the Surface to a new size, given as (width, height). 
   This is a fast scale operation that does not sample the results.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be the same size as the size (width, height) passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale ##

.. function:: scale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`scale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave scale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`scale()`, but scales by some factor, rather than taking
   the new size explicitly. For example, :code:`transform.scale_by(surf, 3)`
   will triple the size of the surface in both dimensions. Optionally, the
   scale factor can be a sequence of two numbers, controlling x and y scaling
   separately. For example, :code:`transform.scale_by(surf, (2, 1))` doubles
   the image width but keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.scale_by ##

.. function:: rotate

   | :sl:`rotate an image`
   | :sg:`rotate(surface, angle) -> Surface`

   Unfiltered counterclockwise rotation. The angle argument represents degrees
   and can be any floating point value. Negative angle amounts will rotate
   clockwise.

   Unless rotating by 90 degree increments, the image will be padded larger to
   hold the new size. If the image has pixel alphas, the padded area will be
   transparent. Otherwise pygame will pick a color that matches the Surface
   colorkey or the topleft pixel value.

   .. ## pygame.transform.rotate ##

.. function:: rotozoom

   | :sl:`filtered scale and rotation`
   | :sg:`rotozoom(surface, angle, scale) -> Surface`

   This is a combined scale and rotation transform. The resulting Surface will
   be a filtered 32-bit Surface. The scale argument is a floating point value
   that will be multiplied by the current resolution. The angle argument is a
   floating point value that represents the counterclockwise degrees to rotate.
   A negative rotation angle will rotate clockwise.

   .. ## pygame.transform.rotozoom ##

.. function:: scale2x

   | :sl:`specialized image doubler`
   | :sg:`scale2x(surface, dest_surface=None) -> Surface`

   This will return a new image that is double the size of the original. It
   uses the AdvanceMAME Scale2X algorithm which does a 'jaggie-less' scale of
   bitmap graphics.

   This really only has an effect on simple images with solid colors. On
   photographic and antialiased images it will look like a regular unfiltered
   scale.

   An optional destination surface can be used, rather than have it create a
   new one. This is quicker if you want to repeatedly scale something. However
   the destination must be twice the size of the source surface passed in. Also
   the destination surface must be the same format.

   .. ## pygame.transform.scale2x ##

.. function:: smoothscale

   | :sl:`scale a surface to an arbitrary size smoothly`
   | :sg:`smoothscale(surface, size, dest_surface=None) -> Surface`

   Uses one of two different algorithms for scaling each dimension of the input
   surface as required. For shrinkage, the output pixels are area averages of
   the colors they cover. For expansion, a bilinear filter is used. For the
   x86-64 and i686 architectures, optimized ``MMX`` routines are included and
   will run much faster than other machine types. The size is a 2 number
   sequence for (width, height). This function only works for 24-bit or 32-bit
   surfaces. An exception will be thrown if the input surface bit depth is less
   than 24.

   .. versionadded:: 1.8

   .. ## pygame.transform.smoothscale ##

.. function:: smoothscale_by

   | :sl:`resize to new resolution, using scalar(s)`
   | :sg:`smoothscale_by(surface, factor, dest_surface=None) -> Surface`

   **Experimental:** feature still in development available for testing and feedback. It may change.
   `Please leave smoothscale_by feedback with authors <https://github.com/pygame/pygame/pull/2723>`_

   Same as :func:`smoothscale()`, but scales by some factor, rather than
   taking the new size explicitly. For example,
   :code:`transform.smoothscale_by(surf, 3)` will triple the size of the
   surface in both dimensions. Optionally, the scale factor can be a sequence
   of two numbers, controlling x and y scaling separately. For example,
   :code:`transform.smoothscale_by(surf, (2, 1))` doubles the image width but
   keeps the height the same.

   .. versionadded:: 2.1.3

   .. ## pygame.transform.smoothscale_by ##

.. function:: get_smoothscale_backend

   | :sl:`return smoothscale filter version in use: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`get_smoothscale_backend() -> string`

   Shows whether or not smoothscale is using ``MMX`` or ``SSE`` acceleration.
   If no acceleration is available then "GENERIC" is returned. For a x86
   processor the level of acceleration to use is determined at runtime.

   This function is provided for pygame testing and debugging.

   .. ## pygame.transform.get_smoothscale_backend ##

.. function:: set_smoothscale_backend

   | :sl:`set smoothscale filter version to one of: 'GENERIC', 'MMX', or 'SSE'`
   | :sg:`set_smoothscale_backend(backend) -> None`

   Sets smoothscale acceleration. Takes a string argument. A value of 'GENERIC'
   turns off acceleration. 'MMX' uses ``MMX`` instructions only. 'SSE' allows
   ``SSE`` extensions as well. A value error is raised if type is not
   recognized or not supported by the current processor.

   This function is provided for pygame testing and debugging. If smoothscale
   causes an invalid instruction error then it is a pygame/SDL bug that should
   be reported. Use this function as a temporary fix only.

   .. ## pygame.transform.set_smoothscale_backend ##

.. function:: chop

   | :sl:`gets a copy of an image with an interior area removed`
   | :sg:`chop(surface, rect) -> Surface`

   Extracts a portion of an image. All vertical and horizontal pixels
   surrounding the given rectangle area are removed. The corner areas (diagonal
   to the rect) are then brought together. (The original image is not altered
   by this operation.)

   ``NOTE``: If you want a "crop" that returns the part of an image within a
   rect, you can blit with a rect to a new surface or copy a subsurface.

   .. ## pygame.transform.chop ##

.. function:: laplacian

   | :sl:`find edges in a surface`
   | :sg:`laplacian(surface, dest_surface=None) -> Surface`

   Finds the edges in a surface using the laplacian algorithm.

   .. versionadded:: 1.8

   .. ## pygame.transform.laplacian ##

.. function:: average_surfaces

   | :sl:`find the average surface from many surfaces.`
   | :sg:`average_surfaces(surfaces, dest_surface=None, palette_colors=1) -> Surface`

   Takes a sequence of surfaces and returns a surface with average colors from
   each of the surfaces.

   palette_colors - if true we average the colors in palette, otherwise we
   average the pixel values. This is useful if the surface is actually
   greyscale colors, and not palette colors.

   Note, this function currently does not handle palette using surfaces
   correctly.

   .. versionadded:: 1.8
   .. versionadded:: 1.9 ``palette_colors`` argument

   .. ## pygame.transform.average_surfaces ##

.. function:: average_color

   | :sl:`finds the average color of a surface`
   | :sg:`average_color(surface, rect=None, consider_alpha=False) -> Color`

   Finds the average color of a Surface or a region of a surface specified by a
   Rect, and returns it as a Color. If consider_alpha is set to True, then alpha is
   taken into account (removing the black artifacts).

   .. versionadded:: 2.1.2 ``consider_alpha`` argument

   .. ## pygame.transform.average_color ##

.. function:: grayscale

   | :sl:`grayscale a surface`
   | :sg:`grayscale(surface, dest_surface=None) -> Surface`

   Returns a grayscaled version of the original surface using the luminosity formula which weights red, green and blue according to their wavelengths.

   An optional destination surface can be passed which is faster than creating a new Surface.
   This destination surface must have the same dimensions (width, height) and depth as the source Surface.

   .. ## pygame.transform.grayscale ##

.. function:: threshold

   | :sl:`finds which, and how many pixels in a surface are within a threshold of a 'search_color' or a 'search_surf'.`
   | :sg:`threshold(dest_surface, surface, search_color, threshold=(0,0,0,0), set_color=(0,0,0,0), set_behavior=1, search_surf=None, inverse_set=False) -> num_threshold_pixels`

   This versatile function can be used for find colors in a 'surf' close to a 'search_color'
   or close to colors in a separate 'search_surf'.

   It can also be used to transfer pixels into a 'dest_surf' that match or don't match.

   By default it sets pixels in the 'dest_surf' where all of the pixels NOT within the
   threshold are changed to set_color. If inverse_set is optionally set to True,
   the pixels that ARE within the threshold are changed to set_color.

   If the optional 'search_surf' surface is given, it is used to threshold against
   rather than the specified 'set_color'. That is, it will find each pixel in the
   'surf' that is within the 'threshold' of the pixel at the same coordinates
   of the 'search_surf'.

   :param dest_surf: Surface we are changing. See 'set_behavior'.
    Should be None if counting (set_behavior is 0).
   :type dest_surf: pygame.Surface or None

   :param pygame.Surface surf: Surface we are looking at.

   :param pygame.Color search_color: Color we are searching for.

   :param pygame.Color threshold: Within this distance from search_color (or search_surf).
     You can use a threshold of (r,g,b,a) where the r,g,b can have different
     thresholds. So you could use an r threshold of 40 and a blue threshold of 2
     if you like.

   :param set_color: Color we set in dest_surf.
   :type set_color: pygame.Color or None

   :param int set_behavior:
    - set_behavior=1 (default). Pixels in dest_surface will be changed to 'set_color'.
    - set_behavior=0 we do not change 'dest_surf', just count. Make dest_surf=None.
    - set_behavior=2 pixels set in 'dest_surf' will be from 'surf'.

   :param search_surf:
    - search_surf=None (default). Search against 'search_color' instead.
    - search_surf=Surface. Look at the color in 'search_surf' rather than using 'search_color'.
   :type search_surf: pygame.Surface or None

   :param bool inverse_set:
     - False, default. Pixels outside of threshold are changed.
     - True, Pixels within threshold are changed.

   :rtype: int
   :returns: The number of pixels that are within the 'threshold' in 'surf'
     compared to either 'search_color' or `search_surf`.

   :Examples:

   See the threshold tests for a full of examples: https://github.com/pygame/pygame/blob/main/test/transform_test.py

   .. literalinclude:: ../../../test/transform_test.py
      :pyobject: TransformModuleTest.test_threshold_dest_surf_not_change


   .. versionadded:: 1.8
   .. versionchanged:: 1.9.4
      Fixed a lot of bugs and added keyword arguments. Test your code.

   .. ## pygame.transform.threshold ##

.. ## pygame.transform ##


--- Contenu du fichier : examples.rst.txt ---
.. include:: common.txt

:mod:`pygame.examples`
======================

.. module:: pygame.examples
   :synopsis: module of example programs

| :sl:`module of example programs`

These examples should help get you started with pygame. Here is a brief rundown
of what you get. The source code for these examples is in the public domain.
Feel free to use for your own projects.

There are several ways to run the examples. First they can be run as
stand-alone programs. Second they can be imported and their ``main()`` methods
called (see below). Finally, the easiest way is to use the python -m option:

::

   python -m pygame.examples.<example name> <example arguments>

eg:

::

   python -m pygame.examples.scaletest someimage.png

Resources such as images and sounds for the examples are found in the 
pygame/examples/data subdirectory.

You can find where the example files are installed by using the following
commands inside the python interpreter.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.__file__
   '/usr/lib/python2.6/site-packages/pygame/examples/scaletest.py'

On each OS and version of Python the location will be slightly different.
For example on Windows it might be in 'C:/Python26/Lib/site-packages/pygame/examples/'
On Mac OS X it might be in '/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pygame/examples/'


You can also run the examples in the python interpreter by calling each modules main() function.

::

   >>> import pygame.examples.scaletest
   >>> pygame.examples.scaletest.main()


We're always on the lookout for more examples and/or example requests. Code
like this is probably the best way to start getting involved with python
gaming.

examples as a package is new to pygame 1.9.0. But most of the examples came with
pygame much earlier.

.. function:: aliens.main

   | :sl:`play the full aliens example`
   | :sg:`aliens.main() -> None`

   This started off as a port of the ``SDL`` demonstration, Aliens. Now it has
   evolved into something sort of resembling fun. This demonstrates a lot of
   different uses of sprites and optimized blitting. Also transparency,
   colorkeys, fonts, sound, music, joystick, and more. (PS, my high score is
   117! goodluck)

   .. ## pygame.examples.aliens.main ##

.. function:: stars.main

   | :sl:`run a simple starfield example`
   | :sg:`stars.main() -> None`

   A simple starfield example. You can change the center of perspective by
   leftclicking the mouse on the screen.

   .. ## pygame.examples.stars.main ##

.. function:: chimp.main

   | :sl:`hit the moving chimp`
   | :sg:`chimp.main() -> None`

   This simple example is derived from the line-by-line tutorial that comes
   with pygame. It is based on a 'popular' web banner. Note there are comments
   here, but for the full explanation, follow along in the tutorial.

   .. ## pygame.examples.chimp.main ##

.. function:: moveit.main

   | :sl:`display animated objects on the screen`
   | :sg:`moveit.main() -> None`

   This is the full and final example from the Pygame Tutorial, "How Do I Make
   It Move". It creates 10 objects and animates them on the screen.

   Note it's a bit scant on error checking, but it's easy to read. :]
   Fortunately, this is python, and we needn't wrestle with a pile of error
   codes.

   .. ## pygame.examples.moveit.main ##

.. function:: fonty.main

   | :sl:`run a font rendering example`
   | :sg:`fonty.main() -> None`

   Super quick, super simple application demonstrating the different ways to
   render fonts with the font module

   .. ## pygame.examples.fonty.main ##

.. function:: freetype_misc.main

   | :sl:`run a FreeType rendering example`
   | :sg:`freetype_misc.main() -> None`

   A showcase of rendering features the :class:`pygame.freetype.Font`
   class provides in addition to those available with :class:`pygame.font.Font`.
   It is a demonstration of direct to surface rendering, with vertical text
   and rotated text, opaque text and semi transparent text, horizontally
   stretched text and vertically stretched text.

   .. ## pygame.examples.fonty.main ##

.. function:: vgrade.main

   | :sl:`display a vertical gradient`
   | :sg:`vgrade.main() -> None`

   Demonstrates creating a vertical gradient with pixelcopy and NumPy python.
   The app will create a new gradient every half second and report the time
   needed to create and display the image. If you're not prepared to start
   working with the NumPy arrays, don't worry about the source for this one :]

   .. ## pygame.examples.vgrade.main ##

.. function:: eventlist.main

   | :sl:`display pygame events`
   | :sg:`eventlist.main() -> None`

   Eventlist is a sloppy style of pygame, but is a handy tool for learning
   about pygame events and input. At the top of the screen are the state of
   several device values, and a scrolling list of events are displayed on the
   bottom.

   This is not quality 'ui' code at all, but you can see how to implement very
   non-interactive status displays, or even a crude text output control.

   .. ## pygame.examples.eventlist.main ##

.. function:: arraydemo.main

   | :sl:`show various surfarray effects`
   | :sg:`arraydemo.main(arraytype=None) -> None`

   Another example filled with various surfarray effects. It requires the
   surfarray and image modules to be installed. This little demo can also make
   a good starting point for any of your own tests with surfarray

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.arraydemo.main ##

.. function:: sound.main

   | :sl:`load and play a sound`
   | :sg:`sound.main(file_path=None) -> None`

   Extremely basic testing of the mixer module. Load a sound and play it. All
   from the command shell, no graphics.

   If provided, use the audio file 'file_path', otherwise use a default file.

   ``sound.py`` optional command line argument: an audio file

   .. ## pygame.examples.sound.main ##

.. function:: sound_array_demos.main

   | :sl:`play various sndarray effects`
   | :sg:`sound_array_demos.main(arraytype=None) -> None`


   Uses sndarray and NumPy to create offset faded copies of the
   original sound. Currently it just uses hardcoded values for the number of
   echoes and the delay. Easy for you to recreate as needed.

   The ``arraytype`` parameter is deprecated; passing any value besides 'numpy'
   will raise ValueError.

   .. ## pygame.examples.sound_array_demos.main ##

.. function:: liquid.main

   | :sl:`display an animated liquid effect`
   | :sg:`liquid.main() -> None`

   This example was created in a quick comparison with the BlitzBasic gaming
   language. Nonetheless, it demonstrates a quick 8-bit setup (with colormap).

   .. ## pygame.examples.liquid.main ##

.. function:: glcube.main

   | :sl:`display an animated 3D cube using OpenGL`
   | :sg:`glcube.main() -> None`

   Using PyOpenGL and pygame, this creates a spinning 3D multicolored cube.

   .. ## pygame.examples.glcube.main ##

.. function:: scrap_clipboard.main

   | :sl:`access the clipboard`
   | :sg:`scrap_clipboard.main() -> None`

   A simple demonstration example for the clipboard support.

   .. ## pygame.examples.scrap_clipboard.main ##

.. function:: mask.main

   | :sl:`display multiple images bounce off each other using collision detection`
   | :sg:`mask.main(*args) -> None`

   Positional arguments:

   ::

       one or more image file names.

   This ``pygame.masks`` demo will display multiple moving sprites bouncing off
   each other. More than one sprite image can be provided.

   If run as a program then ``mask.py`` takes one or more image files as
   command line arguments.

   .. ## pygame.examples.mask.main ##

.. function:: testsprite.main

   | :sl:`show lots of sprites moving around`
   | :sg:`testsprite.main(update_rects = True, use_static = False, use_FastRenderGroup = False, screen_dims = [640, 480], use_alpha = False, flags = 0) -> None`

   Optional keyword arguments:

   ::

       update_rects - use the RenderUpdate sprite group class
       use_static - include non-moving images
       use_FastRenderGroup - Use the FastRenderGroup sprite group
       screen_dims - pygame window dimensions
       use_alpha - use alpha blending
       flags - additional display mode flags

   Like the ``testsprite.c`` that comes with SDL, this pygame version shows
   lots of sprites moving around.

   If run as a stand-alone program then no command line arguments are taken.

   .. ## pygame.examples.testsprite.main ##

.. function:: headless_no_windows_needed.main

   | :sl:`write an image file that is smoothscaled copy of an input file`
   | :sg:`headless_no_windows_needed.main(fin, fout, w, h) -> None`

   arguments:

   ::

       fin - name of an input image file
       fout - name of the output file to create/overwrite
       w, h - size of the rescaled image, as integer width and height

   How to use pygame with no windowing system, like on headless servers.

   Thumbnail generation with scaling is an example of what you can do with
   pygame.

   ``NOTE``: the pygame scale function uses MMX/SSE if available, and can be
   run in multiple threads.

   If ``headless_no_windows_needed.py`` is run as a program it takes the
   following command line arguments:

   ::

       -scale inputimage outputimage new_width new_height
       eg. -scale in.png outpng 50 50

   .. ## pygame.examples.headless_no_windows_needed.main ##

.. function:: joystick.main

   | :sl:`demonstrate joystick functionality`
   | :sg:`joystick.main() -> None`

   A demo showing full joystick support.

   .. versionadded:: 2.0.2

   .. ## pygame.examples.joystick.main ##

.. function:: blend_fill.main

   | :sl:`demonstrate the various surface.fill method blend options`
   | :sg:`blend_fill.main() -> None`

   A interactive demo that lets one choose which BLEND_xxx option to apply to a
   surface.

   .. ## pygame.examples.blend_fill.main ##

.. function:: blit_blends.main

   | :sl:`uses alternative additive fill to that of surface.fill`
   | :sg:`blit_blends.main() -> None`

   Fake additive blending. Using NumPy. it doesn't clamp. Press r,g,b Somewhat
   like blend_fill.

   .. ## pygame.examples.blit_blends.main ##

.. function:: cursors.main

   | :sl:`display two different custom cursors`
   | :sg:`cursors.main() -> None`

   Display an arrow or circle with crossbar cursor.

   .. ## pygame.examples.cursors.main ##

.. function:: pixelarray.main

   | :sl:`display various pixelarray generated effects`
   | :sg:`pixelarray.main() -> None`

   Display various pixelarray generated effects.

   .. ## pygame.examples.pixelarray.main ##

.. function:: scaletest.main

   | :sl:`interactively scale an image using smoothscale`
   | :sg:`scaletest.main(imagefile, convert_alpha=False, run_speed_test=True) -> None`

   arguments:

   ::

       imagefile - file name of source image (required)
       convert_alpha - use convert_alpha() on the surf (default False)
       run_speed_test - (default False)

   A smoothscale example that resized an image on the screen. Vertical and
   horizontal arrow keys are used to change the width and height of the
   displayed image. If the convert_alpha option is True then the source image
   is forced to have source alpha, whether or not the original images does. If
   run_speed_test is True then a background timing test is performed instead of
   the interactive scaler.

   If ``scaletest.py`` is run as a program then the command line options are:

   ::

       ImageFile [-t] [-convert_alpha]
       [-t] = Run Speed Test
       [-convert_alpha] = Use convert_alpha() on the surf.

   .. ## pygame.examples.scaletest.main ##

.. function:: midi.main

   | :sl:`run a midi example`
   | :sg:`midi.main(mode='output', device_id=None) -> None`

   Arguments:

   ::

       mode - if 'output' run a midi keyboard output example
                 'input' run a midi event logger input example
                 'list' list available midi devices
              (default 'output')
       device_id - midi device number; if None then use the default midi input or
                   output device for the system

   The output example shows how to translate mouse clicks or computer keyboard
   events into midi notes. It implements a rudimentary button widget and state
   machine.

   The input example shows how to translate midi input to pygame events.

   With the use of a virtual midi patch cord the output and input examples can
   be run as separate processes and connected so the keyboard output is
   displayed on a console.

   new to pygame 1.9.0

   .. ## pygame.examples.midi.main ##

.. function:: scroll.main

   | :sl:`run a Surface.scroll example that shows a magnified image`
   | :sg:`scroll.main(image_file=None) -> None`

   This example shows a scrollable image that has a zoom factor of eight. It
   uses the :meth:`Surface.scroll() <pygame.Surface.scroll>`
   function to shift the image on the display surface.
   A clip rectangle protects a margin area. If called as a function,
   the example accepts an optional image file path. If run as a program it
   takes an optional file path command line argument. If no file is provided a
   default image file is used.

   When running click on a black triangle to move one pixel in the direction
   the triangle points. Or use the arrow keys. Close the window or press
   ``ESC`` to quit.

   .. ## pygame.examples.scroll.main ##

.. function:: camera.main

   | :sl:`display video captured live from an attached camera`
   | :sg:`camera.main() -> None`

   A simple live video player, it uses the first available camera it finds on
   the system.

   .. ## pygame.examples.camera.main ##

.. function:: playmus.main

   | :sl:`play an audio file`
   | :sg:`playmus.main(file_path) -> None`

   A simple music player with window and keyboard playback control. Playback can
   be paused and rewound to the beginning.

   .. ## pygame.examples.playmus.main ##

.. ## pygame.examples ##


